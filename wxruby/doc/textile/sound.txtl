h1(#wxsound). Wx::Sound

This class represents a short sound (loaded from Windows WAV file), that
can be stored in memory and played. Currently this class is implemented
on Windows and Unix (using either "Open Sound
System":http://www.opensound.com/oss.html or "Simple DirectMedia
Layer":http://www.libsdl.org/).

h2. Derived from

"Object":object.html

<div id="methods">

h2. Methods

* "Sound.new":#Sound_new
* "Sound.is_playing":#Sound_isplaying
* "Sound.play":#Sound_playsound
* "Sound.stop":#Sound_stop
* "Sound#is_ok":#Sound_isok
* "Sound#play":#Sound_play

</div>

h3(#Sound_new). Sound.new

  *Sound.new*(%(arg-type)String% fileName,  %(arg-type)Boolean% isResource = false)

Constructs a sound object from a WAV file or, under Windows only, from a
Windows resource. Will raise an exception if the file is not found, or
if there is an error loading the file.

h4. Parameters

* _fileName_ The filename or Windows resource.

h3(#Sound_isok). Sound.is_playing

  boolean *Sound.is_playing*()

Returns true if a sound is being played at the moment.

This method is currently not implemented under Windows.

h3(#Sound_playsound). Sound.play

  boolean *Sound.play*(%(arg-type)String% fileName, %(arg-type)Integer% flags = Wx::SOUND_ASYNC)

Shorthand class method for playing a sound file. See
"Sound#play":#Sound_play for more information on the arguments to this method

h3(#Sound_stpo). Sound.stop

  *Sound.stop*()

If any sound is being played, this method stops it.

h3(#Sound_isok). Sound#is_ok

  boolean *is_ok*()

Returns true if the object contains a successfully loaded file or
resource, false otherwise.

h3(#Sound_play). Sound#play

  boolean *play*(%(arg-type)Integer% flags = Wx::SOUND_ASYNC)

Plays the sound file. If another sound is playing, it will be
interrupted. Returns true on success, false otherwise. 

The possible values for flags are:

* @Wx::SOUND_SYNC@ : Play will block and wait until the sound is replayed.
* @Wx::SOUND_ASYNC@ : Sound is played asynchronously, Play returns immediately
* @wxSOUND_ASYNC|wxSOUND_LOOP@ :	Sound is played asynchronously and loops until another sound is played, wxSound::Stop is called or the program terminates. 
