h1(#wxmetafile). Wx::Metafile

A *Metafile* represents the MS Windows metafile object, so metafile
operations have no effect in X. In Widgets, only sufficient functionality
has been provided for copying a graphic to the clipboard; this may be extended
in a future version. Presently, the only way of creating a metafile
is to use a MetafileDC.

h2. Derived from

"Object":object.html

h2. See also

"MetafileDC":metafiledc.html

<div id="methods">

h2. Methods

* "Metafile.new":#Metafile_new
* "Metafile#ok":#Metafile_ok
* "Metafile#play":#Metafile_play
* "Metafile#set_clipboard":#Metafile_setclipboard

</div>


h3(#Metafile_new). Metafile.new

  *Metafile.new*(%(arg-type)String% filename = "")

Constructor. If a filename is given, the Windows disk metafile is
read in. Check whether this was performed successfully by
using the "Metafile#ok":metafile.html#Metafile_ok member.

  *destructor*()

Destructor.

h3(#Metafile_ok). Metafile#ok

 Boolean *ok*()

Returns true if the metafile is valid.

h3(#Metafile_play). Metafile#play

 Boolean *play*(%(arg-type)"DC":dc.html% dc)

Plays the metafile into the given device context, returning
true if successful.

h3(#Metafile_setclipboard). Metafile#set_clipboard

 Boolean *set_clipboard*(%(arg-type)Integer% width = 0,  %(arg-type)Integer% height = 0)

Passes the metafile data to the clipboard. The metafile can no longer be
used for anything, but the Metafile object must still be destroyed by
the application.

Below is a example of metafile, metafile device context and clipboard use
from the @hello.cpp@ example. Note the way the metafile dimensions
are passed to the clipboard, making use of the device context's ability
to keep track of the maximum extent of drawing commands.


   MetafileDC dc;
   if (dc.Ok())
   {
     Draw(dc, false);
     Metafile *mf = dc.Close();
     if (mf)
     {
       bool success = mf->SetClipboard((int)(dc.MaxX() + 10), (int)(dc.MaxY() + 10));
       delete mf;
     }
   }
 

