h1(#wxgridtablebase). Wx::GridTableBase

GridTableBase is an advanced way of supplying data to the cells in a
"Grid":grid.html. It is particularly useful for working with very large
grids, and for closely connecting the Grid display with an underlying
data source such as a SQL database. It can make for more efficient and
cleaner code. 

In a standard Grid, the size of the grid is specified using
"Grid#create_table":grid.html#Grid_createtable, and then the contents of
each cell specified using
"Grid#set_value":grid.html#Grid_setvalue. Whilst this is this is
straightforward for smaller grids, with very large grids it may become
inefficient and slow to set all the values when only a small proportion
are actually shown to the user at any one time. If the data source is,
for example, a SQL database, the GUI event handling code in the grid,
and the code to fetch and set rows in the database can become mixed up
in the Grid class.

"GridTableBase":gridtablebase.html is a class which can supply, on
demand, cell values and visual appearance attributes as particular cells
are displayed in a Grid. 

To use this class, you must derive your own Ruby class from it, and
implement at set of methods to return the grid's size, cell values, and
visual attributes. Then, instead of calling "Grid#create_table" on the
grid to set its size, call "Grid#set_table" and pass in an instance of
your GridTableBase subclass.

h3. Presenting data

The number of methods that have to be defined in a subclass of
GridTableBase will depend on the interactions that are permitted by the
"Grid":grid.html class it will be associated with. The minimal set of
methods that must be implemented in a read-only grid is:

* "get_number_cols":#GridTableBase_getnumbercols
* "get_number_rows":#GridTableBase_getnumberrows
* "get_value":#GridTableBase_getvalue
* "is_empty_cell":#GridTableBase_isemptycell
* "get_attr":#GridTableBase_getattr

In addition, you may wish to override:

* "get_row_label_value":#GridTableBase_getrowlabelvalue
* "get_col_label_value":#GridTableBase_getcollabelvalue

h3. Data types, cell renderers and cell editors

In order to use custom "GridCellRenderers":gridcellrenderer.html or
"GridCellEditors":gridcelleditor.html for particular cells, you will
need first to define the grid's data types using
"Grid#register_data_type":grid.html#Grid_registerdatatype. This will
link appropriate cell renderers and editors to particular named data
types. Then, your GridTableBase class should override the following
method to return the type name for each cell in the table:

* "get_type_name":#GridTableBase_gettypename

Note that you must *not* try to provide custom editors or renderers to
specific cells by associating them with the GridCellAttr returned by the
"get_attr":#GridTableBase_getattr method of your Table class.

h3. Handling cell edits

In order for a user to be able to edit values within the grid, you must
also override:

* "set_value":#GridTableBase_setvalue

This will be called when the user finishes editing a cell's value; it is
up to your class to decide how to respond (for example, storing the
value back in a database). Further methods will need to be provided if
the user is permitted to add or delete columns and rows.

h2. Derived from

"Object":object.html

<div id="methods">

h2. Methods

* "GridTableBase.new":#GridTableBase_new
* "GridTableBase#get_number_rows":#GridTableBase_getnumberrows
* "GridTableBase#get_number_cols":#GridTableBase_getnumbercols
* "GridTableBase#is_empty_cell":#GridTableBase_isemptycell
* "GridTableBase#get_value":#GridTableBase_getvalue
* "GridTableBase#set_value":#GridTableBase_setvalue
* "GridTableBase#get_type_name":#GridTableBase_gettypename
* "GridTableBase#can_get_value_as":#GridTableBase_cangetvalueas
* "GridTableBase#can_set_value_as":#GridTableBase_cansetvalueas
* "GridTableBase#get_value_as_long":#GridTableBase_getvalueaslong
* "GridTableBase#get_value_as_double":#GridTableBase_getvalueasdouble
* "GridTableBase#get_value_as_bool":#GridTableBase_getvalueasbool
* "GridTableBase#set_value_as_long":#GridTableBase_setvalueaslong
* "GridTableBase#set_value_as_double":#GridTableBase_setvalueasdouble
* "GridTableBase#set_value_as_bool":#GridTableBase_setvalueasbool
* "GridTableBase#get_value_as_custom":#GridTableBase_getvalueascustom
* "GridTableBase#set_value_as_custom":#GridTableBase_setvalueascustom
* "GridTableBase#set_view":#GridTableBase_setview
* "GridTableBase#get_view":#GridTableBase_getview
* "GridTableBase#clear":#GridTableBase_clear
* "GridTableBase#insert_rows":#GridTableBase_insertrows
* "GridTableBase#append_rows":#GridTableBase_appendrows
* "GridTableBase#delete_rows":#GridTableBase_deleterows
* "GridTableBase#insert_cols":#GridTableBase_insertcols
* "GridTableBase#append_cols":#GridTableBase_appendcols
* "GridTableBase#delete_cols":#GridTableBase_deletecols
* "GridTableBase#get_row_label_value":#GridTableBase_getrowlabelvalue
* "GridTableBase#get_col_label_value":#GridTableBase_getcollabelvalue
* "GridTableBase#set_row_label_value":#GridTableBase_setrowlabelvalue
* "GridTableBase#set_col_label_value":#GridTableBase_setcollabelvalue
* "GridTableBase#update_attr_rows":#GridTableBase_updateattrrows
* "GridTableBase#update_attr_cols":#GridTableBase_updateattrcols
* "GridTableBase#get_attr":#GridTableBase_getattr
* "GridTableBase#set_attr":#GridTableBase_setattr
* "GridTableBase#set_row_attr":#GridTableBase_setrowattr
* "GridTableBase#set_col_attr":#GridTableBase_setcolattr

</div>


h3(#GridTableBase_wxgridtablebase). GridTableBase.new

Creates a new GridTable. If you define your own @initialize@ function in
your subclass of GridTableBase, you must ensure you call @super@ within
that constructor.

h3(#GridTableBase_getnumberrows). GridTableBase#get_number_rows

 Integer *get_number_rows*()

Should return the total number of rows in the grid. You must override these
functions in a derived table class.

h3(#GridTableBase_getnumbercols). GridTableBase#get_number_cols

 Integer *get_number_cols*()

Should return the total number of columns in the grid. You must override
this functions in a derived table class.

h3(#GridTableBase_isemptycell). GridTableBase#is_empty_cell

 Boolean *is_empty_cell*(%(arg-type)Integer% row,  %(arg-type)Integer% col)

Should return true if a cell is empty. You must override this function
in a derived table class.

h3(#GridTableBase_getvalue). GridTableBase#get_value

 String *get_value*(%(arg-type)Integer% row,  %(arg-type)Integer% col)

Should return the content of the specified cell *as a Ruby string*. You
must override this function in a derived table class.

h3(#GridTableBase_setvalue). GridTableBase#set_value

  *set_value*(%(arg-type)Integer% row,  %(arg-type)Integer% col,  %(arg-type)String% value)

Called when the value of a cell is updated by the user.


h3(#GridTableBase_gettypename). GridTableBase#get_type_name

 String *get_type_name*(%(arg-type)Integer% row,  %(arg-type)Integer% col)

This method should return the name of the data type in the given
cell. This is useful to enable different custom cell renderers and
editors to be used for different cells in the grid.The name should match
one that has previously been set in the grid using
"Grid#register_data_type":grid.html#Grid_registerdatatype.

h3(#GridTableBase_cangetvalueas). GridTableBase#can_get_value_as

 Boolean *can_get_value_as*(%(arg-type)Integer% row,  %(arg-type)Integer% col, 
                          %(arg-type)String% typeName)


h3(#GridTableBase_cansetvalueas). GridTableBase#can_set_value_as

 Boolean *can_set_value_as*(%(arg-type)Integer% row,  %(arg-type)Integer% col, 
                          %(arg-type)String% typeName)


h3(#GridTableBase_getvalueaslong). GridTableBase#get_value_as_long

 Integer *get_value_as_long*(%(arg-type)Integer% row,  %(arg-type)Integer% col)


h3(#GridTableBase_getvalueasdouble). GridTableBase#get_value_as_double

 double *get_value_as_double*(%(arg-type)Integer% row,  %(arg-type)Integer% col)


h3(#GridTableBase_getvalueasbool). GridTableBase#get_value_as_bool

 Boolean *get_value_as_bool*(%(arg-type)Integer% row,  %(arg-type)Integer% col)


h3(#GridTableBase_setvalueaslong). GridTableBase#set_value_as_long

  *set_value_as_long*(%(arg-type)Integer% row,  %(arg-type)Integer% col,  %(arg-type)Integer% value)


h3(#GridTableBase_setvalueasdouble). GridTableBase#set_value_as_double

  *set_value_as_double*(%(arg-type)Integer% row,  %(arg-type)Integer% col,  %(arg-type)Float% value)


h3(#GridTableBase_setvalueasbool). GridTableBase#set_value_as_bool

  *set_value_as_bool*(%(arg-type)Integer% row,  %(arg-type)Integer% col,  %(arg-type)Boolean% value)


h3(#GridTableBase_getvalueascustom). GridTableBase#get_value_as_custom

  *get_value_as_custom*(%(arg-type)Integer% row,  %(arg-type)Integer% col, 
                      %(arg-type)String% typeName)

For user defined types


h3(#GridTableBase_setvalueascustom). GridTableBase#set_value_as_custom

  *set_value_as_custom*(%(arg-type)Integer% row,  %(arg-type)Integer% col, 
                      %(arg-type)String% typeName,  %(arg-type)% value)


h3(#GridTableBase_setview). GridTableBase#set_view

  *set_view*(%(arg-type)"Grid":grid.html% grid)

Overriding these is optional


h3(#GridTableBase_getview). GridTableBase#get_view

 "Grid":grid.html *get_view*()


h3(#GridTableBase_clear). GridTableBase#clear

  *clear*()


h3(#GridTableBase_insertrows). GridTableBase#insert_rows

 Boolean *insert_rows*(%(arg-type)Integer% pos = 0,  %(arg-type)Integer% numRows = 1)


h3(#GridTableBase_appendrows). GridTableBase#append_rows

 Boolean *append_rows*(%(arg-type)Integer% numRows = 1)


h3(#GridTableBase_deleterows). GridTableBase#delete_rows

 Boolean *delete_rows*(%(arg-type)Integer% pos = 0,  %(arg-type)Integer% numRows = 1)


h3(#GridTableBase_insertcols). GridTableBase#insert_cols

 Boolean *insert_cols*(%(arg-type)Integer% pos = 0,  %(arg-type)Integer% numCols = 1)


h3(#GridTableBase_appendcols). GridTableBase#append_cols

 Boolean *append_cols*(%(arg-type)Integer% numCols = 1)


h3(#GridTableBase_deletecols). GridTableBase#delete_cols

 Boolean *delete_cols*(%(arg-type)Integer% pos = 0,  %(arg-type)Integer% numCols = 1)


h3(#GridTableBase_getrowlabelvalue). GridTableBase#get_row_label_value

 String *get_row_label_value*(%(arg-type)Integer% row)


h3(#GridTableBase_getcollabelvalue). GridTableBase#get_col_label_value

 String *get_col_label_value*(%(arg-type)Integer% col)


h3(#GridTableBase_setrowlabelvalue). GridTableBase#set_row_label_value

  *set_row_label_value*(%(arg-type)Integer% (row),  %(arg-type)String% label)


h3(#GridTableBase_setcollabelvalue). GridTableBase#set_col_label_value

  *set_col_label_value*(%(arg-type)Integer% col, %(arg-type)String% label)

Handle setting the column label.

h3(#GridTableBase_updateattrrows). GridTableBase#update_attr_rows

  *update_attr_rows*(%(arg-type)Integer% pos,  %(arg-type)Integer% numRows)

Change row/col number in attribute if needed


h3(#GridTableBase_updateattrcols). GridTableBase#update_attr_cols

  *update_attr_cols*(%(arg-type)Integer% pos,  %(arg-type)Integer% numCols)


h3(#GridTableBase_getattr). GridTableBase#get_attr

 "GridCellAttr":gridcellattr.html *get_attr*(%(arg-type)Integer% row,  
                                             %(arg-type)Integer% col,
                                             %(arg-type)Integer% attr_kind)

Should return a "grid cell attribute":gridcellattr.html that should be
applied to the cell specified by _row_ and _column_. This can set the
cell's text and background colour. However, it should not associate an
editor or renderer with a cell; instead use
"get_type_name":#GridTableBase_gettypename to link data types to
specific presentations.

Note that this method must return a *new* GridCellAttr for each call; do
*not* attempt to share the same GridCellAttr between cells. If you wish
to use the same style across a whole grid, create the attribute as a
class variable or constant, then call its
"clone":gridcellattr.html#GridCellAttr_clone method to return a copy for
each call to get_attr.



h3(#GridTableBase_setattr). GridTableBase#set_attr

  *set_attr*(%(arg-type)"GridCellAttr":gridcellattr.html% attr,  
             %(arg-type)Integer% row,  
             %(arg-type)Integer% col)

Set the attribute for a cell.

h3(#GridTableBase_setrowattr). GridTableBase#set_row_attr

  *set_row_attr*(%(arg-type)"GridCellAttr":gridcellattr.html% attr,  %(arg-type)Integer% row)


h3(#GridTableBase_setcolattr). GridTableBase#set_col_attr

  *set_col_attr*(%(arg-type)"GridCellAttr":gridcellattr.html% attr,  %(arg-type)Integer% col)

