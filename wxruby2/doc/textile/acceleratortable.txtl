h1(#wxacceleratortable). Wx::AcceleratorTable

An accelerator table allows the application to specify a table of keyboard shortcuts for
menus or other commands. On Windows, menu or button commands are supported; on GTK,
only menu commands are supported.

The object *NullAcceleratorTable* is defined to be a table with no data, and is the
initial accelerator table for a window.

h2. Derived from

"Object":object.html

h2. Example


   AcceleratorEntry entries[4];
   entries[0].Set(ACCEL_CTRL,  (int) 'N',     ID_NEW_WINDOW);
   entries[1].Set(ACCEL_CTRL,  (int) 'X',     ID_EXIT);
   entries[2].Set(ACCEL_SHIFT, (int) 'A',     ID_ABOUT);
   entries[3].Set(ACCEL_NORMAL,  WXK_DELETE,    ID_CUT);
   AcceleratorTable accel(4, entries);
   frame->SetAcceleratorTable(accel);
 

h2. Remarks

An accelerator takes precedence over normal processing and can be a convenient way to program some event handling.
For example, you can use an accelerator table to enable a dialog with a multi-line text control to
accept CTRL-Enter as meaning `OK' (but not in GTK+ at present).

h2. See also

"AcceleratorEntry":acceleratorentry.html, "Window#set_accelerator_table":window.html#Window_setacceleratortable

<div id="methods">

h2. Methods

* "AcceleratorTable.new":#AcceleratorTable_new
* "AcceleratorTable#ok":#AcceleratorTable_ok

</div>


h3(#AcceleratorTable_new). AcceleratorTable.new

  *AcceleratorTable.new*(%(arg-type)AcceleratorTable% bitmap)

Copy constructor.

  *AcceleratorTable.new*(%(arg-type)Integer% n,  %(arg-type)AcceleratorEntry% entries[])

Creates from an array of "AcceleratorEntry":acceleratorentry.html objects.

  *AcceleratorTable.new*(%(arg-type)String% resource)

Loads the accelerator table from a Windows resource (Windows only).

h4. Parameters

* _n_ Number of accelerator entries.
* _entries_ The array of entries.
* _resource_ Name of a Windows accelerator.





  *destructor*()

Destroys the AcceleratorTable object.

h3(#AcceleratorTable_ok). AcceleratorTable#ok

 Boolean *ok*()

Returns true if the accelerator table is valid.

h3(#AcceleratorTable_assign). AcceleratorTable#=

 "AcceleratorTable& ":acceleratortable& .html *operator $=$*(%(arg-type)AcceleratorTable% accel)

Assignment operator. This operator does not copy any data, but instead
passes a pointer to the data in _accel_ and increments a reference
counter. It is a fast operation.

h4. Parameters

* _accel_ Accelerator table to assign.

h4. Return value

Returns reference to this object.

h3(#AcceleratorTable_equal). AcceleratorTable#==

 Boolean *operator $==$*(%(arg-type)AcceleratorTable% accel)

Equality operator. This operator tests whether the internal data pointers are
equal (a fast test).

h4. Parameters

* _accel_ Accelerator table to compare with

h4. Return value

Returns true if the accelerator tables were effectively equal, false otherwise.

h3(#AcceleratorTable_notequal). AcceleratorTable#!=

 Boolean *operator $!=$*(%(arg-type)AcceleratorTable% accel)

Inequality operator. This operator tests whether the internal data pointers are
unequal (a fast test).

h4. Parameters

* _accel_ Accelerator table to compare with

h4. Return value

Returns true if the accelerator tables were unequal, false otherwise.


