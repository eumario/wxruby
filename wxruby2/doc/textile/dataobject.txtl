h1(#wxdataobject). Wx::DataObject

A DataObject represents data that can be copied to or from the clipboard, or
dragged and dropped. The important thing about DataObject is that this is a
'smart' piece of data unlike 'dumb' data containers such as memory
buffers or files. Being 'smart' here means that the data object itself should
know what data formats it supports and how to render itself in each of
its supported formats.

A supported format, incidentally, is exactly the format in which the data can
be requested from a data object or from which the data object may be set. In
the general case, an object may support different formats on 'input' and
'output', i.e. it may be able to render itself in a given format but not be
created from data on this format or vice versa. DataObject defines an
enumeration type


 enum Direction
 {
     Get  = 0x01,    // format is supported by GetDataHere()
     Set  = 0x02     // format is supported by SetData()
 };
 

which distinguishes between them. See 
"DataFormat":dataformat.html documentation for more about formats.

Not surprisingly, being 'smart' comes at a price of added complexity. This is
reasonable for the situations when you really need to support multiple formats,
but may be annoying if you only want to do something simple like cut and paste
text.

To provide a solution for both cases, Widgets has two predefined classes
which derive from DataObject: "DataObjectSimple":dataobjectsimple.html and 
"DataObjectComposite":dataobjectcomposite.html. 
"DataObjectSimple":dataobjectsimple.html is
the simplest DataObject possible and only holds data in a single format (such
as HTML or text) and "DataObjectComposite":dataobjectcomposite.html is
the simplest way to implement a DataObject that does support multiple formats
because it achieves this by simply holding several DataObjectSimple objects.

So, you have several solutions when you need a DataObject class (and you need
one as soon as you want to transfer data via the clipboard or drag and drop):


|*1. Use one of the built-in classes*|You may use TextDataObject,BitmapDataObject or FileDataObject in the simplest cases when you only needto support one format and your data is either text, bitmap or list of files.|
|*2. Use DataObjectSimple*|Deriving from DataObjectSimple is the simplestsolution for custom data - you will only support one format and so probablywon't be able to communicate with other programs, but data transfer will workin your program (or between different copies of it).|
|*3. Use DataObjectComposite*|This is a simple but powerfulsolution which allows you to support any number of formats (eitherstandard or custom if you combine it with the previous solution).|
|*4. Use DataObject directly*|This is the solution formaximal flexibility and efficiency, but it is also the most difficult toimplement.|


Please note that the easiest way to use drag and drop and the clipboard with
multiple formats is by using DataObjectComposite, but it is not the most
efficient one as each DataObjectSimple would contain the whole data in its
respective formats. Now imagine that you want to paste 200 pages of text in
your proprietary format, as well as Word, RTF, HTML, Unicode and plain text to
the clipboard and even today's computers are in trouble. For this case, you
will have to derive from DataObject directly and make it enumerate its
formats and provide the data in the requested format on demand.

Note that neither the GTK+ data transfer mechanisms for clipboard and
drag and drop, nor OLE data transfer, copy any data until another application
actually requests the data. This is in contrast to the 'feel' offered to the
user of a program who would normally think that the data resides in the
clipboard after having pressed 'Copy' - in reality it is only declared to be
available.

There are several predefined data object classes derived from
DataObjectSimple: "FileDataObject":filedataobject.html, 
"TextDataObject":textdataobject.html and 
"BitmapDataObject":bitmapdataobject.html which can be used without
change.

You may also derive your own data object classes from 
"CustomDataObject":customdataobject.html for user-defined types. The
format of user-defined data is given as a mime-type string literal, such as
"application/word" or "image/png". These strings are used as they are under
Unix (so far only GTK+) to identify a format and are translated into their
Windows equivalent under Win32 (using the OLE IDataObject for data exchange to
and from the clipboard and for drag and drop). Note that the format string
translation under Windows is not yet finished.





h2. Virtual functions to override

Each class derived directly from DataObject must override and implement all
of its functions which are pure virtual in the base class.

The data objects which only render their data or only set it (i.e. work in
only one direction), should return 0 from 
"get_format_count":#DataObject_getformatcount.

h2. Derived from

None

h2. See also

"Clipboard and drag and drop overview":dndoverview.html, 
"DnD sample":samplednd.html, 
"FileDataObject":filedataobject.html, 
"TextDataObject":textdataobject.html, 
"BitmapDataObject":bitmapdataobject.html, 
"CustomDataObject":customdataobject.html, 
"DropTarget":droptarget.html, 
"DropSource":dropsource.html, 
"TextDropTarget":textdroptarget.html, 
"FileDropTarget":filedroptarget.html

<div id="methods">

h2. Methods

* "DataObject.new":#DataObject_new
* "DataObject#get_all_formats":#DataObject_getallformats
* "DataObject#get_data_here":#DataObject_getdatahere
* "DataObject#get_data_size":#DataObject_getdatasize
* "DataObject#get_format_count":#DataObject_getformatcount
* "DataObject#get_preferred_format":#DataObject_getpreferredformat
* "DataObject#set_data":#DataObject_setdata

</div>


h3(#DataObject_wxdataobject). DataObject.new

  *destructor*()

Destructor.

h3(#DataObject_getallformats). DataObject#get_all_formats

  *get_all_formats*( %(arg-type)DataFormat% formats,  %(arg-type)Direction% dir = Get)

Copy all supported formats in the given direction to the array pointed to by 
_formats_. There is enough space for GetFormatCount(dir) formats in it.



h3(#DataObject_getdatahere). DataObject#get_data_here

 Boolean *get_data_here*(%(arg-type)DataFormat% format,  %(arg-type)% buf )

The method will write the data of the format _format_ in the buffer 
buf and return true on success, false on failure.

h3(#DataObject_getdatasize). DataObject#get_data_size

 Integer *get_data_size*(%(arg-type)DataFormat% format )

Returns the data size of the given format _format_.

h3(#DataObject_getformatcount). DataObject#get_format_count

 Integer *get_format_count*(%(arg-type)Direction% dir = Get)

Returns the number of available formats for rendering or setting the data.

h3(#DataObject_getpreferredformat). DataObject#get_preferred_format

 "DataFormat":dataformat.html *get_preferred_format*(%(arg-type)Direction% dir = Get)

Returns the preferred format for either rendering the data (if _dir_ is @Get@,
its default value) or for setting it. Usually this will be the
native format of the DataObject.

h3(#DataObject_setdata). DataObject#set_data

 Boolean *set_data*( %(arg-type)DataFormat% format,  %(arg-type)Integer% len,  %(arg-type)% buf )

Set the data in the format _format_ of the length _len_ provided in the
buffer _buf_.

Returns true on success, false on failure.

