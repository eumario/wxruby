h1. WxRuby: Class Reference

This is the class reference for WxRuby. The classes listed below are
those currently available in WxRuby2. This documentation is currently
auto-generated from the WxWidgets C++ documentation, so it has some
shortcomings. 

* A few methods have innaccurate descriptions of the parameters they
accept
* The example code is all in C++
* There are links to C++ tutorials and topic overviews that are not
currently available in this documentation

As the WxRuby API is developed, this documentation will be updated with
Ruby-specific information.

h2. Managed windows

There are several types of window that are directly controlled by the window manager (such as MS Windows, or the Motif Window Manager). Frames and dialogs are similar in wxWidgets, but only dialogs may be modal.

|TopLevelWindow|Any top level window, dialog or frame|
|Dialog|Dialog box|
|Frame|Normal frame|
|MDIChildFrame|MDI child frame|
|MDIParentFrame|MDI parent frame|
|MiniFrame|A frame with a small title bar|
|SplashScreen|Splash screen class|
|PropertySheetDialog|Property sheet dialog|
|TipWindow|Shows text in a small window|
|Wizard|A wizard dialog|

h2. Miscellaneous windows

The following are a variety of classes that are derived from wxWindow.

|Panel|A window whose colour changes according to current user settings|
|ScrolledWindow|Window with automatically managed scrollbars|
|Grid|A grid (table) window|
|SplitterWindow|Window which can be split vertically or horizontally|
|StatusBar|Implements the status bar on a frame|
|ToolBar|Toolbar class|
|Notebook|Notebook class|
|Listbook|Similar to notebook but using list control|
|Choicebook|Similar to notebook but using choice control|
|SashWindow|Window with four optional sashes that can be dragged|
|SashLayoutWindow|Window that can be involved in an IDE-like layout arrangement|
|VScrolledWindow|As wxScrolledWindow but supports lines of variable height|
|WizardPage|A base class for the page in wizard dialog.|
|WizardPageSimple|A page in wizard dialog.|

h2. Common dialogs

Common dialogs are ready-made dialog classes which are frequently used in an application.

|Dialog|Base class for common dialogs|
|ColourDialog|Colour chooser dialog|
|DirDialog|Directory selector dialog|
|FileDialog|File selector dialog|
|FindReplaceDialog|Text search/replace dialog|
|MultiChoiceDialog|Dialog to get one or more selections from a list|
|SingleChoiceDialog|Dialog to get a single selection from a list and return the string|
|TextEntryDialog|Dialog to get a single line of text from the user|
|PasswordEntryDialog|Dialog to get a password from the user|
|FontDialog|Font chooser dialog|
|PageSetupDialog|Standard page setup dialog|
|PrintDialog|Standard print dialog|
|ProgressDialog|Progress indication dialog|
|MessageDialog|Simple message box dialog|
|Wizard|A wizard dialog.|

h2. Controls 

Typically, these are small windows which provide interaction with the
user.

|Control|The base class for controls|
|Button|Push button control, displaying text|
|BitmapButton|Push button control, displaying a bitmap|
|ToggleButton|A button which stays pressed when clicked by user.|
|CalendarCtrl|Control showing an entire calendar month|
|CheckBox|Checkbox control|
|CheckListBox|A listbox with a checkbox to the left of each item|
|Choice|Choice control (a combobox without the editable area)|
|ComboBox|A choice with an editable area|
|DatePickerCtrl|Small date picker control|
|Gauge|A control to represent a varying quantity, such as time remaining|
|GenericDirCtrl|A control for displaying a directory tree|
|HtmlListBox|A listbox showing HTML content|
|StaticBox|A static, or group box for visually grouping related controls|
|ListBox|A list of strings for single or multiple selection|
|ListCtrl|A control for displaying lists of strings and/or icons, plus a multicolumn report view|
|ListView|A simpler interface (fa¹Âde for wxListCtrl in report mode|
|TextCtrl|Single or multiline text editing control|
|TreeCtrl|Tree (hierarchy) control|
|ScrollBar|Scrollbar control|
|SpinButton|A spin or 'up-down' control|
|SpinCtrl|A spin control - i.e. spin button and text control|
|StaticText|One or more lines of non-editable text|
|StaticBitmap|A control to display a bitmap|
|RadioBox|A group of radio buttons|
|RadioButton|A round button to be used with others in a mutually exclusive way|
|Slider|A slider that can be dragged by the user|
|VListBox|A listbox supporting variable height rows|

h2. Menus

|Menu|Displays a series of menu items for selection|
|MenuBar|Contains a series of menus for use with a frame|
|MenuItem|Represents a single menu item|

h2. Window layout

|Sizer|Abstract base class|
|GridSizer|A sizer for laying out windows in a grid with all fields having the same size|
|FlexGridSizer|A sizer for laying out windows in a flexible grid|
|GridBagSizer|Another grid sizer that lets you specify the cell an item is in, and items can span rows and/or columns.|
|BoxSizer|A sizer for laying out windows in a row or column|
|StaticBoxSizer|Same as wxBoxSizer, but with a surrounding static box|

h2. Device contexts

Device contexts are surfaces that may be drawn on, and provide an abstraction that allows parameterisation of your drawing code by passing different device contexts.

|BufferedDC|A helper device context for double buffered drawing.|
|BufferedPaintDC|A helper device context for double buffered drawing inside OnPaint.|
|ClientDC|A device context to access the client area outside OnPaint events|
|PaintDC|A device context to access the client area inside OnPaint events|
|WindowDC|A device context to access the non-client area|
|ScreenDC|A device context to access the entire screen|
|DC|The device context base class|
|MemoryDC|A device context for drawing into bitmaps|
|MetafileDC|A device context for drawing into metafiles|
|MirrorDC|A proxy device context allowing for simple mirroring.|
|PostScriptDC|A device context for drawing into PostScript files|
|PrinterDC|A device context for drawing to printers|

h2. Graphics device interface

These classes are related to drawing on device contexts and windows.

|Colour|Represents the red, blue and green elements of a colour|
|DCClipper|Wraps the operations of setting and destroying the clipping region|
|Bitmap|Represents a bitmap|
|Brush|Used for filling areas on a device context|
|BrushList|The list of previously-created brushes|
|Cursor|A small, transparent bitmap representing the cursor|
|Font|Represents fonts|
|FontList|The list of previously-created fonts|
|Icon|A small, transparent bitmap for assigning to frames and drawing on device contexts|
|Image|A platform-independent image class|
|ImageList|A list of images, used with some controls|
|Mask|Represents a mask to be used with a bitmap for transparent drawing|
|Pen|Used for drawing lines on a device context|
|PenList|The list of previously-created pens|
|Palette|Represents a table of indices into RGB values|
|Region|Represents a simple or complex region on a window or device context|
|RendererNative|Abstracts high-level drawing primitives|

h2. Events

An event object contains information about a specific event. Event handlers (usually member functions) have a single, event argument.

|ActivateEvent|A window or application activation event|
|CalendarEvent|Used with wxCalendarCtrl|
|CalculateLayoutEvent|Used to calculate window layout|
|CloseEvent|A close window or end session event|
|CommandEvent|An event from a variety of standard controls|
|ContextMenuEvent|An event generated when the user issues a context menu command|
|DateEvent|Used with wxDatePickerCtrl|
|DialUpEvent|Event send by wxDialUpManager|
|DropFilesEvent|A drop files event|
|EraseEvent|An erase background event|
|Event|The event base class|
|FindDialogEvent|Event sent by wxFindReplaceDialog|
|FocusEvent|A window focus event|
|KeyEvent|A keypress event|
|IconizeEvent|An iconize/restore event|
|IdleEvent|An idle event|
|InitDialogEvent|A dialog initialisation event|
|JoystickEvent|A joystick event|
|ListEvent|A list control event|
|MaximizeEvent|A maximize event|
|MenuEvent|A menu event|
|MouseCaptureChangedEvent|A mouse capture changed event|
|MouseEvent|A mouse event|
|MoveEvent|A move event|
|NotebookEvent|A notebook control event|
|NotifyEvent|A notification event, which can be vetoed|
|PaintEvent|A paint event|
|ProcessEvent|A process ending event|
|QueryLayoutInfoEvent|Used to query layout information|
|ScrollEvent|A scroll event from sliders, stand-alone scrollbars and spin buttons|
|ScrollWinEvent|A scroll event from scrolled windows|
|SizeEvent|A size event|
|SocketEvent|A socket event|
|SpinEvent|An event from wxSpinButton|
|SplitterEvent|An event from wxSplitterWindow|
|SysColourChangedEvent|A system colour change event|
|TimerEvent|A timer expiration event|
|TreeEvent|A tree control event|
|UpdateUIEvent|A user interface update event|
|WindowCreateEvent|A window creation event|
|WindowDestroyEvent|A window destruction event|
|WizardEvent|A wizard event|

h2. Validators

These are the window validators, used for filtering and validating user input.

|Validator|Base validator class|
|TextValidator|Text control validator class|
|GenericValidator|Generic control validator class|

h2. Data structures

The majority of these do not need to ported to wxruby, as the ruby
equivalent built-in class or standard library should be used. Only
classes that are important to the wxRuby API are listed here.

|Object|The root class for most wxWidgets classes|
|Point|Representation of a point|
|Rect|A class representing a rectangle|
|Region|A class representing a region|
|RealPoint|Representation of a point using floating point numbers|
|Size|Representation of a size|

h2. Document/view framework

The wxWidgets API supports a document/view framework which provides
housekeeping for a document-centric application - but this is not yet
ported to Ruby.

|Document|Represents a document|
|View|Represents a view|
|DocTemplate|Manages the relationship between a document class and a view class|
|DocManager|Manages the documents and views in an application|
|DocChildFrame|A child frame for showing a document view|
|DocParentFrame|A parent frame to contain views|

h2. Printing framework

A printing and previewing framework is implemented to make it relatively straightforward to provide document printing facilities.

|PreviewFrame|Frame for displaying a print preview|
|PreviewCanvas|Canvas for displaying a print preview|
|PreviewControlBar|Standard control bar for a print preview|
|PrintDialog|Standard print dialog|
|PageSetupDialog|Standard page setup dialog|
|Printer|Class representing the printer|
|PrinterDC|Printer device context|
|Printout|Class representing a particular printout|
|PrintPreview|Class representing a print preview|
|PrintData|Represents information about the document being printed|
|PrintDialogData|Represents information about the print dialog|
|PageSetupDialogData|Represents information about the page setup dialog|

h2. Drag and drop and clipboard classes

|DataObject|Data object class|
|DataFormat|Represents a data format|
|TextDataObject|Text data object class|
|FileDataObject|File data object class|
|BitmapDataObject|Bitmap data object class|
|CustomDataObject|Custom data object class|
|Clipboard|Clipboard class|
|DropTarget|Drop target class|
|FileDropTarget|File drop target class|
|TextDropTarget|Text drop target class|
|DropSource|Drop source class|

h2. File related classes

|StandardPaths|Paths for standard directories|

h2. HTML classes

These are a set of classes to display text in HTML format. These class include a help system based on the HTML widget.

|HtmlHelpController|HTML help controller class|
|HtmlWindow|HTML window class|
|HtmlEasyPrinting|Simple class for printing HTML|
|HtmlPrintout|Generic HTML wxPrintout class|
|HtmlParser|Generic HTML parser class|
|HtmlTagHandler|HTML tag handler, pluginable into wxHtmlParser|
|HtmlWinParser|HTML parser class for wxHtmlWindow|
|HtmlWinTagHandler|HTML tag handler, pluginable into wxHtmlWinParser|

h2. Virtual file system classes

These are a set of classes that implement an extensible virtual file system, used internally by the HTML classes.

|FSFile|Represents a file in the virtual file system|
|FileSystem|Main interface for the virtual file system|
|FileSystemHandler|Class used to announce file system type|

h2. XML-based resource system classes

Resources allow your application to create controls and other user interface elements from specifications stored in an XML format.

|XmlResource|The main class for working with resources.|
|XmlResourceHandler|The base class for XML resource handlers.|

h2. Online help

|HelpController|Family of classes for controlling help windows|
|HtmlHelpController|HTML help controller class|
|ContextHelp|Class to put application into context-sensitive help mode|
|ContextHelpButton|Button class for putting application into context-sensitive help mode|
|HelpProvider|Abstract class for context-sensitive help provision|
|SimpleHelpProvider|Class for simple context-sensitive help provision|
|HelpControllerHelpProvider|Class for context-sensitive help provision via a help controller|
|ToolTip|Class implementing tooltips|

h2. Miscellaneous

|App|Application class|
|Caret|A caret (cursor) object|
|CmdLineParser|Command line parser class|
|Config|Classes for configuration reading/writing (using either INI files or registry)|
|DllLoader|Class to work with shared libraries.|
|GLCanvas|Canvas that you can render OpenGL calls to.|
|GLContext|Class to ease sharing of OpenGL data resources.|
|LayoutAlgorithm|An alternative window layout facility|
|Process|Process class|
|Timer|Timer class|
|StopWatch|Stop watch class|
|MimeTypesManager|MIME-types manager class|
|SystemSettings|System settings class for obtaining various global parameters|
|SystemOptions|System options class for run-time configuration|
|AcceleratorTable|Accelerator table|
|AutomationObject|OLE automation class|
|FontMapper|Font mapping, finding suitable font for given encoding|
|EncodingConverter|Encoding conversions|
|CalendarDateAttr|Used with wxCalendarCtrl|
|Quantize|Class to perform quantization, or colour reduction|
|SingleInstanceChecker|Check that only single program instance is running|
