h1(#wxbusyinfo). Wx::BusyInfo

This class makes it easy to tell your user that the program is temporarily busy.
Just create a BusyInfo object on the stack, and within the current scope,
a message window will be shown.

For example:


     BusyInfo wait("Please wait, working...");
 
     for (int i = 0; i < 100000; i++)
     {
         DoACalculation();
     }
 

It works by creating a window in the constructor,
and deleting it in the destructor.

You may also want to call TheApp->Yield() to refresh the window
periodically (in case it had been obscured by other windows, for
example) like this:


     WindowDisabler disableAll;
 
     BusyInfo wait("Please wait, working...");
 
     for (int i = 0; i < 100000; i++)
     {
         DoACalculation();
 
         if ( !(i             TheApp->Yield();
     }
 

but take care to not cause undesirable reentrancies when doing it (see 
"App::Yield()":appyield.html for more details). The simplest way to do
it is to use "WindowDisabler":windowdisabler.html class as illustrated
in the above example.

h2. Derived from

None

<div id="methods">

h2. Methods

* "BusyInfo.new":#BusyInfo_new

</div>


h3(#BusyInfo_new). BusyInfo.new

  *BusyInfo.new*(%(arg-type)String% msg,  %(arg-type)Window% parent = nil)

Constructs a busy info window as child of _parent_ and displays _msg_
in it.

*NB:* If _parent_ is not @NULL@ you must ensure that it is not
closed while the busy info is shown.

  *destructor*()

Hides and closes the window containing the information text.

