h1(#wxhtmlhelpcontroller). Wx::HtmlHelpController

*WARNING!* Although this class has an API compatible with other Widgets
help controllers as documented by "HelpController":helpcontroller.html, it
is recommended that you use the enhanced capabilities of HtmlHelpController's API.

This help controller provides an easy way of displaying HTML help in your
application (see _test_ sample). The help system is based on *books* 
(see "add_book":#HtmlHelpController_addbook). A book is a logical
section of documentation (for example "User's Guide" or "Programmer's Guide" or
"C++ Reference" or "Widgets Reference"). The help controller can handle as
many books as you want.

HTML uses Microsoft's HTML Help Workshop project files (.hhp, .hhk, .hhc) as its
native format. The file format is described "here":helpformat.html.
Have a look at docs/html/ directory where sample project files are stored.

You can use Tex2RTF to produce these files when generating HTML, if you set *htmlWorkshopFiles* to *true* in
your tex2rtf.ini file.

h2. Note

It is strongly recommended to use preprocessed *.hhp.cached* version of
projects. It can be either created on-the-fly (see 
"set_temp_dir":#HtmlHelpController_settempdir) or you can use 
*hhp2cached* utility from _utils/hhp2cached_ to create it and
distribute the cached version together with helpfiles. See _samples/html/help_ 
sample for demonstration of its use.

h2. See also

"Information about BestHelpController":helpcontroller.html

h2. Derived from

HelpControllerBase

<div id="methods">

h2. Methods

* "HtmlHelpController.new":#HtmlHelpController_new
* "HtmlHelpController#add_book":#HtmlHelpController_addbook
* "HtmlHelpController#create_help_frame":#HtmlHelpController_createhelpframe
* "HtmlHelpController#display":#HtmlHelpController_display
* "HtmlHelpController#display_contents":#HtmlHelpController_displaycontents
* "HtmlHelpController#display_index":#HtmlHelpController_displayindex
* "HtmlHelpController#keyword_search":#HtmlHelpController_keywordsearch
* "HtmlHelpController#read_customization":#HtmlHelpController_readcustomization
* "HtmlHelpController#set_temp_dir":#HtmlHelpController_settempdir
* "HtmlHelpController#set_title_format":#HtmlHelpController_settitleformat
* "HtmlHelpController#use_config":#HtmlHelpController_useconfig
* "HtmlHelpController#write_customization":#HtmlHelpController_writecustomization

</div>


h3(#HtmlHelpController_wxhtmlhelpcontroller). HtmlHelpController.new

  *HtmlHelpController.new*(%(arg-type)Integer% style = HF_DEFAULT_STYLE)

Constructor.

h4. Parameters

_style_ is combination of these flags:


|@HF_TOOLBAR@|Help frame has toolbar.|
|@HF_FLAT_TOOLBAR@|Help frame has toolbar with flat buttons (aka coolbar).|
|@HF_CONTENTS@|Help frame has contents panel.|
|@HF_INDEX@|Help frame has index panel.|
|@HF_SEARCH@|Help frame has search panel.|
|@HF_BOOKMARKS@|Help frame has bookmarks controls.|
|@HF_OPEN_FILES@|Allow user to open arbitrary HTML document.|
|@HF_PRINT@|Toolbar contains "print" button.|
|@HF_MERGE_BOOKS@|Contents pane does not showbook nodes. All books are merged together and appear as single book to theuser.|
|@HF_ICONS_BOOK@|All nodes in contents panehave a book icon. This is how Microsoft's HTML help viewer behaves.|
|@HF_ICONS_FOLDER@|Book nodes in contents pane havea book icon, book's sections have a folder icon. This is the default.|
|@HF_ICONS_BOOK_CHAPTER@|Both book nodes andnodes of top-level sections of a book (i.e. chapters) have a book icon,all other sections (sections, subsections, ...) have a folder icon.|
|@HF_DEFAULT_STYLE@|@HF_TOOLBAR | HF_CONTENTS| HF_INDEX | HF_SEARCH | HF_BOOKMARKS | HF_PRINT@|


h3(#HtmlHelpController_addbook). HtmlHelpController#add_book

 Boolean *add_book*(%(arg-type)FileName% book_file,  %(arg-type)Boolean% show_wait_msg)

 Boolean *add_book*(%(arg-type)String% book_url,  %(arg-type)Boolean% show_wait_msg)

Adds book (".hhp file":helpformat.html - HTML Help Workshop project file) into the list of loaded books.
This must be called at least once before displaying  any help.

_book_file_ or _book_url_  may be either .hhp file or ZIP archive
that contains arbitrary number of .hhp files in 
top-level directory. This ZIP archive must have .zip or .htb extension
(the latter stands for "HTML book"). In other words,
@AddBook(FileName("help.zip"))@
is possible and, in fact, recommended way.

h4. Parameters

* _show_wait_msg_ If true then a decoration-less window with progress message is displayed.
* _book_file_ Help book filename. It is recommended to use this prototype
instead of the one taking URL, because it is less error-prone.
* _book_url_ Help book URL (note that syntax of filename and URL is 
different on most platforms)

h4. Note

Don't forget to install FileSystem ZIP handler with
@FileSystem::AddHandler(new ZipFSHandler);@ before calling this method
on a .zip or .htb file!

h3(#HtmlHelpController_createhelpframe). HtmlHelpController#create_help_frame

 "HtmlHelpFrame":htmlhelpframe.html *create_help_frame*(%(arg-type)HtmlHelpData% data)

This protected virtual method may be overridden so that the controller
uses slightly different frame. See _samples/html/helpview_ sample for
an example.

h3(#HtmlHelpController_display). HtmlHelpController#display

  *display*(%(arg-type)String% x)

Displays page _x_. This is THE important function - it is used to display
the help in application.

You can specify the page in many ways:


* as direct filename of HTML document
* as chapter name (from contents) or as a book name
* as some word from index
* even as any word (will be searched)


Looking for the page runs in these steps:


# try to locate file named x (if x is for example "doc/howto.htm")
# try to open starting page of book named x
# try to find x in contents (if x is for example "How To ...")
# try to find x in index (if x is for example "How To ...")
# switch to Search panel and start searching


  *display*(%(arg-type)Integer% id)

This alternative form is used to search help contents by numeric IDs.



h3(#HtmlHelpController_displaycontents). HtmlHelpController#display_contents

  *display_contents*()

Displays help window and focuses contents panel.

h3(#HtmlHelpController_displayindex). HtmlHelpController#display_index

  *display_index*()

Displays help window and focuses index panel.

h3(#HtmlHelpController_keywordsearch). HtmlHelpController#keyword_search

 Boolean *keyword_search*(%(arg-type)String% keyword, 
                        %(arg-type)HelpSearchMode% mode = HELP_SEARCH_ALL)

Displays help window, focuses search panel and starts searching.  Returns true
if the keyword was found. Optionally it searches through the index (mode =
HELP_SEARCH_INDEX), default the content (mode = HELP_SEARCH_ALL).

*Important:* KeywordSearch searches only pages listed in .hhc file(s).
You should list all pages in the contents file.

h3(#HtmlHelpController_readcustomization). HtmlHelpController#read_customization

  *read_customization*(%(arg-type)ConfigBase% cfg,  %(arg-type)String% path = '')

Reads the controller's setting (position of window, etc.)

h3(#HtmlHelpController_settempdir). HtmlHelpController#set_temp_dir

  *set_temp_dir*(%(arg-type)String% path)

Sets the path for storing temporary files - cached binary versions of index and contents files. These binary
forms are much faster to read. Default value is empty string (empty string means
that no cached data are stored). Note that these files are _not_ 
deleted when program exits.

Once created these cached files will be used in all subsequent executions 
of your application. If cached files become older than corresponding .hhp
file (e.g. if you regenerate documentation) it will be refreshed.

h3(#HtmlHelpController_settitleformat). HtmlHelpController#set_title_format

  *set_title_format*(%(arg-type)String% format)

Sets format of title of the frame. Must contain exactly one "\%s"
(for title of displayed HTML page).

h3(#HtmlHelpController_useconfig). HtmlHelpController#use_config

  *use_config*(%(arg-type)ConfigBase% config,  %(arg-type)String% rootpath = '')

Associates _config_ object with the controller.

If there is associated config object, HtmlHelpController automatically
reads and writes settings (including HtmlWindow's settings) when needed.

The only thing you must do is create Config object and call UseConfig.

If you do not use _UseConfig_, HtmlHelpController will use 
default Config object if available (for details see 
"ConfigBase#get":configbase.html#ConfigBase_get and 
"ConfigBase#set":configbase.html#ConfigBase_set).

h3(#HtmlHelpController_writecustomization). HtmlHelpController#write_customization

  *write_customization*(%(arg-type)ConfigBase% cfg,  %(arg-type)String% path = '')

Stores controllers setting (position of window etc.)

