h1(#wxdragimage). Wx::DragImage

This class is used when you wish to drag an object on the screen,
and a simple cursor is not enough.

On Windows, the WIN32 API is used to do achieve smooth dragging. On other platforms,
GenericDragImage is used. Applications may also prefer to use
GenericDragImage on Windows, too.



To use this class, when you wish to start dragging an image, create a DragImage
object and store it somewhere you can access it as the drag progresses.
Call BeginDrag to start, and EndDrag to stop the drag. To move the image,
initially call Show and then Move. If you wish to update the screen contents
during the drag (for example, highlight an item as in the dragimag sample), first call Hide,
update the screen, call Move, and then call Show.

You can drag within one window, or you can use full-screen dragging
either across the whole screen, or just restricted to one area
of the screen to save resources. If you want the user to drag between
two windows, then you will need to use full-screen dragging.

If you wish to draw the image yourself, use GenericDragImage and
override "DragImage#do_draw_image":dragimage.html#DragImage_dodrawimage and 
"DragImage#get_image_rect":dragimage.html#DragImage_getimagerect.

Please see @samples/dragimag@ for an example.


h2. Derived from

"Object":object.html

<div id="methods">

h2. Methods

* "DragImage.new":#DragImage_new
* "DragImage#begin_drag":#DragImage_begindrag
* "DragImage#do_draw_image":#DragImage_dodrawimage
* "DragImage#end_drag":#DragImage_enddrag
* "DragImage#get_image_rect":#DragImage_getimagerect
* "DragImage#hide":#DragImage_hide
* "DragImage#move":#DragImage_move
* "DragImage#show":#DragImage_show
* "DragImage#update_backing_from_window":#DragImage_updatebackingfromwindow

</div>


h3(#DragImage_constr). DragImage.new

  *DragImage.new*(%(arg-type)Bitmap% image,  %(arg-type)Cursor% cursor = NullCursor, 
                %(arg-type)Point% cursorHotspot = Point(0,  0))

Constructs a drag image from a bitmap and optional cursor.

  *DragImage.new*(%(arg-type)Icon% image,  %(arg-type)Cursor% cursor = NullCursor, 
                %(arg-type)Point% cursorHotspot = Point(0,  0))

Constructs a drag image from an icon and optional cursor.



  *DragImage.new*(%(arg-type)String% text,  %(arg-type)Cursor% cursor = NullCursor, 
                %(arg-type)Point% cursorHotspot = Point(0,  0))

Constructs a drag image from a text string and optional cursor.



  *DragImage.new*(%(arg-type)TreeCtrl% treeCtrl,  %(arg-type)TreeItemId% id)

Constructs a drag image from the text in the given tree control item, and optional cursor.



  *DragImage.new*(%(arg-type)ListCtrl% treeCtrl,  %(arg-type)Integer% id)

Constructs a drag image from the text in the given tree control item, and optional cursor.



  *DragImage.new*(%(arg-type)Cursor% cursor = NullCursor,  %(arg-type)Point% cursorHotspot = Point(0, 
                0))

Constructs a drag image an optional cursor. This constructor is only available for
GenericDragImage, and can be used when the application
supplies "DragImage#do_draw_image":dragimage.html#DragImage_dodrawimage and "DragImage#get_image_rect":dragimage.html#DragImage_getimagerect.

h4. Parameters

* _image_ Icon or bitmap to be used as the drag image. The bitmap can
have a mask.
* _text_ Text used to construct a drag image.
* _cursor_ Optional cursor to combine with the image.
* _hotspot_ This parameter is deprecated.
* _treeCtrl_ Tree control for constructing a tree drag image.
* _listCtrl_ List control for constructing a list drag image.
* _id_ Tree or list control item id.

h3(#DragImage_begindrag). DragImage#begin_drag

 Boolean *begin_drag*(%(arg-type)Point% hotspot,  %(arg-type)Window% window, 
                    %(arg-type)Boolean% fullScreen = false, 
                    %(arg-type)Rect% rect = nil)

Start dragging the image, in a window or full screen.

 Boolean *begin_drag*(%(arg-type)Point% hotspot,  %(arg-type)Window% window, 
                    %(arg-type)Window% boundingWindow)

Start dragging the image, using the first window to capture the mouse and the second
to specify the bounding area. This form is equivalent to using the first form,
but more convenient than working out the bounding rectangle explicitly.

You need to then call "DragImage#show":dragimage.html#DragImage_show 
and "DragImage#move":dragimage.html#DragImage_move to show the image on the screen.

Call "DragImage#end_drag":dragimage.html#DragImage_enddrag when the drag has finished.

Note that this call automatically calls CaptureMouse.

h4. Parameters

* _hotspot_ The location of the drag position relative to the upper-left corner
of the image.
* _window_ The window that captures the mouse, and within which the dragging
is limited unless _fullScreen_ is true.
* _boundingWindow_ In the second form of the function, specifies the
area within which the drag occurs.
* _fullScreen_ If true, specifies that the drag will be visible over the full
screen, or over as much of the screen as is specified by _rect_. Note that the mouse will
still be captured in _window_.
* _rect_ If non-NULL, specifies the rectangle (in screen coordinates) that
bounds the dragging operation. Specifying this can make the operation more efficient
by cutting down on the area under consideration, and it can also make a visual difference
since the drag is clipped to this area.

h3(#DragImage_dodrawimage). DragImage#do_draw_image

 Boolean *do_draw_image*(%(arg-type)DC% dc,  %(arg-type)Point% pos)

Draws the image on the device context with top-left corner at the given position.

This function is only available with GenericDragImage, to allow applications to
draw their own image instead of using an actual bitmap. If you override this function,
you must also override "DragImage#get_image_rect":dragimage.html#DragImage_getimagerect.

h3(#DragImage_enddrag). DragImage#end_drag

 Boolean *end_drag*()

Call this when the drag has finished.

Note that this call automatically calls ReleaseMouse.

h3(#DragImage_getimagerect). DragImage#get_image_rect

 "Rect":rect.html *get_image_rect*(%(arg-type)Point% pos)

Returns the rectangle enclosing the image, assuming that the image is drawn with its
top-left corner at the given point.

This function is available in GenericDragImage only, and may be overridden (together with 
"DragImage#do_draw_image":dragimage.html#DragImage_dodrawimage) to provide a virtual drawing capability.

h3(#DragImage_hide). DragImage#hide

 Boolean *hide*()

Hides the image. You may wish to call this before updating the window
contents (perhaps highlighting an item). Then call "DragImage#move":dragimage.html#DragImage_move 
and "DragImage#show":dragimage.html#DragImage_show.

h3(#DragImage_move). DragImage#move

 Boolean *move*(%(arg-type)Point% pt)

Call this to move the image to a new position. The image will only be shown if 
"DragImage#show":dragimage.html#DragImage_show has been called previously (for example
at the start of the drag).

_pt_ is the position in client coordinates (relative to the window specified in BeginDrag).

You can move the image either when the image is hidden or shown, but in general dragging
will be smoother if you move the image when it is shown.

h3(#DragImage_show). DragImage#show

 Boolean *show*()

Shows the image. Call this at least once when dragging.

h3(#DragImage_updatebackingfromwindow). DragImage#update_backing_from_window

 Boolean *update_backing_from_window*(%(arg-type)DC% windowDC,  %(arg-type)MemoryDC% destDC, 
                                    %(arg-type)Rect% sourceRect, 
                                    %(arg-type)Rect% destRect)

Override this if you wish to draw the window contents to the backing bitmap
yourself. This can be desirable if you wish to avoid flicker by not having to
redraw the updated window itself just before dragging, which can cause a flicker just
as the drag starts. Instead, paint the drag image's backing bitmap to show the appropriate
graphic _minus the objects to be dragged_, and leave the window itself to be updated
by the drag image. This can provide eerily smooth, flicker-free drag behaviour.

The default implementation copies the window contents to the backing bitmap. A new
implementation will normally copy information from another source, such as from its
own backing bitmap if it has one, or directly from internal data structures.

This function is available in GenericDragImage only.

