h1(#wxmemorybuffer). Wx::MemoryBuffer

A *MemoryBuffer* is a useful data structure for storing arbitrary sized blocks
of memory. MemoryBuffer guarantees deletion of the memory block when the object
is destroyed. 

h2. Derived from

None

<div id="methods">

h2. Methods

* "MemoryBuffer.new":#MemoryBuffer_new
* "MemoryBuffer#get_data":#MemoryBuffer_getdata
* "MemoryBuffer#get_buf_size":#MemoryBuffer_getbufsize
* "MemoryBuffer#get_data_len":#MemoryBuffer_getdatalen
* "MemoryBuffer#set_buf_size":#MemoryBuffer_setbufsize
* "MemoryBuffer#set_data_len":#MemoryBuffer_setdatalen
* "MemoryBuffer#get_write_buf":#MemoryBuffer_getwritebuf
* "MemoryBuffer#unget_write_buf":#MemoryBuffer_ungetwritebuf
* "MemoryBuffer#get_append_buf":#MemoryBuffer_getappendbuf
* "MemoryBuffer#unget_append_buf":#MemoryBuffer_ungetappendbuf
* "MemoryBuffer#append_byte":#MemoryBuffer_appendbyte
* "MemoryBuffer#append_data":#MemoryBuffer_appenddata

</div>


h3(#MemoryBuffer_new). MemoryBuffer.new

  *MemoryBuffer.new*(%(arg-type)MemoryBuffer% src)

Copy constructor, refcounting is used for performance , but MemoryBuffer
is not a copy-on-write structure so changes made to one buffer effect
all copies made from it.

  *MemoryBuffer.new*(%(arg-type)size_t% size)

Create a new buffer.

* _size_ size of new buffer.

h3(#MemoryBuffer_getdata). MemoryBuffer#get_data

 void*  *get_data*()

Return a pointer to the data in the buffer.

h3(#MemoryBuffer_getbufsize). MemoryBuffer#get_buf_size

 size_t *get_buf_size*()

Returns the size of the buffer.

h3(#MemoryBuffer_getdatalen). MemoryBuffer#get_data_len

 size_t *get_data_len*()

Returns the length of the valid data in the buffer.

h3(#MemoryBuffer_setbufsize). MemoryBuffer#set_buf_size

  *set_buf_size*(%(arg-type)size_t% size)

Ensures the buffer has at least _size_ bytes available.

h3(#MemoryBuffer_setdatalen). MemoryBuffer#set_data_len

  *set_data_len*(%(arg-type)size_t% size)

Sets the length of the data stored in the buffer.  Mainly useful for truncating existing data.

* _size_ New length of the valid data in the buffer. This is
distinct from the allocated size

h3(#MemoryBuffer_getwritebuf). MemoryBuffer#get_write_buf

  *get_write_buf*(%(arg-type)size_t% sizeNeeded)

Ensure the buffer is big enough and return a pointer to the
buffer which can be used to directly write into the buffer
up to _sizeNeeded_ bytes.

h3(#MemoryBuffer_ungetwritebuf). MemoryBuffer#unget_write_buf

  *unget_write_buf*(%(arg-type)size_t% sizeUsed)

Update the buffer after completing a direct write, which
you must have used GetWriteBuf() to initialise.

* _sizeUsed_ The amount of data written in to buffer
by the direct write

h3(#MemoryBuffer_getappendbuf). MemoryBuffer#get_append_buf

  *get_append_buf*(%(arg-type)size_t% sizeNeeded)

Ensure that the buffer is big enough and return a pointer to the start
of the empty space in the buffer. This pointer can be used to directly 
write data into the buffer, this new data will be appended to
the existing data.

* _sizeNeeded_ Amount of extra space required in the buffer for
the append operation

h3(#MemoryBuffer_ungetappendbuf). MemoryBuffer#unget_append_buf

  *unget_append_buf*(%(arg-type)size_t% sizeUsed)

Update the length after completing a direct append, which
you must have used GetAppendBuf() to initialise.

* _sizeUsed_ This is the amount of new data that has been 
appended.

h3(#MemoryBuffer_appendbyte). MemoryBuffer#append_byte

  *append_byte*(%(arg-type)char% data)

Append a single byte to the buffer.

* _data_ New byte to append to the buffer.

h3(#MemoryBuffer_appenddata). MemoryBuffer#append_data

  *append_data*(%(arg-type)% data,  %(arg-type)size_t% len)

Single call to append a data block to the buffer.

* _data_ Pointer to block to append to the buffer.
* _len_ Length of data to append.
