h1(#wxpen). Wx::Pen

A pen is a drawing tool for drawing outlines. It is used for drawing
lines and painting the outline of rectangles, ellipses, etc. It has a
colour, a width and a style. 

h2. Derived from

"GDIObject":gdiobject.html

"Object":object.html

h2. Predefined objects

Objects:

*NullPen*

Pointers:

*RED_PEN

CYAN_PEN\\
GREEN_PEN\\
BLACK_PEN\\
WHITE_PEN\\
TRANSPARENT_PEN\\
BLACK_DASHED_PEN\\
GREY_PEN\\
MEDIUM_GREY_PEN\\
LIGHT_GREY_PEN*

h2. Remarks

On a monochrome display, Widgets shows all non-white pens as black.

Do not initialize objects on the stack before the program commences,
since other required structures may not have been set up yet. Instead,
define global pointers to objects and create them in _OnInit_ or
when required.

An application may wish to dynamically create pens with different
characteristics, and there is the consequent danger that a large number
of duplicate pens will be created. Therefore an application may wish to
get a pointer to a pen by using the global list of pens 
ThePenList, and calling the member function *FindOrCreatePen*.
See the entry for "PenList":penlist.html.

Pen uses a reference counting system, so assignments between brushes are very
cheap. You can therefore use actual Pen objects instead of pointers without
efficiency problems. Once one Pen object changes its data it will create its
own pen data internally so that other pens, which previously shared the
data using the reference counting, are not affected.

h2. See also

"PenList":penlist.html, "DC":dc.html, "DC#set_pen":dc.html#DC_setpen

<div id="methods">

h2. Methods

* "Pen.new":#Pen_new
* "Pen#get_cap":#Pen_getcap
* "Pen#get_colour":#Pen_getcolour
* "Pen#get_dashes":#Pen_getdashes
* "Pen#get_join":#Pen_getjoin
* "Pen#get_stipple":#Pen_getstipple
* "Pen#get_style":#Pen_getstyle
* "Pen#get_width":#Pen_getwidth
* "Pen#ok":#Pen_ok
* "Pen#set_cap":#Pen_setcap
* "Pen#set_colour":#Pen_setcolour
* "Pen#set_dashes":#Pen_setdashes
* "Pen#set_join":#Pen_setjoin
* "Pen#set_stipple":#Pen_setstipple
* "Pen#set_style":#Pen_setstyle
* "Pen#set_width":#Pen_setwidth

</div>


h3(#Pen_new). Pen.new

  *Pen.new*(%(arg-type)"Colour":colour.html% colour,  %(arg-type)Integer% width = $1$, 
          %(arg-type)Integer% style = @SOLID@)

Constructs a pen from a colour object, pen width and style.

  *Pen.new*(%(arg-type)String% colourName,  %(arg-type)Integer% width,  %(arg-type)Integer% style)

Constructs a pen from a colour name, pen width and style.

  *Pen.new*(%(arg-type)"Bitmap":bitmap.html% stipple,  %(arg-type)Integer% width)

Constructs a stippled pen from a stipple bitmap and a width.

  *Pen.new*(%(arg-type)"Pen":pen.html% pen)

Copy constructor. This uses reference counting so is a cheap operation.

h4. Parameters

* _colour_ A colour object.
* _colourName_ A colour name.
* _width_ Pen width. Under Windows, the pen width cannot be greater than 1 if
the style is DOT, LONG_DASH, SHORT_DASH, DOT_DASH, or USER_DASH.
* _stipple_ A stipple bitmap.
* _pen_ A pointer or reference to a pen to copy.
* _style_ The style may be one of the following:


|*SOLID*|Solid style.|
|*TRANSPARENT*|No pen is used.|
|*DOT*|Dotted style.|
|*LONG_DASH*|Long dashed style.|
|*SHORT_DASH*|Short dashed style.|
|*DOT_DASH*|Dot and dash style.|
|*STIPPLE*|Use the stipple bitmap.|
|*USER_DASH*|Use the user dashes: see "Pen#set_dashes":pen.html#Pen_setdashes.|
|*BDIAGONAL_HATCH*|Backward diagonal hatch.|
|*CROSSDIAG_HATCH*|Cross-diagonal hatch.|
|*FDIAGONAL_HATCH*|Forward diagonal hatch.|
|*CROSS_HATCH*|Cross hatch.|
|*HORIZONTAL_HATCH*|Horizontal hatch.|
|*VERTICAL_HATCH*|Vertical hatch.|


h4. Remarks

Different versions of Windows and different versions of other platforms
support _very_ different subsets of the styles above - there is no
similarity even between Windows95 and Windows98 - so handle with care.

If the named colour form is used, an appropriate *Colour* structure
is found in the colour database.

h4. See also

"Pen#set_style":pen.html#Pen_setstyle, "Pen#set_colour":pen.html#Pen_setcolour, "Pen#set_width":pen.html#Pen_setwidth, "Pen#set_stipple":pen.html#Pen_setstipple



  *destructor*()

Destructor.

h4. Remarks

The destructor may not delete the underlying pen object of the native windowing
system, since Brush uses a reference counting system for efficiency.

Although all remaining pens are deleted when the application exits,
the application should try to clean up all pens itself. This is because
Widgets cannot know if a pointer to the pen object is stored in an
application data structure, and there is a risk of double deletion.

h3(#Pen_getcap). Pen#get_cap

 Integer *get_cap*()

Returns the pen cap style, which may be one of *CAP_ROUND*, *CAP_PROJECTING* and
