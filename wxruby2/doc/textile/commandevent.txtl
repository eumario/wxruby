h1(#wxcommandevent). Wx::CommandEvent

This event class contains information about command events, which originate from a variety of
simple controls. More complex controls, such as "TreeCtrl":treectrl.html, have separate command event classes.

h2. Derived from

"Event":event.html

h2. Event table macros

To process a menu command event, use these event handler macros to direct input to member
functions that take a CommandEvent argument.



|*EVT_COMMAND(id, event, func)*|Process a command, supplying the window identifier,command event identifier, and member function.|
|*EVT_COMMAND_RANGE(id1, id2, event, func)*|Process a command for a rangeof window identifiers, supplying the minimum and maximum window identifiers,command event identifier, and member function.|
|*evt_button(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_BUTTON_CLICKED command,which is generated by a Button control.|
|*evt_checkbox(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_CHECKBOX_CLICKED command,which is generated by a CheckBox control.|
|*evt_choice(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_CHOICE_SELECTED command,which is generated by a Choice control.|
|*evt_combobox(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_COMBOBOX_SELECTED command,which is generated by a ComboBox control.|
|*evt_listbox(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_LISTBOX_SELECTED command,which is generated by a ListBox control.|
|*evt_listbox_dclick(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_LISTBOX_DOUBLECLICKED command,which is generated by a ListBox control.|
|*evt_menu(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_MENU_SELECTED command,which is generated by a menu item.|
|*EVT_MENU_RANGE(id1, id2, func)*|Process a EVT_COMMAND_MENU_RANGE command,which is generated by a range of menu items.|
|*evt_context_menu()&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process the event generatedwhen the user has requested a popup menu to appear by pressing a specialkeyboard key (under Windows) or by right clicking the mouse.|
|*evt_radiobox(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_RADIOBOX_SELECTED command,which is generated by a RadioBox control.|
|*evt_radiobutton(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_RADIOBUTTON_SELECTED command,which is generated by a RadioButton control.|
|*evt_scrollbar(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_SCROLLBAR_UPDATED command,which is generated by a ScrollBar control. This is provided for compatibility only;more specific scrollbar event macros should be used instead (see "ScrollEvent":scrollevent.html).|
|*evt_slider(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_SLIDER_UPDATED command,which is generated by a Slider control.|
|*evt_text(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_TEXT_UPDATED command,which is generated by a TextCtrl control.|
|*evt_text_enter(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_TEXT_ENTER command,which is generated by a TextCtrl control. Note that you must useTE_PROCESS_ENTER flag when creating the control if you want it to generatesuch events.|
|*evt_text_maxlen(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_TEXT_MAXLEN command,which is generated by a TextCtrl control when the user tries to enter morecharacters into it than the limit previously set with "set_max_length":#CommandEvent_setmaxlength.|
|*evt_togglebutton(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_TOGGLEBUTTON_CLICKED event.|
|*evt_tool(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_TOOL_CLICKED event(a synonym for EVT_COMMAND_MENU_SELECTED). Pass the id of the tool.|
|*EVT_TOOL_RANGE(id1, id2, func)*|Process a EVT_COMMAND_TOOL_CLICKED eventfor a range of identifiers. Pass the ids of the tools.|
|*evt_tool_rclicked(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_TOOL_RCLICKED event.Pass the id of the tool.|
|*EVT_TOOL_RCLICKED_RANGE(id1, id2, func)*|Process a EVT_COMMAND_TOOL_RCLICKED eventfor a range of ids. Pass the ids of the tools.|
|*evt_tool_enter(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_TOOL_ENTER event.Pass the id of the toolbar itself. The value of CommandEvent::GetSelection is the tool id, or -1 if the mouse cursor has moved off a tool.|
|*evt_command_left_click(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_LEFT_CLICK command,which is generated by a control (Windows 95 and NT only).|
|*evt_command_left_dclick(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_LEFT_DCLICK command,which is generated by a control (Windows 95 and NT only).|
|*evt_command_right_click(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_RIGHT_CLICK command,which is generated by a control (Windows 95 and NT only).|
|*evt_command_set_focus(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_SET_FOCUS command,which is generated by a control (Windows 95 and NT only).|
|*evt_command_kill_focus(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_KILL_FOCUS command,which is generated by a control (Windows 95 and NT only).|
|*evt_command_enter(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|Process a EVT_COMMAND_ENTER command,which is generated by a control.|

<div id="methods">

h2. Methods

* "CommandEvent.new":#CommandEvent_new
* "CommandEvent#checked":#CommandEvent_checked
* "CommandEvent#get_client_data":#CommandEvent_getclientdata
* "CommandEvent#get_client_object":#CommandEvent_getclientobject
* "CommandEvent#get_extra_long":#CommandEvent_getextralong
* "CommandEvent#get_int":#CommandEvent_getint
* "CommandEvent#get_selection":#CommandEvent_getselection
* "CommandEvent#get_string":#CommandEvent_getstring
* "CommandEvent#is_checked":#CommandEvent_ischecked
* "CommandEvent#is_selection":#CommandEvent_isselection
* "CommandEvent#set_client_data":#CommandEvent_setclientdata
* "CommandEvent#set_client_object":#CommandEvent_setclientobject
* "CommandEvent#set_extra_long":#CommandEvent_setextralong
* "CommandEvent#set_int":#CommandEvent_setint
* "CommandEvent#set_string":#CommandEvent_setstring

</div>


h3(#CommandEvent_new). CommandEvent.new

  *CommandEvent.new*(%(arg-type)TYPE% commandEventType = 0,  %(arg-type)Integer% id = 0)

Constructor.

h3(#CommandEvent_checked). CommandEvent#checked

 Boolean *checked*()

Deprecated, use "is_checked":#CommandEvent_ischecked instead.

h3(#CommandEvent_getclientdata). CommandEvent#get_client_data

  *get_client_data*()

Returns client data pointer for a listbox or choice selection event
(not valid for a deselection).

h3(#CommandEvent_getclientobject). CommandEvent#get_client_object

 "ClientData":clientdata.html *get_client_object*()

Returns client object pointer for a listbox or choice selection event
(not valid for a deselection).

h3(#CommandEvent_getextralong). CommandEvent#get_extra_long

 Integer *get_extra_long*()

Returns extra information dependant on the event objects type.
If the event comes from a listbox selection, it is a boolean
determining whether the event was a selection (true) or a
deselection (false). A listbox deselection only occurs for
multiple-selection boxes, and in this case the index and string values
are indeterminate and the listbox must be examined by the application.

h3(#CommandEvent_getint). CommandEvent#get_int

 Integer *get_int*()

Returns the integer identifier corresponding to a listbox, choice or
radiobox selection (only if the event was a selection, not a
deselection), or a boolean value representing the value of a checkbox.

h3(#CommandEvent_getselection). CommandEvent#get_selection

 Integer *get_selection*()

Returns item index for a listbox or choice selection event (not valid for
a deselection).

h3(#CommandEvent_getstring). CommandEvent#get_string

 String *get_string*()

Returns item string for a listbox or choice selection event (not valid for
a deselection).

h3(#CommandEvent_ischecked). CommandEvent#is_checked

 Boolean *is_checked*()

This method can be used with checkbox and menu events: for the checkboxes, the
method returns @true@ for a selection event and @false@ for a
deselection one. For the menu events, this method indicates if the menu item
just has become checked or unchecked (and thus only makes sense for checkable
menu items).

h3(#CommandEvent_isselection). CommandEvent#is_selection

 Boolean *is_selection*()

For a listbox or similar event, returns true if it is a selection, false if it
is a deselection.

h3(#CommandEvent_setclientdata). CommandEvent#set_client_data

  *set_client_data*(%(arg-type)% clientData)

Sets the client data for this event.

h3(#CommandEvent_setclientobject). CommandEvent#set_client_object

  *set_client_object*(%(arg-type)ClientData% clientObject)

Sets the client object for this event. The client object is not owned by the event
object and the event object will not delete the client object in its destructor.
The client object must be owned and deleted by another object (e.g. a control)
that has longer life time than the event object.

h3(#CommandEvent_setextralong). CommandEvent#set_extra_long

  *set_extra_long*(%(arg-type)Integer% extraLong)

Sets the *m_extraLong* member.

h3(#CommandEvent_setint). CommandEvent#set_int

  *set_int*(%(arg-type)Integer% intCommand)

Sets the *m_commandInt* member.

h3(#CommandEvent_setstring). CommandEvent#set_string

  *set_string*(%(arg-type)String% string)

Sets the *m_commandString* member.

