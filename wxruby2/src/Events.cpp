/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIG_DIRECTORS

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif


/* ruby.swg */
/* Implementation : RUBY */
#define SWIGRUBY 1

#include "ruby.h"

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

#define NUM2USHRT(n) (\
    (0 <= NUM2UINT(n) && NUM2UINT(n) <= USHRT_MAX)\
    ? (unsigned short) NUM2UINT(n) \
    : (rb_raise(rb_eArgError, "integer %d out of range of `unsigned short'",\
               NUM2UINT(n)), (short)0)\
)

#define NUM2SHRT(n) (\
    (SHRT_MIN <= NUM2INT(n) && NUM2INT(n) <= SHRT_MAX)\
    ? (short)NUM2INT(n)\
    : (rb_raise(rb_eArgError, "integer %d out of range of `short'",\
               NUM2INT(n)), (short)0)\
)

/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
} swig_class;

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING(RB_STRING_VALUE(s))->ptr
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING(RB_STRING_VALUE(s))->len
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { rb_raise(rb_eRuntimeError, (char *) msg ); } else


/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  if (!ti->clientdata) {
    swig_cast_info *cast = ti->cast;
    /* if (ti->clientdata == clientdata) return; */
    ti->clientdata = clientdata;
    
    while (cast) {
      if (!cast->converter)
	SWIG_TypeClientData(cast->type, clientdata);
      cast = cast->next;
    }
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Ruby_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Ruby_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Ruby_MustGetPtr(p, type, argnum, flags)
#define SWIG_GetModule(clientdata) \
  SWIG_Ruby_GetModule()
#define SWIG_SetModule(clientdata, pointer) \
  SWIG_Ruby_SetModule(pointer)

/* Ruby-specific SWIG API */

#define SWIG_InitRuntime() \
  SWIG_Ruby_InitRuntime()
#define SWIG_define_class(ty) \
  SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty) \
  SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value) \
  SWIG_Ruby_MangleStr(value)
#define SWIG_CheckConvert(value, ty) \
  SWIG_Ruby_CheckConvert(value, ty)
#define SWIG_NewPackedObj(ptr, sz, ty) \
  SWIG_Ruby_NewPackedObj(ptr, sz, ty)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)

/* rubydef.swg */
#ifdef __cplusplus
extern "C" {
#endif

static VALUE _mSWIG = Qnil;
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Initialize Ruby runtime support */
static void
SWIG_Ruby_InitRuntime(void)
{
    if (_mSWIG == Qnil) {
        _mSWIG = rb_define_module("SWIG");
    }
}

/* Define Ruby class for C type */
static void
SWIG_Ruby_define_class(swig_type_info *type)
{
    VALUE klass;
    char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    if (NIL_P(_cSWIG_Pointer)) {
	_cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
	rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
    }
    klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
    free((void *) klass_name);
}

/* Create a new pointer object */
static VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int own)
{
    char *klass_name;
    swig_class *sklass;
    VALUE klass;
    VALUE obj;
    
    if (!ptr)
	return Qnil;
    
    if (type->clientdata) {
      sklass = (swig_class *) type->clientdata;
      obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), (own ? VOIDFUNC(sklass->destroy) : 0), ptr);
    } else {
      klass_name = (char *) malloc(4 + strlen(type->name) + 1);
      sprintf(klass_name, "TYPE%s", type->name);
      klass = rb_const_get(_mSWIG, rb_intern(klass_name));
      free((void *) klass_name);
      obj = Data_Wrap_Struct(klass, 0, 0, ptr);
    }
    rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
    return obj;
}

/* Create a new class instance (always owned) */
static VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
    VALUE obj;
    swig_class *sklass = (swig_class *) type->clientdata;
    obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
    rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
    return obj;
}

/* Get type mangle from class name */
static SWIGINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "__swigtype__");
  return StringValuePtr(stype);
}

/* Convert a pointer value */
static int
SWIG_Ruby_ConvertPtr(VALUE obj, void **ptr, swig_type_info *ty, int flags)
{
  char *c;
  swig_cast_info *tc;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return 0;
  } else {
    Data_Get_Struct(obj, void, *ptr);
  }
  
  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
        if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
          if (*ptr == 0)
            rb_raise(rb_eRuntimeError, "This %s already released", ty->str);
          return 0;
        }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      if (flags & SWIG_POINTER_EXCEPTION)
        rb_raise(rb_eTypeError, "Expected %s", ty->str);
      else
        return -1;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      if (flags & SWIG_POINTER_EXCEPTION)
        rb_raise(rb_eTypeError, "Expected %s", ty->str);
      else
        return -1;
    }
    *ptr = SWIG_TypeCast(tc, *ptr);
  }
  return 0;
}

/* Convert a pointer value, signal an exception on a type mismatch */
static SWIGINLINE void *
SWIG_Ruby_MustGetPtr(VALUE obj, swig_type_info *ty, int argnum, int flags)
{
  void *result;
  SWIG_ConvertPtr(obj, &result, ty, flags | SWIG_POINTER_EXCEPTION);
  return result;
}

/* Check convert */
static SWIGINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c)
    return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

static VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
static void
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return;

type_error:

  if (flags) {
    if (ty) {
      rb_raise(rb_eTypeError, "Type error. Expected %s", ty->name);
    } else {
      rb_raise(rb_eTypeError, "Expected a pointer");
    }
  }
}

static swig_module_info *SWIG_Ruby_GetModule() {
    VALUE pointer;
    swig_module_info *ret = 0;

   /* first check if pointer already created */
    pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
    if (pointer != Qnil) {
      Data_Get_Struct(pointer, swig_module_info, ret);
    }
    return ret;
}

static void SWIG_Ruby_SetModule(swig_module_info *pointer) {
      /* register a new class */
      VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
      /* create and store the structure pointer to a global variable */
      swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
      rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

#ifdef __cplusplus
}
#endif



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_int swig_types[0]
#define SWIGTYPE_p_unsigned_long swig_types[1]
#define SWIGTYPE_p_wxString swig_types[2]
static swig_type_info *swig_types[3];
static swig_module_info swig_module = {swig_types, 3, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_wxEvents
#define SWIG_name    "WxEvents"

static VALUE mWxEvents;

static void SWIG_AsVal(VALUE obj, int *val)
{
    *val = (int) NUM2INT(obj);
}


#  undef GetClassName
#  undef GetClassInfo
#  undef Yield
#  undef GetMessage
#  undef FindWindow
#  undef GetCharWidth
#  undef DrawText
#  undef StartDoc
#  undef CreateDialog
#  undef Sleep
#  undef _
#  undef Connect
#  undef connect

#include <wx/wx.h>
#include <wx/dcbuffer.h>

void GcMarkDeleted(void *);
bool GcIsDeleted(void *);
void GcMapPtrToValue(void *ptr, VALUE val);
VALUE GcGetValueFromPtr(void *ptr);
void GcFreefunc(void *);

extern VALUE mWxruby2;


#include <wx/datetime.h>


//NO_CLASS - This tells fixmodule not to expect a class

#include <wx/calctrl.h>
#include <wx/fdrepdlg.h>
#include <wx/notebook.h>
#include <wx/listctrl.h>
#include <wx/treectrl.h>
#include <wx/dialup.h>
#include <wx/sashwin.h>
#include <wx/taskbar.h>
#include <wx/tabctrl.h>
#include <wx/wizard.h>
#include <wx/splitter.h>
#include <wx/grid.h>
#include <wx/laywin.h>
#include <wx/process.h>
#include <wx/tglbtn.h>


extern swig_class cWxEvtHandler;

void internal_connect(VALUE self, int firstId, int lastId, 
                wxEventType eventType);


static VALUE internal_evt_with_id(int argc, VALUE *argv, VALUE self, 
        wxEventType eventType) 
{
    if (argc != 1)
        rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
        
    int id = NUM2INT(argv[0]);
    //printf("evt_with_id(%d) %s\n", id, rb_block_given_p() ? "with block" : "");

    internal_connect(self, id, id, eventType);
    return Qnil;
}

static VALUE internal_evt_with_id_range(int argc, VALUE *argv, VALUE self, 
        wxEventType eventType)
{
    if (argc != 2)
        rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
        
    int idStart = NUM2INT(argv[0]);
    int idEnd = NUM2INT(argv[1]);
    //printf("evt_with_id(%d) %s\n", id, rb_block_given_p() ? "with block" : "");

    internal_connect(self, idStart, idEnd, eventType);
    return Qnil;
}

static VALUE internal_evt_no_parameters(int argc, VALUE *argv, VALUE self, 
        wxEventType eventType) 
{
    if (argc != 0)
        rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
        
    //printf("evt_no_parameters() %s\n", rb_block_given_p() ? "with block" : "");
    internal_connect(self, -1, -1, eventType);
    return Qnil;
}

static VALUE connect_fnc(int argc, VALUE *argv, VALUE self) 
{
    if (argc != 3)
        rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)", argc);

    int id = NUM2INT(argv[0]);
    int lastId = NUM2INT(argv[1]);
    int type = NUM2INT(argv[2]);
    
    internal_connect(self, id, lastId, type);
    return Qnil;
}


/***********************************************************************
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Ruby extensions.
 *
 * Author : Lyle Johnson (lyle@users.sourceforge.net)
 *          Based on the original Python implementation by
 *          Mark Rose (mrose@stm.lbl.gov).
 ************************************************************************/

#ifdef __cplusplus

#include <string>

namespace Swig {
  struct body_args {
    VALUE recv;
    ID id;
    int argc;
    VALUE *argv;
  };

  /* Base class for director exceptions */
  class DirectorException {
    protected:
      VALUE swig_error;
    protected:
      DirectorException(VALUE error=Qnil) : swig_error(error) {}
    public:
      VALUE getType() const  { 
        return CLASS_OF(swig_error); 
      }
      VALUE getError() const {
        return swig_error;
      }
      virtual ~DirectorException() {}
  };

  /* Type mismatch in the return value from a Ruby method call */
  class DirectorTypeMismatchException : public Swig::DirectorException {
    public:
      DirectorTypeMismatchException(const char *msg="") {
        VALUE str = rb_str_new2("Swig director type mismatch: ");
        rb_str_concat(str, rb_str_new2(msg));
        swig_error = rb_exc_new3(rb_eTypeError, str);
      }
  };

  /* Any Ruby exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException {
    public:
      DirectorMethodException(VALUE error) : Swig::DirectorException(error) {}
  };

  /* Attempted to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException {};


  /* Simple thread abstraction for pthreads on win32 */
#ifdef __THREAD__
#define __PTHREAD__
#if defined(_WIN32) || defined(__WIN32__)
#define pthread_mutex_lock EnterCriticalSection
#define pthread_mutex_unlock LeaveCriticalSection
#define pthread_mutex_t CRITICAL_SECTION
#define MUTEX_INIT(var) CRITICAL_SECTION var
#else
#include <pthread.h>
#define MUTEX_INIT(var) pthread_mutex_t var = PTHREAD_MUTEX_INITIALIZER 
#endif
#endif

  /* director base class */
  class Director {
    private:
      /* pointer to the wrapped Ruby object */
      VALUE swig_self;
      /* flag indicating whether the object is owned by Ruby or c++ */
      mutable bool swig_disown_flag;
      /* shared flag for breaking recursive director calls */
      static bool swig_up;

#ifdef __PTHREAD__
      /* locks for sharing the swig_up flag in a threaded environment */
      static pthread_mutex_t swig_mutex_up;
      static bool swig_mutex_active;
      static pthread_t swig_mutex_thread;
#endif

      /* reset the swig_up flag once the routing direction has been determined */
#ifdef __PTHREAD__
      void swig_clear_up() const { 
        Swig::Director::swig_up = false; 
        Swig::Director::swig_mutex_active = false;
        pthread_mutex_unlock(&swig_mutex_up);
      }
#else
      void swig_clear_up() const { 
        Swig::Director::swig_up = false; 
      }
#endif

    public:
      /* wrap a Ruby object, optionally taking ownership */
      Director(VALUE self) : swig_self(self), swig_disown_flag(false) {
      }

      /* discard our reference at destruction */
      virtual ~Director() {
      }

      /* return a pointer to the wrapped Ruby object */
      VALUE swig_get_self() const { 
        return swig_self; 
      }

      /* get the swig_up flag to determine if the method call should be routed
       * to the c++ base class or through the wrapped Ruby object
       */
#ifdef __PTHREAD__
      bool swig_get_up() const { 
        if (Swig::Director::swig_mutex_active) {
          if (pthread_equal(Swig::Director::swig_mutex_thread, pthread_self())) {
            bool up = swig_up;
            swig_clear_up();
            return up;
          }
        }
        return false;
      }
#else 
      bool swig_get_up() const { 
        bool up = swig_up;
        swig_up = false;
        return up;
      }
#endif

      /* set the swig_up flag if the next method call should be directed to
       * the c++ base class rather than the wrapped Ruby object
       */
#ifdef __PTHREAD__
      void swig_set_up() const { 
        pthread_mutex_lock(&Swig::Director::swig_mutex_up);
        Swig::Director::swig_mutex_thread = pthread_self();
        Swig::Director::swig_mutex_active = true;
        Swig::Director::swig_up = true;
      }
#else 
      void swig_set_up() const { 
        Swig::Director::swig_up = true; 
      }
#endif

      /* acquire ownership of the wrapped Ruby object (the sense of "disown"
       * is from Ruby) */
      void swig_disown() const { 
        if (!swig_disown_flag) { 
          swig_disown_flag = true;
        } 
      }
  };

//  bool Swig::Director::swig_up = false;

#ifdef __PTHREAD__
  MUTEX_INIT(Swig::Director::swig_mutex_up);
  pthread_t Swig::Director::swig_mutex_thread;
  bool Swig::Director::swig_mutex_active = false;
#endif

}

#endif /* __cplusplus */




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "Events.h"


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_int = {"_p_int", "int *|wxEventType *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *|VALUE *", 0, 0, 0};
static swig_type_info _swigt__p_wxString = {"_p_wxString", "wxString *|wxArtClient *", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_wxString,
};

static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxString[] = {  {&_swigt__p_wxString, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_int,
  _swigc__p_unsigned_long,
  _swigc__p_wxString,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#endif

SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  swig_type_info *type, *ret;
  swig_cast_info *cast;
  size_t i;
  swig_module_info *module_head;
  static int init_run = 0;

  clientdata = clientdata;

  if (init_run) return;
  init_run = 1;

  /* Initialize the swig_module */
  swig_module.type_initial = swig_type_initial;
  swig_module.cast_initial = swig_cast_initial;

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (module_head) {
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  } else {
    /* This is the first module loaded */
    swig_module.next = &swig_module;
    SWIG_SetModule(clientdata, &swig_module);
  }
		 
  /* Now work on filling in swig_module.types */
  for (i = 0; i < swig_module.size; ++i) {
    type = 0;

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
      if (swig_module.type_initial[i]->clientdata) type->clientdata = swig_module.type_initial[i]->clientdata;
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
      }
      if (ret && type == swig_module.type_initial[i]) {
        cast->type = ret;
        ret = 0;
      }
      
      if (!ret) {
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }

      cast++;
    }

    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_wxEvents(void) {
static bool initialized;
if(initialized) return;
initialized = true;
    int i;
    
    SWIG_InitRuntime();
mWxEvents = mWxruby2;
    
    SWIG_InitializeModule(0);
    for (i = 0; i < swig_module.size; i++) {
        SWIG_define_class(swig_module.types[i]);
    }
    
}

static VALUE evt_tree_end_drag(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TREE_END_DRAG);
}

#ifdef __WXMSW__
static VALUE evt_sash_dragged(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_SASH_DRAGGED);
}

#endif //__WXMSW__
static VALUE evt_middle_dclick(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_MIDDLE_DCLICK);
}

static VALUE evt_grid_cell_right_dclick(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_GRID_CELL_RIGHT_DCLICK);
}

static VALUE evt_tree_key_down(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TREE_KEY_DOWN);
}

static VALUE evt_list_insert_item(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_INSERT_ITEM);
}

static VALUE evt_right_up(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_RIGHT_UP);
}

static VALUE evt_tool_rclicked_range(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_COMMAND_TOOL_RCLICKED);
}

#ifdef __WXMSW__
static VALUE evt_dialup_connected(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_DIALUP_CONNECTED);
}

#endif //__WXMSW__
static VALUE evt_help_range(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_HELP);
}

static VALUE evt_grid_label_right_dclick(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_GRID_LABEL_RIGHT_DCLICK);
}

static VALUE evt_grid_select_cell(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_GRID_SELECT_CELL);
}

static VALUE evt_spinctrl(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_SPINCTRL_UPDATED);
}

static VALUE evt_scrollwin_pagedown(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_SCROLLWIN_PAGEDOWN);
}

static VALUE evt_list_item_middle_click(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK);
}

static VALUE evt_context_menu(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_CONTEXT_MENU);
}

static VALUE evt_list_col_right_click(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_COL_RIGHT_CLICK);
}

static VALUE evt_joy_zmove(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_JOY_ZMOVE);
}

static VALUE evt_char(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_CHAR);
}

static VALUE evt_grid_cell_left_dclick(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_GRID_CELL_LEFT_DCLICK);
}

static VALUE evt_tree_get_info(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TREE_GET_INFO);
}

#ifdef __WXMSW__
static VALUE evt_taskbar_right_up(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_TASKBAR_RIGHT_UP);
}

#endif //__WXMSW__
static VALUE evt_list_item_right_click(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK);
}

static VALUE evt_list_delete_all_items(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS);
}

static VALUE evt_scrollwin_pageup(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_SCROLLWIN_PAGEUP);
}

static VALUE evt_scrollwin_lineup(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_SCROLLWIN_LINEUP);
}

static VALUE evt_list_begin_rdrag(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_BEGIN_RDRAG);
}

static VALUE evt_left_dclick(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_LEFT_DCLICK);
}

static VALUE evt_find(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_FIND);
}

static VALUE evt_list_item_focused(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_ITEM_FOCUSED);
}

static VALUE evt_spin(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_SCROLL_THUMBTRACK);
}

static VALUE evt_list_get_info(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_GET_INFO);
}

static VALUE evt_size(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_SIZE);
}

static VALUE evt_right_down(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_RIGHT_DOWN);
}

static VALUE evt_enter_window(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_ENTER_WINDOW);
}

static VALUE evt_activate(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_ACTIVATE);
}

static VALUE evt_idle(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_IDLE);
}

static VALUE evt_grid_cell_right_click(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_GRID_CELL_RIGHT_CLICK);
}

static VALUE evt_grid_label_left_click(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_GRID_LABEL_LEFT_CLICK);
}

static VALUE evt_tree_item_expanded(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TREE_ITEM_EXPANDED);
}

static VALUE evt_text(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TEXT_UPDATED);
}

static VALUE evt_motion(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_MOTION);
}

static VALUE evt_text_enter(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TEXT_ENTER);
}

#ifdef __WXMSW__
static VALUE evt_wizard_page_changed(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_WIZARD_PAGE_CHANGED);
}

#endif //__WXMSW__
static VALUE evt_tree_item_expanding(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TREE_ITEM_EXPANDING);
}

static VALUE evt_list_item_activated(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_ITEM_ACTIVATED);
}

static VALUE evt_list_col_dragging(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_COL_DRAGGING);
}

#ifdef __WXMSW__
static VALUE evt_dialup_disconnected(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_DIALUP_DISCONNECTED);
}

#endif //__WXMSW__
static VALUE evt_list_col_begin_drag(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_COL_BEGIN_DRAG);
}

static VALUE evt_end_process(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_END_PROCESS);
}

static VALUE evt_calendar_month(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_CALENDAR_MONTH_CHANGED);
}

static VALUE evt_tree_begin_drag(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TREE_BEGIN_DRAG);
}

static VALUE evt_grid_range_select(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_GRID_RANGE_SELECT);
}

static VALUE evt_list_end_label_edit(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_END_LABEL_EDIT);
}

static VALUE evt_init_dialog(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_INIT_DIALOG);
}

static VALUE evt_notebook_page_changed(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED);
}

#ifdef __WXMSW__
static VALUE evt_taskbar_left_dclick(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_TASKBAR_LEFT_DCLICK);
}

#endif //__WXMSW__
static VALUE evt_list_begin_label_edit(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT);
}

static VALUE evt_button(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_BUTTON_CLICKED);
}

static VALUE evt_calendar_sel_changed(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_CALENDAR_SEL_CHANGED);
}

static VALUE evt_menu(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_MENU_SELECTED);
}

static VALUE evt_middle_up(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_MIDDLE_UP);
}

static VALUE evt_spin_down(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_SCROLL_LINEUP);
}

static VALUE evt_left_down(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_LEFT_DOWN);
}

static VALUE evt_iconize(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_ICONIZE);
}

static VALUE evt_tool_enter(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TOOL_ENTER);
}

static VALUE evt_joy_move(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_JOY_MOVE);
}

static VALUE evt_menu_open(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_MENU_OPEN);
}

static VALUE evt_list_key_down(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_KEY_DOWN);
}

#ifdef __WXMSW__
static VALUE evt_wizard_finished(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_WIZARD_FINISHED);
}

#endif //__WXMSW__
static VALUE evt_scrollwin_linedown(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_SCROLLWIN_LINEDOWN);
}

static VALUE evt_scrollwin_top(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_SCROLLWIN_TOP);
}

static VALUE evt_set_focus(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_SET_FOCUS);
}

static VALUE evt_checkbox(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_CHECKBOX_CLICKED);
}

static VALUE evt_left_up(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_LEFT_UP);
}

static VALUE evt_paint(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_PAINT);
}

static VALUE evt_grid_editor_hidden(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_GRID_EDITOR_HIDDEN);
}

static VALUE evt_grid_cell_change(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_GRID_CELL_CHANGE);
}

static VALUE evt_tree_set_info(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TREE_SET_INFO);
}

#ifdef __WXMSW__
static VALUE evt_togglebutton(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TOGGLEBUTTON_CLICKED);
}

#endif //__WXMSW__
static VALUE evt_splitter_sash_pos_changed(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED);
}

static VALUE evt_middle_down(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_MIDDLE_DOWN);
}

static VALUE evt_calendar_day(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_CALENDAR_DAY_CHANGED);
}

static VALUE evt_tool_range(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_COMMAND_TOOL_CLICKED);
}

static VALUE evt_listbox(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LISTBOX_SELECTED);
}

static VALUE evt_find_replace(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_FIND_REPLACE);
}

static VALUE evt_end_session(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_END_SESSION);
}

static VALUE evt_splitter_unsplit(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_SPLITTER_UNSPLIT);
}

static VALUE evt_move(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_MOVE);
}

static VALUE evt_erase_background(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_ERASE_BACKGROUND);
}

static VALUE evt_find_replace_all(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_FIND_REPLACE_ALL);
}

static VALUE evt_grid_col_size(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_GRID_COL_SIZE);
}

static VALUE evt_update_ui(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_UPDATE_UI);
}

static VALUE evt_tree_item_middle_click(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK);
}

static VALUE evt_tree_item_collapsing(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TREE_ITEM_COLLAPSING);
}

static VALUE evt_mousewheel(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_MOUSEWHEEL);
}

static VALUE evt_notebook_page_changing(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING);
}

static VALUE evt_text_url(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TEXT_URL);
}

static VALUE evt_scrollwin_thumbtrack(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_SCROLLWIN_THUMBTRACK);
}

static VALUE evt_grid_editor_created(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_GRID_EDITOR_CREATED);
}

static VALUE evt_tree_item_activated(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TREE_ITEM_ACTIVATED);
}

static VALUE evt_tree_end_label_edit(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TREE_END_LABEL_EDIT);
}

static VALUE evt_splitter_dclick(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_SPLITTER_DOUBLECLICKED);
}

static VALUE evt_list_cache_hint(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_CACHE_HINT);
}

static VALUE evt_checklistbox(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_CHECKLISTBOX_TOGGLED);
}

static VALUE evt_spin_up(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_SCROLL_LINEDOWN);
}

static VALUE evt_grid_cell_left_click(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_GRID_CELL_LEFT_CLICK);
}

#ifdef __WXMSW__
static VALUE evt_taskbar_left_up(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_TASKBAR_LEFT_UP);
}

#endif //__WXMSW__
static VALUE evt_sys_colour_changed(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_SYS_COLOUR_CHANGED);
}

static VALUE evt_key_down(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_KEY_DOWN);
}

static VALUE evt_grid_editor_shown(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_GRID_EDITOR_SHOWN);
}

#ifdef __WXMSW__
static VALUE evt_taskbar_left_down(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_TASKBAR_LEFT_DOWN);
}

#endif //__WXMSW__
#ifdef __WXMSW__
static VALUE evt_sash_dragged_range(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_SASH_DRAGGED);
}

#endif //__WXMSW__
static VALUE evt_grid_row_size(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_GRID_ROW_SIZE);
}

static VALUE evt_mouse_capture_changed(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_MOUSE_CAPTURE_CHANGED);
}

static VALUE evt_calendar_year(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_CALENDAR_YEAR_CHANGED);
}

static VALUE evt_calculate_layout(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_CALCULATE_LAYOUT);
}

static VALUE evt_list_begin_drag(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_BEGIN_DRAG);
}

static VALUE evt_grid_label_left_dclick(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_GRID_LABEL_LEFT_DCLICK);
}

static VALUE evt_tree_item_right_click(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK);
}

#ifdef __WXMSW__
static VALUE evt_taskbar_right_dclick(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_TASKBAR_RIGHT_DCLICK);
}

#endif //__WXMSW__
static VALUE evt_scrollwin(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,0);
}

static VALUE evt_leave_window(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_LEAVE_WINDOW);
}

static VALUE evt_list_set_info(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_SET_INFO);
}

#ifdef __WXMSW__
static VALUE evt_wizard_help(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_WIZARD_HELP);
}

#endif //__WXMSW__
static VALUE evt_key_up(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_KEY_UP);
}

static VALUE evt_right_dclick(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_RIGHT_DCLICK);
}

static VALUE evt_grid_label_right_click(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_GRID_LABEL_RIGHT_CLICK);
}

static VALUE evt_menu_range(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_COMMAND_MENU_SELECTED);
}

static VALUE evt_joy_button_down(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_JOY_BUTTON_DOWN);
}

static VALUE evt_tree_sel_changing(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TREE_SEL_CHANGING);
}

static VALUE evt_find_close(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_FIND_CLOSE);
}

static VALUE evt_splitter_sash_pos_changing(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING);
}

static VALUE evt_scrollwin_bottom(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_SCROLLWIN_TOP);
}

static VALUE evt_drop_files(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_DROP_FILES);
}

static VALUE evt_tree_delete_item(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TREE_DELETE_ITEM);
}

static VALUE evt_tree_begin_label_edit(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT);
}

static VALUE evt_menu_highlight(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_MENU_HIGHLIGHT);
}

static VALUE evt_list_item_selected(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_ITEM_SELECTED);
}

static VALUE evt_slider(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_SLIDER_UPDATED);
}

static VALUE evt_find_next(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_FIND_NEXT);
}

static VALUE evt_radiobutton(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_RADIOBUTTON_SELECTED);
}

static VALUE evt_query_layout_info(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_QUERY_LAYOUT_INFO);
}

#ifdef __WXMSW__
static VALUE evt_wizard_cancel(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_WIZARD_CANCEL);
}

#endif //__WXMSW__
static VALUE evt_tree_sel_changed(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TREE_SEL_CHANGED);
}

static VALUE evt_tree_item_collapsed(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TREE_ITEM_COLLAPSED);
}

static VALUE evt_scrollwin_thumbrelease(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_SCROLLWIN_THUMBRELEASE);
}

static VALUE evt_calendar_weekday_clicked(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_CALENDAR_WEEKDAY_CLICKED);
}

#ifdef __WXMSW__
static VALUE evt_wizard_page_changing(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_WIZARD_PAGE_CHANGING);
}

#endif //__WXMSW__
#ifdef __WXMSW__
static VALUE evt_taskbar_right_down(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_TASKBAR_RIGHT_DOWN);
}

#endif //__WXMSW__
static VALUE evt_tool_rclicked(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TOOL_RCLICKED);
}

static VALUE evt_close(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_CLOSE_WINDOW);
}

static VALUE evt_maximize(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_MAXIMIZE);
}

static VALUE evt_list_col_end_drag(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_COL_END_DRAG);
}

static VALUE evt_radiobox(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_RADIOBOX_SELECTED);
}

static VALUE evt_activate_app(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_ACTIVATE_APP);
}

static VALUE evt_text_maxlen(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TEXT_MAXLEN);
}

static VALUE evt_menu_close(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_MENU_CLOSE);
}

static VALUE evt_query_end_session(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_QUERY_END_SESSION);
}

static VALUE evt_list_item_deselected(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_ITEM_DESELECTED);
}

static VALUE evt_tool(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TOOL_CLICKED);
}

static VALUE evt_list_delete_item(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_DELETE_ITEM);
}

static VALUE evt_mouse_events(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,0);
}

static VALUE evt_combobox(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_COMBOBOX_SELECTED);
}

static VALUE evt_list_col_click(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LIST_COL_CLICK);
}

static VALUE evt_listbox_dclick(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_LISTBOX_DOUBLECLICKED);
}

static VALUE evt_choice(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_CHOICE_SELECTED);
}

static VALUE evt_tree_begin_rdrag(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_TREE_BEGIN_RDRAG);
}

static VALUE evt_socket(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_SOCKET);
}

static VALUE evt_calendar(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_CALENDAR_DOUBLECLICKED);
}

static VALUE evt_scrollbar(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_COMMAND_SCROLLBAR_UPDATED);
}

static VALUE evt_menu_highlight_all(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_MENU_HIGHLIGHT);
}

static VALUE evt_update_ui_range(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_UPDATE_UI);
}

static VALUE evt_help(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_with_id(argc,argv,self,wxEVT_HELP);
}

static VALUE evt_joy_button_up(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_JOY_BUTTON_UP);
}

#ifdef __WXMSW__
static VALUE evt_taskbar_move(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_TASKBAR_MOVE);
}

#endif //__WXMSW__
static VALUE evt_kill_focus(int argc, VALUE *argv, VALUE self)
{
	return internal_evt_no_parameters(argc,argv,self,wxEVT_KILL_FOCUS);
}

extern "C" {
void Init_wxEvents2()
{
	rb_define_method(cWxEvtHandler.klass, "evt_tree_end_drag", VALUEFUNC(evt_tree_end_drag),-1);
#ifdef __WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_sash_dragged", VALUEFUNC(evt_sash_dragged),-1);
#endif //__WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_middle_dclick", VALUEFUNC(evt_middle_dclick),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_grid_cell_right_dclick", VALUEFUNC(evt_grid_cell_right_dclick),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_tree_key_down", VALUEFUNC(evt_tree_key_down),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_list_insert_item", VALUEFUNC(evt_list_insert_item),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_right_up", VALUEFUNC(evt_right_up),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_tool_rclicked_range", VALUEFUNC(evt_tool_rclicked_range),-1);
#ifdef __WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_dialup_connected", VALUEFUNC(evt_dialup_connected),-1);
#endif //__WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_help_range", VALUEFUNC(evt_help_range),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_grid_label_right_dclick", VALUEFUNC(evt_grid_label_right_dclick),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_grid_select_cell", VALUEFUNC(evt_grid_select_cell),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_spinctrl", VALUEFUNC(evt_spinctrl),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_scrollwin_pagedown", VALUEFUNC(evt_scrollwin_pagedown),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_list_item_middle_click", VALUEFUNC(evt_list_item_middle_click),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_context_menu", VALUEFUNC(evt_context_menu),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_list_col_right_click", VALUEFUNC(evt_list_col_right_click),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_joy_zmove", VALUEFUNC(evt_joy_zmove),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_char", VALUEFUNC(evt_char),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_grid_cell_left_dclick", VALUEFUNC(evt_grid_cell_left_dclick),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_tree_get_info", VALUEFUNC(evt_tree_get_info),-1);
#ifdef __WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_taskbar_right_up", VALUEFUNC(evt_taskbar_right_up),-1);
#endif //__WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_list_item_right_click", VALUEFUNC(evt_list_item_right_click),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_list_delete_all_items", VALUEFUNC(evt_list_delete_all_items),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_scrollwin_pageup", VALUEFUNC(evt_scrollwin_pageup),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_scrollwin_lineup", VALUEFUNC(evt_scrollwin_lineup),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_list_begin_rdrag", VALUEFUNC(evt_list_begin_rdrag),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_left_dclick", VALUEFUNC(evt_left_dclick),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_find", VALUEFUNC(evt_find),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_list_item_focused", VALUEFUNC(evt_list_item_focused),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_spin", VALUEFUNC(evt_spin),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_list_get_info", VALUEFUNC(evt_list_get_info),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_size", VALUEFUNC(evt_size),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_right_down", VALUEFUNC(evt_right_down),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_enter_window", VALUEFUNC(evt_enter_window),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_activate", VALUEFUNC(evt_activate),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_idle", VALUEFUNC(evt_idle),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_grid_cell_right_click", VALUEFUNC(evt_grid_cell_right_click),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_grid_label_left_click", VALUEFUNC(evt_grid_label_left_click),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_tree_item_expanded", VALUEFUNC(evt_tree_item_expanded),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_text", VALUEFUNC(evt_text),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_motion", VALUEFUNC(evt_motion),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_text_enter", VALUEFUNC(evt_text_enter),-1);
#ifdef __WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_wizard_page_changed", VALUEFUNC(evt_wizard_page_changed),-1);
#endif //__WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_tree_item_expanding", VALUEFUNC(evt_tree_item_expanding),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_list_item_activated", VALUEFUNC(evt_list_item_activated),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_list_col_dragging", VALUEFUNC(evt_list_col_dragging),-1);
#ifdef __WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_dialup_disconnected", VALUEFUNC(evt_dialup_disconnected),-1);
#endif //__WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_list_col_begin_drag", VALUEFUNC(evt_list_col_begin_drag),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_end_process", VALUEFUNC(evt_end_process),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_calendar_month", VALUEFUNC(evt_calendar_month),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_tree_begin_drag", VALUEFUNC(evt_tree_begin_drag),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_grid_range_select", VALUEFUNC(evt_grid_range_select),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_list_end_label_edit", VALUEFUNC(evt_list_end_label_edit),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_init_dialog", VALUEFUNC(evt_init_dialog),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_notebook_page_changed", VALUEFUNC(evt_notebook_page_changed),-1);
#ifdef __WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_taskbar_left_dclick", VALUEFUNC(evt_taskbar_left_dclick),-1);
#endif //__WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_list_begin_label_edit", VALUEFUNC(evt_list_begin_label_edit),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_button", VALUEFUNC(evt_button),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_calendar_sel_changed", VALUEFUNC(evt_calendar_sel_changed),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_menu", VALUEFUNC(evt_menu),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_middle_up", VALUEFUNC(evt_middle_up),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_spin_down", VALUEFUNC(evt_spin_down),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_left_down", VALUEFUNC(evt_left_down),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_iconize", VALUEFUNC(evt_iconize),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_tool_enter", VALUEFUNC(evt_tool_enter),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_joy_move", VALUEFUNC(evt_joy_move),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_menu_open", VALUEFUNC(evt_menu_open),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_list_key_down", VALUEFUNC(evt_list_key_down),-1);
#ifdef __WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_wizard_finished", VALUEFUNC(evt_wizard_finished),-1);
#endif //__WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_scrollwin_linedown", VALUEFUNC(evt_scrollwin_linedown),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_scrollwin_top", VALUEFUNC(evt_scrollwin_top),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_set_focus", VALUEFUNC(evt_set_focus),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_checkbox", VALUEFUNC(evt_checkbox),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_left_up", VALUEFUNC(evt_left_up),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_paint", VALUEFUNC(evt_paint),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_grid_editor_hidden", VALUEFUNC(evt_grid_editor_hidden),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_grid_cell_change", VALUEFUNC(evt_grid_cell_change),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_tree_set_info", VALUEFUNC(evt_tree_set_info),-1);
#ifdef __WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_togglebutton", VALUEFUNC(evt_togglebutton),-1);
#endif //__WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_splitter_sash_pos_changed", VALUEFUNC(evt_splitter_sash_pos_changed),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_middle_down", VALUEFUNC(evt_middle_down),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_calendar_day", VALUEFUNC(evt_calendar_day),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_tool_range", VALUEFUNC(evt_tool_range),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_listbox", VALUEFUNC(evt_listbox),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_find_replace", VALUEFUNC(evt_find_replace),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_end_session", VALUEFUNC(evt_end_session),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_splitter_unsplit", VALUEFUNC(evt_splitter_unsplit),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_move", VALUEFUNC(evt_move),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_erase_background", VALUEFUNC(evt_erase_background),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_find_replace_all", VALUEFUNC(evt_find_replace_all),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_grid_col_size", VALUEFUNC(evt_grid_col_size),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_update_ui", VALUEFUNC(evt_update_ui),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_tree_item_middle_click", VALUEFUNC(evt_tree_item_middle_click),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_tree_item_collapsing", VALUEFUNC(evt_tree_item_collapsing),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_mousewheel", VALUEFUNC(evt_mousewheel),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_notebook_page_changing", VALUEFUNC(evt_notebook_page_changing),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_text_url", VALUEFUNC(evt_text_url),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_scrollwin_thumbtrack", VALUEFUNC(evt_scrollwin_thumbtrack),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_grid_editor_created", VALUEFUNC(evt_grid_editor_created),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_tree_item_activated", VALUEFUNC(evt_tree_item_activated),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_tree_end_label_edit", VALUEFUNC(evt_tree_end_label_edit),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_splitter_dclick", VALUEFUNC(evt_splitter_dclick),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_list_cache_hint", VALUEFUNC(evt_list_cache_hint),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_checklistbox", VALUEFUNC(evt_checklistbox),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_spin_up", VALUEFUNC(evt_spin_up),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_grid_cell_left_click", VALUEFUNC(evt_grid_cell_left_click),-1);
#ifdef __WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_taskbar_left_up", VALUEFUNC(evt_taskbar_left_up),-1);
#endif //__WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_sys_colour_changed", VALUEFUNC(evt_sys_colour_changed),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_key_down", VALUEFUNC(evt_key_down),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_grid_editor_shown", VALUEFUNC(evt_grid_editor_shown),-1);
#ifdef __WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_taskbar_left_down", VALUEFUNC(evt_taskbar_left_down),-1);
#endif //__WXMSW__
#ifdef __WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_sash_dragged_range", VALUEFUNC(evt_sash_dragged_range),-1);
#endif //__WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_grid_row_size", VALUEFUNC(evt_grid_row_size),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_mouse_capture_changed", VALUEFUNC(evt_mouse_capture_changed),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_calendar_year", VALUEFUNC(evt_calendar_year),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_calculate_layout", VALUEFUNC(evt_calculate_layout),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_list_begin_drag", VALUEFUNC(evt_list_begin_drag),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_grid_label_left_dclick", VALUEFUNC(evt_grid_label_left_dclick),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_tree_item_right_click", VALUEFUNC(evt_tree_item_right_click),-1);
#ifdef __WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_taskbar_right_dclick", VALUEFUNC(evt_taskbar_right_dclick),-1);
#endif //__WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_scrollwin", VALUEFUNC(evt_scrollwin),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_leave_window", VALUEFUNC(evt_leave_window),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_list_set_info", VALUEFUNC(evt_list_set_info),-1);
#ifdef __WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_wizard_help", VALUEFUNC(evt_wizard_help),-1);
#endif //__WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_key_up", VALUEFUNC(evt_key_up),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_right_dclick", VALUEFUNC(evt_right_dclick),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_grid_label_right_click", VALUEFUNC(evt_grid_label_right_click),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_menu_range", VALUEFUNC(evt_menu_range),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_joy_button_down", VALUEFUNC(evt_joy_button_down),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_tree_sel_changing", VALUEFUNC(evt_tree_sel_changing),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_find_close", VALUEFUNC(evt_find_close),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_splitter_sash_pos_changing", VALUEFUNC(evt_splitter_sash_pos_changing),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_scrollwin_bottom", VALUEFUNC(evt_scrollwin_bottom),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_drop_files", VALUEFUNC(evt_drop_files),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_tree_delete_item", VALUEFUNC(evt_tree_delete_item),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_tree_begin_label_edit", VALUEFUNC(evt_tree_begin_label_edit),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_menu_highlight", VALUEFUNC(evt_menu_highlight),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_list_item_selected", VALUEFUNC(evt_list_item_selected),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_slider", VALUEFUNC(evt_slider),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_find_next", VALUEFUNC(evt_find_next),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_radiobutton", VALUEFUNC(evt_radiobutton),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_query_layout_info", VALUEFUNC(evt_query_layout_info),-1);
#ifdef __WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_wizard_cancel", VALUEFUNC(evt_wizard_cancel),-1);
#endif //__WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_tree_sel_changed", VALUEFUNC(evt_tree_sel_changed),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_tree_item_collapsed", VALUEFUNC(evt_tree_item_collapsed),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_scrollwin_thumbrelease", VALUEFUNC(evt_scrollwin_thumbrelease),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_calendar_weekday_clicked", VALUEFUNC(evt_calendar_weekday_clicked),-1);
#ifdef __WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_wizard_page_changing", VALUEFUNC(evt_wizard_page_changing),-1);
#endif //__WXMSW__
#ifdef __WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_taskbar_right_down", VALUEFUNC(evt_taskbar_right_down),-1);
#endif //__WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_tool_rclicked", VALUEFUNC(evt_tool_rclicked),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_close", VALUEFUNC(evt_close),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_maximize", VALUEFUNC(evt_maximize),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_list_col_end_drag", VALUEFUNC(evt_list_col_end_drag),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_radiobox", VALUEFUNC(evt_radiobox),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_activate_app", VALUEFUNC(evt_activate_app),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_text_maxlen", VALUEFUNC(evt_text_maxlen),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_menu_close", VALUEFUNC(evt_menu_close),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_query_end_session", VALUEFUNC(evt_query_end_session),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_list_item_deselected", VALUEFUNC(evt_list_item_deselected),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_tool", VALUEFUNC(evt_tool),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_list_delete_item", VALUEFUNC(evt_list_delete_item),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_mouse_events", VALUEFUNC(evt_mouse_events),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_combobox", VALUEFUNC(evt_combobox),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_list_col_click", VALUEFUNC(evt_list_col_click),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_listbox_dclick", VALUEFUNC(evt_listbox_dclick),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_choice", VALUEFUNC(evt_choice),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_tree_begin_rdrag", VALUEFUNC(evt_tree_begin_rdrag),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_socket", VALUEFUNC(evt_socket),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_calendar", VALUEFUNC(evt_calendar),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_scrollbar", VALUEFUNC(evt_scrollbar),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_menu_highlight_all", VALUEFUNC(evt_menu_highlight_all),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_update_ui_range", VALUEFUNC(evt_update_ui_range),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_help", VALUEFUNC(evt_help),-1);
	rb_define_method(cWxEvtHandler.klass, "evt_joy_button_up", VALUEFUNC(evt_joy_button_up),-1);
#ifdef __WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_taskbar_move", VALUEFUNC(evt_taskbar_move),-1);
#endif //__WXMSW__
	rb_define_method(cWxEvtHandler.klass, "evt_kill_focus", VALUEFUNC(evt_kill_focus),-1);
}
}
