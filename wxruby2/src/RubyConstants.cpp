/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIG_DIRECTORS

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif


/* ruby.swg */
/* Implementation : RUBY */
#define SWIGRUBY 1

#include "ruby.h"

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

#define NUM2USHRT(n) (\
    (0 <= NUM2UINT(n) && NUM2UINT(n) <= USHRT_MAX)\
    ? (unsigned short) NUM2UINT(n) \
    : (rb_raise(rb_eArgError, "integer %d out of range of `unsigned short'",\
               NUM2UINT(n)), (short)0)\
)

#define NUM2SHRT(n) (\
    (SHRT_MIN <= NUM2INT(n) && NUM2INT(n) <= SHRT_MAX)\
    ? (short)NUM2INT(n)\
    : (rb_raise(rb_eArgError, "integer %d out of range of `short'",\
               NUM2INT(n)), (short)0)\
)

/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
} swig_class;

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING(RB_STRING_VALUE(s))->ptr
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING(RB_STRING_VALUE(s))->len
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { rb_raise(rb_eRuntimeError, (char *) msg ); } else


/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  if (!ti->clientdata) {
    swig_cast_info *cast = ti->cast;
    /* if (ti->clientdata == clientdata) return; */
    ti->clientdata = clientdata;
    
    while (cast) {
      if (!cast->converter)
	SWIG_TypeClientData(cast->type, clientdata);
      cast = cast->next;
    }
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Ruby_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Ruby_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Ruby_MustGetPtr(p, type, argnum, flags)
#define SWIG_GetModule(clientdata) \
  SWIG_Ruby_GetModule()
#define SWIG_SetModule(clientdata, pointer) \
  SWIG_Ruby_SetModule(pointer)

/* Ruby-specific SWIG API */

#define SWIG_InitRuntime() \
  SWIG_Ruby_InitRuntime()
#define SWIG_define_class(ty) \
  SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty) \
  SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value) \
  SWIG_Ruby_MangleStr(value)
#define SWIG_CheckConvert(value, ty) \
  SWIG_Ruby_CheckConvert(value, ty)
#define SWIG_NewPackedObj(ptr, sz, ty) \
  SWIG_Ruby_NewPackedObj(ptr, sz, ty)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)

/* rubydef.swg */
#ifdef __cplusplus
extern "C" {
#endif

static VALUE _mSWIG = Qnil;
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Initialize Ruby runtime support */
static void
SWIG_Ruby_InitRuntime(void)
{
    if (_mSWIG == Qnil) {
        _mSWIG = rb_define_module("SWIG");
    }
}

/* Define Ruby class for C type */
static void
SWIG_Ruby_define_class(swig_type_info *type)
{
    VALUE klass;
    char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    if (NIL_P(_cSWIG_Pointer)) {
	_cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
	rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
    }
    klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
    free((void *) klass_name);
}

/* Create a new pointer object */
static VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int own)
{
    char *klass_name;
    swig_class *sklass;
    VALUE klass;
    VALUE obj;
    
    if (!ptr)
	return Qnil;
    
    if (type->clientdata) {
      sklass = (swig_class *) type->clientdata;
      obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), (own ? VOIDFUNC(sklass->destroy) : 0), ptr);
    } else {
      klass_name = (char *) malloc(4 + strlen(type->name) + 1);
      sprintf(klass_name, "TYPE%s", type->name);
      klass = rb_const_get(_mSWIG, rb_intern(klass_name));
      free((void *) klass_name);
      obj = Data_Wrap_Struct(klass, 0, 0, ptr);
    }
    rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
    return obj;
}

/* Create a new class instance (always owned) */
static VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
    VALUE obj;
    swig_class *sklass = (swig_class *) type->clientdata;
    obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
    rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
    return obj;
}

/* Get type mangle from class name */
static SWIGINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "__swigtype__");
  return StringValuePtr(stype);
}

/* Convert a pointer value */
static int
SWIG_Ruby_ConvertPtr(VALUE obj, void **ptr, swig_type_info *ty, int flags)
{
  char *c;
  swig_cast_info *tc;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return 0;
  } else {
    Data_Get_Struct(obj, void, *ptr);
  }
  
  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
        if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
          if (*ptr == 0)
            rb_raise(rb_eRuntimeError, "This %s already released", ty->str);
          return 0;
        }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      if (flags & SWIG_POINTER_EXCEPTION)
        rb_raise(rb_eTypeError, "Expected %s", ty->str);
      else
        return -1;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      if (flags & SWIG_POINTER_EXCEPTION)
        rb_raise(rb_eTypeError, "Expected %s", ty->str);
      else
        return -1;
    }
    *ptr = SWIG_TypeCast(tc, *ptr);
  }
  return 0;
}

/* Convert a pointer value, signal an exception on a type mismatch */
static SWIGINLINE void *
SWIG_Ruby_MustGetPtr(VALUE obj, swig_type_info *ty, int argnum, int flags)
{
  void *result;
  SWIG_ConvertPtr(obj, &result, ty, flags | SWIG_POINTER_EXCEPTION);
  return result;
}

/* Check convert */
static SWIGINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c)
    return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

static VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
static void
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return;

type_error:

  if (flags) {
    if (ty) {
      rb_raise(rb_eTypeError, "Type error. Expected %s", ty->name);
    } else {
      rb_raise(rb_eTypeError, "Expected a pointer");
    }
  }
}

static swig_module_info *SWIG_Ruby_GetModule() {
    VALUE pointer;
    swig_module_info *ret = 0;

   /* first check if pointer already created */
    pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
    if (pointer != Qnil) {
      Data_Get_Struct(pointer, swig_module_info, ret);
    }
    return ret;
}

static void SWIG_Ruby_SetModule(swig_module_info *pointer) {
      /* register a new class */
      VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
      /* create and store the structure pointer to a global variable */
      swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
      rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

#ifdef __cplusplus
}
#endif



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_form_ops_t swig_types[0]
#define SWIGTYPE_p_int swig_types[1]
#define SWIGTYPE_p_unsigned_long swig_types[2]
#define SWIGTYPE_p_wxPaperSize swig_types[3]
#define SWIGTYPE_p_wxPoint swig_types[4]
#define SWIGTYPE_p_wxSize swig_types[5]
#define SWIGTYPE_p_wxString swig_types[6]
static swig_type_info *swig_types[7];
static swig_module_info swig_module = {swig_types, 7, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_wxRubyConstants
#define SWIG_name    "WxRubyConstants"

static VALUE mWxRubyConstants;

static void SWIG_AsVal(VALUE obj, int *val)
{
    *val = (int) NUM2INT(obj);
}


#  undef GetClassName
#  undef GetClassInfo
#  undef Yield
#  undef GetMessage
#  undef FindWindow
#  undef GetCharWidth
#  undef DrawText
#  undef StartDoc
#  undef CreateDialog
#  undef Sleep
#  undef _
#  undef Connect
#  undef connect

#include <wx/wx.h>
#include <wx/dcbuffer.h>

void GcMarkDeleted(void *);
bool GcIsDeleted(void *);
void GcMapPtrToValue(void *ptr, VALUE val);
VALUE GcGetValueFromPtr(void *ptr);
void GcFreefunc(void *);

extern VALUE mWxruby2;


#include <wx/datetime.h>


//NO_CLASS - This tells fixmodule not to expect a class

#include <wx/gdicmn.h>
#include <wx/fdrepdlg.h>
#include <wx/artprov.h>

//
// All of these exist on only one platform, so in those
// cases I'm defining them so the compiler doesn't freak out
//
#ifndef __WXGTK__
#define    wxCURSOR_DEFAULT 0
#endif
#ifndef __WXMAC__
#define        wxCURSOR_COPY_ARROW 0
#endif
#ifndef __X__
    // Not yet implemented for Windows
#define    wxCURSOR_CROSS_REVERSE 0
#define    wxCURSOR_DOUBLE_ARROW 0
#define    wxCURSOR_BASED_ARROW_UP 0
#define    wxCURSOR_BASED_ARROW_DOWN 0
#endif // X11


/***********************************************************************
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Ruby extensions.
 *
 * Author : Lyle Johnson (lyle@users.sourceforge.net)
 *          Based on the original Python implementation by
 *          Mark Rose (mrose@stm.lbl.gov).
 ************************************************************************/

#ifdef __cplusplus

#include <string>

namespace Swig {
  struct body_args {
    VALUE recv;
    ID id;
    int argc;
    VALUE *argv;
  };

  /* Base class for director exceptions */
  class DirectorException {
    protected:
      VALUE swig_error;
    protected:
      DirectorException(VALUE error=Qnil) : swig_error(error) {}
    public:
      VALUE getType() const  { 
        return CLASS_OF(swig_error); 
      }
      VALUE getError() const {
        return swig_error;
      }
      virtual ~DirectorException() {}
  };

  /* Type mismatch in the return value from a Ruby method call */
  class DirectorTypeMismatchException : public Swig::DirectorException {
    public:
      DirectorTypeMismatchException(const char *msg="") {
        VALUE str = rb_str_new2("Swig director type mismatch: ");
        rb_str_concat(str, rb_str_new2(msg));
        swig_error = rb_exc_new3(rb_eTypeError, str);
      }
  };

  /* Any Ruby exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException {
    public:
      DirectorMethodException(VALUE error) : Swig::DirectorException(error) {}
  };

  /* Attempted to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException {};


  /* Simple thread abstraction for pthreads on win32 */
#ifdef __THREAD__
#define __PTHREAD__
#if defined(_WIN32) || defined(__WIN32__)
#define pthread_mutex_lock EnterCriticalSection
#define pthread_mutex_unlock LeaveCriticalSection
#define pthread_mutex_t CRITICAL_SECTION
#define MUTEX_INIT(var) CRITICAL_SECTION var
#else
#include <pthread.h>
#define MUTEX_INIT(var) pthread_mutex_t var = PTHREAD_MUTEX_INITIALIZER 
#endif
#endif

  /* director base class */
  class Director {
    private:
      /* pointer to the wrapped Ruby object */
      VALUE swig_self;
      /* flag indicating whether the object is owned by Ruby or c++ */
      mutable bool swig_disown_flag;
      /* shared flag for breaking recursive director calls */
      static bool swig_up;

#ifdef __PTHREAD__
      /* locks for sharing the swig_up flag in a threaded environment */
      static pthread_mutex_t swig_mutex_up;
      static bool swig_mutex_active;
      static pthread_t swig_mutex_thread;
#endif

      /* reset the swig_up flag once the routing direction has been determined */
#ifdef __PTHREAD__
      void swig_clear_up() const { 
        Swig::Director::swig_up = false; 
        Swig::Director::swig_mutex_active = false;
        pthread_mutex_unlock(&swig_mutex_up);
      }
#else
      void swig_clear_up() const { 
        Swig::Director::swig_up = false; 
      }
#endif

    public:
      /* wrap a Ruby object, optionally taking ownership */
      Director(VALUE self) : swig_self(self), swig_disown_flag(false) {
      }

      /* discard our reference at destruction */
      virtual ~Director() {
      }

      /* return a pointer to the wrapped Ruby object */
      VALUE swig_get_self() const { 
        return swig_self; 
      }

      /* get the swig_up flag to determine if the method call should be routed
       * to the c++ base class or through the wrapped Ruby object
       */
#ifdef __PTHREAD__
      bool swig_get_up() const { 
        if (Swig::Director::swig_mutex_active) {
          if (pthread_equal(Swig::Director::swig_mutex_thread, pthread_self())) {
            bool up = swig_up;
            swig_clear_up();
            return up;
          }
        }
        return false;
      }
#else 
      bool swig_get_up() const { 
        bool up = swig_up;
        swig_up = false;
        return up;
      }
#endif

      /* set the swig_up flag if the next method call should be directed to
       * the c++ base class rather than the wrapped Ruby object
       */
#ifdef __PTHREAD__
      void swig_set_up() const { 
        pthread_mutex_lock(&Swig::Director::swig_mutex_up);
        Swig::Director::swig_mutex_thread = pthread_self();
        Swig::Director::swig_mutex_active = true;
        Swig::Director::swig_up = true;
      }
#else 
      void swig_set_up() const { 
        Swig::Director::swig_up = true; 
      }
#endif

      /* acquire ownership of the wrapped Ruby object (the sense of "disown"
       * is from Ruby) */
      void swig_disown() const { 
        if (!swig_disown_flag) { 
          swig_disown_flag = true;
        } 
      }
  };

//  bool Swig::Director::swig_up = false;

#ifdef __PTHREAD__
  MUTEX_INIT(Swig::Director::swig_mutex_up);
  pthread_t Swig::Director::swig_mutex_thread;
  bool Swig::Director::swig_mutex_active = false;
#endif

}

#endif /* __cplusplus */




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "RubyConstants.h"


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_form_ops_t = {"_p_form_ops_t", "enum form_ops_t *|form_ops_t *", 0, 0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|wxPrintQuality *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *|VALUE *", 0, 0, 0};
static swig_type_info _swigt__p_wxPaperSize = {"_p_wxPaperSize", "enum wxPaperSize *|wxPaperSize *", 0, 0, 0};
static swig_type_info _swigt__p_wxPoint = {"_p_wxPoint", "wxPoint *", 0, 0, 0};
static swig_type_info _swigt__p_wxSize = {"_p_wxSize", "wxSize *", 0, 0, 0};
static swig_type_info _swigt__p_wxString = {"_p_wxString", "wxString *|wxArtClient *", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_form_ops_t,
  &_swigt__p_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_wxPaperSize,
  &_swigt__p_wxPoint,
  &_swigt__p_wxSize,
  &_swigt__p_wxString,
};

static swig_cast_info _swigc__p_form_ops_t[] = {  {&_swigt__p_form_ops_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPaperSize[] = {  {&_swigt__p_wxPaperSize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPoint[] = {  {&_swigt__p_wxPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSize[] = {  {&_swigt__p_wxSize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxString[] = {  {&_swigt__p_wxString, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_form_ops_t,
  _swigc__p_int,
  _swigc__p_unsigned_long,
  _swigc__p_wxPaperSize,
  _swigc__p_wxPoint,
  _swigc__p_wxSize,
  _swigc__p_wxString,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#endif

SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  swig_type_info *type, *ret;
  swig_cast_info *cast;
  size_t i;
  swig_module_info *module_head;
  static int init_run = 0;

  clientdata = clientdata;

  if (init_run) return;
  init_run = 1;

  /* Initialize the swig_module */
  swig_module.type_initial = swig_type_initial;
  swig_module.cast_initial = swig_cast_initial;

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (module_head) {
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  } else {
    /* This is the first module loaded */
    swig_module.next = &swig_module;
    SWIG_SetModule(clientdata, &swig_module);
  }
		 
  /* Now work on filling in swig_module.types */
  for (i = 0; i < swig_module.size; ++i) {
    type = 0;

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
      if (swig_module.type_initial[i]->clientdata) type->clientdata = swig_module.type_initial[i]->clientdata;
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
      }
      if (ret && type == swig_module.type_initial[i]) {
        cast->type = ret;
        ret = 0;
      }
      
      if (!ret) {
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }

      cast++;
    }

    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_wxRubyConstants(void) {
static bool initialized;
if(initialized) return;
initialized = true;
    int i;
    
    SWIG_InitRuntime();
mWxRubyConstants = mWxruby2;
    
    SWIG_InitializeModule(0);
    for (i = 0; i < swig_module.size; i++) {
        SWIG_define_class(swig_module.types[i]);
    }
    
    rb_define_const(mWxRubyConstants,"UNKNOWN_PLATFORM", INT2NUM(wxUNKNOWN_PLATFORM));
    rb_define_const(mWxRubyConstants,"CURSES", INT2NUM(wxCURSES));
    rb_define_const(mWxRubyConstants,"XVIEW_X", INT2NUM(wxXVIEW_X));
    rb_define_const(mWxRubyConstants,"MOTIF_X", INT2NUM(wxMOTIF_X));
    rb_define_const(mWxRubyConstants,"COSE_X", INT2NUM(wxCOSE_X));
    rb_define_const(mWxRubyConstants,"NEXTSTEP", INT2NUM(wxNEXTSTEP));
    rb_define_const(mWxRubyConstants,"MAC", INT2NUM(wxMAC));
    rb_define_const(mWxRubyConstants,"MAC_DARWIN", INT2NUM(wxMAC_DARWIN));
    rb_define_const(mWxRubyConstants,"BEOS", INT2NUM(wxBEOS));
    rb_define_const(mWxRubyConstants,"GTK", INT2NUM(wxGTK));
    rb_define_const(mWxRubyConstants,"GTK_WIN32", INT2NUM(wxGTK_WIN32));
    rb_define_const(mWxRubyConstants,"GTK_OS2", INT2NUM(wxGTK_OS2));
    rb_define_const(mWxRubyConstants,"GTK_BEOS", INT2NUM(wxGTK_BEOS));
    rb_define_const(mWxRubyConstants,"GEOS", INT2NUM(wxGEOS));
    rb_define_const(mWxRubyConstants,"OS2_PM", INT2NUM(wxOS2_PM));
    rb_define_const(mWxRubyConstants,"WINDOWS", INT2NUM(wxWINDOWS));
    rb_define_const(mWxRubyConstants,"MICROWINDOWS", INT2NUM(wxMICROWINDOWS));
    rb_define_const(mWxRubyConstants,"PENWINDOWS", INT2NUM(wxPENWINDOWS));
    rb_define_const(mWxRubyConstants,"WINDOWS_NT", INT2NUM(wxWINDOWS_NT));
    rb_define_const(mWxRubyConstants,"WIN32S", INT2NUM(wxWIN32S));
    rb_define_const(mWxRubyConstants,"WIN95", INT2NUM(wxWIN95));
    rb_define_const(mWxRubyConstants,"WIN386", INT2NUM(wxWIN386));
    rb_define_const(mWxRubyConstants,"MGL_UNIX", INT2NUM(wxMGL_UNIX));
    rb_define_const(mWxRubyConstants,"MGL_X", INT2NUM(wxMGL_X));
    rb_define_const(mWxRubyConstants,"MGL_WIN32", INT2NUM(wxMGL_WIN32));
    rb_define_const(mWxRubyConstants,"MGL_OS2", INT2NUM(wxMGL_OS2));
    rb_define_const(mWxRubyConstants,"MGL_DOS", INT2NUM(wxMGL_DOS));
    rb_define_const(mWxRubyConstants,"WINDOWS_OS2", INT2NUM(wxWINDOWS_OS2));
    rb_define_const(mWxRubyConstants,"UNIX", INT2NUM(wxUNIX));
    rb_define_const(mWxRubyConstants,"X11", INT2NUM(wxX11));
    rb_define_const(mWxRubyConstants,"CENTRE", INT2NUM(wxCENTRE));
    rb_define_const(mWxRubyConstants,"CENTER", INT2NUM(wxCENTER));
    rb_define_const(mWxRubyConstants,"CENTER_FRAME", INT2NUM(0x0000));
    rb_define_const(mWxRubyConstants,"CENTRE_ON_SCREEN", INT2NUM(0x0002));
    rb_define_const(mWxRubyConstants,"HORIZONTAL", INT2NUM(wxHORIZONTAL));
    rb_define_const(mWxRubyConstants,"VERTICAL", INT2NUM(wxVERTICAL));
    rb_define_const(mWxRubyConstants,"BOTH", INT2NUM(wxBOTH));
    rb_define_const(mWxRubyConstants,"RIGHT", INT2NUM(wxRIGHT));
    rb_define_const(mWxRubyConstants,"UP", INT2NUM(wxUP));
    rb_define_const(mWxRubyConstants,"DOWN", INT2NUM(wxDOWN));
    rb_define_const(mWxRubyConstants,"TOP", INT2NUM(wxTOP));
    rb_define_const(mWxRubyConstants,"BOTTOM", INT2NUM(wxBOTTOM));
    rb_define_const(mWxRubyConstants,"NORTH", INT2NUM(wxNORTH));
    rb_define_const(mWxRubyConstants,"SOUTH", INT2NUM(wxSOUTH));
    rb_define_const(mWxRubyConstants,"WEST", INT2NUM(wxWEST));
    rb_define_const(mWxRubyConstants,"EAST", INT2NUM(wxEAST));
    rb_define_const(mWxRubyConstants,"ALL", INT2NUM(wxALL));
    rb_define_const(mWxRubyConstants,"ALIGN_NOT", INT2NUM(wxALIGN_NOT));
    rb_define_const(mWxRubyConstants,"ALIGN_CENTER_HORIZONTAL", INT2NUM(wxALIGN_CENTER_HORIZONTAL));
    rb_define_const(mWxRubyConstants,"ALIGN_CENTRE_HORIZONTAL", INT2NUM(wxALIGN_CENTRE_HORIZONTAL));
    rb_define_const(mWxRubyConstants,"ALIGN_LEFT", INT2NUM(wxALIGN_LEFT));
    rb_define_const(mWxRubyConstants,"ALIGN_TOP", INT2NUM(wxALIGN_TOP));
    rb_define_const(mWxRubyConstants,"ALIGN_RIGHT", INT2NUM(wxALIGN_RIGHT));
    rb_define_const(mWxRubyConstants,"ALIGN_BOTTOM", INT2NUM(wxALIGN_BOTTOM));
    rb_define_const(mWxRubyConstants,"ALIGN_CENTER_VERTICAL", INT2NUM(wxALIGN_CENTER_VERTICAL));
    rb_define_const(mWxRubyConstants,"ALIGN_CENTRE_VERTICAL", INT2NUM(wxALIGN_CENTRE_VERTICAL));
    rb_define_const(mWxRubyConstants,"ALIGN_CENTER", INT2NUM(wxALIGN_CENTER));
    rb_define_const(mWxRubyConstants,"ALIGN_CENTRE", INT2NUM(wxALIGN_CENTRE));
    rb_define_const(mWxRubyConstants,"ALIGN_MASK", INT2NUM(wxALIGN_MASK));
    rb_define_const(mWxRubyConstants,"STRETCH_NOT", INT2NUM(wxSTRETCH_NOT));
    rb_define_const(mWxRubyConstants,"SHRINK", INT2NUM(wxSHRINK));
    rb_define_const(mWxRubyConstants,"GROW", INT2NUM(wxGROW));
    rb_define_const(mWxRubyConstants,"EXPAND", INT2NUM(wxEXPAND));
    rb_define_const(mWxRubyConstants,"SHAPED", INT2NUM(wxSHAPED));
    rb_define_const(mWxRubyConstants,"ADJUST_MINSIZE", INT2NUM(wxADJUST_MINSIZE));
    rb_define_const(mWxRubyConstants,"TILE", INT2NUM(wxTILE));
    rb_define_const(mWxRubyConstants,"BORDER_DEFAULT", INT2NUM(wxBORDER_DEFAULT));
    rb_define_const(mWxRubyConstants,"BORDER_NONE", INT2NUM(wxBORDER_NONE));
    rb_define_const(mWxRubyConstants,"BORDER_STATIC", INT2NUM(wxBORDER_STATIC));
    rb_define_const(mWxRubyConstants,"BORDER_SIMPLE", INT2NUM(wxBORDER_SIMPLE));
    rb_define_const(mWxRubyConstants,"BORDER_RAISED", INT2NUM(wxBORDER_RAISED));
    rb_define_const(mWxRubyConstants,"BORDER_SUNKEN", INT2NUM(wxBORDER_SUNKEN));
    rb_define_const(mWxRubyConstants,"BORDER_DOUBLE", INT2NUM(wxBORDER_DOUBLE));
    rb_define_const(mWxRubyConstants,"BORDER_MASK", INT2NUM(wxBORDER_MASK));
    rb_define_const(mWxRubyConstants,"OPEN", INT2NUM(wxOPEN));
    rb_define_const(mWxRubyConstants,"SAVE", INT2NUM(wxSAVE));
    rb_define_const(mWxRubyConstants,"OVERWRITE_PROMPT", INT2NUM(wxOVERWRITE_PROMPT));
    rb_define_const(mWxRubyConstants,"HIDE_READONLY", INT2NUM(wxHIDE_READONLY));
    rb_define_const(mWxRubyConstants,"FILE_MUST_EXIST", INT2NUM(wxFILE_MUST_EXIST));
    rb_define_const(mWxRubyConstants,"MULTIPLE", INT2NUM(wxMULTIPLE));
    rb_define_const(mWxRubyConstants,"CHANGE_DIR", INT2NUM(wxCHANGE_DIR));
    rb_define_const(mWxRubyConstants,"FR_DOWN", INT2NUM(wxFR_DOWN));
    rb_define_const(mWxRubyConstants,"FR_WHOLEWORD", INT2NUM(wxFR_WHOLEWORD));
    rb_define_const(mWxRubyConstants,"FR_MATCHCASE", INT2NUM(wxFR_MATCHCASE));
    rb_define_const(mWxRubyConstants,"FR_REPLACEDIALOG", INT2NUM(wxFR_REPLACEDIALOG));
    rb_define_const(mWxRubyConstants,"FR_NOUPDOWN", INT2NUM(wxFR_NOUPDOWN));
    rb_define_const(mWxRubyConstants,"FR_NOMATCHCASE", INT2NUM(wxFR_NOMATCHCASE));
    rb_define_const(mWxRubyConstants,"FR_NOWHOLEWORD", INT2NUM(wxFR_NOWHOLEWORD));
    rb_define_const(mWxRubyConstants,"VSCROLL", INT2NUM(0x80000000));
    rb_define_const(mWxRubyConstants,"HSCROLL", INT2NUM(0x40000000));
    rb_define_const(mWxRubyConstants,"CAPTION", INT2NUM(0x20000000));
    rb_define_const(mWxRubyConstants,"NO_3D", INT2NUM(0x00800000));
    rb_define_const(mWxRubyConstants,"USER_COLOURS", INT2NUM(0x00800000));
    rb_define_const(mWxRubyConstants,"ALWAYS_SHOW_SB", INT2NUM(0x00800000));
    rb_define_const(mWxRubyConstants,"CLIP_CHILDREN", INT2NUM(0x00400000));
    rb_define_const(mWxRubyConstants,"CLIP_SIBLINGS", INT2NUM(0x20000000));
    rb_define_const(mWxRubyConstants,"TRANSPARENT_WINDOW", INT2NUM(0x00100000));
    rb_define_const(mWxRubyConstants,"TAB_TRAVERSAL", INT2NUM(0x00080000));
    rb_define_const(mWxRubyConstants,"WANTS_CHARS", INT2NUM(0x00040000));
    rb_define_const(mWxRubyConstants,"RETAINED", INT2NUM(0x00020000));
    rb_define_const(mWxRubyConstants,"BACKINGSTORE", INT2NUM(0x00020000));
    rb_define_const(mWxRubyConstants,"POPUP_WINDOW", INT2NUM(0x00020000));
    rb_define_const(mWxRubyConstants,"NO_FULL_REPAINT_ON_RESIZE", INT2NUM(0x00010000));
    rb_define_const(mWxRubyConstants,"WS_EX_VALIDATE_RECURSIVELY", INT2NUM(0x00000001));
    rb_define_const(mWxRubyConstants,"WS_EX_BLOCK_EVENTS", INT2NUM(0x00000002));
    rb_define_const(mWxRubyConstants,"WS_EX_TRANSIENT", INT2NUM(0x00000004));
    rb_define_const(mWxRubyConstants,"FRAME_EX_CONTEXTHELP", INT2NUM(0x00000004));
    rb_define_const(mWxRubyConstants,"DIALOG_EX_CONTEXTHELP", INT2NUM(0x00000004));
    rb_define_const(mWxRubyConstants,"STAY_ON_TOP", INT2NUM(0x8000));
    rb_define_const(mWxRubyConstants,"ICONIZE", INT2NUM(0x4000));
    rb_define_const(mWxRubyConstants,"MINIMIZE", INT2NUM(0x4000));
    rb_define_const(mWxRubyConstants,"MAXIMIZE", INT2NUM(0x2000));
    rb_define_const(mWxRubyConstants,"SYSTEM_MENU", INT2NUM(0x0800));
    rb_define_const(mWxRubyConstants,"MINIMIZE_BOX", INT2NUM(0x0400));
    rb_define_const(mWxRubyConstants,"MAXIMIZE_BOX", INT2NUM(0x0200));
    rb_define_const(mWxRubyConstants,"TINY_CAPTION_HORIZ", INT2NUM(0x0100));
    rb_define_const(mWxRubyConstants,"TINY_CAPTION_VERT", INT2NUM(0x0080));
    rb_define_const(mWxRubyConstants,"RESIZE_BORDER", INT2NUM(0x0040));
    rb_define_const(mWxRubyConstants,"DIALOG_NO_PARENT", INT2NUM(0x0001));
    rb_define_const(mWxRubyConstants,"FRAME_NO_TASKBAR", INT2NUM(0x0002));
    rb_define_const(mWxRubyConstants,"FRAME_TOOL_WINDOW", INT2NUM(0x0004));
    rb_define_const(mWxRubyConstants,"FRAME_FLOAT_ON_PARENT", INT2NUM(0x0008));
    rb_define_const(mWxRubyConstants,"FRAME_SHAPED", INT2NUM(0x0010));
    rb_define_const(mWxRubyConstants,"RESIZE_BOX", INT2NUM(0x0200));
    rb_define_const(mWxRubyConstants,"THICK_FRAME", INT2NUM(0x0040));
    rb_define_const(mWxRubyConstants,"DIALOG_MODAL", INT2NUM(0x0020));
    rb_define_const(mWxRubyConstants,"DIALOG_MODELESS", INT2NUM(0x0000));
    rb_define_const(mWxRubyConstants,"FRAME_NO_WINDOW_MENU", INT2NUM(0x0100));
    rb_define_const(mWxRubyConstants,"DEFAULT_FRAME_STYLE", INT2NUM((0x0800|0x0040|0x0400|0x0200|0x20000000|0x00400000)));
    rb_define_const(mWxRubyConstants,"DEFAULT_DIALOG_STYLE", INT2NUM(0x20000000));
    rb_define_const(mWxRubyConstants,"ED_CLIENT_MARGIN", INT2NUM(0x0004));
    rb_define_const(mWxRubyConstants,"ED_BUTTONS_BOTTOM", INT2NUM(0x0000));
    rb_define_const(mWxRubyConstants,"ED_BUTTONS_RIGHT", INT2NUM(0x0002));
    rb_define_const(mWxRubyConstants,"ED_STATIC_LINE", INT2NUM(0x0001));
    rb_define_const(mWxRubyConstants,"EXT_DIALOG_STYLE", INT2NUM((0x20000000|0x0004|0x0001)));
    rb_define_const(mWxRubyConstants,"MB_DOCKABLE", INT2NUM(0x0001));
    rb_define_const(mWxRubyConstants,"MENU_TEAROFF", INT2NUM(0x0001));
    rb_define_const(mWxRubyConstants,"COLOURED", INT2NUM(0x0800));
    rb_define_const(mWxRubyConstants,"FIXED_LENGTH", INT2NUM(0x0400));
    rb_define_const(mWxRubyConstants,"LB_SORT", INT2NUM(0x0010));
    rb_define_const(mWxRubyConstants,"LB_SINGLE", INT2NUM(0x0020));
    rb_define_const(mWxRubyConstants,"LB_MULTIPLE", INT2NUM(0x0040));
    rb_define_const(mWxRubyConstants,"LB_EXTENDED", INT2NUM(0x0080));
    rb_define_const(mWxRubyConstants,"LB_OWNERDRAW", INT2NUM(0x0100));
    rb_define_const(mWxRubyConstants,"LB_NEEDED_SB", INT2NUM(0x0200));
    rb_define_const(mWxRubyConstants,"LB_ALWAYS_SB", INT2NUM(0x0400));
    rb_define_const(mWxRubyConstants,"LB_HSCROLL", INT2NUM(0x40000000));
    rb_define_const(mWxRubyConstants,"LB_INT_HEIGHT", INT2NUM(0x0800));
    rb_define_const(mWxRubyConstants,"PROCESS_ENTER", INT2NUM(0x0400));
    rb_define_const(mWxRubyConstants,"PASSWORD", INT2NUM(0x0800));
    rb_define_const(mWxRubyConstants,"CB_SIMPLE", INT2NUM(0x0004));
    rb_define_const(mWxRubyConstants,"CB_SORT", INT2NUM(0x0008));
    rb_define_const(mWxRubyConstants,"CB_READONLY", INT2NUM(0x0010));
    rb_define_const(mWxRubyConstants,"CB_DROPDOWN", INT2NUM(0x0020));
    rb_define_const(mWxRubyConstants,"RA_LEFTTORIGHT", INT2NUM(0x0001));
    rb_define_const(mWxRubyConstants,"RA_TOPTOBOTTOM", INT2NUM(0x0002));
    rb_define_const(mWxRubyConstants,"RA_SPECIFY_COLS", INT2NUM(0x0004));
    rb_define_const(mWxRubyConstants,"RA_SPECIFY_ROWS", INT2NUM(0x0008));
    rb_define_const(mWxRubyConstants,"RA_HORIZONTAL", INT2NUM(0x0004));
    rb_define_const(mWxRubyConstants,"RA_VERTICAL", INT2NUM(0x0008));
    rb_define_const(mWxRubyConstants,"RB_GROUP", INT2NUM(0x0004));
    rb_define_const(mWxRubyConstants,"RB_SINGLE", INT2NUM(0x0008));
    rb_define_const(mWxRubyConstants,"GA_HORIZONTAL", INT2NUM(0x0004));
    rb_define_const(mWxRubyConstants,"GA_VERTICAL", INT2NUM(0x0008));
    rb_define_const(mWxRubyConstants,"GA_PROGRESSBAR", INT2NUM(0x0010));
    rb_define_const(mWxRubyConstants,"GA_SMOOTH", INT2NUM(0x0020));
    rb_define_const(mWxRubyConstants,"SL_HORIZONTAL", INT2NUM(0x0004));
    rb_define_const(mWxRubyConstants,"SL_VERTICAL", INT2NUM(0x0008));
    rb_define_const(mWxRubyConstants,"SL_NOTIFY_DRAG", INT2NUM(0x0000));
    rb_define_const(mWxRubyConstants,"SL_TICKS", INT2NUM(0x0010));
    rb_define_const(mWxRubyConstants,"SL_AUTOTICKS", INT2NUM(0x0010));
    rb_define_const(mWxRubyConstants,"SL_LABELS", INT2NUM(0x0020));
    rb_define_const(mWxRubyConstants,"SL_LEFT", INT2NUM(0x0040));
    rb_define_const(mWxRubyConstants,"SL_TOP", INT2NUM(0x0080));
    rb_define_const(mWxRubyConstants,"SL_RIGHT", INT2NUM(0x0100));
    rb_define_const(mWxRubyConstants,"SL_BOTTOM", INT2NUM(0x0200));
    rb_define_const(mWxRubyConstants,"SL_BOTH", INT2NUM(0x0400));
    rb_define_const(mWxRubyConstants,"SL_SELRANGE", INT2NUM(0x0800));
    rb_define_const(mWxRubyConstants,"SP_ARROW_KEYS", INT2NUM(0x1000));
    rb_define_const(mWxRubyConstants,"SP_WRAP", INT2NUM(0x2000));
    rb_define_const(mWxRubyConstants,"SP_NOBORDER", INT2NUM(0x0000));
    rb_define_const(mWxRubyConstants,"SP_NOSASH", INT2NUM(0x0010));
    rb_define_const(mWxRubyConstants,"SP_BORDER", INT2NUM(0x0020));
    rb_define_const(mWxRubyConstants,"SP_PERMIT_UNSPLIT", INT2NUM(0x0040));
    rb_define_const(mWxRubyConstants,"SP_LIVE_UPDATE", INT2NUM(0x0080));
    rb_define_const(mWxRubyConstants,"SP_3DSASH", INT2NUM(0x0100));
    rb_define_const(mWxRubyConstants,"SP_3DBORDER", INT2NUM(0x0200));
    rb_define_const(mWxRubyConstants,"SP_FULLSASH", INT2NUM(0x0400));
    rb_define_const(mWxRubyConstants,"SP_3D", INT2NUM((0x0200|0x0100)));
    rb_define_const(mWxRubyConstants,"SP_SASH_AQUA", INT2NUM(0x0800));
    rb_define_const(mWxRubyConstants,"NB_FIXEDWIDTH", INT2NUM(0x0010));
    rb_define_const(mWxRubyConstants,"NB_TOP", INT2NUM(0x0000));
    rb_define_const(mWxRubyConstants,"NB_LEFT", INT2NUM(0x0020));
    rb_define_const(mWxRubyConstants,"NB_RIGHT", INT2NUM(0x0040));
    rb_define_const(mWxRubyConstants,"NB_BOTTOM", INT2NUM(0x0080));
    rb_define_const(mWxRubyConstants,"NB_MULTILINE", INT2NUM(0x0100));
    rb_define_const(mWxRubyConstants,"TC_RIGHTJUSTIFY", INT2NUM(0x0010));
    rb_define_const(mWxRubyConstants,"TC_FIXEDWIDTH", INT2NUM(0x0020));
    rb_define_const(mWxRubyConstants,"TC_TOP", INT2NUM(0x0000));
    rb_define_const(mWxRubyConstants,"TC_LEFT", INT2NUM(0x0020));
    rb_define_const(mWxRubyConstants,"TC_RIGHT", INT2NUM(0x0040));
    rb_define_const(mWxRubyConstants,"TC_BOTTOM", INT2NUM(0x0080));
    rb_define_const(mWxRubyConstants,"TC_MULTILINE", INT2NUM(0x0100));
    rb_define_const(mWxRubyConstants,"TC_OWNERDRAW", INT2NUM(0x0200));
    rb_define_const(mWxRubyConstants,"TB_HORIZONTAL", INT2NUM(0x0004));
    rb_define_const(mWxRubyConstants,"TB_VERTICAL", INT2NUM(0x0008));
    rb_define_const(mWxRubyConstants,"TB_3DBUTTONS", INT2NUM(0x0010));
    rb_define_const(mWxRubyConstants,"TB_FLAT", INT2NUM(0x0020));
    rb_define_const(mWxRubyConstants,"TB_DOCKABLE", INT2NUM(0x0040));
    rb_define_const(mWxRubyConstants,"TB_NOICONS", INT2NUM(0x0080));
    rb_define_const(mWxRubyConstants,"TB_TEXT", INT2NUM(0x0100));
    rb_define_const(mWxRubyConstants,"TB_NODIVIDER", INT2NUM(0x0200));
    rb_define_const(mWxRubyConstants,"TB_NOALIGN", INT2NUM(0x0400));
    rb_define_const(mWxRubyConstants,"ST_SIZEGRIP", INT2NUM(0x0010));
    rb_define_const(mWxRubyConstants,"ST_NO_AUTORESIZE", INT2NUM(0x0001));
    rb_define_const(mWxRubyConstants,"PD_CAN_ABORT", INT2NUM(0x0001));
    rb_define_const(mWxRubyConstants,"PD_APP_MODAL", INT2NUM(0x0002));
    rb_define_const(mWxRubyConstants,"PD_AUTO_HIDE", INT2NUM(0x0004));
    rb_define_const(mWxRubyConstants,"PD_ELAPSED_TIME", INT2NUM(0x0008));
    rb_define_const(mWxRubyConstants,"PD_ESTIMATED_TIME", INT2NUM(0x0010));
    rb_define_const(mWxRubyConstants,"PD_REMAINING_TIME", INT2NUM(0x0040));
    rb_define_const(mWxRubyConstants,"DD_NEW_DIR_BUTTON", INT2NUM(0x0080));
    rb_define_const(mWxRubyConstants,"YES", INT2NUM(0x00000002));
    rb_define_const(mWxRubyConstants,"OK", INT2NUM(0x00000004));
    rb_define_const(mWxRubyConstants,"NO", INT2NUM(0x00000008));
    rb_define_const(mWxRubyConstants,"YES_NO", INT2NUM((0x00000002|0x00000008)));
    rb_define_const(mWxRubyConstants,"CANCEL", INT2NUM(0x00000010));
    rb_define_const(mWxRubyConstants,"YES_DEFAULT", INT2NUM(0x00000000));
    rb_define_const(mWxRubyConstants,"NO_DEFAULT", INT2NUM(0x00000080));
    rb_define_const(mWxRubyConstants,"ICON_EXCLAMATION", INT2NUM(0x00000100));
    rb_define_const(mWxRubyConstants,"ICON_HAND", INT2NUM(0x00000200));
    rb_define_const(mWxRubyConstants,"ICON_WARNING", INT2NUM(0x00000100));
    rb_define_const(mWxRubyConstants,"ICON_ERROR", INT2NUM(0x00000200));
    rb_define_const(mWxRubyConstants,"ICON_QUESTION", INT2NUM(0x00000400));
    rb_define_const(mWxRubyConstants,"ICON_INFORMATION", INT2NUM(0x00000800));
    rb_define_const(mWxRubyConstants,"ICON_STOP", INT2NUM(0x00000200));
    rb_define_const(mWxRubyConstants,"ICON_ASTERISK", INT2NUM(0x00000800));
    rb_define_const(mWxRubyConstants,"ICON_MASK", INT2NUM((0x00000100|0x00000200|0x00000400|0x00000800)));
    rb_define_const(mWxRubyConstants,"FORWARD", INT2NUM(0x00001000));
    rb_define_const(mWxRubyConstants,"BACKWARD", INT2NUM(0x00002000));
    rb_define_const(mWxRubyConstants,"RESET", INT2NUM(0x00004000));
    rb_define_const(mWxRubyConstants,"HELP", INT2NUM(0x00008000));
    rb_define_const(mWxRubyConstants,"MORE", INT2NUM(0x00010000));
    rb_define_const(mWxRubyConstants,"SETUP", INT2NUM(0x00020000));
    rb_define_const(mWxRubyConstants,"ID_ANY", INT2NUM(wxID_ANY));
    rb_define_const(mWxRubyConstants,"ID_SEPARATOR", INT2NUM(wxID_SEPARATOR));
    rb_define_const(mWxRubyConstants,"ID_LOWEST", INT2NUM(wxID_LOWEST));
    rb_define_const(mWxRubyConstants,"ID_OPEN", INT2NUM(wxID_OPEN));
    rb_define_const(mWxRubyConstants,"ID_CLOSE", INT2NUM(wxID_CLOSE));
    rb_define_const(mWxRubyConstants,"ID_NEW", INT2NUM(wxID_NEW));
    rb_define_const(mWxRubyConstants,"ID_SAVE", INT2NUM(wxID_SAVE));
    rb_define_const(mWxRubyConstants,"ID_SAVEAS", INT2NUM(wxID_SAVEAS));
    rb_define_const(mWxRubyConstants,"ID_REVERT", INT2NUM(wxID_REVERT));
    rb_define_const(mWxRubyConstants,"ID_EXIT", INT2NUM(wxID_EXIT));
    rb_define_const(mWxRubyConstants,"ID_UNDO", INT2NUM(wxID_UNDO));
    rb_define_const(mWxRubyConstants,"ID_REDO", INT2NUM(wxID_REDO));
    rb_define_const(mWxRubyConstants,"ID_HELP", INT2NUM(wxID_HELP));
    rb_define_const(mWxRubyConstants,"ID_PRINT", INT2NUM(wxID_PRINT));
    rb_define_const(mWxRubyConstants,"ID_PRINT_SETUP", INT2NUM(wxID_PRINT_SETUP));
    rb_define_const(mWxRubyConstants,"ID_PREVIEW", INT2NUM(wxID_PREVIEW));
    rb_define_const(mWxRubyConstants,"ID_ABOUT", INT2NUM(wxID_ABOUT));
    rb_define_const(mWxRubyConstants,"ID_HELP_CONTENTS", INT2NUM(wxID_HELP_CONTENTS));
    rb_define_const(mWxRubyConstants,"ID_HELP_COMMANDS", INT2NUM(wxID_HELP_COMMANDS));
    rb_define_const(mWxRubyConstants,"ID_HELP_PROCEDURES", INT2NUM(wxID_HELP_PROCEDURES));
    rb_define_const(mWxRubyConstants,"ID_HELP_CONTEXT", INT2NUM(wxID_HELP_CONTEXT));
    rb_define_const(mWxRubyConstants,"ID_CLOSE_ALL", INT2NUM(wxID_CLOSE_ALL));
    rb_define_const(mWxRubyConstants,"ID_CUT", INT2NUM(wxID_CUT));
    rb_define_const(mWxRubyConstants,"ID_COPY", INT2NUM(wxID_COPY));
    rb_define_const(mWxRubyConstants,"ID_PASTE", INT2NUM(wxID_PASTE));
    rb_define_const(mWxRubyConstants,"ID_CLEAR", INT2NUM(wxID_CLEAR));
    rb_define_const(mWxRubyConstants,"ID_FIND", INT2NUM(wxID_FIND));
    rb_define_const(mWxRubyConstants,"ID_DUPLICATE", INT2NUM(wxID_DUPLICATE));
    rb_define_const(mWxRubyConstants,"ID_SELECTALL", INT2NUM(wxID_SELECTALL));
    rb_define_const(mWxRubyConstants,"ID_FILE1", INT2NUM(wxID_FILE1));
    rb_define_const(mWxRubyConstants,"ID_FILE2", INT2NUM(wxID_FILE2));
    rb_define_const(mWxRubyConstants,"ID_FILE3", INT2NUM(wxID_FILE3));
    rb_define_const(mWxRubyConstants,"ID_FILE4", INT2NUM(wxID_FILE4));
    rb_define_const(mWxRubyConstants,"ID_FILE5", INT2NUM(wxID_FILE5));
    rb_define_const(mWxRubyConstants,"ID_FILE6", INT2NUM(wxID_FILE6));
    rb_define_const(mWxRubyConstants,"ID_FILE7", INT2NUM(wxID_FILE7));
    rb_define_const(mWxRubyConstants,"ID_FILE8", INT2NUM(wxID_FILE8));
    rb_define_const(mWxRubyConstants,"ID_FILE9", INT2NUM(wxID_FILE9));
    rb_define_const(mWxRubyConstants,"ID_OK", INT2NUM(wxID_OK));
    rb_define_const(mWxRubyConstants,"ID_CANCEL", INT2NUM(wxID_CANCEL));
    rb_define_const(mWxRubyConstants,"ID_APPLY", INT2NUM(wxID_APPLY));
    rb_define_const(mWxRubyConstants,"ID_YES", INT2NUM(wxID_YES));
    rb_define_const(mWxRubyConstants,"ID_NO", INT2NUM(wxID_NO));
    rb_define_const(mWxRubyConstants,"ID_STATIC", INT2NUM(wxID_STATIC));
    rb_define_const(mWxRubyConstants,"ID_FORWARD", INT2NUM(wxID_FORWARD));
    rb_define_const(mWxRubyConstants,"ID_BACKWARD", INT2NUM(wxID_BACKWARD));
    rb_define_const(mWxRubyConstants,"ID_DEFAULT", INT2NUM(wxID_DEFAULT));
    rb_define_const(mWxRubyConstants,"ID_MORE", INT2NUM(wxID_MORE));
    rb_define_const(mWxRubyConstants,"ID_SETUP", INT2NUM(wxID_SETUP));
    rb_define_const(mWxRubyConstants,"ID_RESET", INT2NUM(wxID_RESET));
    rb_define_const(mWxRubyConstants,"ID_CONTEXT_HELP", INT2NUM(wxID_CONTEXT_HELP));
    rb_define_const(mWxRubyConstants,"ID_YESTOALL", INT2NUM(wxID_YESTOALL));
    rb_define_const(mWxRubyConstants,"ID_NOTOALL", INT2NUM(wxID_NOTOALL));
    rb_define_const(mWxRubyConstants,"ID_ABORT", INT2NUM(wxID_ABORT));
    rb_define_const(mWxRubyConstants,"ID_RETRY", INT2NUM(wxID_RETRY));
    rb_define_const(mWxRubyConstants,"ID_IGNORE", INT2NUM(wxID_IGNORE));
    rb_define_const(mWxRubyConstants,"ID_SYSTEM_MENU", INT2NUM(wxID_SYSTEM_MENU));
    rb_define_const(mWxRubyConstants,"ID_CLOSE_FRAME", INT2NUM(wxID_CLOSE_FRAME));
    rb_define_const(mWxRubyConstants,"ID_MOVE_FRAME", INT2NUM(wxID_MOVE_FRAME));
    rb_define_const(mWxRubyConstants,"ID_RESIZE_FRAME", INT2NUM(wxID_RESIZE_FRAME));
    rb_define_const(mWxRubyConstants,"ID_MAXIMIZE_FRAME", INT2NUM(wxID_MAXIMIZE_FRAME));
    rb_define_const(mWxRubyConstants,"ID_ICONIZE_FRAME", INT2NUM(wxID_ICONIZE_FRAME));
    rb_define_const(mWxRubyConstants,"ID_RESTORE_FRAME", INT2NUM(wxID_RESTORE_FRAME));
    rb_define_const(mWxRubyConstants,"ID_FILEDLGG", INT2NUM(wxID_FILEDLGG));
    rb_define_const(mWxRubyConstants,"ID_HIGHEST", INT2NUM(wxID_HIGHEST));
    rb_define_const(mWxRubyConstants,"ITEM_SEPARATOR", INT2NUM(wxITEM_SEPARATOR));
    rb_define_const(mWxRubyConstants,"ITEM_NORMAL", INT2NUM(wxITEM_NORMAL));
    rb_define_const(mWxRubyConstants,"ITEM_CHECK", INT2NUM(wxITEM_CHECK));
    rb_define_const(mWxRubyConstants,"ITEM_RADIO", INT2NUM(wxITEM_RADIO));
    rb_define_const(mWxRubyConstants,"ITEM_MAX", INT2NUM(wxITEM_MAX));
    rb_define_const(mWxRubyConstants,"HT_NOWHERE", INT2NUM(wxHT_NOWHERE));
    rb_define_const(mWxRubyConstants,"HT_SCROLLBAR_FIRST", INT2NUM(wxHT_SCROLLBAR_FIRST));
    rb_define_const(mWxRubyConstants,"HT_SCROLLBAR_ARROW_LINE_1", INT2NUM(wxHT_SCROLLBAR_ARROW_LINE_1));
    rb_define_const(mWxRubyConstants,"HT_SCROLLBAR_ARROW_LINE_2", INT2NUM(wxHT_SCROLLBAR_ARROW_LINE_2));
    rb_define_const(mWxRubyConstants,"HT_SCROLLBAR_ARROW_PAGE_1", INT2NUM(wxHT_SCROLLBAR_ARROW_PAGE_1));
    rb_define_const(mWxRubyConstants,"HT_SCROLLBAR_ARROW_PAGE_2", INT2NUM(wxHT_SCROLLBAR_ARROW_PAGE_2));
    rb_define_const(mWxRubyConstants,"HT_SCROLLBAR_THUMB", INT2NUM(wxHT_SCROLLBAR_THUMB));
    rb_define_const(mWxRubyConstants,"HT_SCROLLBAR_BAR_1", INT2NUM(wxHT_SCROLLBAR_BAR_1));
    rb_define_const(mWxRubyConstants,"HT_SCROLLBAR_BAR_2", INT2NUM(wxHT_SCROLLBAR_BAR_2));
    rb_define_const(mWxRubyConstants,"HT_SCROLLBAR_LAST", INT2NUM(wxHT_SCROLLBAR_LAST));
    rb_define_const(mWxRubyConstants,"HT_WINDOW_OUTSIDE", INT2NUM(wxHT_WINDOW_OUTSIDE));
    rb_define_const(mWxRubyConstants,"HT_WINDOW_INSIDE", INT2NUM(wxHT_WINDOW_INSIDE));
    rb_define_const(mWxRubyConstants,"HT_WINDOW_VERT_SCROLLBAR", INT2NUM(wxHT_WINDOW_VERT_SCROLLBAR));
    rb_define_const(mWxRubyConstants,"HT_WINDOW_HORZ_SCROLLBAR", INT2NUM(wxHT_WINDOW_HORZ_SCROLLBAR));
    rb_define_const(mWxRubyConstants,"HT_WINDOW_CORNER", INT2NUM(wxHT_WINDOW_CORNER));
    rb_define_const(mWxRubyConstants,"HT_MAX", INT2NUM(wxHT_MAX));
    rb_define_const(mWxRubyConstants,"SIZE_AUTO_WIDTH", INT2NUM(0x0001));
    rb_define_const(mWxRubyConstants,"SIZE_AUTO_HEIGHT", INT2NUM(0x0002));
    rb_define_const(mWxRubyConstants,"SIZE_AUTO", INT2NUM((0x0001|0x0002)));
    rb_define_const(mWxRubyConstants,"SIZE_USE_EXISTING", INT2NUM(0x0000));
    rb_define_const(mWxRubyConstants,"SIZE_ALLOW_MINUS_ONE", INT2NUM(0x0004));
    rb_define_const(mWxRubyConstants,"SIZE_NO_ADJUSTMENTS", INT2NUM(0x0008));
    rb_define_const(mWxRubyConstants,"CLEAR", INT2NUM(wxCLEAR));
    rb_define_const(mWxRubyConstants,"ROP_BLACK", INT2NUM(wxROP_BLACK));
    rb_define_const(mWxRubyConstants,"BLIT_BLACKNESS", INT2NUM(wxBLIT_BLACKNESS));
    rb_define_const(mWxRubyConstants,"XOR", INT2NUM(wxXOR));
    rb_define_const(mWxRubyConstants,"ROP_XORPEN", INT2NUM(wxROP_XORPEN));
    rb_define_const(mWxRubyConstants,"BLIT_SRCINVERT", INT2NUM(wxBLIT_SRCINVERT));
    rb_define_const(mWxRubyConstants,"INVERT", INT2NUM(wxINVERT));
    rb_define_const(mWxRubyConstants,"ROP_NOT", INT2NUM(wxROP_NOT));
    rb_define_const(mWxRubyConstants,"BLIT_DSTINVERT", INT2NUM(wxBLIT_DSTINVERT));
    rb_define_const(mWxRubyConstants,"OR_REVERSE", INT2NUM(wxOR_REVERSE));
    rb_define_const(mWxRubyConstants,"ROP_MERGEPENNOT", INT2NUM(wxROP_MERGEPENNOT));
    rb_define_const(mWxRubyConstants,"BLIT_00DD0228", INT2NUM(wxBLIT_00DD0228));
    rb_define_const(mWxRubyConstants,"AND_REVERSE", INT2NUM(wxAND_REVERSE));
    rb_define_const(mWxRubyConstants,"ROP_MASKPENNOT", INT2NUM(wxROP_MASKPENNOT));
    rb_define_const(mWxRubyConstants,"BLIT_SRCERASE", INT2NUM(wxBLIT_SRCERASE));
    rb_define_const(mWxRubyConstants,"COPY", INT2NUM(wxCOPY));
    rb_define_const(mWxRubyConstants,"ROP_COPYPEN", INT2NUM(wxROP_COPYPEN));
    rb_define_const(mWxRubyConstants,"BLIT_SRCCOPY", INT2NUM(wxBLIT_SRCCOPY));
    rb_define_const(mWxRubyConstants,"AND", INT2NUM(wxAND));
    rb_define_const(mWxRubyConstants,"ROP_MASKPEN", INT2NUM(wxROP_MASKPEN));
    rb_define_const(mWxRubyConstants,"BLIT_SRCAND", INT2NUM(wxBLIT_SRCAND));
    rb_define_const(mWxRubyConstants,"AND_INVERT", INT2NUM(wxAND_INVERT));
    rb_define_const(mWxRubyConstants,"ROP_MASKNOTPEN", INT2NUM(wxROP_MASKNOTPEN));
    rb_define_const(mWxRubyConstants,"BLIT_00220326", INT2NUM(wxBLIT_00220326));
    rb_define_const(mWxRubyConstants,"NO_OP", INT2NUM(wxNO_OP));
    rb_define_const(mWxRubyConstants,"ROP_NOP", INT2NUM(wxROP_NOP));
    rb_define_const(mWxRubyConstants,"BLIT_00AA0029", INT2NUM(wxBLIT_00AA0029));
    rb_define_const(mWxRubyConstants,"NOR", INT2NUM(wxNOR));
    rb_define_const(mWxRubyConstants,"ROP_NOTMERGEPEN", INT2NUM(wxROP_NOTMERGEPEN));
    rb_define_const(mWxRubyConstants,"BLIT_NOTSRCERASE", INT2NUM(wxBLIT_NOTSRCERASE));
    rb_define_const(mWxRubyConstants,"EQUIV", INT2NUM(wxEQUIV));
    rb_define_const(mWxRubyConstants,"ROP_NOTXORPEN", INT2NUM(wxROP_NOTXORPEN));
    rb_define_const(mWxRubyConstants,"BLIT_00990066", INT2NUM(wxBLIT_00990066));
    rb_define_const(mWxRubyConstants,"SRC_INVERT", INT2NUM(wxSRC_INVERT));
    rb_define_const(mWxRubyConstants,"ROP_NOTCOPYPEN", INT2NUM(wxROP_NOTCOPYPEN));
    rb_define_const(mWxRubyConstants,"BLIT_NOTSCRCOPY", INT2NUM(wxBLIT_NOTSCRCOPY));
    rb_define_const(mWxRubyConstants,"OR_INVERT", INT2NUM(wxOR_INVERT));
    rb_define_const(mWxRubyConstants,"ROP_MERGENOTPEN", INT2NUM(wxROP_MERGENOTPEN));
    rb_define_const(mWxRubyConstants,"BLIT_MERGEPAINT", INT2NUM(wxBLIT_MERGEPAINT));
    rb_define_const(mWxRubyConstants,"NAND", INT2NUM(wxNAND));
    rb_define_const(mWxRubyConstants,"ROP_NOTMASKPEN", INT2NUM(wxROP_NOTMASKPEN));
    rb_define_const(mWxRubyConstants,"BLIT_007700E6", INT2NUM(wxBLIT_007700E6));
    rb_define_const(mWxRubyConstants,"OR", INT2NUM(wxOR));
    rb_define_const(mWxRubyConstants,"ROP_MERGEPEN", INT2NUM(wxROP_MERGEPEN));
    rb_define_const(mWxRubyConstants,"BLIT_SRCPAINT", INT2NUM(wxBLIT_SRCPAINT));
    rb_define_const(mWxRubyConstants,"SET", INT2NUM(wxSET));
    rb_define_const(mWxRubyConstants,"ROP_WHITE", INT2NUM(wxROP_WHITE));
    rb_define_const(mWxRubyConstants,"BLIT_WHITENESS", INT2NUM(wxBLIT_WHITENESS));
    rb_define_const(mWxRubyConstants,"FLOOD_SURFACE", INT2NUM(wxFLOOD_SURFACE));
    rb_define_const(mWxRubyConstants,"FLOOD_BORDER", INT2NUM(wxFLOOD_BORDER));
    rb_define_const(mWxRubyConstants,"ODDEVEN_RULE", INT2NUM(wxODDEVEN_RULE));
    rb_define_const(mWxRubyConstants,"WINDING_RULE", INT2NUM(wxWINDING_RULE));
    rb_define_const(mWxRubyConstants,"TOOL_TOP", INT2NUM(wxTOOL_TOP));
    rb_define_const(mWxRubyConstants,"TOOL_BOTTOM", INT2NUM(wxTOOL_BOTTOM));
    rb_define_const(mWxRubyConstants,"TOOL_LEFT", INT2NUM(wxTOOL_LEFT));
    rb_define_const(mWxRubyConstants,"TOOL_RIGHT", INT2NUM(wxTOOL_RIGHT));
    rb_define_const(mWxRubyConstants,"DF_INVALID", INT2NUM(wxDF_INVALID));
    rb_define_const(mWxRubyConstants,"DF_TEXT", INT2NUM(wxDF_TEXT));
    rb_define_const(mWxRubyConstants,"DF_BITMAP", INT2NUM(wxDF_BITMAP));
    rb_define_const(mWxRubyConstants,"DF_METAFILE", INT2NUM(wxDF_METAFILE));
    rb_define_const(mWxRubyConstants,"DF_SYLK", INT2NUM(wxDF_SYLK));
    rb_define_const(mWxRubyConstants,"DF_DIF", INT2NUM(wxDF_DIF));
    rb_define_const(mWxRubyConstants,"DF_TIFF", INT2NUM(wxDF_TIFF));
    rb_define_const(mWxRubyConstants,"DF_OEMTEXT", INT2NUM(wxDF_OEMTEXT));
    rb_define_const(mWxRubyConstants,"DF_DIB", INT2NUM(wxDF_DIB));
    rb_define_const(mWxRubyConstants,"DF_PALETTE", INT2NUM(wxDF_PALETTE));
    rb_define_const(mWxRubyConstants,"DF_PENDATA", INT2NUM(wxDF_PENDATA));
    rb_define_const(mWxRubyConstants,"DF_RIFF", INT2NUM(wxDF_RIFF));
    rb_define_const(mWxRubyConstants,"DF_WAVE", INT2NUM(wxDF_WAVE));
    rb_define_const(mWxRubyConstants,"DF_UNICODETEXT", INT2NUM(wxDF_UNICODETEXT));
    rb_define_const(mWxRubyConstants,"DF_ENHMETAFILE", INT2NUM(wxDF_ENHMETAFILE));
    rb_define_const(mWxRubyConstants,"DF_FILENAME", INT2NUM(wxDF_FILENAME));
    rb_define_const(mWxRubyConstants,"DF_LOCALE", INT2NUM(wxDF_LOCALE));
    rb_define_const(mWxRubyConstants,"DF_PRIVATE", INT2NUM(wxDF_PRIVATE));
    rb_define_const(mWxRubyConstants,"DF_HTML", INT2NUM(wxDF_HTML));
    rb_define_const(mWxRubyConstants,"DF_MAX", INT2NUM(wxDF_MAX));
    rb_define_const(mWxRubyConstants,"K_BACK", INT2NUM(WXK_BACK));
    rb_define_const(mWxRubyConstants,"K_TAB", INT2NUM(WXK_TAB));
    rb_define_const(mWxRubyConstants,"K_RETURN", INT2NUM(WXK_RETURN));
    rb_define_const(mWxRubyConstants,"K_ESCAPE", INT2NUM(WXK_ESCAPE));
    rb_define_const(mWxRubyConstants,"K_SPACE", INT2NUM(WXK_SPACE));
    rb_define_const(mWxRubyConstants,"K_DELETE", INT2NUM(WXK_DELETE));
    rb_define_const(mWxRubyConstants,"K_START", INT2NUM(WXK_START));
    rb_define_const(mWxRubyConstants,"K_LBUTTON", INT2NUM(WXK_LBUTTON));
    rb_define_const(mWxRubyConstants,"K_RBUTTON", INT2NUM(WXK_RBUTTON));
    rb_define_const(mWxRubyConstants,"K_CANCEL", INT2NUM(WXK_CANCEL));
    rb_define_const(mWxRubyConstants,"K_MBUTTON", INT2NUM(WXK_MBUTTON));
    rb_define_const(mWxRubyConstants,"K_CLEAR", INT2NUM(WXK_CLEAR));
    rb_define_const(mWxRubyConstants,"K_SHIFT", INT2NUM(WXK_SHIFT));
    rb_define_const(mWxRubyConstants,"K_ALT", INT2NUM(WXK_ALT));
    rb_define_const(mWxRubyConstants,"K_CONTROL", INT2NUM(WXK_CONTROL));
    rb_define_const(mWxRubyConstants,"K_MENU", INT2NUM(WXK_MENU));
    rb_define_const(mWxRubyConstants,"K_PAUSE", INT2NUM(WXK_PAUSE));
    rb_define_const(mWxRubyConstants,"K_CAPITAL", INT2NUM(WXK_CAPITAL));
    rb_define_const(mWxRubyConstants,"K_PRIOR", INT2NUM(WXK_PRIOR));
    rb_define_const(mWxRubyConstants,"K_NEXT", INT2NUM(WXK_NEXT));
    rb_define_const(mWxRubyConstants,"K_END", INT2NUM(WXK_END));
    rb_define_const(mWxRubyConstants,"K_HOME", INT2NUM(WXK_HOME));
    rb_define_const(mWxRubyConstants,"K_LEFT", INT2NUM(WXK_LEFT));
    rb_define_const(mWxRubyConstants,"K_UP", INT2NUM(WXK_UP));
    rb_define_const(mWxRubyConstants,"K_RIGHT", INT2NUM(WXK_RIGHT));
    rb_define_const(mWxRubyConstants,"K_DOWN", INT2NUM(WXK_DOWN));
    rb_define_const(mWxRubyConstants,"K_SELECT", INT2NUM(WXK_SELECT));
    rb_define_const(mWxRubyConstants,"K_PRINT", INT2NUM(WXK_PRINT));
    rb_define_const(mWxRubyConstants,"K_EXECUTE", INT2NUM(WXK_EXECUTE));
    rb_define_const(mWxRubyConstants,"K_SNAPSHOT", INT2NUM(WXK_SNAPSHOT));
    rb_define_const(mWxRubyConstants,"K_INSERT", INT2NUM(WXK_INSERT));
    rb_define_const(mWxRubyConstants,"K_HELP", INT2NUM(WXK_HELP));
    rb_define_const(mWxRubyConstants,"K_NUMPAD0", INT2NUM(WXK_NUMPAD0));
    rb_define_const(mWxRubyConstants,"K_NUMPAD1", INT2NUM(WXK_NUMPAD1));
    rb_define_const(mWxRubyConstants,"K_NUMPAD2", INT2NUM(WXK_NUMPAD2));
    rb_define_const(mWxRubyConstants,"K_NUMPAD3", INT2NUM(WXK_NUMPAD3));
    rb_define_const(mWxRubyConstants,"K_NUMPAD4", INT2NUM(WXK_NUMPAD4));
    rb_define_const(mWxRubyConstants,"K_NUMPAD5", INT2NUM(WXK_NUMPAD5));
    rb_define_const(mWxRubyConstants,"K_NUMPAD6", INT2NUM(WXK_NUMPAD6));
    rb_define_const(mWxRubyConstants,"K_NUMPAD7", INT2NUM(WXK_NUMPAD7));
    rb_define_const(mWxRubyConstants,"K_NUMPAD8", INT2NUM(WXK_NUMPAD8));
    rb_define_const(mWxRubyConstants,"K_NUMPAD9", INT2NUM(WXK_NUMPAD9));
    rb_define_const(mWxRubyConstants,"K_MULTIPLY", INT2NUM(WXK_MULTIPLY));
    rb_define_const(mWxRubyConstants,"K_ADD", INT2NUM(WXK_ADD));
    rb_define_const(mWxRubyConstants,"K_SEPARATOR", INT2NUM(WXK_SEPARATOR));
    rb_define_const(mWxRubyConstants,"K_SUBTRACT", INT2NUM(WXK_SUBTRACT));
    rb_define_const(mWxRubyConstants,"K_DECIMAL", INT2NUM(WXK_DECIMAL));
    rb_define_const(mWxRubyConstants,"K_DIVIDE", INT2NUM(WXK_DIVIDE));
    rb_define_const(mWxRubyConstants,"K_F1", INT2NUM(WXK_F1));
    rb_define_const(mWxRubyConstants,"K_F2", INT2NUM(WXK_F2));
    rb_define_const(mWxRubyConstants,"K_F3", INT2NUM(WXK_F3));
    rb_define_const(mWxRubyConstants,"K_F4", INT2NUM(WXK_F4));
    rb_define_const(mWxRubyConstants,"K_F5", INT2NUM(WXK_F5));
    rb_define_const(mWxRubyConstants,"K_F6", INT2NUM(WXK_F6));
    rb_define_const(mWxRubyConstants,"K_F7", INT2NUM(WXK_F7));
    rb_define_const(mWxRubyConstants,"K_F8", INT2NUM(WXK_F8));
    rb_define_const(mWxRubyConstants,"K_F9", INT2NUM(WXK_F9));
    rb_define_const(mWxRubyConstants,"K_F10", INT2NUM(WXK_F10));
    rb_define_const(mWxRubyConstants,"K_F11", INT2NUM(WXK_F11));
    rb_define_const(mWxRubyConstants,"K_F12", INT2NUM(WXK_F12));
    rb_define_const(mWxRubyConstants,"K_F13", INT2NUM(WXK_F13));
    rb_define_const(mWxRubyConstants,"K_F14", INT2NUM(WXK_F14));
    rb_define_const(mWxRubyConstants,"K_F15", INT2NUM(WXK_F15));
    rb_define_const(mWxRubyConstants,"K_F16", INT2NUM(WXK_F16));
    rb_define_const(mWxRubyConstants,"K_F17", INT2NUM(WXK_F17));
    rb_define_const(mWxRubyConstants,"K_F18", INT2NUM(WXK_F18));
    rb_define_const(mWxRubyConstants,"K_F19", INT2NUM(WXK_F19));
    rb_define_const(mWxRubyConstants,"K_F20", INT2NUM(WXK_F20));
    rb_define_const(mWxRubyConstants,"K_F21", INT2NUM(WXK_F21));
    rb_define_const(mWxRubyConstants,"K_F22", INT2NUM(WXK_F22));
    rb_define_const(mWxRubyConstants,"K_F23", INT2NUM(WXK_F23));
    rb_define_const(mWxRubyConstants,"K_F24", INT2NUM(WXK_F24));
    rb_define_const(mWxRubyConstants,"K_NUMLOCK", INT2NUM(WXK_NUMLOCK));
    rb_define_const(mWxRubyConstants,"K_SCROLL", INT2NUM(WXK_SCROLL));
    rb_define_const(mWxRubyConstants,"K_PAGEUP", INT2NUM(WXK_PAGEUP));
    rb_define_const(mWxRubyConstants,"K_PAGEDOWN", INT2NUM(WXK_PAGEDOWN));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_SPACE", INT2NUM(WXK_NUMPAD_SPACE));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_TAB", INT2NUM(WXK_NUMPAD_TAB));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_ENTER", INT2NUM(WXK_NUMPAD_ENTER));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_F1", INT2NUM(WXK_NUMPAD_F1));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_F2", INT2NUM(WXK_NUMPAD_F2));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_F3", INT2NUM(WXK_NUMPAD_F3));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_F4", INT2NUM(WXK_NUMPAD_F4));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_HOME", INT2NUM(WXK_NUMPAD_HOME));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_LEFT", INT2NUM(WXK_NUMPAD_LEFT));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_UP", INT2NUM(WXK_NUMPAD_UP));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_RIGHT", INT2NUM(WXK_NUMPAD_RIGHT));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_DOWN", INT2NUM(WXK_NUMPAD_DOWN));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_PRIOR", INT2NUM(WXK_NUMPAD_PRIOR));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_PAGEUP", INT2NUM(WXK_NUMPAD_PAGEUP));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_NEXT", INT2NUM(WXK_NUMPAD_NEXT));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_PAGEDOWN", INT2NUM(WXK_NUMPAD_PAGEDOWN));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_END", INT2NUM(WXK_NUMPAD_END));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_BEGIN", INT2NUM(WXK_NUMPAD_BEGIN));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_INSERT", INT2NUM(WXK_NUMPAD_INSERT));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_DELETE", INT2NUM(WXK_NUMPAD_DELETE));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_EQUAL", INT2NUM(WXK_NUMPAD_EQUAL));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_MULTIPLY", INT2NUM(WXK_NUMPAD_MULTIPLY));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_ADD", INT2NUM(WXK_NUMPAD_ADD));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_SEPARATOR", INT2NUM(WXK_NUMPAD_SEPARATOR));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_SUBTRACT", INT2NUM(WXK_NUMPAD_SUBTRACT));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_DECIMAL", INT2NUM(WXK_NUMPAD_DECIMAL));
    rb_define_const(mWxRubyConstants,"K_NUMPAD_DIVIDE", INT2NUM(WXK_NUMPAD_DIVIDE));
    rb_define_const(mWxRubyConstants,"MM_TEXT", INT2NUM(wxMM_TEXT));
    rb_define_const(mWxRubyConstants,"MM_LOMETRIC", INT2NUM(wxMM_LOMETRIC));
    rb_define_const(mWxRubyConstants,"MM_HIMETRIC", INT2NUM(wxMM_HIMETRIC));
    rb_define_const(mWxRubyConstants,"MM_LOENGLISH", INT2NUM(wxMM_LOENGLISH));
    rb_define_const(mWxRubyConstants,"MM_HIENGLISH", INT2NUM(wxMM_HIENGLISH));
    rb_define_const(mWxRubyConstants,"MM_TWIPS", INT2NUM(wxMM_TWIPS));
    rb_define_const(mWxRubyConstants,"MM_ISOTROPIC", INT2NUM(wxMM_ISOTROPIC));
    rb_define_const(mWxRubyConstants,"MM_ANISOTROPIC", INT2NUM(wxMM_ANISOTROPIC));
    rb_define_const(mWxRubyConstants,"MM_POINTS", INT2NUM(wxMM_POINTS));
    rb_define_const(mWxRubyConstants,"MM_METRIC", INT2NUM(wxMM_METRIC));
    rb_define_const(mWxRubyConstants,"PAPER_NONE", INT2NUM(wxPAPER_NONE));
    rb_define_const(mWxRubyConstants,"PAPER_LETTER", INT2NUM(wxPAPER_LETTER));
    rb_define_const(mWxRubyConstants,"PAPER_LEGAL", INT2NUM(wxPAPER_LEGAL));
    rb_define_const(mWxRubyConstants,"PAPER_A4", INT2NUM(wxPAPER_A4));
    rb_define_const(mWxRubyConstants,"PAPER_CSHEET", INT2NUM(wxPAPER_CSHEET));
    rb_define_const(mWxRubyConstants,"PAPER_DSHEET", INT2NUM(wxPAPER_DSHEET));
    rb_define_const(mWxRubyConstants,"PAPER_ESHEET", INT2NUM(wxPAPER_ESHEET));
    rb_define_const(mWxRubyConstants,"PAPER_LETTERSMALL", INT2NUM(wxPAPER_LETTERSMALL));
    rb_define_const(mWxRubyConstants,"PAPER_TABLOID", INT2NUM(wxPAPER_TABLOID));
    rb_define_const(mWxRubyConstants,"PAPER_LEDGER", INT2NUM(wxPAPER_LEDGER));
    rb_define_const(mWxRubyConstants,"PAPER_STATEMENT", INT2NUM(wxPAPER_STATEMENT));
    rb_define_const(mWxRubyConstants,"PAPER_EXECUTIVE", INT2NUM(wxPAPER_EXECUTIVE));
    rb_define_const(mWxRubyConstants,"PAPER_A3", INT2NUM(wxPAPER_A3));
    rb_define_const(mWxRubyConstants,"PAPER_A4SMALL", INT2NUM(wxPAPER_A4SMALL));
    rb_define_const(mWxRubyConstants,"PAPER_A5", INT2NUM(wxPAPER_A5));
    rb_define_const(mWxRubyConstants,"PAPER_B4", INT2NUM(wxPAPER_B4));
    rb_define_const(mWxRubyConstants,"PAPER_B5", INT2NUM(wxPAPER_B5));
    rb_define_const(mWxRubyConstants,"PAPER_FOLIO", INT2NUM(wxPAPER_FOLIO));
    rb_define_const(mWxRubyConstants,"PAPER_QUARTO", INT2NUM(wxPAPER_QUARTO));
    rb_define_const(mWxRubyConstants,"PAPER_10X14", INT2NUM(wxPAPER_10X14));
    rb_define_const(mWxRubyConstants,"PAPER_11X17", INT2NUM(wxPAPER_11X17));
    rb_define_const(mWxRubyConstants,"PAPER_NOTE", INT2NUM(wxPAPER_NOTE));
    rb_define_const(mWxRubyConstants,"PAPER_ENV_9", INT2NUM(wxPAPER_ENV_9));
    rb_define_const(mWxRubyConstants,"PAPER_ENV_10", INT2NUM(wxPAPER_ENV_10));
    rb_define_const(mWxRubyConstants,"PAPER_ENV_11", INT2NUM(wxPAPER_ENV_11));
    rb_define_const(mWxRubyConstants,"PAPER_ENV_12", INT2NUM(wxPAPER_ENV_12));
    rb_define_const(mWxRubyConstants,"PAPER_ENV_14", INT2NUM(wxPAPER_ENV_14));
    rb_define_const(mWxRubyConstants,"PAPER_ENV_DL", INT2NUM(wxPAPER_ENV_DL));
    rb_define_const(mWxRubyConstants,"PAPER_ENV_C5", INT2NUM(wxPAPER_ENV_C5));
    rb_define_const(mWxRubyConstants,"PAPER_ENV_C3", INT2NUM(wxPAPER_ENV_C3));
    rb_define_const(mWxRubyConstants,"PAPER_ENV_C4", INT2NUM(wxPAPER_ENV_C4));
    rb_define_const(mWxRubyConstants,"PAPER_ENV_C6", INT2NUM(wxPAPER_ENV_C6));
    rb_define_const(mWxRubyConstants,"PAPER_ENV_C65", INT2NUM(wxPAPER_ENV_C65));
    rb_define_const(mWxRubyConstants,"PAPER_ENV_B4", INT2NUM(wxPAPER_ENV_B4));
    rb_define_const(mWxRubyConstants,"PAPER_ENV_B5", INT2NUM(wxPAPER_ENV_B5));
    rb_define_const(mWxRubyConstants,"PAPER_ENV_B6", INT2NUM(wxPAPER_ENV_B6));
    rb_define_const(mWxRubyConstants,"PAPER_ENV_ITALY", INT2NUM(wxPAPER_ENV_ITALY));
    rb_define_const(mWxRubyConstants,"PAPER_ENV_MONARCH", INT2NUM(wxPAPER_ENV_MONARCH));
    rb_define_const(mWxRubyConstants,"PAPER_ENV_PERSONAL", INT2NUM(wxPAPER_ENV_PERSONAL));
    rb_define_const(mWxRubyConstants,"PAPER_FANFOLD_US", INT2NUM(wxPAPER_FANFOLD_US));
    rb_define_const(mWxRubyConstants,"PAPER_FANFOLD_STD_GERMAN", INT2NUM(wxPAPER_FANFOLD_STD_GERMAN));
    rb_define_const(mWxRubyConstants,"PAPER_FANFOLD_LGL_GERMAN", INT2NUM(wxPAPER_FANFOLD_LGL_GERMAN));
    rb_define_const(mWxRubyConstants,"PAPER_ISO_B4", INT2NUM(wxPAPER_ISO_B4));
    rb_define_const(mWxRubyConstants,"PAPER_JAPANESE_POSTCARD", INT2NUM(wxPAPER_JAPANESE_POSTCARD));
    rb_define_const(mWxRubyConstants,"PAPER_9X11", INT2NUM(wxPAPER_9X11));
    rb_define_const(mWxRubyConstants,"PAPER_10X11", INT2NUM(wxPAPER_10X11));
    rb_define_const(mWxRubyConstants,"PAPER_15X11", INT2NUM(wxPAPER_15X11));
    rb_define_const(mWxRubyConstants,"PAPER_ENV_INVITE", INT2NUM(wxPAPER_ENV_INVITE));
    rb_define_const(mWxRubyConstants,"PAPER_LETTER_EXTRA", INT2NUM(wxPAPER_LETTER_EXTRA));
    rb_define_const(mWxRubyConstants,"PAPER_LEGAL_EXTRA", INT2NUM(wxPAPER_LEGAL_EXTRA));
    rb_define_const(mWxRubyConstants,"PAPER_TABLOID_EXTRA", INT2NUM(wxPAPER_TABLOID_EXTRA));
    rb_define_const(mWxRubyConstants,"PAPER_A4_EXTRA", INT2NUM(wxPAPER_A4_EXTRA));
    rb_define_const(mWxRubyConstants,"PAPER_LETTER_TRANSVERSE", INT2NUM(wxPAPER_LETTER_TRANSVERSE));
    rb_define_const(mWxRubyConstants,"PAPER_A4_TRANSVERSE", INT2NUM(wxPAPER_A4_TRANSVERSE));
    rb_define_const(mWxRubyConstants,"PAPER_LETTER_EXTRA_TRANSVERSE", INT2NUM(wxPAPER_LETTER_EXTRA_TRANSVERSE));
    rb_define_const(mWxRubyConstants,"PAPER_A_PLUS", INT2NUM(wxPAPER_A_PLUS));
    rb_define_const(mWxRubyConstants,"PAPER_B_PLUS", INT2NUM(wxPAPER_B_PLUS));
    rb_define_const(mWxRubyConstants,"PAPER_LETTER_PLUS", INT2NUM(wxPAPER_LETTER_PLUS));
    rb_define_const(mWxRubyConstants,"PAPER_A4_PLUS", INT2NUM(wxPAPER_A4_PLUS));
    rb_define_const(mWxRubyConstants,"PAPER_A5_TRANSVERSE", INT2NUM(wxPAPER_A5_TRANSVERSE));
    rb_define_const(mWxRubyConstants,"PAPER_B5_TRANSVERSE", INT2NUM(wxPAPER_B5_TRANSVERSE));
    rb_define_const(mWxRubyConstants,"PAPER_A3_EXTRA", INT2NUM(wxPAPER_A3_EXTRA));
    rb_define_const(mWxRubyConstants,"PAPER_A5_EXTRA", INT2NUM(wxPAPER_A5_EXTRA));
    rb_define_const(mWxRubyConstants,"PAPER_B5_EXTRA", INT2NUM(wxPAPER_B5_EXTRA));
    rb_define_const(mWxRubyConstants,"PAPER_A2", INT2NUM(wxPAPER_A2));
    rb_define_const(mWxRubyConstants,"PAPER_A3_TRANSVERSE", INT2NUM(wxPAPER_A3_TRANSVERSE));
    rb_define_const(mWxRubyConstants,"PAPER_A3_EXTRA_TRANSVERSE", INT2NUM(wxPAPER_A3_EXTRA_TRANSVERSE));
    rb_define_const(mWxRubyConstants,"PORTRAIT", INT2NUM(1));
    rb_define_const(mWxRubyConstants,"LANDSCAPE", INT2NUM(2));
    rb_define_const(mWxRubyConstants,"DUPLEX_SIMPLEX", INT2NUM(wxDUPLEX_SIMPLEX));
    rb_define_const(mWxRubyConstants,"DUPLEX_HORIZONTAL", INT2NUM(wxDUPLEX_HORIZONTAL));
    rb_define_const(mWxRubyConstants,"DUPLEX_VERTICAL", INT2NUM(wxDUPLEX_VERTICAL));
    rb_define_const(mWxRubyConstants,"PRINT_QUALITY_HIGH", INT2NUM(-1));
    rb_define_const(mWxRubyConstants,"PRINT_QUALITY_MEDIUM", INT2NUM(-2));
    rb_define_const(mWxRubyConstants,"PRINT_QUALITY_LOW", INT2NUM(-3));
    rb_define_const(mWxRubyConstants,"PRINT_QUALITY_DRAFT", INT2NUM(-4));
    rb_define_const(mWxRubyConstants,"PRINT_MODE_NONE", INT2NUM(wxPRINT_MODE_NONE));
    rb_define_const(mWxRubyConstants,"PRINT_MODE_PREVIEW", INT2NUM(wxPRINT_MODE_PREVIEW));
    rb_define_const(mWxRubyConstants,"PRINT_MODE_FILE", INT2NUM(wxPRINT_MODE_FILE));
    rb_define_const(mWxRubyConstants,"PRINT_MODE_PRINTER", INT2NUM(wxPRINT_MODE_PRINTER));
    rb_define_const(mWxRubyConstants,"TE_NO_VSCROLL", INT2NUM(0x0002));
    rb_define_const(mWxRubyConstants,"TE_AUTO_SCROLL", INT2NUM(0x0008));
    rb_define_const(mWxRubyConstants,"TE_READONLY", INT2NUM(0x0010));
    rb_define_const(mWxRubyConstants,"TE_MULTILINE", INT2NUM(0x0020));
    rb_define_const(mWxRubyConstants,"TE_PROCESS_TAB", INT2NUM(0x0040));
    rb_define_const(mWxRubyConstants,"TE_LEFT", INT2NUM(0x0000));
    rb_define_const(mWxRubyConstants,"TE_RICH", INT2NUM(0x0080));
    rb_define_const(mWxRubyConstants,"TE_PROCESS_ENTER", INT2NUM(0x0400));
    rb_define_const(mWxRubyConstants,"TE_PASSWORD", INT2NUM(0x0800));
    rb_define_const(mWxRubyConstants,"TE_AUTO_URL", INT2NUM(0x1000));
    rb_define_const(mWxRubyConstants,"TE_NOHIDESEL", INT2NUM(0x2000));
    rb_define_const(mWxRubyConstants,"TE_DONTWRAP", INT2NUM(0x40000000));
    rb_define_const(mWxRubyConstants,"TE_LINEWRAP", INT2NUM(0x4000));
    rb_define_const(mWxRubyConstants,"TE_WORDWRAP", INT2NUM(0x0000));
    rb_define_const(mWxRubyConstants,"TE_RICH2", INT2NUM(0x8000));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_INVALID", INT2NUM(wxBITMAP_TYPE_INVALID));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_BMP", INT2NUM(wxBITMAP_TYPE_BMP));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_BMP_RESOURCE", INT2NUM(wxBITMAP_TYPE_BMP_RESOURCE));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_RESOURCE", INT2NUM(wxBITMAP_TYPE_RESOURCE));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_ICO", INT2NUM(wxBITMAP_TYPE_ICO));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_ICO_RESOURCE", INT2NUM(wxBITMAP_TYPE_ICO_RESOURCE));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_CUR", INT2NUM(wxBITMAP_TYPE_CUR));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_CUR_RESOURCE", INT2NUM(wxBITMAP_TYPE_CUR_RESOURCE));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_XBM", INT2NUM(wxBITMAP_TYPE_XBM));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_XBM_DATA", INT2NUM(wxBITMAP_TYPE_XBM_DATA));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_XPM", INT2NUM(wxBITMAP_TYPE_XPM));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_XPM_DATA", INT2NUM(wxBITMAP_TYPE_XPM_DATA));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_TIF", INT2NUM(wxBITMAP_TYPE_TIF));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_TIF_RESOURCE", INT2NUM(wxBITMAP_TYPE_TIF_RESOURCE));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_GIF", INT2NUM(wxBITMAP_TYPE_GIF));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_GIF_RESOURCE", INT2NUM(wxBITMAP_TYPE_GIF_RESOURCE));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_PNG", INT2NUM(wxBITMAP_TYPE_PNG));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_PNG_RESOURCE", INT2NUM(wxBITMAP_TYPE_PNG_RESOURCE));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_JPEG", INT2NUM(wxBITMAP_TYPE_JPEG));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_JPEG_RESOURCE", INT2NUM(wxBITMAP_TYPE_JPEG_RESOURCE));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_PNM", INT2NUM(wxBITMAP_TYPE_PNM));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_PNM_RESOURCE", INT2NUM(wxBITMAP_TYPE_PNM_RESOURCE));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_PCX", INT2NUM(wxBITMAP_TYPE_PCX));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_PCX_RESOURCE", INT2NUM(wxBITMAP_TYPE_PCX_RESOURCE));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_PICT", INT2NUM(wxBITMAP_TYPE_PICT));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_PICT_RESOURCE", INT2NUM(wxBITMAP_TYPE_PICT_RESOURCE));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_ICON", INT2NUM(wxBITMAP_TYPE_ICON));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_ICON_RESOURCE", INT2NUM(wxBITMAP_TYPE_ICON_RESOURCE));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_ANI", INT2NUM(wxBITMAP_TYPE_ANI));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_IFF", INT2NUM(wxBITMAP_TYPE_IFF));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_MACCURSOR", INT2NUM(wxBITMAP_TYPE_MACCURSOR));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_MACCURSOR_RESOURCE", INT2NUM(wxBITMAP_TYPE_MACCURSOR_RESOURCE));
    rb_define_const(mWxRubyConstants,"BITMAP_TYPE_ANY", INT2NUM(wxBITMAP_TYPE_ANY));
    rb_define_const(mWxRubyConstants,"CURSOR_NONE", INT2NUM(wxCURSOR_NONE));
    rb_define_const(mWxRubyConstants,"CURSOR_ARROW", INT2NUM(wxCURSOR_ARROW));
    rb_define_const(mWxRubyConstants,"CURSOR_RIGHT_ARROW", INT2NUM(wxCURSOR_RIGHT_ARROW));
    rb_define_const(mWxRubyConstants,"CURSOR_BULLSEYE", INT2NUM(wxCURSOR_BULLSEYE));
    rb_define_const(mWxRubyConstants,"CURSOR_CHAR", INT2NUM(wxCURSOR_CHAR));
    rb_define_const(mWxRubyConstants,"CURSOR_CROSS", INT2NUM(wxCURSOR_CROSS));
    rb_define_const(mWxRubyConstants,"CURSOR_HAND", INT2NUM(wxCURSOR_HAND));
    rb_define_const(mWxRubyConstants,"CURSOR_IBEAM", INT2NUM(wxCURSOR_IBEAM));
    rb_define_const(mWxRubyConstants,"CURSOR_LEFT_BUTTON", INT2NUM(wxCURSOR_LEFT_BUTTON));
    rb_define_const(mWxRubyConstants,"CURSOR_MAGNIFIER", INT2NUM(wxCURSOR_MAGNIFIER));
    rb_define_const(mWxRubyConstants,"CURSOR_MIDDLE_BUTTON", INT2NUM(wxCURSOR_MIDDLE_BUTTON));
    rb_define_const(mWxRubyConstants,"CURSOR_NO_ENTRY", INT2NUM(wxCURSOR_NO_ENTRY));
    rb_define_const(mWxRubyConstants,"CURSOR_PAINT_BRUSH", INT2NUM(wxCURSOR_PAINT_BRUSH));
    rb_define_const(mWxRubyConstants,"CURSOR_PENCIL", INT2NUM(wxCURSOR_PENCIL));
    rb_define_const(mWxRubyConstants,"CURSOR_POINT_LEFT", INT2NUM(wxCURSOR_POINT_LEFT));
    rb_define_const(mWxRubyConstants,"CURSOR_POINT_RIGHT", INT2NUM(wxCURSOR_POINT_RIGHT));
    rb_define_const(mWxRubyConstants,"CURSOR_QUESTION_ARROW", INT2NUM(wxCURSOR_QUESTION_ARROW));
    rb_define_const(mWxRubyConstants,"CURSOR_RIGHT_BUTTON", INT2NUM(wxCURSOR_RIGHT_BUTTON));
    rb_define_const(mWxRubyConstants,"CURSOR_SIZENESW", INT2NUM(wxCURSOR_SIZENESW));
    rb_define_const(mWxRubyConstants,"CURSOR_SIZENS", INT2NUM(wxCURSOR_SIZENS));
    rb_define_const(mWxRubyConstants,"CURSOR_SIZENWSE", INT2NUM(wxCURSOR_SIZENWSE));
    rb_define_const(mWxRubyConstants,"CURSOR_SIZEWE", INT2NUM(wxCURSOR_SIZEWE));
    rb_define_const(mWxRubyConstants,"CURSOR_SIZING", INT2NUM(wxCURSOR_SIZING));
    rb_define_const(mWxRubyConstants,"CURSOR_SPRAYCAN", INT2NUM(wxCURSOR_SPRAYCAN));
    rb_define_const(mWxRubyConstants,"CURSOR_WAIT", INT2NUM(wxCURSOR_WAIT));
    rb_define_const(mWxRubyConstants,"CURSOR_WATCH", INT2NUM(wxCURSOR_WATCH));
    rb_define_const(mWxRubyConstants,"CURSOR_BLANK", INT2NUM(wxCURSOR_BLANK));
    rb_define_const(mWxRubyConstants,"CURSOR_DEFAULT", INT2NUM(wxCURSOR_DEFAULT));
    rb_define_const(mWxRubyConstants,"CURSOR_ARROWWAIT", INT2NUM(wxCURSOR_ARROWWAIT));
    rb_define_const(mWxRubyConstants,"CURSOR_MAX", INT2NUM(wxCURSOR_MAX));
    rb_define_const(mWxRubyConstants,"LC_VRULES", INT2NUM(0x0001));
    rb_define_const(mWxRubyConstants,"LC_HRULES", INT2NUM(0x0002));
    rb_define_const(mWxRubyConstants,"LC_ICON", INT2NUM(0x0004));
    rb_define_const(mWxRubyConstants,"LC_SMALL_ICON", INT2NUM(0x0008));
    rb_define_const(mWxRubyConstants,"LC_LIST", INT2NUM(0x0010));
    rb_define_const(mWxRubyConstants,"LC_REPORT", INT2NUM(0x0020));
    rb_define_const(mWxRubyConstants,"LC_ALIGN_TOP", INT2NUM(0x0040));
    rb_define_const(mWxRubyConstants,"LC_ALIGN_LEFT", INT2NUM(0x0080));
    rb_define_const(mWxRubyConstants,"LC_AUTOARRANGE", INT2NUM(0x0100));
    rb_define_const(mWxRubyConstants,"LC_VIRTUAL", INT2NUM(0x0200));
    rb_define_const(mWxRubyConstants,"LC_EDIT_LABELS", INT2NUM(0x0400));
    rb_define_const(mWxRubyConstants,"LC_NO_HEADER", INT2NUM(0x0800));
    rb_define_const(mWxRubyConstants,"LC_NO_SORT_HEADER", INT2NUM(0x1000));
    rb_define_const(mWxRubyConstants,"LC_SINGLE_SEL", INT2NUM(0x2000));
    rb_define_const(mWxRubyConstants,"LC_SORT_ASCENDING", INT2NUM(0x4000));
    rb_define_const(mWxRubyConstants,"LC_SORT_DESCENDING", INT2NUM(0x8000));
    rb_define_const(mWxRubyConstants,"LC_MASK_TYPE", INT2NUM((0x0004|0x0008|0x0010|0x0020)));
    rb_define_const(mWxRubyConstants,"LC_MASK_ALIGN", INT2NUM((0x0040|0x0080)));
    rb_define_const(mWxRubyConstants,"LC_MASK_SORT", INT2NUM((0x4000|0x8000)));
    rb_define_const(mWxRubyConstants,"LC_USER_TEXT", INT2NUM(0x0200));
    rb_define_const(mWxRubyConstants,"DEFAULT_SIZE", SWIG_NewPointerObj((void *) &wxDefaultSize, SWIGTYPE_p_wxSize, 0));
    rb_define_const(mWxRubyConstants,"DEFAULT_POSITION", SWIG_NewPointerObj((void *) &wxDefaultPosition, SWIGTYPE_p_wxPoint, 0));
    rb_define_const(mWxRubyConstants,"DOUBLE_BORDER", INT2NUM(wxBORDER_DOUBLE));
    rb_define_const(mWxRubyConstants,"SUNKEN_BORDER", INT2NUM(wxBORDER_SUNKEN));
    rb_define_const(mWxRubyConstants,"RAISED_BORDER", INT2NUM(wxBORDER_RAISED));
    rb_define_const(mWxRubyConstants,"BORDER", INT2NUM(wxBORDER_SIMPLE));
    rb_define_const(mWxRubyConstants,"SIMPLE_BORDER", INT2NUM(wxBORDER_SIMPLE));
    rb_define_const(mWxRubyConstants,"STATIC_BORDER", INT2NUM(wxBORDER_STATIC));
    rb_define_const(mWxRubyConstants,"NO_BORDER", INT2NUM(wxBORDER_NONE));
    rb_define_const(mWxRubyConstants,"FONTFAMILY_DEFAULT", INT2NUM(wxDEFAULT));
    rb_define_const(mWxRubyConstants,"FONTFAMILY_DECORATIVE", INT2NUM(wxDECORATIVE));
    rb_define_const(mWxRubyConstants,"FONTFAMILY_ROMAN", INT2NUM(wxROMAN));
    rb_define_const(mWxRubyConstants,"FONTFAMILY_SCRIPT", INT2NUM(wxSCRIPT));
    rb_define_const(mWxRubyConstants,"FONTFAMILY_SWISS", INT2NUM(wxSWISS));
    rb_define_const(mWxRubyConstants,"FONTFAMILY_MODERN", INT2NUM(wxMODERN));
    rb_define_const(mWxRubyConstants,"FONTFAMILY_TELETYPE", INT2NUM(wxTELETYPE));
    rb_define_const(mWxRubyConstants,"FONTWEIGHT_NORMAL", INT2NUM(wxNORMAL));
    rb_define_const(mWxRubyConstants,"FONTWEIGHT_LIGHT", INT2NUM(wxLIGHT));
    rb_define_const(mWxRubyConstants,"FONTWEIGHT_BOLD", INT2NUM(wxBOLD));
    rb_define_const(mWxRubyConstants,"FONTSTYLE_NORMAL", INT2NUM(wxNORMAL));
    rb_define_const(mWxRubyConstants,"FONTSTYLE_ITALIC", INT2NUM(wxITALIC));
    rb_define_const(mWxRubyConstants,"FONTSTYLE_SLANT", INT2NUM(wxSLANT));
    rb_define_const(mWxRubyConstants,"SOLID", INT2NUM(wxSOLID));
    rb_define_const(mWxRubyConstants,"DOT", INT2NUM(wxDOT));
    rb_define_const(mWxRubyConstants,"LONG_DASH", INT2NUM(wxLONG_DASH));
    rb_define_const(mWxRubyConstants,"SHORT_DASH", INT2NUM(wxSHORT_DASH));
    rb_define_const(mWxRubyConstants,"DOT_DASH", INT2NUM(wxDOT_DASH));
    rb_define_const(mWxRubyConstants,"USER_DASH", INT2NUM(wxUSER_DASH));
    rb_define_const(mWxRubyConstants,"TRANSPARENT", INT2NUM(wxTRANSPARENT));
    rb_define_const(mWxRubyConstants,"FILE_SELECTOR_DEFAULT_WILDCARD_STR", rb_str_new2("*.*"));
    rb_define_const(mWxRubyConstants,"ART_TOOLBAR", rb_str_new2("wxART_TOOLBAR_C"));
    rb_define_const(mWxRubyConstants,"ART_MENU", rb_str_new2("wxART_MENU_C"));
    rb_define_const(mWxRubyConstants,"ART_FRAME_ICON", rb_str_new2("wxART_FRAME_ICON_C"));
    rb_define_const(mWxRubyConstants,"ART_CMN_DIALOG", rb_str_new2("wxART_CMN_DIALOG_C"));
    rb_define_const(mWxRubyConstants,"ART_HELP_BROWSER", rb_str_new2("wxART_HELP_BROWSER_C"));
    rb_define_const(mWxRubyConstants,"ART_MESSAGE_BOX", rb_str_new2("wxART_MESSAGE_BOX_C"));
    rb_define_const(mWxRubyConstants,"ART_OTHER", rb_str_new2("wxART_OTHER_C"));
    rb_define_const(mWxRubyConstants,"ART_ADD_BOOKMARK", rb_str_new2("wxART_ADD_BOOKMARK"));
    rb_define_const(mWxRubyConstants,"ART_DEL_BOOKMARK", rb_str_new2("wxART_DEL_BOOKMARK"));
    rb_define_const(mWxRubyConstants,"ART_HELP_SIDE_PANEL", rb_str_new2("wxART_HELP_SIDE_PANEL"));
    rb_define_const(mWxRubyConstants,"ART_HELP_SETTINGS", rb_str_new2("wxART_HELP_SETTINGS"));
    rb_define_const(mWxRubyConstants,"ART_HELP_BOOK", rb_str_new2("wxART_HELP_BOOK"));
    rb_define_const(mWxRubyConstants,"ART_HELP_FOLDER", rb_str_new2("wxART_HELP_FOLDER"));
    rb_define_const(mWxRubyConstants,"ART_HELP_PAGE", rb_str_new2("wxART_HELP_PAGE"));
    rb_define_const(mWxRubyConstants,"ART_GO_BACK", rb_str_new2("wxART_GO_BACK"));
    rb_define_const(mWxRubyConstants,"ART_GO_FORWARD", rb_str_new2("wxART_GO_FORWARD"));
    rb_define_const(mWxRubyConstants,"ART_GO_UP", rb_str_new2("wxART_GO_UP"));
    rb_define_const(mWxRubyConstants,"ART_GO_DOWN", rb_str_new2("wxART_GO_DOWN"));
    rb_define_const(mWxRubyConstants,"ART_GO_TO_PARENT", rb_str_new2("wxART_GO_TO_PARENT"));
    rb_define_const(mWxRubyConstants,"ART_GO_HOME", rb_str_new2("wxART_GO_HOME"));
    rb_define_const(mWxRubyConstants,"ART_FILE_OPEN", rb_str_new2("wxART_FILE_OPEN"));
    rb_define_const(mWxRubyConstants,"ART_PRINT", rb_str_new2("wxART_PRINT"));
    rb_define_const(mWxRubyConstants,"ART_HELP", rb_str_new2("wxART_HELP"));
    rb_define_const(mWxRubyConstants,"ART_TIP", rb_str_new2("wxART_TIP"));
    rb_define_const(mWxRubyConstants,"ART_REPORT_VIEW", rb_str_new2("wxART_REPORT_VIEW"));
    rb_define_const(mWxRubyConstants,"ART_LIST_VIEW", rb_str_new2("wxART_LIST_VIEW"));
    rb_define_const(mWxRubyConstants,"ART_NEW_DIR", rb_str_new2("wxART_NEW_DIR"));
    rb_define_const(mWxRubyConstants,"ART_FOLDER", rb_str_new2("wxART_FOLDER"));
    rb_define_const(mWxRubyConstants,"ART_GO_DIR_UP", rb_str_new2("wxART_GO_DIR_UP"));
    rb_define_const(mWxRubyConstants,"ART_EXECUTABLE_FILE", rb_str_new2("wxART_EXECUTABLE_FILE"));
    rb_define_const(mWxRubyConstants,"ART_NORMAL_FILE", rb_str_new2("wxART_NORMAL_FILE"));
    rb_define_const(mWxRubyConstants,"ART_TICK_MARK", rb_str_new2("wxART_TICK_MARK"));
    rb_define_const(mWxRubyConstants,"ART_CROSS_MARK", rb_str_new2("wxART_CROSS_MARK"));
    rb_define_const(mWxRubyConstants,"ART_ERROR", rb_str_new2("wxART_ERROR"));
    rb_define_const(mWxRubyConstants,"ART_QUESTION", rb_str_new2("wxART_QUESTION"));
    rb_define_const(mWxRubyConstants,"ART_WARNING", rb_str_new2("wxART_WARNING"));
    rb_define_const(mWxRubyConstants,"ART_INFORMATION", rb_str_new2("wxART_INFORMATION"));
    rb_define_const(mWxRubyConstants,"ART_MISSING_IMAGE", rb_str_new2("wxART_MISSING_IMAGE"));
    rb_define_const(mWxRubyConstants,"LAYOUT_UNCONSTRAIINED", INT2NUM(wxUnconstrained));
    rb_define_const(mWxRubyConstants,"LAYOUT_AS_IS", INT2NUM(wxAsIs));
    rb_define_const(mWxRubyConstants,"LAYOUT_PERCENT_OF", INT2NUM(wxPercentOf));
    rb_define_const(mWxRubyConstants,"LAYOUT_ABOVE", INT2NUM(wxAbove));
    rb_define_const(mWxRubyConstants,"LAYOUT_BELOW", INT2NUM(wxBelow));
    rb_define_const(mWxRubyConstants,"LAYOUT_LEFT_OF", INT2NUM(wxLeftOf));
    rb_define_const(mWxRubyConstants,"LAYOUT_RIGHT_OF", INT2NUM(wxRightOf));
    rb_define_const(mWxRubyConstants,"LAYOUT_SAME_AS", INT2NUM(wxSameAs));
    rb_define_const(mWxRubyConstants,"LAYOUT_ABSOLUTE", INT2NUM(wxAbsolute));
    rb_define_const(mWxRubyConstants,"LAYOUT_LEFT", INT2NUM(wxLeft));
    rb_define_const(mWxRubyConstants,"LAYOUT_TOP", INT2NUM(wxTop));
    rb_define_const(mWxRubyConstants,"LAYOUT_RIGHT", INT2NUM(wxRight));
    rb_define_const(mWxRubyConstants,"LAYOUT_BOTTOM", INT2NUM(wxBottom));
    rb_define_const(mWxRubyConstants,"LAYOUT_WIDTH", INT2NUM(wxWidth));
    rb_define_const(mWxRubyConstants,"LAYOUT_HEIGHT", INT2NUM(wxHeight));
    rb_define_const(mWxRubyConstants,"LAYOUT_CENTRE", INT2NUM(wxCentre));
    rb_define_const(mWxRubyConstants,"LAYOUT_CENTER", INT2NUM(wxCenter));
    rb_define_const(mWxRubyConstants,"LAYOUT_CENTRE_X", INT2NUM(wxCentreX));
    rb_define_const(mWxRubyConstants,"LAYOUT_CENTRE_Y", INT2NUM(wxCentreY));
    rb_define_const(mWxRubyConstants,"NOT_FOUND", INT2NUM(-1));
    rb_define_const(mWxRubyConstants,"EmptyString", rb_str_new2("\0"));
}

