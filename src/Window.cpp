/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIG_DIRECTORS

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif


/* ruby.swg */
/* Implementation : RUBY */
#define SWIGRUBY 1

#include "ruby.h"

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

#define NUM2USHRT(n) (\
    (0 <= NUM2UINT(n) && NUM2UINT(n) <= USHRT_MAX)\
    ? (unsigned short) NUM2UINT(n) \
    : (rb_raise(rb_eArgError, "integer %d out of range of `unsigned short'",\
               NUM2UINT(n)), (short)0)\
)

#define NUM2SHRT(n) (\
    (SHRT_MIN <= NUM2INT(n) && NUM2INT(n) <= SHRT_MAX)\
    ? (short)NUM2INT(n)\
    : (rb_raise(rb_eArgError, "integer %d out of range of `short'",\
               NUM2INT(n)), (short)0)\
)

/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
} swig_class;

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING(RB_STRING_VALUE(s))->ptr
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING(RB_STRING_VALUE(s))->len
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { rb_raise(rb_eRuntimeError, (char *) msg ); } else


/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  if (!ti->clientdata) {
    swig_cast_info *cast = ti->cast;
    /* if (ti->clientdata == clientdata) return; */
    ti->clientdata = clientdata;
    
    while (cast) {
      if (!cast->converter)
	SWIG_TypeClientData(cast->type, clientdata);
      cast = cast->next;
    }
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Ruby_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Ruby_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Ruby_MustGetPtr(p, type, argnum, flags)
#define SWIG_GetModule(clientdata) \
  SWIG_Ruby_GetModule()
#define SWIG_SetModule(clientdata, pointer) \
  SWIG_Ruby_SetModule(pointer)

/* Ruby-specific SWIG API */

#define SWIG_InitRuntime() \
  SWIG_Ruby_InitRuntime()
#define SWIG_define_class(ty) \
  SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty) \
  SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value) \
  SWIG_Ruby_MangleStr(value)
#define SWIG_CheckConvert(value, ty) \
  SWIG_Ruby_CheckConvert(value, ty)
#define SWIG_NewPackedObj(ptr, sz, ty) \
  SWIG_Ruby_NewPackedObj(ptr, sz, ty)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)

/* rubydef.swg */
#ifdef __cplusplus
extern "C" {
#endif

static VALUE _mSWIG = Qnil;
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Initialize Ruby runtime support */
static void
SWIG_Ruby_InitRuntime(void)
{
    if (_mSWIG == Qnil) {
        _mSWIG = rb_define_module("SWIG");
    }
}

/* Define Ruby class for C type */
static void
SWIG_Ruby_define_class(swig_type_info *type)
{
    VALUE klass;
    char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    if (NIL_P(_cSWIG_Pointer)) {
	_cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
	rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
    }
    klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
    free((void *) klass_name);
}

/* Create a new pointer object */
static VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int own)
{
    char *klass_name;
    swig_class *sklass;
    VALUE klass;
    VALUE obj;
    
    if (!ptr)
	return Qnil;
    
    if (type->clientdata) {
      sklass = (swig_class *) type->clientdata;
      obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), (own ? VOIDFUNC(sklass->destroy) : 0), ptr);
    } else {
      klass_name = (char *) malloc(4 + strlen(type->name) + 1);
      sprintf(klass_name, "TYPE%s", type->name);
      klass = rb_const_get(_mSWIG, rb_intern(klass_name));
      free((void *) klass_name);
      obj = Data_Wrap_Struct(klass, 0, 0, ptr);
    }
    rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
    return obj;
}

/* Create a new class instance (always owned) */
static VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
    VALUE obj;
    swig_class *sklass = (swig_class *) type->clientdata;
    obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
    rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
    return obj;
}

/* Get type mangle from class name */
static SWIGINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "__swigtype__");
  return StringValuePtr(stype);
}

/* Convert a pointer value */
static int
SWIG_Ruby_ConvertPtr(VALUE obj, void **ptr, swig_type_info *ty, int flags)
{
  char *c;
  swig_cast_info *tc;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return 0;
  } else {
    Data_Get_Struct(obj, void, *ptr);
  }
  
  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
        if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
          if (*ptr == 0)
            rb_raise(rb_eRuntimeError, "This %s already released", ty->str);
          return 0;
        }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      if (flags & SWIG_POINTER_EXCEPTION)
        rb_raise(rb_eTypeError, "Expected %s", ty->str);
      else
        return -1;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      if (flags & SWIG_POINTER_EXCEPTION)
        rb_raise(rb_eTypeError, "Expected %s", ty->str);
      else
        return -1;
    }
    *ptr = SWIG_TypeCast(tc, *ptr);
  }
  return 0;
}

/* Convert a pointer value, signal an exception on a type mismatch */
static SWIGINLINE void *
SWIG_Ruby_MustGetPtr(VALUE obj, swig_type_info *ty, int argnum, int flags)
{
  void *result;
  SWIG_ConvertPtr(obj, &result, ty, flags | SWIG_POINTER_EXCEPTION);
  return result;
}

/* Check convert */
static SWIGINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c)
    return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

static VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
static void
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return;

type_error:

  if (flags) {
    if (ty) {
      rb_raise(rb_eTypeError, "Type error. Expected %s", ty->name);
    } else {
      rb_raise(rb_eTypeError, "Expected a pointer");
    }
  }
}

static swig_module_info *SWIG_Ruby_GetModule() {
    VALUE pointer;
    swig_module_info *ret = 0;

   /* first check if pointer already created */
    pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
    if (pointer != Qnil) {
      Data_Get_Struct(pointer, swig_module_info, ret);
    }
    return ret;
}

static void SWIG_Ruby_SetModule(swig_module_info *pointer) {
      /* register a new class */
      VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
      /* create and store the structure pointer to a global variable */
      swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
      rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

#ifdef __cplusplus
}
#endif



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_int swig_types[0]
#define SWIGTYPE_p_unsigned_long swig_types[1]
#define SWIGTYPE_p_wxAcceleratorTable swig_types[2]
#define SWIGTYPE_p_wxCaret swig_types[3]
#define SWIGTYPE_p_wxColour swig_types[4]
#define SWIGTYPE_p_wxCursor swig_types[5]
#define SWIGTYPE_p_wxDC swig_types[6]
#define SWIGTYPE_p_wxDropTarget swig_types[7]
#define SWIGTYPE_p_wxEvtHandler swig_types[8]
#define SWIGTYPE_p_wxFont swig_types[9]
#define SWIGTYPE_p_wxLayoutConstraints swig_types[10]
#define SWIGTYPE_p_wxMenu swig_types[11]
#define SWIGTYPE_p_wxPoint swig_types[12]
#define SWIGTYPE_p_wxRect swig_types[13]
#define SWIGTYPE_p_wxRegion swig_types[14]
#define SWIGTYPE_p_wxSize swig_types[15]
#define SWIGTYPE_p_wxSizer swig_types[16]
#define SWIGTYPE_p_wxString swig_types[17]
#define SWIGTYPE_p_wxToolTip swig_types[18]
#define SWIGTYPE_p_wxValidator swig_types[19]
#define SWIGTYPE_p_wxWindow swig_types[20]
static swig_type_info *swig_types[21];
static swig_module_info swig_module = {swig_types, 21, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_wxWindow
#define SWIG_name    "WxWindow"

static VALUE mWxWindow;

static void SWIG_AsVal(VALUE obj, int *val)
{
    *val = (int) NUM2INT(obj);
}


#  undef GetClassName
#  undef GetClassInfo
#  undef Yield
#  undef GetMessage
#  undef FindWindow
#  undef GetCharWidth
#  undef DrawText
#  undef StartDoc
#  undef CreateDialog
#  undef Sleep
#  undef _
#  undef Connect
#  undef connect

#include <wx/wx.h>
#include <wx/dcbuffer.h>

void GcMarkDeleted(void *);
bool GcIsDeleted(void *);
void GcMapPtrToValue(void *ptr, VALUE val);
VALUE GcGetValueFromPtr(void *ptr);
void GcFreefunc(void *);

extern VALUE mWxruby2;


#include <wx/datetime.h>

static VALUE wxWindow_this_should_never_be_called(wxWindow *self,wxDC *tmp){
	    return Qnil;
    }
static VALUE wxWindow_paint(wxWindow *self){   
	   wxWindow *ptr = self;
	
	   if(rb_block_given_p()) 
	   {
	      wxPaintDC dc(ptr);
	      
	      VALUE dcVal = SWIG_NewPointerObj((void *) &dc, SWIGTYPE_p_wxDC, 0);	      
	      rb_yield(dcVal);
	
	      DATA_PTR(dcVal) = NULL;
	   }
	   return Qnil;	
   
  }
/***********************************************************************
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Ruby extensions.
 *
 * Author : Lyle Johnson (lyle@users.sourceforge.net)
 *          Based on the original Python implementation by
 *          Mark Rose (mrose@stm.lbl.gov).
 ************************************************************************/

#ifdef __cplusplus

#include <string>

namespace Swig {
  struct body_args {
    VALUE recv;
    ID id;
    int argc;
    VALUE *argv;
  };

  /* Base class for director exceptions */
  class DirectorException {
    protected:
      VALUE swig_error;
    protected:
      DirectorException(VALUE error=Qnil) : swig_error(error) {}
    public:
      VALUE getType() const  { 
        return CLASS_OF(swig_error); 
      }
      VALUE getError() const {
        return swig_error;
      }
      virtual ~DirectorException() {}
  };

  /* Type mismatch in the return value from a Ruby method call */
  class DirectorTypeMismatchException : public Swig::DirectorException {
    public:
      DirectorTypeMismatchException(const char *msg="") {
        VALUE str = rb_str_new2("Swig director type mismatch: ");
        rb_str_concat(str, rb_str_new2(msg));
        swig_error = rb_exc_new3(rb_eTypeError, str);
      }
  };

  /* Any Ruby exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException {
    public:
      DirectorMethodException(VALUE error) : Swig::DirectorException(error) {}
  };

  /* Attempted to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException {};


  /* Simple thread abstraction for pthreads on win32 */
#ifdef __THREAD__
#define __PTHREAD__
#if defined(_WIN32) || defined(__WIN32__)
#define pthread_mutex_lock EnterCriticalSection
#define pthread_mutex_unlock LeaveCriticalSection
#define pthread_mutex_t CRITICAL_SECTION
#define MUTEX_INIT(var) CRITICAL_SECTION var
#else
#include <pthread.h>
#define MUTEX_INIT(var) pthread_mutex_t var = PTHREAD_MUTEX_INITIALIZER 
#endif
#endif

  /* director base class */
  class Director {
    private:
      /* pointer to the wrapped Ruby object */
      VALUE swig_self;
      /* flag indicating whether the object is owned by Ruby or c++ */
      mutable bool swig_disown_flag;
      /* shared flag for breaking recursive director calls */
      static bool swig_up;

#ifdef __PTHREAD__
      /* locks for sharing the swig_up flag in a threaded environment */
      static pthread_mutex_t swig_mutex_up;
      static bool swig_mutex_active;
      static pthread_t swig_mutex_thread;
#endif

      /* reset the swig_up flag once the routing direction has been determined */
#ifdef __PTHREAD__
      void swig_clear_up() const { 
        Swig::Director::swig_up = false; 
        Swig::Director::swig_mutex_active = false;
        pthread_mutex_unlock(&swig_mutex_up);
      }
#else
      void swig_clear_up() const { 
        Swig::Director::swig_up = false; 
      }
#endif

    public:
      /* wrap a Ruby object, optionally taking ownership */
      Director(VALUE self) : swig_self(self), swig_disown_flag(false) {
      }

      /* discard our reference at destruction */
      virtual ~Director() {
      }

      /* return a pointer to the wrapped Ruby object */
      VALUE swig_get_self() const { 
        return swig_self; 
      }

      /* get the swig_up flag to determine if the method call should be routed
       * to the c++ base class or through the wrapped Ruby object
       */
#ifdef __PTHREAD__
      bool swig_get_up() const { 
        if (Swig::Director::swig_mutex_active) {
          if (pthread_equal(Swig::Director::swig_mutex_thread, pthread_self())) {
            bool up = swig_up;
            swig_clear_up();
            return up;
          }
        }
        return false;
      }
#else 
      bool swig_get_up() const { 
        bool up = swig_up;
        swig_up = false;
        return up;
      }
#endif

      /* set the swig_up flag if the next method call should be directed to
       * the c++ base class rather than the wrapped Ruby object
       */
#ifdef __PTHREAD__
      void swig_set_up() const { 
        pthread_mutex_lock(&Swig::Director::swig_mutex_up);
        Swig::Director::swig_mutex_thread = pthread_self();
        Swig::Director::swig_mutex_active = true;
        Swig::Director::swig_up = true;
      }
#else 
      void swig_set_up() const { 
        Swig::Director::swig_up = true; 
      }
#endif

      /* acquire ownership of the wrapped Ruby object (the sense of "disown"
       * is from Ruby) */
      void swig_disown() const { 
        if (!swig_disown_flag) { 
          swig_disown_flag = true;
        } 
      }
  };

//  bool Swig::Director::swig_up = false;

#ifdef __PTHREAD__
  MUTEX_INIT(Swig::Director::swig_mutex_up);
  pthread_t Swig::Director::swig_mutex_thread;
  bool Swig::Director::swig_mutex_active = false;
#endif

}

#endif /* __cplusplus */




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "Window.h"

SwigDirector_wxWindow::SwigDirector_wxWindow(VALUE self): wxWindow(), Swig::Director(self) {
    
}



SwigDirector_wxWindow::SwigDirector_wxWindow(VALUE self, wxWindow *parent, wxWindowID id, wxPoint const &pos, wxSize const &size, long style, wxString const &name): wxWindow(parent, id, pos, size, style, name), Swig::Director(self) {
    
}



bool SwigDirector_wxWindow::SetForegroundColour(wxColour const &colour) {
    wxColour * nc_tmp_colour = const_cast<wxColour *>(&colour) ;
    VALUE obj0 = Qnil ;
    bool c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::SetForegroundColour(colour);
    }
    obj0 = SWIG_NewPointerObj(nc_tmp_colour, SWIGTYPE_p_wxColour, 0);
    result = rb_funcall(swig_get_self(), rb_intern("set_foreground_colour"), 1,obj0);
    c_result = (bool) RTEST(result);
    return (bool) c_result;
}


bool SwigDirector_wxWindow::SetBackgroundColour(wxColour const &colour) {
    wxColour * nc_tmp_colour = const_cast<wxColour *>(&colour) ;
    VALUE obj0 = Qnil ;
    bool c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::SetBackgroundColour(colour);
    }
    obj0 = SWIG_NewPointerObj(nc_tmp_colour, SWIGTYPE_p_wxColour, 0);
    result = rb_funcall(swig_get_self(), rb_intern("set_background_colour"), 1,obj0);
    c_result = (bool) RTEST(result);
    return (bool) c_result;
}


void SwigDirector_wxWindow::ReleaseMouse() {
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::ReleaseMouse();
        return;
    }
    result = rb_funcall(swig_get_self(), rb_intern("release_mouse"), 0, NULL);
}


void SwigDirector_wxWindow::CaptureMouse() {
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::CaptureMouse();
        return;
    }
    result = rb_funcall(swig_get_self(), rb_intern("capture_mouse"), 0, NULL);
}


void SwigDirector_wxWindow::SetFocusFromKbd() {
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::SetFocusFromKbd();
        return;
    }
    result = rb_funcall(swig_get_self(), rb_intern("set_focus_from_kbd"), 0, NULL);
}


void SwigDirector_wxWindow::SetFocus() {
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::SetFocus();
        return;
    }
    result = rb_funcall(swig_get_self(), rb_intern("set_focus"), 0, NULL);
}


bool SwigDirector_wxWindow::Reparent(wxWindow *newParent) {
    VALUE obj0 = Qnil ;
    bool c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::Reparent(newParent);
    }
    obj0 = SWIG_NewPointerObj(newParent, SWIGTYPE_p_wxWindow, 0);
    result = rb_funcall(swig_get_self(), rb_intern("reparent"), 1,obj0);
    c_result = (bool) RTEST(result);
    return (bool) c_result;
}


void SwigDirector_wxWindow::RemoveChild(wxWindow *child) {
    VALUE obj0 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::RemoveChild(child);
        return;
    }
    obj0 = SWIG_NewPointerObj(child, SWIGTYPE_p_wxWindow, 0);
    result = rb_funcall(swig_get_self(), rb_intern("remove_child"), 1,obj0);
}


void SwigDirector_wxWindow::AddChild(wxWindow *child) {
    VALUE obj0 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::AddChild(child);
        return;
    }
    obj0 = SWIG_NewPointerObj(child, SWIGTYPE_p_wxWindow, 0);
    result = rb_funcall(swig_get_self(), rb_intern("add_child"), 1,obj0);
}


SwigDirector_wxWindow::~SwigDirector_wxWindow() {
}

void SwigDirector_wxWindow::SetClientSize(wxSize const &size) {
    wxSize * nc_tmp_size = const_cast<wxSize *>(&size) ;
    VALUE obj0 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::SetClientSize(size);
        return;
    }
    obj0 = SWIG_NewPointerObj(nc_tmp_size, SWIGTYPE_p_wxSize, 0);
    result = rb_funcall(swig_get_self(), rb_intern("set_client_size"), 1,obj0);
}


void SwigDirector_wxWindow::SetSize(wxSize const &size) {
    wxSize * nc_tmp_size = const_cast<wxSize *>(&size) ;
    VALUE obj0 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::SetSize(size);
        return;
    }
    obj0 = SWIG_NewPointerObj(nc_tmp_size, SWIGTYPE_p_wxSize, 0);
    result = rb_funcall(swig_get_self(), rb_intern("set_size"), 1,obj0);
}


bool SwigDirector_wxWindow::IsShown() const {
    bool c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::IsShown();
    }
    result = rb_funcall(swig_get_self(), rb_intern("is_shown"), 0, NULL);
    c_result = (bool) RTEST(result);
    return (bool) c_result;
}


bool SwigDirector_wxWindow::IsRetained() const {
    bool c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::IsRetained();
    }
    result = rb_funcall(swig_get_self(), rb_intern("is_retained"), 0, NULL);
    c_result = (bool) RTEST(result);
    return (bool) c_result;
}


bool SwigDirector_wxWindow::IsEnabled() const {
    bool c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::IsEnabled();
    }
    result = rb_funcall(swig_get_self(), rb_intern("is_enabled"), 0, NULL);
    c_result = (bool) RTEST(result);
    return (bool) c_result;
}


bool SwigDirector_wxWindow::HasCapture() const {
    bool c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::HasCapture();
    }
    result = rb_funcall(swig_get_self(), rb_intern("has_capture"), 0, NULL);
    c_result = (bool) RTEST(result);
    return (bool) c_result;
}


int SwigDirector_wxWindow::GetCharHeight() const {
    int c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::GetCharHeight();
    }
    result = rb_funcall(swig_get_self(), rb_intern("get_char_height"), 0, NULL);
    c_result = (int) NUM2INT(result);
    return (int) c_result;
}


int SwigDirector_wxWindow::GetCharWidth() const {
    int c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::GetCharWidth();
    }
    result = rb_funcall(swig_get_self(), rb_intern("get_char_width"), 0, NULL);
    c_result = (int) NUM2INT(result);
    return (int) c_result;
}


wxWindow *SwigDirector_wxWindow::GetParent() const {
    wxWindow *c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::GetParent();
    }
    result = rb_funcall(swig_get_self(), rb_intern("get_parent"), 0, NULL);
    if ((SWIG_ConvertPtr(result,(void **) &c_result, SWIGTYPE_p_wxWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) throw Swig::DirectorTypeMismatchException("Pointer conversion failed.");
    return (wxWindow *) c_result;
}


void SwigDirector_wxWindow::SetSize(int x, int y, int width, int height, int sizeFlags) {
    VALUE obj0 = Qnil ;
    VALUE obj1 = Qnil ;
    VALUE obj2 = Qnil ;
    VALUE obj3 = Qnil ;
    VALUE obj4 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::SetSize(x,y,width,height,sizeFlags);
        return;
    }
    obj0 = INT2NUM(x);
    obj1 = INT2NUM(y);
    obj2 = INT2NUM(width);
    obj3 = INT2NUM(height);
    obj4 = INT2NUM(sizeFlags);
    result = rb_funcall(swig_get_self(), rb_intern("set_dimensions"), 5,obj0,obj1,obj2,obj3,obj4);
}


void SwigDirector_wxWindow::SetClientSize(int width, int height) {
    VALUE obj0 = Qnil ;
    VALUE obj1 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::SetClientSize(width,height);
        return;
    }
    obj0 = INT2NUM(width);
    obj1 = INT2NUM(height);
    result = rb_funcall(swig_get_self(), rb_intern("set_client_size"), 2,obj0,obj1);
}


void SwigDirector_wxWindow::SetSize(int width, int height) {
    VALUE obj0 = Qnil ;
    VALUE obj1 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::SetSize(width,height);
        return;
    }
    obj0 = INT2NUM(width);
    obj1 = INT2NUM(height);
    result = rb_funcall(swig_get_self(), rb_intern("set_size"), 2,obj0,obj1);
}


void SwigDirector_wxWindow::SetSizeHints(int minW, int minH, int maxW, int maxH, int incW, int incH) {
    VALUE obj0 = Qnil ;
    VALUE obj1 = Qnil ;
    VALUE obj2 = Qnil ;
    VALUE obj3 = Qnil ;
    VALUE obj4 = Qnil ;
    VALUE obj5 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::SetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }
    obj0 = INT2NUM(minW);
    obj1 = INT2NUM(minH);
    obj2 = INT2NUM(maxW);
    obj3 = INT2NUM(maxH);
    obj4 = INT2NUM(incW);
    obj5 = INT2NUM(incH);
    result = rb_funcall(swig_get_self(), rb_intern("set_size_hints"), 6,obj0,obj1,obj2,obj3,obj4,obj5);
}


void SwigDirector_wxWindow::SetVirtualSizeHints(int minW, int minH, int maxW, int maxH) {
    VALUE obj0 = Qnil ;
    VALUE obj1 = Qnil ;
    VALUE obj2 = Qnil ;
    VALUE obj3 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::SetVirtualSizeHints(minW,minH,maxW,maxH);
        return;
    }
    obj0 = INT2NUM(minW);
    obj1 = INT2NUM(minH);
    obj2 = INT2NUM(maxW);
    obj3 = INT2NUM(maxH);
    result = rb_funcall(swig_get_self(), rb_intern("set_virtual_size_hints"), 4,obj0,obj1,obj2,obj3);
}


void SwigDirector_wxWindow::SetValidator(wxValidator const &validator) {
    wxValidator * nc_tmp_validator = const_cast<wxValidator *>(&validator) ;
    VALUE obj0 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::SetValidator(validator);
        return;
    }
    obj0 = SWIG_NewPointerObj(nc_tmp_validator, SWIGTYPE_p_wxValidator, 0);
    result = rb_funcall(swig_get_self(), rb_intern("set_validator"), 1,obj0);
}


void SwigDirector_wxWindow::ScrollWindow(int dx, int dy, wxRect const *rect) {
    VALUE obj0 = Qnil ;
    VALUE obj1 = Qnil ;
    wxRect * nc_tmp_rect = const_cast<wxRect *>(rect) ;
    VALUE obj2 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::ScrollWindow(dx,dy,rect);
        return;
    }
    obj0 = INT2NUM(dx);
    obj1 = INT2NUM(dy);
    obj2 = SWIG_NewPointerObj(nc_tmp_rect, SWIGTYPE_p_wxRect, 0);
    result = rb_funcall(swig_get_self(), rb_intern("scroll_window"), 3,obj0,obj1,obj2);
}


void SwigDirector_wxWindow::RefreshRect(wxRect const &rect) {
    wxRect * nc_tmp_rect = const_cast<wxRect *>(&rect) ;
    VALUE obj0 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::RefreshRect(rect);
        return;
    }
    obj0 = SWIG_NewPointerObj(nc_tmp_rect, SWIGTYPE_p_wxRect, 0);
    result = rb_funcall(swig_get_self(), rb_intern("refresh_rect"), 1,obj0);
}


void SwigDirector_wxWindow::Refresh(bool eraseBackground, wxRect const *rect) {
    VALUE obj0 = Qnil ;
    wxRect * nc_tmp_rect = const_cast<wxRect *>(rect) ;
    VALUE obj1 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::Refresh(eraseBackground,rect);
        return;
    }
    obj0 = eraseBackground ? Qtrue : Qfalse;
    obj1 = SWIG_NewPointerObj(nc_tmp_rect, SWIGTYPE_p_wxRect, 0);
    result = rb_funcall(swig_get_self(), rb_intern("refresh"), 2,obj0,obj1);
}


void SwigDirector_wxWindow::SetSize(wxRect const &rect) {
    wxRect * nc_tmp_rect = const_cast<wxRect *>(&rect) ;
    VALUE obj0 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::SetSize(rect);
        return;
    }
    obj0 = SWIG_NewPointerObj(nc_tmp_rect, SWIGTYPE_p_wxRect, 0);
    result = rb_funcall(swig_get_self(), rb_intern("set_size"), 1,obj0);
}


void SwigDirector_wxWindow::SetAcceleratorTable(wxAcceleratorTable const &accel) {
    wxAcceleratorTable * nc_tmp_accel = const_cast<wxAcceleratorTable *>(&accel) ;
    VALUE obj0 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::SetAcceleratorTable(accel);
        return;
    }
    obj0 = SWIG_NewPointerObj(nc_tmp_accel, SWIGTYPE_p_wxAcceleratorTable, 0);
    result = rb_funcall(swig_get_self(), rb_intern("set_accelerator_table"), 1,obj0);
}


void SwigDirector_wxWindow::GetTextExtent(wxString const &string, int *x, int *y, int *descent, int *externalLeading, wxFont const *font) const {
    VALUE obj0 = Qnil ;
    VALUE obj1 = Qnil ;
    VALUE obj2 = Qnil ;
    VALUE obj3 = Qnil ;
    VALUE obj4 = Qnil ;
    wxFont * nc_tmp_font = const_cast<wxFont *>(font) ;
    VALUE obj5 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::GetTextExtent(string,x,y,descent,externalLeading,font);
        return;
    }
    obj0 = rb_str_new2((const char *)(&string)->mb_str());
    obj1 = SWIG_NewPointerObj(x, SWIGTYPE_p_int, 0);
    obj2 = SWIG_NewPointerObj(y, SWIGTYPE_p_int, 0);
    obj3 = SWIG_NewPointerObj(descent, SWIGTYPE_p_int, 0);
    obj4 = SWIG_NewPointerObj(externalLeading, SWIGTYPE_p_int, 0);
    obj5 = SWIG_NewPointerObj(nc_tmp_font, SWIGTYPE_p_wxFont, 0);
    result = rb_funcall(swig_get_self(), rb_intern(""), 6,obj0,obj1,obj2,obj3,obj4,obj5);
}


void SwigDirector_wxWindow::SetWindowStyleFlag(long style) {
    VALUE obj0 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::SetWindowStyleFlag(style);
        return;
    }
    obj0 = LONG2NUM(style);
    result = rb_funcall(swig_get_self(), rb_intern("set_window_style_flag"), 1,obj0);
}


bool SwigDirector_wxWindow::SetCursor(wxCursor const &cursor) {
    wxCursor * nc_tmp_cursor = const_cast<wxCursor *>(&cursor) ;
    VALUE obj0 = Qnil ;
    bool c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::SetCursor(cursor);
    }
    obj0 = SWIG_NewPointerObj(nc_tmp_cursor, SWIGTYPE_p_wxCursor, 0);
    result = rb_funcall(swig_get_self(), rb_intern("set_cursor"), 1,obj0);
    c_result = (bool) RTEST(result);
    return (bool) c_result;
}


void SwigDirector_wxWindow::Thaw() {
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::Thaw();
        return;
    }
    result = rb_funcall(swig_get_self(), rb_intern("thaw"), 0, NULL);
}


bool SwigDirector_wxWindow::TransferDataFromWindow() {
    bool c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::TransferDataFromWindow();
    }
    result = rb_funcall(swig_get_self(), rb_intern("transfer_data_from_window"), 0, NULL);
    c_result = (bool) RTEST(result);
    return (bool) c_result;
}


bool SwigDirector_wxWindow::TransferDataToWindow() {
    bool c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::TransferDataToWindow();
    }
    result = rb_funcall(swig_get_self(), rb_intern("transfer_data_to_window"), 0, NULL);
    c_result = (bool) RTEST(result);
    return (bool) c_result;
}


void SwigDirector_wxWindow::Freeze() {
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::Freeze();
        return;
    }
    result = rb_funcall(swig_get_self(), rb_intern("freeze"), 0, NULL);
}


void SwigDirector_wxWindow::FitInside() {
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::FitInside();
        return;
    }
    result = rb_funcall(swig_get_self(), rb_intern("fit_inside"), 0, NULL);
}


void SwigDirector_wxWindow::Update() {
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::Update();
        return;
    }
    result = rb_funcall(swig_get_self(), rb_intern("update"), 0, NULL);
}


bool SwigDirector_wxWindow::Validate() {
    bool c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::Validate();
    }
    result = rb_funcall(swig_get_self(), rb_intern("validate"), 0, NULL);
    c_result = (bool) RTEST(result);
    return (bool) c_result;
}


void SwigDirector_wxWindow::Fit() {
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::Fit();
        return;
    }
    result = rb_funcall(swig_get_self(), rb_intern("fit"), 0, NULL);
}


void SwigDirector_wxWindow::ScreenToClient(int *x, int *y) const {
    VALUE obj0 = Qnil ;
    VALUE obj1 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::ScreenToClient(x,y);
        return;
    }
    obj0 = SWIG_NewPointerObj(x, SWIGTYPE_p_int, 0);
    obj1 = SWIG_NewPointerObj(y, SWIGTYPE_p_int, 0);
    result = rb_funcall(swig_get_self(), rb_intern("screen_to_client"), 2,obj0,obj1);
}


void SwigDirector_wxWindow::ClientToScreen(int *x, int *y) const {
    VALUE obj0 = Qnil ;
    VALUE obj1 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::ClientToScreen(x,y);
        return;
    }
    obj0 = SWIG_NewPointerObj(x, SWIGTYPE_p_int, 0);
    obj1 = SWIG_NewPointerObj(y, SWIGTYPE_p_int, 0);
    result = rb_funcall(swig_get_self(), rb_intern("client_to_screen"), 2,obj0,obj1);
}


void SwigDirector_wxWindow::GetClientSize(int *width, int *height) const {
    VALUE obj0 = Qnil ;
    VALUE obj1 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::GetClientSize(width,height);
        return;
    }
    obj0 = SWIG_NewPointerObj(width, SWIGTYPE_p_int, 0);
    obj1 = SWIG_NewPointerObj(height, SWIGTYPE_p_int, 0);
    result = rb_funcall(swig_get_self(), rb_intern("get_client_size"), 2,obj0,obj1);
}


void SwigDirector_wxWindow::GetPosition(int *x, int *y) const {
    VALUE obj0 = Qnil ;
    VALUE obj1 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::GetPosition(x,y);
        return;
    }
    obj0 = SWIG_NewPointerObj(x, SWIGTYPE_p_int, 0);
    obj1 = SWIG_NewPointerObj(y, SWIGTYPE_p_int, 0);
    result = rb_funcall(swig_get_self(), rb_intern("get_position"), 2,obj0,obj1);
}


void SwigDirector_wxWindow::GetSize(int *width, int *height) const {
    VALUE obj0 = Qnil ;
    VALUE obj1 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::GetSize(width,height);
        return;
    }
    obj0 = SWIG_NewPointerObj(width, SWIGTYPE_p_int, 0);
    obj1 = SWIG_NewPointerObj(height, SWIGTYPE_p_int, 0);
    result = rb_funcall(swig_get_self(), rb_intern("get_size"), 2,obj0,obj1);
}


void SwigDirector_wxWindow::SetScrollPos(int orientation, int pos, bool refresh) {
    VALUE obj0 = Qnil ;
    VALUE obj1 = Qnil ;
    VALUE obj2 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::SetScrollPos(orientation,pos,refresh);
        return;
    }
    obj0 = INT2NUM(orientation);
    obj1 = INT2NUM(pos);
    obj2 = refresh ? Qtrue : Qfalse;
    result = rb_funcall(swig_get_self(), rb_intern("set_scroll_pos"), 3,obj0,obj1,obj2);
}


void SwigDirector_wxWindow::SetScrollbar(int orientation, int position, int thumbSize, int range, bool refresh) {
    VALUE obj0 = Qnil ;
    VALUE obj1 = Qnil ;
    VALUE obj2 = Qnil ;
    VALUE obj3 = Qnil ;
    VALUE obj4 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::SetScrollbar(orientation,position,thumbSize,range,refresh);
        return;
    }
    obj0 = INT2NUM(orientation);
    obj1 = INT2NUM(position);
    obj2 = INT2NUM(thumbSize);
    obj3 = INT2NUM(range);
    obj4 = refresh ? Qtrue : Qfalse;
    result = rb_funcall(swig_get_self(), rb_intern("set_scrollbar"), 5,obj0,obj1,obj2,obj3,obj4);
}


void SwigDirector_wxWindow::MakeModal(bool flag) {
    VALUE obj0 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::MakeModal(flag);
        return;
    }
    obj0 = flag ? Qtrue : Qfalse;
    result = rb_funcall(swig_get_self(), rb_intern("make_modal"), 1,obj0);
}


bool SwigDirector_wxWindow::Enable(bool enable) {
    VALUE obj0 = Qnil ;
    bool c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::Enable(enable);
    }
    obj0 = enable ? Qtrue : Qfalse;
    result = rb_funcall(swig_get_self(), rb_intern("enable"), 1,obj0);
    c_result = (bool) RTEST(result);
    return (bool) c_result;
}


void SwigDirector_wxWindow::SetThemeEnabled(bool enable) {
    VALUE obj0 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::SetThemeEnabled(enable);
        return;
    }
    obj0 = enable ? Qtrue : Qfalse;
    result = rb_funcall(swig_get_self(), rb_intern("set_theme_enabled"), 1,obj0);
}


bool SwigDirector_wxWindow::Show(bool show) {
    VALUE obj0 = Qnil ;
    bool c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::Show(show);
    }
    obj0 = show ? Qtrue : Qfalse;
    result = rb_funcall(swig_get_self(), rb_intern("show"), 1,obj0);
    c_result = (bool) RTEST(result);
    return (bool) c_result;
}


void SwigDirector_wxWindow::SetName(wxString const &name) {
    VALUE obj0 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::SetName(name);
        return;
    }
    obj0 = rb_str_new2((const char *)(&name)->mb_str());
    result = rb_funcall(swig_get_self(), rb_intern("set_name"), 1,obj0);
}


void SwigDirector_wxWindow::SetHelpText(wxString const &helpText) {
    VALUE obj0 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::SetHelpText(helpText);
        return;
    }
    obj0 = rb_str_new2((const char *)(&helpText)->mb_str());
    result = rb_funcall(swig_get_self(), rb_intern("set_help_text"), 1,obj0);
}


void SwigDirector_wxWindow::SetTitle(wxString const &title) {
    VALUE obj0 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::SetTitle(title);
        return;
    }
    obj0 = rb_str_new2((const char *)(&title)->mb_str());
    result = rb_funcall(swig_get_self(), rb_intern("set_title"), 1,obj0);
}


void SwigDirector_wxWindow::DestroyChildren() {
    VALUE result;
    
    if (swig_get_up()) {
        wxWindow::DestroyChildren();
        return;
    }
    result = rb_funcall(swig_get_self(), rb_intern("destroy_children"), 0, NULL);
}


bool SwigDirector_wxWindow::ScrollPages(int pages) {
    VALUE obj0 = Qnil ;
    bool c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::ScrollPages(pages);
    }
    obj0 = INT2NUM(pages);
    result = rb_funcall(swig_get_self(), rb_intern("scroll_pages"), 1,obj0);
    c_result = (bool) RTEST(result);
    return (bool) c_result;
}


bool SwigDirector_wxWindow::ScrollLines(int lines) {
    VALUE obj0 = Qnil ;
    bool c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::ScrollLines(lines);
    }
    obj0 = INT2NUM(lines);
    result = rb_funcall(swig_get_self(), rb_intern("scroll_lines"), 1,obj0);
    c_result = (bool) RTEST(result);
    return (bool) c_result;
}


int SwigDirector_wxWindow::GetScrollThumb(int orientation) {
    VALUE obj0 = Qnil ;
    int c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::GetScrollThumb(orientation);
    }
    obj0 = INT2NUM(orientation);
    result = rb_funcall(swig_get_self(), rb_intern("get_scroll_thumb"), 1,obj0);
    c_result = (int) NUM2INT(result);
    return (int) c_result;
}


int SwigDirector_wxWindow::GetScrollPos(int orientation) {
    VALUE obj0 = Qnil ;
    int c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::GetScrollPos(orientation);
    }
    obj0 = INT2NUM(orientation);
    result = rb_funcall(swig_get_self(), rb_intern("get_scroll_pos"), 1,obj0);
    c_result = (int) NUM2INT(result);
    return (int) c_result;
}


int SwigDirector_wxWindow::GetScrollRange(int orientation) {
    VALUE obj0 = Qnil ;
    int c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::GetScrollRange(orientation);
    }
    obj0 = INT2NUM(orientation);
    result = rb_funcall(swig_get_self(), rb_intern("get_scroll_range"), 1,obj0);
    c_result = (int) NUM2INT(result);
    return (int) c_result;
}


bool SwigDirector_wxWindow::Destroy() {
    bool c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return wxWindow::Destroy();
    }
    result = rb_funcall(swig_get_self(), rb_intern("destroy"), 0, NULL);
    c_result = (bool) RTEST(result);
    return (bool) c_result;
}


extern swig_class cWxEvtHandler;
swig_class cWxWindow;

static VALUE
_wrap_new_wxWindow__SWIG_0(int argc, VALUE *argv, VALUE self) {
    VALUE arg1 ;
    wxWindow *result;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    arg1 = self;
    char *classname = "WxWindow::WxWindow";
    if ( strcmp(rb_obj_classname(self), classname) != 0 ) {
        /* subclassed */
        result = (wxWindow *)new SwigDirector_wxWindow(arg1);
        
    } else {
        result = (wxWindow *)new wxWindow();
        
    }
    DATA_PTR(self) = result;
    return self;
}


static VALUE
_wrap_new_wxWindow__SWIG_1(int argc, VALUE *argv, VALUE self) {
    VALUE arg1 ;
    wxWindow *arg2 = (wxWindow *) 0 ;
    wxWindowID arg3 ;
    wxPoint *arg4 = 0 ;
    wxSize *arg5 = 0 ;
    long arg6 ;
    wxString *arg7 = 0 ;
    wxWindow *result;
    
    if ((argc < 6) || (argc > 6))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc);
    arg1 = self;
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxWindow, 1);
    arg3 = NUM2INT(argv[1]);
    SWIG_ConvertPtr(argv[2], (void **) &arg4, SWIGTYPE_p_wxPoint, 1); if (arg4 == NULL) rb_raise(rb_eTypeError, "null reference");
    SWIG_ConvertPtr(argv[3], (void **) &arg5, SWIGTYPE_p_wxSize, 1); if (arg5 == NULL) rb_raise(rb_eTypeError, "null reference");
    arg6 = NUM2LONG(argv[4]);
    {
        arg7 = new wxString(STR2CSTR(argv[5]), wxConvUTF8);
    }
    char *classname = "WxWindow::WxWindow";
    if ( strcmp(rb_obj_classname(self), classname) != 0 ) {
        /* subclassed */
        result = (wxWindow *)new SwigDirector_wxWindow(arg1,arg2,arg3,(wxPoint const &)*arg4,(wxSize const &)*arg5,arg6,(wxString const &)*arg7);
        
    } else {
        result = (wxWindow *)new wxWindow(arg2,arg3,(wxPoint const &)*arg4,(wxSize const &)*arg5,arg6,(wxString const &)*arg7);
        
    }
    DATA_PTR(self) = result;
    return self;
}


static VALUE
_wrap_new_wxWindow__SWIG_2(int argc, VALUE *argv, VALUE self) {
    VALUE arg1 ;
    wxWindow *arg2 = (wxWindow *) 0 ;
    wxWindowID arg3 ;
    wxPoint *arg4 = 0 ;
    wxSize *arg5 = 0 ;
    long arg6 ;
    wxWindow *result;
    
    if ((argc < 5) || (argc > 5))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc);
    arg1 = self;
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxWindow, 1);
    arg3 = NUM2INT(argv[1]);
    SWIG_ConvertPtr(argv[2], (void **) &arg4, SWIGTYPE_p_wxPoint, 1); if (arg4 == NULL) rb_raise(rb_eTypeError, "null reference");
    SWIG_ConvertPtr(argv[3], (void **) &arg5, SWIGTYPE_p_wxSize, 1); if (arg5 == NULL) rb_raise(rb_eTypeError, "null reference");
    arg6 = NUM2LONG(argv[4]);
    char *classname = "WxWindow::WxWindow";
    if ( strcmp(rb_obj_classname(self), classname) != 0 ) {
        /* subclassed */
        result = (wxWindow *)new SwigDirector_wxWindow(arg1,arg2,arg3,(wxPoint const &)*arg4,(wxSize const &)*arg5,arg6);
        
    } else {
        result = (wxWindow *)new wxWindow(arg2,arg3,(wxPoint const &)*arg4,(wxSize const &)*arg5,arg6);
        
    }
    DATA_PTR(self) = result;
    return self;
}


static VALUE
_wrap_new_wxWindow__SWIG_3(int argc, VALUE *argv, VALUE self) {
    VALUE arg1 ;
    wxWindow *arg2 = (wxWindow *) 0 ;
    wxWindowID arg3 ;
    wxPoint *arg4 = 0 ;
    wxSize *arg5 = 0 ;
    wxWindow *result;
    
    if ((argc < 4) || (argc > 4))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc);
    arg1 = self;
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxWindow, 1);
    arg3 = NUM2INT(argv[1]);
    SWIG_ConvertPtr(argv[2], (void **) &arg4, SWIGTYPE_p_wxPoint, 1); if (arg4 == NULL) rb_raise(rb_eTypeError, "null reference");
    SWIG_ConvertPtr(argv[3], (void **) &arg5, SWIGTYPE_p_wxSize, 1); if (arg5 == NULL) rb_raise(rb_eTypeError, "null reference");
    char *classname = "WxWindow::WxWindow";
    if ( strcmp(rb_obj_classname(self), classname) != 0 ) {
        /* subclassed */
        result = (wxWindow *)new SwigDirector_wxWindow(arg1,arg2,arg3,(wxPoint const &)*arg4,(wxSize const &)*arg5);
        
    } else {
        result = (wxWindow *)new wxWindow(arg2,arg3,(wxPoint const &)*arg4,(wxSize const &)*arg5);
        
    }
    DATA_PTR(self) = result;
    return self;
}


static VALUE
_wrap_new_wxWindow__SWIG_4(int argc, VALUE *argv, VALUE self) {
    VALUE arg1 ;
    wxWindow *arg2 = (wxWindow *) 0 ;
    wxWindowID arg3 ;
    wxPoint *arg4 = 0 ;
    wxWindow *result;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    arg1 = self;
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxWindow, 1);
    arg3 = NUM2INT(argv[1]);
    SWIG_ConvertPtr(argv[2], (void **) &arg4, SWIGTYPE_p_wxPoint, 1); if (arg4 == NULL) rb_raise(rb_eTypeError, "null reference");
    char *classname = "WxWindow::WxWindow";
    if ( strcmp(rb_obj_classname(self), classname) != 0 ) {
        /* subclassed */
        result = (wxWindow *)new SwigDirector_wxWindow(arg1,arg2,arg3,(wxPoint const &)*arg4);
        
    } else {
        result = (wxWindow *)new wxWindow(arg2,arg3,(wxPoint const &)*arg4);
        
    }
    DATA_PTR(self) = result;
    return self;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
static VALUE
_wrap_wxWindow_allocate(VALUE self) {
#else
    static VALUE
    _wrap_wxWindow_allocate(int argc, VALUE *argv, VALUE self) {
#endif
        
        
        VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_wxWindow);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
        rb_obj_call_init(vresult, argc, argv);
#endif
        return vresult;
    }
    

static VALUE
_wrap_new_wxWindow__SWIG_5(int argc, VALUE *argv, VALUE self) {
    VALUE arg1 ;
    wxWindow *arg2 = (wxWindow *) 0 ;
    wxWindowID arg3 ;
    wxWindow *result;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    arg1 = self;
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxWindow, 1);
    arg3 = NUM2INT(argv[1]);
    char *classname = "WxWindow::WxWindow";
    if ( strcmp(rb_obj_classname(self), classname) != 0 ) {
        /* subclassed */
        result = (wxWindow *)new SwigDirector_wxWindow(arg1,arg2,arg3);
        
    } else {
        result = (wxWindow *)new wxWindow(arg2,arg3);
        
    }
    DATA_PTR(self) = result;
    return self;
}


static VALUE _wrap_new_wxWindow(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[8];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 7); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 1) {
        int _v;
        _v = (argv[0] != T_NONE);
        if (_v) {
            return _wrap_new_wxWindow__SWIG_0(nargs, args, self);
        }
    }
    if (argc == 3) {
        int _v;
        _v = (argv[0] != T_NONE);
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_wxWindow__SWIG_5(nargs, args, self);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = (argv[0] != T_NONE);
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *ptr;
                        _v = (NIL_P(argv[3]) || (TYPE(argv[3]) == T_DATA && SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_wxPoint, 0) != -1)) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_new_wxWindow__SWIG_4(nargs, args, self);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        _v = (argv[0] != T_NONE);
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *ptr;
                        _v = (NIL_P(argv[3]) || (TYPE(argv[3]) == T_DATA && SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_wxPoint, 0) != -1)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *ptr;
                            _v = (NIL_P(argv[4]) || (TYPE(argv[4]) == T_DATA && SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_wxSize, 0) != -1)) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_new_wxWindow__SWIG_3(nargs, args, self);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        _v = (argv[0] != T_NONE);
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *ptr;
                        _v = (NIL_P(argv[3]) || (TYPE(argv[3]) == T_DATA && SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_wxPoint, 0) != -1)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *ptr;
                            _v = (NIL_P(argv[4]) || (TYPE(argv[4]) == T_DATA && SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_wxSize, 0) != -1)) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = ((TYPE(argv[5]) == T_FIXNUM) || (TYPE(argv[5]) == T_BIGNUM)) ? 1 : 0;
                            }
                            if (_v) {
                                return _wrap_new_wxWindow__SWIG_2(nargs, args, self);
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        _v = (argv[0] != T_NONE);
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *ptr;
                        _v = (NIL_P(argv[3]) || (TYPE(argv[3]) == T_DATA && SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_wxPoint, 0) != -1)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            void *ptr;
                            _v = (NIL_P(argv[4]) || (TYPE(argv[4]) == T_DATA && SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_wxSize, 0) != -1)) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = ((TYPE(argv[5]) == T_FIXNUM) || (TYPE(argv[5]) == T_BIGNUM)) ? 1 : 0;
                            }
                            if (_v) {
                                {
                                    _v = (TYPE(argv[6]) == T_STRING);
                                }
                                if (_v) {
                                    return _wrap_new_wxWindow__SWIG_1(nargs, args, self);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'new_wxWindow'");
    return Qnil;
}


static void
free_wxWindow(wxWindow *arg1) {
    delete arg1;
}
static VALUE
_wrap_wxWindow_AddChild(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxWindow *arg2 = (wxWindow *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->AddChild(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_CaptureMouse(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->CaptureMouse();
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_Center(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    (arg1)->Center(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_CenterOnParent(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    (arg1)->CenterOnParent(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_CenterOnScreen(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    (arg1)->CenterOnScreen(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_Centre__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    (arg1)->Centre(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_Centre__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    (arg1)->Centre();
    
    return Qnil;
}


static VALUE _wrap_wxWindow_Centre(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[3];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            return _wrap_wxWindow_Centre__SWIG_1(nargs, args, self);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_Centre__SWIG_0(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_Centre'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_CentreOnParent__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    (arg1)->CentreOnParent(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_CentreOnParent__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    (arg1)->CentreOnParent();
    
    return Qnil;
}


static VALUE _wrap_wxWindow_CentreOnParent(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[3];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            return _wrap_wxWindow_CentreOnParent__SWIG_1(nargs, args, self);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_CentreOnParent__SWIG_0(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_CentreOnParent'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_CentreOnScreen__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    (arg1)->CentreOnScreen(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_CentreOnScreen__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    (arg1)->CentreOnScreen();
    
    return Qnil;
}


static VALUE _wrap_wxWindow_CentreOnScreen(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[3];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            return _wrap_wxWindow_CentreOnScreen__SWIG_1(nargs, args, self);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_CentreOnScreen__SWIG_0(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_CentreOnScreen'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_ClientToScreen__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_int, 1);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_int, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    ((wxWindow const *)arg1)->ClientToScreen(arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_ClientToScreen__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxPoint *arg2 = 0 ;
    wxPoint result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxPoint, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = ((wxWindow const *)arg1)->ClientToScreen((wxPoint const &)*arg2);
    
    {
        wxPoint * resultptr;
        resultptr = new wxPoint((wxPoint &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxPoint, 1);
    }
    return vresult;
}


static VALUE _wrap_wxWindow_ClientToScreen(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[4];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxPoint, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_ClientToScreen__SWIG_1(nargs, args, self);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_int, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    _v = (NIL_P(argv[2]) || (TYPE(argv[2]) == T_DATA && SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_int, 0) != -1)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxWindow_ClientToScreen__SWIG_0(nargs, args, self);
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_ClientToScreen'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_Close__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool arg2 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = RTEST(argv[0]);
    result = (bool)(arg1)->Close(arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_Close__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    result = (bool)(arg1)->Close();
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE _wrap_wxWindow_Close(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[3];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            return _wrap_wxWindow_Close__SWIG_1(nargs, args, self);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (argv[1] == Qtrue || argv[1] == Qfalse) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_Close__SWIG_0(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_Close'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_ConvertDialogToPixels__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxPoint *arg2 = 0 ;
    wxPoint result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxPoint, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (arg1)->ConvertDialogToPixels((wxPoint const &)*arg2);
    
    {
        wxPoint * resultptr;
        resultptr = new wxPoint((wxPoint &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxPoint, 1);
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_ConvertDialogToPixels__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSize *arg2 = 0 ;
    wxSize result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxSize, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (arg1)->ConvertDialogToPixels((wxSize const &)*arg2);
    
    {
        wxSize * resultptr;
        resultptr = new wxSize((wxSize &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxSize, 1);
    }
    return vresult;
}


static VALUE _wrap_wxWindow_ConvertDialogToPixels(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[3];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxPoint, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_ConvertDialogToPixels__SWIG_0(nargs, args, self);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxSize, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_ConvertDialogToPixels__SWIG_1(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_ConvertDialogToPixels'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_ConvertPixelsToDialog__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxPoint *arg2 = 0 ;
    wxPoint result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxPoint, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (arg1)->ConvertPixelsToDialog((wxPoint const &)*arg2);
    
    {
        wxPoint * resultptr;
        resultptr = new wxPoint((wxPoint &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxPoint, 1);
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_ConvertPixelsToDialog__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSize *arg2 = 0 ;
    wxSize result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxSize, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (arg1)->ConvertPixelsToDialog((wxSize const &)*arg2);
    
    {
        wxSize * resultptr;
        resultptr = new wxSize((wxSize &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxSize, 1);
    }
    return vresult;
}


static VALUE _wrap_wxWindow_ConvertPixelsToDialog(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[3];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxPoint, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_ConvertPixelsToDialog__SWIG_0(nargs, args, self);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxSize, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_ConvertPixelsToDialog__SWIG_1(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_ConvertPixelsToDialog'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_Destroy(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)(arg1)->Destroy();
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_DestroyChildren(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->DestroyChildren();
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_Disable(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    (arg1)->Disable();
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_Enable__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool arg2 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = RTEST(argv[0]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)(arg1)->Enable(arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_Enable__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)(arg1)->Enable();
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE _wrap_wxWindow_Enable(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[3];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            return _wrap_wxWindow_Enable__SWIG_1(nargs, args, self);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (argv[1] == Qtrue || argv[1] == Qfalse) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_Enable__SWIG_0(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_Enable'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_FindFocus(int argc, VALUE *argv, VALUE self) {
    wxWindow *result;
    Swig::Director *resultdirector = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (wxWindow *)wxWindow::FindFocus();
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        vresult = resultdirector->swig_get_self();
    } else {
        vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxWindow,0);
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_FindWindow__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    long arg2 ;
    wxWindow *result;
    Swig::Director *resultdirector = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2LONG(argv[0]);
    result = (wxWindow *)(arg1)->FindWindow(arg2);
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        vresult = resultdirector->swig_get_self();
    } else {
        vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxWindow,0);
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_FindWindow__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxString *arg2 = 0 ;
    wxWindow *result;
    Swig::Director *resultdirector = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    {
        arg2 = new wxString(STR2CSTR(argv[0]), wxConvUTF8);
    }
    result = (wxWindow *)(arg1)->FindWindow((wxString const &)*arg2);
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        vresult = resultdirector->swig_get_self();
    } else {
        vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxWindow,0);
    }
    return vresult;
}


static VALUE _wrap_wxWindow_FindWindow(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[3];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_FindWindow__SWIG_0(nargs, args, self);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (TYPE(argv[1]) == T_STRING);
            }
            if (_v) {
                return _wrap_wxWindow_FindWindow__SWIG_1(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_FindWindow'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_FindWindowById__SWIG_0(int argc, VALUE *argv, VALUE self) {
    long arg1 ;
    wxWindow *arg2 = (wxWindow *) 0 ;
    wxWindow *result;
    Swig::Director *resultdirector = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    arg1 = NUM2LONG(argv[0]);
    SWIG_ConvertPtr(argv[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 1);
    result = (wxWindow *)wxWindow::FindWindowById(arg1,arg2);
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        vresult = resultdirector->swig_get_self();
    } else {
        vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxWindow,0);
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_FindWindowById__SWIG_1(int argc, VALUE *argv, VALUE self) {
    long arg1 ;
    wxWindow *result;
    Swig::Director *resultdirector = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = NUM2LONG(argv[0]);
    result = (wxWindow *)wxWindow::FindWindowById(arg1);
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        vresult = resultdirector->swig_get_self();
    } else {
        vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxWindow,0);
    }
    return vresult;
}


static VALUE _wrap_wxWindow_FindWindowById(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[2];
    int ii;
    
    argc = nargs;
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii];
    }
    if (argc == 1) {
        int _v;
        {
            _v = ((TYPE(argv[0]) == T_FIXNUM) || (TYPE(argv[0]) == T_BIGNUM)) ? 1 : 0;
        }
        if (_v) {
            return _wrap_wxWindow_FindWindowById__SWIG_1(nargs, args, self);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = ((TYPE(argv[0]) == T_FIXNUM) || (TYPE(argv[0]) == T_BIGNUM)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_FindWindowById__SWIG_0(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_FindWindowById'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_FindWindowByName__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxString *arg1 = 0 ;
    wxWindow *arg2 = (wxWindow *) 0 ;
    wxWindow *result;
    Swig::Director *resultdirector = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    {
        arg1 = new wxString(STR2CSTR(argv[0]), wxConvUTF8);
    }
    SWIG_ConvertPtr(argv[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 1);
    result = (wxWindow *)wxWindow::FindWindowByName((wxString const &)*arg1,arg2);
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        vresult = resultdirector->swig_get_self();
    } else {
        vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxWindow,0);
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_FindWindowByName__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxString *arg1 = 0 ;
    wxWindow *result;
    Swig::Director *resultdirector = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    {
        arg1 = new wxString(STR2CSTR(argv[0]), wxConvUTF8);
    }
    result = (wxWindow *)wxWindow::FindWindowByName((wxString const &)*arg1);
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        vresult = resultdirector->swig_get_self();
    } else {
        vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxWindow,0);
    }
    return vresult;
}


static VALUE _wrap_wxWindow_FindWindowByName(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[2];
    int ii;
    
    argc = nargs;
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii];
    }
    if (argc == 1) {
        int _v;
        {
            _v = (TYPE(argv[0]) == T_STRING);
        }
        if (_v) {
            return _wrap_wxWindow_FindWindowByName__SWIG_1(nargs, args, self);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (TYPE(argv[0]) == T_STRING);
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_FindWindowByName__SWIG_0(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_FindWindowByName'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_FindWindowByLabel__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxString *arg1 = 0 ;
    wxWindow *arg2 = (wxWindow *) 0 ;
    wxWindow *result;
    Swig::Director *resultdirector = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    {
        arg1 = new wxString(STR2CSTR(argv[0]), wxConvUTF8);
    }
    SWIG_ConvertPtr(argv[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 1);
    result = (wxWindow *)wxWindow::FindWindowByLabel((wxString const &)*arg1,arg2);
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        vresult = resultdirector->swig_get_self();
    } else {
        vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxWindow,0);
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_FindWindowByLabel__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxString *arg1 = 0 ;
    wxWindow *result;
    Swig::Director *resultdirector = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    {
        arg1 = new wxString(STR2CSTR(argv[0]), wxConvUTF8);
    }
    result = (wxWindow *)wxWindow::FindWindowByLabel((wxString const &)*arg1);
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        vresult = resultdirector->swig_get_self();
    } else {
        vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxWindow,0);
    }
    return vresult;
}


static VALUE _wrap_wxWindow_FindWindowByLabel(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[2];
    int ii;
    
    argc = nargs;
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii];
    }
    if (argc == 1) {
        int _v;
        {
            _v = (TYPE(argv[0]) == T_STRING);
        }
        if (_v) {
            return _wrap_wxWindow_FindWindowByLabel__SWIG_1(nargs, args, self);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (TYPE(argv[0]) == T_STRING);
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_FindWindowByLabel__SWIG_0(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_FindWindowByLabel'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_Fit(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->Fit();
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_FitInside(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->FitInside();
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_Freeze(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->Freeze();
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_GetAdjustedBestSize(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSize result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    result = ((wxWindow const *)arg1)->GetAdjustedBestSize();
    
    {
        wxSize * resultptr;
        resultptr = new wxSize((wxSize &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxSize, 1);
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_GetBackgroundColour(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxColour result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = ((wxWindow const *)arg1)->GetBackgroundColour();
    
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxColour, 1);
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_GetBestSize(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSize result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = ((wxWindow const *)arg1)->GetBestSize();
    
    {
        wxSize * resultptr;
        resultptr = new wxSize((wxSize &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxSize, 1);
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_GetCaret(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxCaret *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    result = (wxCaret *)((wxWindow const *)arg1)->GetCaret();
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxCaret,0);
    return vresult;
}


static VALUE
_wrap_wxWindow_GetCapture(int argc, VALUE *argv, VALUE self) {
    wxWindow *result;
    Swig::Director *resultdirector = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (wxWindow *)wxWindow::GetCapture();
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        vresult = resultdirector->swig_get_self();
    } else {
        vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxWindow,0);
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_GetCharHeight(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (int)((wxWindow const *)arg1)->GetCharHeight();
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_wxWindow_GetCharWidth(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (int)((wxWindow const *)arg1)->GetCharWidth();
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_wxWindow_GetClientSize__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_int, 1);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_int, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    ((wxWindow const *)arg1)->GetClientSize(arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_GetClientSize__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSize result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = ((wxWindow const *)arg1)->GetClientSize();
    
    {
        wxSize * resultptr;
        resultptr = new wxSize((wxSize &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxSize, 1);
    }
    return vresult;
}


static VALUE _wrap_wxWindow_GetClientSize(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[4];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            return _wrap_wxWindow_GetClientSize__SWIG_1(nargs, args, self);
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_int, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    _v = (NIL_P(argv[2]) || (TYPE(argv[2]) == T_DATA && SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_int, 0) != -1)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxWindow_GetClientSize__SWIG_0(nargs, args, self);
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_GetClientSize'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_GetConstraints(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxLayoutConstraints *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    result = (wxLayoutConstraints *)((wxWindow const *)arg1)->GetConstraints();
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxLayoutConstraints,0);
    return vresult;
}


static VALUE
_wrap_wxWindow_GetContainingSizer(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSizer *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    result = (wxSizer *)((wxWindow const *)arg1)->GetContainingSizer();
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxSizer,0);
    return vresult;
}


static VALUE
_wrap_wxWindow_GetDropTarget(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxDropTarget *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    result = (wxDropTarget *)((wxWindow const *)arg1)->GetDropTarget();
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxDropTarget,0);
    return vresult;
}


static VALUE
_wrap_wxWindow_GetEventHandler(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxEvtHandler *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    result = (wxEvtHandler *)((wxWindow const *)arg1)->GetEventHandler();
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxEvtHandler,0);
    return vresult;
}


static VALUE
_wrap_wxWindow_GetExtraStyle(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    long result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    result = (long)((wxWindow const *)arg1)->GetExtraStyle();
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_wxWindow_GetForegroundColour(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxColour result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (arg1)->GetForegroundColour();
    
    {
        wxColour * resultptr;
        resultptr = new wxColour((wxColour &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxColour, 1);
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_GetGrandParent(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxWindow *result;
    Swig::Director *resultdirector = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    result = (wxWindow *)((wxWindow const *)arg1)->GetGrandParent();
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        vresult = resultdirector->swig_get_self();
    } else {
        vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxWindow,0);
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_GetHandle(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    void *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    result = (void *)((wxWindow const *)arg1)->GetHandle();
    
    {
        vresult = (VALUE)(result);
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_GetHelpText(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxString result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = ((wxWindow const *)arg1)->GetHelpText();
    
    {
        vresult = rb_str_new2((const char *)(&result)->mb_str());
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_GetId(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    result = (int)((wxWindow const *)arg1)->GetId();
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_wxWindow_GetLabel(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxString result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = ((wxWindow const *)arg1)->GetLabel();
    
    {
        vresult = rb_str_new2((const char *)(&result)->mb_str());
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_GetName(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxString result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = ((wxWindow const *)arg1)->GetName();
    
    {
        vresult = rb_str_new2((const char *)(&result)->mb_str());
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_GetParent(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxWindow *result;
    Swig::Director *director = 0;
    Swig::Director *resultdirector = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (wxWindow *)((wxWindow const *)arg1)->GetParent();
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        vresult = resultdirector->swig_get_self();
    } else {
        vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxWindow,0);
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_GetPosition__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_int, 1);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_int, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    ((wxWindow const *)arg1)->GetPosition(arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_GetPosition__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxPoint result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    result = ((wxWindow const *)arg1)->GetPosition();
    
    {
        wxPoint * resultptr;
        resultptr = new wxPoint((wxPoint &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxPoint, 1);
    }
    return vresult;
}


static VALUE _wrap_wxWindow_GetPosition(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[4];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            return _wrap_wxWindow_GetPosition__SWIG_1(nargs, args, self);
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_int, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    _v = (NIL_P(argv[2]) || (TYPE(argv[2]) == T_DATA && SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_int, 0) != -1)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxWindow_GetPosition__SWIG_0(nargs, args, self);
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_GetPosition'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_GetRect(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxRect result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = ((wxWindow const *)arg1)->GetRect();
    
    {
        wxRect * resultptr;
        resultptr = new wxRect((wxRect &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxRect, 1);
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_GetScrollThumb(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (int)(arg1)->GetScrollThumb(arg2);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_wxWindow_GetScrollPos(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (int)(arg1)->GetScrollPos(arg2);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_wxWindow_GetScrollRange(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (int)(arg1)->GetScrollRange(arg2);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_wxWindow_GetSize__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_int, 1);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_int, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    ((wxWindow const *)arg1)->GetSize(arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_GetSize__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSize result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = ((wxWindow const *)arg1)->GetSize();
    
    {
        wxSize * resultptr;
        resultptr = new wxSize((wxSize &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxSize, 1);
    }
    return vresult;
}


static VALUE _wrap_wxWindow_GetSize(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[4];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            return _wrap_wxWindow_GetSize__SWIG_1(nargs, args, self);
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_int, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    _v = (NIL_P(argv[2]) || (TYPE(argv[2]) == T_DATA && SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_int, 0) != -1)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxWindow_GetSize__SWIG_0(nargs, args, self);
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_GetSize'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_GetSizer(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSizer *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    result = (wxSizer *)((wxWindow const *)arg1)->GetSizer();
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxSizer,0);
    return vresult;
}


static VALUE
_wrap_wxWindow_GetTitle(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxString result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (arg1)->GetTitle();
    
    {
        vresult = rb_str_new2((const char *)(&result)->mb_str());
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_GetToolTip(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxToolTip *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    result = (wxToolTip *)((wxWindow const *)arg1)->GetToolTip();
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxToolTip,0);
    return vresult;
}


static VALUE
_wrap_wxWindow_GetUpdateRegion(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxRegion result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = ((wxWindow const *)arg1)->GetUpdateRegion();
    
    {
        wxRegion * resultptr;
        resultptr = new wxRegion((wxRegion &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxRegion, 1);
    }
    return vresult;
}


static VALUE
_wrap_wxWindow_GetVirtualSize__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_int, 1);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_int, 1);
    ((wxWindow const *)arg1)->GetVirtualSize(arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_GetVirtualSize__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSize result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    result = ((wxWindow const *)arg1)->GetVirtualSize();
    
    {
        wxSize * resultptr;
        resultptr = new wxSize((wxSize &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxSize, 1);
    }
    return vresult;
}


static VALUE _wrap_wxWindow_GetVirtualSize(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[4];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            return _wrap_wxWindow_GetVirtualSize__SWIG_1(nargs, args, self);
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_int, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    _v = (NIL_P(argv[2]) || (TYPE(argv[2]) == T_DATA && SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_int, 0) != -1)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxWindow_GetVirtualSize__SWIG_0(nargs, args, self);
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_GetVirtualSize'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_GetWindowStyleFlag(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    long result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    result = (long)((wxWindow const *)arg1)->GetWindowStyleFlag();
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_wxWindow_HasCapture(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)((wxWindow const *)arg1)->HasCapture();
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_Hide(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    result = (bool)(arg1)->Hide();
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_InitDialog(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    (arg1)->InitDialog();
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_IsEnabled(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)((wxWindow const *)arg1)->IsEnabled();
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_IsRetained(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)((wxWindow const *)arg1)->IsRetained();
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_IsShown(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)((wxWindow const *)arg1)->IsShown();
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_IsTopLevel(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    result = (bool)((wxWindow const *)arg1)->IsTopLevel();
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_Layout(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    (arg1)->Layout();
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_Lower(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    (arg1)->Lower();
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_MakeModal(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool arg2 ;
    Swig::Director *director = 0;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = RTEST(argv[0]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->MakeModal(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_Move__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    (arg1)->Move(arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_Move__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxPoint *arg2 = 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxPoint, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    (arg1)->Move((wxPoint const &)*arg2);
    
    return Qnil;
}


static VALUE _wrap_wxWindow_Move(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[4];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxPoint, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_Move__SWIG_1(nargs, args, self);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxWindow_Move__SWIG_0(nargs, args, self);
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_Move'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_PopupMenu__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxMenu *arg2 = (wxMenu *) 0 ;
    wxPoint *arg3 = 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxMenu, 1);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_wxPoint, 1); if (arg3 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (bool)(arg1)->PopupMenu(arg2,(wxPoint const &)*arg3);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_PopupMenu__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxMenu *arg2 = (wxMenu *) 0 ;
    int arg3 ;
    int arg4 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxMenu, 1);
    arg3 = NUM2INT(argv[1]);
    arg4 = NUM2INT(argv[2]);
    result = (bool)(arg1)->PopupMenu(arg2,arg3,arg4);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE _wrap_wxWindow_PopupMenu(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[5];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxMenu, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    _v = (NIL_P(argv[2]) || (TYPE(argv[2]) == T_DATA && SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_wxPoint, 0) != -1)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxWindow_PopupMenu__SWIG_0(nargs, args, self);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxMenu, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = ((TYPE(argv[3]) == T_FIXNUM) || (TYPE(argv[3]) == T_BIGNUM)) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_wxWindow_PopupMenu__SWIG_1(nargs, args, self);
                    }
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_PopupMenu'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_PushEventHandler(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxEvtHandler *arg2 = (wxEvtHandler *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxEvtHandler, 1);
    (arg1)->PushEventHandler(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_Raise(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    (arg1)->Raise();
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_Refresh__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool arg2 ;
    wxRect *arg3 = (wxRect *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = RTEST(argv[0]);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_wxRect, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->Refresh(arg2,(wxRect const *)arg3);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_Refresh__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool arg2 ;
    Swig::Director *director = 0;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = RTEST(argv[0]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->Refresh(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_Refresh__SWIG_2(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->Refresh();
    
    return Qnil;
}


static VALUE _wrap_wxWindow_Refresh(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[4];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            return _wrap_wxWindow_Refresh__SWIG_2(nargs, args, self);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (argv[1] == Qtrue || argv[1] == Qfalse) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_Refresh__SWIG_1(nargs, args, self);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (argv[1] == Qtrue || argv[1] == Qfalse) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    _v = (NIL_P(argv[2]) || (TYPE(argv[2]) == T_DATA && SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_wxRect, 0) != -1)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxWindow_Refresh__SWIG_0(nargs, args, self);
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_Refresh'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_RefreshRect(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxRect *arg2 = 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxRect, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->RefreshRect((wxRect const &)*arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_ReleaseMouse(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->ReleaseMouse();
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_RemoveChild(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxWindow *arg2 = (wxWindow *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->RemoveChild(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_RemoveEventHandler(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxEvtHandler *arg2 = (wxEvtHandler *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxEvtHandler, 1);
    result = (bool)(arg1)->RemoveEventHandler(arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_Reparent(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxWindow *arg2 = (wxWindow *) 0 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)(arg1)->Reparent(arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_ScreenToClient__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_int, 1);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_int, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    ((wxWindow const *)arg1)->ScreenToClient(arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_ScreenToClient__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxPoint *arg2 = 0 ;
    wxPoint result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxPoint, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = ((wxWindow const *)arg1)->ScreenToClient((wxPoint const &)*arg2);
    
    {
        wxPoint * resultptr;
        resultptr = new wxPoint((wxPoint &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxPoint, 1);
    }
    return vresult;
}


static VALUE _wrap_wxWindow_ScreenToClient(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[4];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxPoint, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_ScreenToClient__SWIG_1(nargs, args, self);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_int, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    _v = (NIL_P(argv[2]) || (TYPE(argv[2]) == T_DATA && SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_int, 0) != -1)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxWindow_ScreenToClient__SWIG_0(nargs, args, self);
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_ScreenToClient'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_ScrollLines(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)(arg1)->ScrollLines(arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_ScrollPages(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)(arg1)->ScrollPages(arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_ScrollWindow__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    wxRect *arg4 = (wxRect *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    SWIG_ConvertPtr(argv[2], (void **) &arg4, SWIGTYPE_p_wxRect, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->ScrollWindow(arg2,arg3,(wxRect const *)arg4);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_ScrollWindow__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    Swig::Director *director = 0;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->ScrollWindow(arg2,arg3);
    
    return Qnil;
}


static VALUE _wrap_wxWindow_ScrollWindow(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[5];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxWindow_ScrollWindow__SWIG_1(nargs, args, self);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *ptr;
                        _v = (NIL_P(argv[3]) || (TYPE(argv[3]) == T_DATA && SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_wxRect, 0) != -1)) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_wxWindow_ScrollWindow__SWIG_0(nargs, args, self);
                    }
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_ScrollWindow'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetAcceleratorTable(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxAcceleratorTable *arg2 = 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxAcceleratorTable, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetAcceleratorTable((wxAcceleratorTable const &)*arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetAutoLayout(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = RTEST(argv[0]);
    (arg1)->SetAutoLayout(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetBackgroundColour(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxColour *arg2 = 0 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxColour, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)(arg1)->SetBackgroundColour((wxColour const &)*arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_SetCaret(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxCaret *arg2 = (wxCaret *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxCaret, 1);
    (arg1)->SetCaret(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetClientSize__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    Swig::Director *director = 0;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetClientSize(arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetClientSize__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSize *arg2 = 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxSize, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetClientSize((wxSize const &)*arg2);
    
    return Qnil;
}


static VALUE _wrap_wxWindow_SetClientSize(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[4];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxSize, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_SetClientSize__SWIG_1(nargs, args, self);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxWindow_SetClientSize__SWIG_0(nargs, args, self);
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_SetClientSize'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetContainingSizer(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSizer *arg2 = (wxSizer *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxSizer, 1);
    (arg1)->SetContainingSizer(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetCursor(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxCursor *arg2 = 0 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxCursor, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)(arg1)->SetCursor((wxCursor const &)*arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_SetConstraints(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxLayoutConstraints *arg2 = (wxLayoutConstraints *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxLayoutConstraints, 1);
    (arg1)->SetConstraints(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetDropTarget(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxDropTarget *arg2 = (wxDropTarget *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxDropTarget, 1);
    (arg1)->SetDropTarget(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetEventHandler(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxEvtHandler *arg2 = (wxEvtHandler *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxEvtHandler, 1);
    (arg1)->SetEventHandler(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetExtraStyle(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    long arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2LONG(argv[0]);
    (arg1)->SetExtraStyle(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetFocus(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetFocus();
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetFocusFromKbd(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetFocusFromKbd();
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetFont(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxFont *arg2 = 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxFont, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    (arg1)->SetFont((wxFont const &)*arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetForegroundColour(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxColour *arg2 = 0 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxColour, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)(arg1)->SetForegroundColour((wxColour const &)*arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_SetHelpText(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxString *arg2 = 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    {
        arg2 = new wxString(STR2CSTR(argv[0]), wxConvUTF8);
    }
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetHelpText((wxString const &)*arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetId(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    (arg1)->SetId(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetName(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxString *arg2 = 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    {
        arg2 = new wxString(STR2CSTR(argv[0]), wxConvUTF8);
    }
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetName((wxString const &)*arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetScrollbar__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool arg6 ;
    Swig::Director *director = 0;
    
    if ((argc < 5) || (argc > 5))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    arg4 = NUM2INT(argv[2]);
    arg5 = NUM2INT(argv[3]);
    arg6 = RTEST(argv[4]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetScrollbar(arg2,arg3,arg4,arg5,arg6);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetScrollbar__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    Swig::Director *director = 0;
    
    if ((argc < 4) || (argc > 4))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    arg4 = NUM2INT(argv[2]);
    arg5 = NUM2INT(argv[3]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetScrollbar(arg2,arg3,arg4,arg5);
    
    return Qnil;
}


static VALUE _wrap_wxWindow_SetScrollbar(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[7];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 6); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = ((TYPE(argv[3]) == T_FIXNUM) || (TYPE(argv[3]) == T_BIGNUM)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = ((TYPE(argv[4]) == T_FIXNUM) || (TYPE(argv[4]) == T_BIGNUM)) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_wxWindow_SetScrollbar__SWIG_1(nargs, args, self);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = ((TYPE(argv[3]) == T_FIXNUM) || (TYPE(argv[3]) == T_BIGNUM)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = ((TYPE(argv[4]) == T_FIXNUM) || (TYPE(argv[4]) == T_BIGNUM)) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = (argv[5] == Qtrue || argv[5] == Qfalse) ? 1 : 0;
                            }
                            if (_v) {
                                return _wrap_wxWindow_SetScrollbar__SWIG_0(nargs, args, self);
                            }
                        }
                    }
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_SetScrollbar'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetScrollPos__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    bool arg4 ;
    Swig::Director *director = 0;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    arg4 = RTEST(argv[2]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetScrollPos(arg2,arg3,arg4);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetScrollPos__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    Swig::Director *director = 0;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetScrollPos(arg2,arg3);
    
    return Qnil;
}


static VALUE _wrap_wxWindow_SetScrollPos(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[5];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxWindow_SetScrollPos__SWIG_1(nargs, args, self);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (argv[3] == Qtrue || argv[3] == Qfalse) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_wxWindow_SetScrollPos__SWIG_0(nargs, args, self);
                    }
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_SetScrollPos'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetDimensions__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    Swig::Director *director = 0;
    
    if ((argc < 5) || (argc > 5))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    arg4 = NUM2INT(argv[2]);
    arg5 = NUM2INT(argv[3]);
    arg6 = NUM2INT(argv[4]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetSize(arg2,arg3,arg4,arg5,arg6);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetDimensions__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    Swig::Director *director = 0;
    
    if ((argc < 4) || (argc > 4))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    arg4 = NUM2INT(argv[2]);
    arg5 = NUM2INT(argv[3]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetSize(arg2,arg3,arg4,arg5);
    
    return Qnil;
}


static VALUE _wrap_wxWindow_SetDimensions(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[7];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 6); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = ((TYPE(argv[3]) == T_FIXNUM) || (TYPE(argv[3]) == T_BIGNUM)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = ((TYPE(argv[4]) == T_FIXNUM) || (TYPE(argv[4]) == T_BIGNUM)) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_wxWindow_SetDimensions__SWIG_1(nargs, args, self);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = ((TYPE(argv[3]) == T_FIXNUM) || (TYPE(argv[3]) == T_BIGNUM)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = ((TYPE(argv[4]) == T_FIXNUM) || (TYPE(argv[4]) == T_BIGNUM)) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = ((TYPE(argv[5]) == T_FIXNUM) || (TYPE(argv[5]) == T_BIGNUM)) ? 1 : 0;
                            }
                            if (_v) {
                                return _wrap_wxWindow_SetDimensions__SWIG_0(nargs, args, self);
                            }
                        }
                    }
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_SetDimensions'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetSize__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxRect *arg2 = 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxRect, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetSize((wxRect const &)*arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetSize__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    Swig::Director *director = 0;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetSize(arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetSize__SWIG_2(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSize *arg2 = 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxSize, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetSize((wxSize const &)*arg2);
    
    return Qnil;
}


static VALUE _wrap_wxWindow_SetSize(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[4];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxRect, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_SetSize__SWIG_0(nargs, args, self);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxSize, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_SetSize__SWIG_2(nargs, args, self);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxWindow_SetSize__SWIG_1(nargs, args, self);
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_SetSize'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetSizeHints__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    Swig::Director *director = 0;
    
    if ((argc < 6) || (argc > 6))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    arg4 = NUM2INT(argv[2]);
    arg5 = NUM2INT(argv[3]);
    arg6 = NUM2INT(argv[4]);
    arg7 = NUM2INT(argv[5]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetSizeHints(arg2,arg3,arg4,arg5,arg6,arg7);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetSizeHints__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    Swig::Director *director = 0;
    
    if ((argc < 5) || (argc > 5))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    arg4 = NUM2INT(argv[2]);
    arg5 = NUM2INT(argv[3]);
    arg6 = NUM2INT(argv[4]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetSizeHints(arg2,arg3,arg4,arg5,arg6);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetSizeHints__SWIG_2(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    Swig::Director *director = 0;
    
    if ((argc < 4) || (argc > 4))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    arg4 = NUM2INT(argv[2]);
    arg5 = NUM2INT(argv[3]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetSizeHints(arg2,arg3,arg4,arg5);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetSizeHints__SWIG_3(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    Swig::Director *director = 0;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    arg4 = NUM2INT(argv[2]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetSizeHints(arg2,arg3,arg4);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetSizeHints__SWIG_4(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    Swig::Director *director = 0;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetSizeHints(arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetSizeHints__SWIG_5(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSize *arg2 = 0 ;
    wxSize *arg3 = 0 ;
    wxSize *arg4 = 0 ;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxSize, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_wxSize, 1); if (arg3 == NULL) rb_raise(rb_eTypeError, "null reference");
    SWIG_ConvertPtr(argv[2], (void **) &arg4, SWIGTYPE_p_wxSize, 1); if (arg4 == NULL) rb_raise(rb_eTypeError, "null reference");
    (arg1)->SetSizeHints((wxSize const &)*arg2,(wxSize const &)*arg3,(wxSize const &)*arg4);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetSizeHints__SWIG_6(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSize *arg2 = 0 ;
    wxSize *arg3 = 0 ;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxSize, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_wxSize, 1); if (arg3 == NULL) rb_raise(rb_eTypeError, "null reference");
    (arg1)->SetSizeHints((wxSize const &)*arg2,(wxSize const &)*arg3);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetSizeHints__SWIG_7(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSize *arg2 = 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxSize, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    (arg1)->SetSizeHints((wxSize const &)*arg2);
    
    return Qnil;
}


static VALUE _wrap_wxWindow_SetSizeHints(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[8];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 7); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxSize, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_SetSizeHints__SWIG_7(nargs, args, self);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxSize, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    _v = (NIL_P(argv[2]) || (TYPE(argv[2]) == T_DATA && SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_wxSize, 0) != -1)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxWindow_SetSizeHints__SWIG_6(nargs, args, self);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxWindow_SetSizeHints__SWIG_4(nargs, args, self);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxSize, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    _v = (NIL_P(argv[2]) || (TYPE(argv[2]) == T_DATA && SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_wxSize, 0) != -1)) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *ptr;
                        _v = (NIL_P(argv[3]) || (TYPE(argv[3]) == T_DATA && SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_wxSize, 0) != -1)) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_wxWindow_SetSizeHints__SWIG_5(nargs, args, self);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = ((TYPE(argv[3]) == T_FIXNUM) || (TYPE(argv[3]) == T_BIGNUM)) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_wxWindow_SetSizeHints__SWIG_3(nargs, args, self);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = ((TYPE(argv[3]) == T_FIXNUM) || (TYPE(argv[3]) == T_BIGNUM)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = ((TYPE(argv[4]) == T_FIXNUM) || (TYPE(argv[4]) == T_BIGNUM)) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_wxWindow_SetSizeHints__SWIG_2(nargs, args, self);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = ((TYPE(argv[3]) == T_FIXNUM) || (TYPE(argv[3]) == T_BIGNUM)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = ((TYPE(argv[4]) == T_FIXNUM) || (TYPE(argv[4]) == T_BIGNUM)) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = ((TYPE(argv[5]) == T_FIXNUM) || (TYPE(argv[5]) == T_BIGNUM)) ? 1 : 0;
                            }
                            if (_v) {
                                return _wrap_wxWindow_SetSizeHints__SWIG_1(nargs, args, self);
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = ((TYPE(argv[3]) == T_FIXNUM) || (TYPE(argv[3]) == T_BIGNUM)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = ((TYPE(argv[4]) == T_FIXNUM) || (TYPE(argv[4]) == T_BIGNUM)) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = ((TYPE(argv[5]) == T_FIXNUM) || (TYPE(argv[5]) == T_BIGNUM)) ? 1 : 0;
                            }
                            if (_v) {
                                {
                                    _v = ((TYPE(argv[6]) == T_FIXNUM) || (TYPE(argv[6]) == T_BIGNUM)) ? 1 : 0;
                                }
                                if (_v) {
                                    return _wrap_wxWindow_SetSizeHints__SWIG_0(nargs, args, self);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_SetSizeHints'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetSizer__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSizer *arg2 = (wxSizer *) 0 ;
    bool arg3 ;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxSizer, 1);
    arg3 = RTEST(argv[1]);
    (arg1)->SetSizer(arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetSizer__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSizer *arg2 = (wxSizer *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxSizer, 1);
    (arg1)->SetSizer(arg2);
    
    return Qnil;
}


static VALUE _wrap_wxWindow_SetSizer(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[4];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxSizer, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_SetSizer__SWIG_1(nargs, args, self);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxSizer, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (argv[2] == Qtrue || argv[2] == Qfalse) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxWindow_SetSizer__SWIG_0(nargs, args, self);
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_SetSizer'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetSizerAndFit__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSizer *arg2 = (wxSizer *) 0 ;
    bool arg3 ;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxSizer, 1);
    arg3 = RTEST(argv[1]);
    (arg1)->SetSizerAndFit(arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetSizerAndFit__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSizer *arg2 = (wxSizer *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxSizer, 1);
    (arg1)->SetSizerAndFit(arg2);
    
    return Qnil;
}


static VALUE _wrap_wxWindow_SetSizerAndFit(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[4];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxSizer, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_SetSizerAndFit__SWIG_1(nargs, args, self);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxSizer, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (argv[2] == Qtrue || argv[2] == Qfalse) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxWindow_SetSizerAndFit__SWIG_0(nargs, args, self);
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_SetSizerAndFit'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetTitle(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxString *arg2 = 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    {
        arg2 = new wxString(STR2CSTR(argv[0]), wxConvUTF8);
    }
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetTitle((wxString const &)*arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetThemeEnabled(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool arg2 ;
    Swig::Director *director = 0;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = RTEST(argv[0]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetThemeEnabled(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetValidator(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxValidator *arg2 = 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxValidator, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetValidator((wxValidator const &)*arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetToolTip__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxString *arg2 = 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    {
        arg2 = new wxString(STR2CSTR(argv[0]), wxConvUTF8);
    }
    (arg1)->SetToolTip((wxString const &)*arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetToolTip__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxToolTip *arg2 = (wxToolTip *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxToolTip, 1);
    (arg1)->SetToolTip(arg2);
    
    return Qnil;
}


static VALUE _wrap_wxWindow_SetToolTip(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[3];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxToolTip, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_SetToolTip__SWIG_1(nargs, args, self);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (TYPE(argv[1]) == T_STRING);
            }
            if (_v) {
                return _wrap_wxWindow_SetToolTip__SWIG_0(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_SetToolTip'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetVirtualSize__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    (arg1)->SetVirtualSize(arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetVirtualSize__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxSize *arg2 = 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxSize, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    (arg1)->SetVirtualSize((wxSize const &)*arg2);
    
    return Qnil;
}


static VALUE _wrap_wxWindow_SetVirtualSize(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[4];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxSize, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_SetVirtualSize__SWIG_1(nargs, args, self);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxWindow_SetVirtualSize__SWIG_0(nargs, args, self);
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_SetVirtualSize'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetVirtualSizeHints__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    Swig::Director *director = 0;
    
    if ((argc < 4) || (argc > 4))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    arg4 = NUM2INT(argv[2]);
    arg5 = NUM2INT(argv[3]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetVirtualSizeHints(arg2,arg3,arg4,arg5);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetVirtualSizeHints__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    Swig::Director *director = 0;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    arg4 = NUM2INT(argv[2]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetVirtualSizeHints(arg2,arg3,arg4);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetVirtualSizeHints__SWIG_2(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    Swig::Director *director = 0;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetVirtualSizeHints(arg2,arg3);
    
    return Qnil;
}


static VALUE _wrap_wxWindow_SetVirtualSizeHints(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[6];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxWindow_SetVirtualSizeHints__SWIG_2(nargs, args, self);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = ((TYPE(argv[3]) == T_FIXNUM) || (TYPE(argv[3]) == T_BIGNUM)) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_wxWindow_SetVirtualSizeHints__SWIG_1(nargs, args, self);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = ((TYPE(argv[3]) == T_FIXNUM) || (TYPE(argv[3]) == T_BIGNUM)) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = ((TYPE(argv[4]) == T_FIXNUM) || (TYPE(argv[4]) == T_BIGNUM)) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_wxWindow_SetVirtualSizeHints__SWIG_0(nargs, args, self);
                        }
                    }
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_SetVirtualSizeHints'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetWindowStyle(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    long arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2LONG(argv[0]);
    (arg1)->SetWindowStyle(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_SetWindowStyleFlag(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    long arg2 ;
    Swig::Director *director = 0;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2LONG(argv[0]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->SetWindowStyleFlag(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_Show__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool arg2 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = RTEST(argv[0]);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)(arg1)->Show(arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_Show__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)(arg1)->Show();
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE _wrap_wxWindow_Show(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[3];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            return _wrap_wxWindow_Show__SWIG_1(nargs, args, self);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxWindow, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (argv[1] == Qtrue || argv[1] == Qfalse) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxWindow_Show__SWIG_0(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxWindow_Show'");
    return Qnil;
}


static VALUE
_wrap_wxWindow_Thaw(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->Thaw();
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_TransferDataFromWindow(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)(arg1)->TransferDataFromWindow();
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_TransferDataToWindow(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)(arg1)->TransferDataToWindow();
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_Update(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->Update();
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_Validate(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)(arg1)->Validate();
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxWindow_WarpPointer(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    int arg2 ;
    int arg3 ;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    (arg1)->WarpPointer(arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_wxWindow_this_should_never_be_called(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    wxDC *arg2 = (wxDC *) 0 ;
    VALUE result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxDC, 1);
    result = (VALUE)wxWindow_this_should_never_be_called(arg1,arg2);
    
    vresult = result;
    return vresult;
}


static VALUE
_wrap_wxWindow_paint(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    VALUE result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    result = (VALUE)wxWindow_paint(arg1);
    
    vresult = result;
    return vresult;
}


static VALUE
_wrap_disown_wxWindow(int argc, VALUE *argv, VALUE self) {
    wxWindow *arg1 = (wxWindow *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(argv[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 1);
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_wxWindowTo_p_wxEvtHandler(void *x) {
    return (void *)((wxEvtHandler *)  ((wxWindow *) x));
}
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *|VALUE *", 0, 0, 0};
static swig_type_info _swigt__p_wxAcceleratorTable = {"_p_wxAcceleratorTable", "wxAcceleratorTable *", 0, 0, 0};
static swig_type_info _swigt__p_wxCaret = {"_p_wxCaret", "wxCaret *", 0, 0, 0};
static swig_type_info _swigt__p_wxColour = {"_p_wxColour", "wxColour *", 0, 0, 0};
static swig_type_info _swigt__p_wxCursor = {"_p_wxCursor", "wxCursor *", 0, 0, 0};
static swig_type_info _swigt__p_wxDC = {"_p_wxDC", "wxDC *", 0, 0, 0};
static swig_type_info _swigt__p_wxDropTarget = {"_p_wxDropTarget", "wxDropTarget *", 0, 0, 0};
static swig_type_info _swigt__p_wxEvtHandler = {"_p_wxEvtHandler", "wxEvtHandler *", 0, 0, 0};
static swig_type_info _swigt__p_wxFont = {"_p_wxFont", "wxFont *", 0, 0, 0};
static swig_type_info _swigt__p_wxLayoutConstraints = {"_p_wxLayoutConstraints", "wxLayoutConstraints *", 0, 0, 0};
static swig_type_info _swigt__p_wxMenu = {"_p_wxMenu", "wxMenu *", 0, 0, 0};
static swig_type_info _swigt__p_wxPoint = {"_p_wxPoint", "wxPoint *", 0, 0, 0};
static swig_type_info _swigt__p_wxRect = {"_p_wxRect", "wxRect *", 0, 0, 0};
static swig_type_info _swigt__p_wxRegion = {"_p_wxRegion", "wxRegion *", 0, 0, 0};
static swig_type_info _swigt__p_wxSize = {"_p_wxSize", "wxSize *", 0, 0, 0};
static swig_type_info _swigt__p_wxSizer = {"_p_wxSizer", "wxSizer *", 0, 0, 0};
static swig_type_info _swigt__p_wxString = {"_p_wxString", "wxString *", 0, 0, 0};
static swig_type_info _swigt__p_wxToolTip = {"_p_wxToolTip", "wxToolTip *", 0, 0, 0};
static swig_type_info _swigt__p_wxValidator = {"_p_wxValidator", "wxValidator *", 0, 0, 0};
static swig_type_info _swigt__p_wxWindow = {"_p_wxWindow", "wxWindow *", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_wxAcceleratorTable,
  &_swigt__p_wxCaret,
  &_swigt__p_wxColour,
  &_swigt__p_wxCursor,
  &_swigt__p_wxDC,
  &_swigt__p_wxDropTarget,
  &_swigt__p_wxEvtHandler,
  &_swigt__p_wxFont,
  &_swigt__p_wxLayoutConstraints,
  &_swigt__p_wxMenu,
  &_swigt__p_wxPoint,
  &_swigt__p_wxRect,
  &_swigt__p_wxRegion,
  &_swigt__p_wxSize,
  &_swigt__p_wxSizer,
  &_swigt__p_wxString,
  &_swigt__p_wxToolTip,
  &_swigt__p_wxValidator,
  &_swigt__p_wxWindow,
};

static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxAcceleratorTable[] = {  {&_swigt__p_wxAcceleratorTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxCaret[] = {  {&_swigt__p_wxCaret, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxColour[] = {  {&_swigt__p_wxColour, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxCursor[] = {  {&_swigt__p_wxCursor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDC[] = {  {&_swigt__p_wxDC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDropTarget[] = {  {&_swigt__p_wxDropTarget, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxEvtHandler[] = {  {&_swigt__p_wxWindow, _p_wxWindowTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxEvtHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFont[] = {  {&_swigt__p_wxFont, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxLayoutConstraints[] = {  {&_swigt__p_wxLayoutConstraints, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMenu[] = {  {&_swigt__p_wxMenu, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPoint[] = {  {&_swigt__p_wxPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxRect[] = {  {&_swigt__p_wxRect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxRegion[] = {  {&_swigt__p_wxRegion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSize[] = {  {&_swigt__p_wxSize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSizer[] = {  {&_swigt__p_wxSizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxString[] = {  {&_swigt__p_wxString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxToolTip[] = {  {&_swigt__p_wxToolTip, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxValidator[] = {  {&_swigt__p_wxValidator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxWindow[] = {  {&_swigt__p_wxWindow, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_int,
  _swigc__p_unsigned_long,
  _swigc__p_wxAcceleratorTable,
  _swigc__p_wxCaret,
  _swigc__p_wxColour,
  _swigc__p_wxCursor,
  _swigc__p_wxDC,
  _swigc__p_wxDropTarget,
  _swigc__p_wxEvtHandler,
  _swigc__p_wxFont,
  _swigc__p_wxLayoutConstraints,
  _swigc__p_wxMenu,
  _swigc__p_wxPoint,
  _swigc__p_wxRect,
  _swigc__p_wxRegion,
  _swigc__p_wxSize,
  _swigc__p_wxSizer,
  _swigc__p_wxString,
  _swigc__p_wxToolTip,
  _swigc__p_wxValidator,
  _swigc__p_wxWindow,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#endif

SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  swig_type_info *type, *ret;
  swig_cast_info *cast;
  size_t i;
  swig_module_info *module_head;
  static int init_run = 0;

  clientdata = clientdata;

  if (init_run) return;
  init_run = 1;

  /* Initialize the swig_module */
  swig_module.type_initial = swig_type_initial;
  swig_module.cast_initial = swig_cast_initial;

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (module_head) {
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  } else {
    /* This is the first module loaded */
    swig_module.next = &swig_module;
    SWIG_SetModule(clientdata, &swig_module);
  }
		 
  /* Now work on filling in swig_module.types */
  for (i = 0; i < swig_module.size; ++i) {
    type = 0;

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
      if (swig_module.type_initial[i]->clientdata) type->clientdata = swig_module.type_initial[i]->clientdata;
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
      }
      if (ret && type == swig_module.type_initial[i]) {
        cast->type = ret;
        ret = 0;
      }
      
      if (!ret) {
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }

      cast++;
    }

    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_wxWindow(void) {
static bool initialized;
if(initialized) return;
initialized = true;
    int i;
    
    SWIG_InitRuntime();
mWxWindow = mWxruby2;
    
    SWIG_InitializeModule(0);
    for (i = 0; i < swig_module.size; i++) {
        SWIG_define_class(swig_module.types[i]);
    }
    
    rb_define_module_function(mWxWindow, "disown_wxWindow", VALUEFUNC(_wrap_disown_wxWindow), -1);
    
    extern void Init_wxEvtHandler();
    Init_wxEvtHandler();
    //extern swig_class cWxEvtHandler;
    cWxWindow.klass = rb_define_class_under(mWxWindow, "Window", cWxEvtHandler.klass);
    SWIG_TypeClientData(SWIGTYPE_p_wxWindow, (void *) &cWxWindow);
    rb_define_alloc_func(cWxWindow.klass, _wrap_wxWindow_allocate);
    rb_define_method(cWxWindow.klass, "initialize", VALUEFUNC(_wrap_new_wxWindow), -1);
    rb_define_method(cWxWindow.klass, "add_child", VALUEFUNC(_wrap_wxWindow_AddChild), -1);
    rb_define_method(cWxWindow.klass, "capture_mouse", VALUEFUNC(_wrap_wxWindow_CaptureMouse), -1);
    rb_define_method(cWxWindow.klass, "center", VALUEFUNC(_wrap_wxWindow_Center), -1);
    rb_define_method(cWxWindow.klass, "center_on_parent", VALUEFUNC(_wrap_wxWindow_CenterOnParent), -1);
    rb_define_method(cWxWindow.klass, "center_on_screen", VALUEFUNC(_wrap_wxWindow_CenterOnScreen), -1);
    rb_define_method(cWxWindow.klass, "centre", VALUEFUNC(_wrap_wxWindow_Centre), -1);
    rb_define_method(cWxWindow.klass, "centre_on_parent", VALUEFUNC(_wrap_wxWindow_CentreOnParent), -1);
    rb_define_method(cWxWindow.klass, "centre_on_screen", VALUEFUNC(_wrap_wxWindow_CentreOnScreen), -1);
    rb_define_method(cWxWindow.klass, "client_to_screen", VALUEFUNC(_wrap_wxWindow_ClientToScreen), -1);
    rb_define_method(cWxWindow.klass, "close", VALUEFUNC(_wrap_wxWindow_Close), -1);
    rb_define_method(cWxWindow.klass, "convert_dialog_to_pixels", VALUEFUNC(_wrap_wxWindow_ConvertDialogToPixels), -1);
    rb_define_method(cWxWindow.klass, "convert_pixels_to_dialog", VALUEFUNC(_wrap_wxWindow_ConvertPixelsToDialog), -1);
    rb_define_method(cWxWindow.klass, "destroy", VALUEFUNC(_wrap_wxWindow_Destroy), -1);
    rb_define_method(cWxWindow.klass, "destroy_children", VALUEFUNC(_wrap_wxWindow_DestroyChildren), -1);
    rb_define_method(cWxWindow.klass, "disable", VALUEFUNC(_wrap_wxWindow_Disable), -1);
    rb_define_method(cWxWindow.klass, "enable", VALUEFUNC(_wrap_wxWindow_Enable), -1);
    rb_define_singleton_method(cWxWindow.klass, "find_focus", VALUEFUNC(_wrap_wxWindow_FindFocus), -1);
    rb_define_method(cWxWindow.klass, "find_window", VALUEFUNC(_wrap_wxWindow_FindWindow), -1);
    rb_define_singleton_method(cWxWindow.klass, "find_window_by_id", VALUEFUNC(_wrap_wxWindow_FindWindowById), -1);
    rb_define_singleton_method(cWxWindow.klass, "find_window_by_name", VALUEFUNC(_wrap_wxWindow_FindWindowByName), -1);
    rb_define_singleton_method(cWxWindow.klass, "find_window_by_label", VALUEFUNC(_wrap_wxWindow_FindWindowByLabel), -1);
    rb_define_method(cWxWindow.klass, "fit", VALUEFUNC(_wrap_wxWindow_Fit), -1);
    rb_define_method(cWxWindow.klass, "fit_inside", VALUEFUNC(_wrap_wxWindow_FitInside), -1);
    rb_define_method(cWxWindow.klass, "freeze", VALUEFUNC(_wrap_wxWindow_Freeze), -1);
    rb_define_method(cWxWindow.klass, "get_adjusted_best_size", VALUEFUNC(_wrap_wxWindow_GetAdjustedBestSize), -1);
    rb_define_method(cWxWindow.klass, "get_background_colour", VALUEFUNC(_wrap_wxWindow_GetBackgroundColour), -1);
    rb_define_method(cWxWindow.klass, "get_best_size", VALUEFUNC(_wrap_wxWindow_GetBestSize), -1);
    rb_define_method(cWxWindow.klass, "get_caret", VALUEFUNC(_wrap_wxWindow_GetCaret), -1);
    rb_define_singleton_method(cWxWindow.klass, "get_capture", VALUEFUNC(_wrap_wxWindow_GetCapture), -1);
    rb_define_method(cWxWindow.klass, "get_char_height", VALUEFUNC(_wrap_wxWindow_GetCharHeight), -1);
    rb_define_method(cWxWindow.klass, "get_char_width", VALUEFUNC(_wrap_wxWindow_GetCharWidth), -1);
    rb_define_method(cWxWindow.klass, "get_client_size", VALUEFUNC(_wrap_wxWindow_GetClientSize), -1);
    rb_define_method(cWxWindow.klass, "get_constraints", VALUEFUNC(_wrap_wxWindow_GetConstraints), -1);
    rb_define_method(cWxWindow.klass, "get_containing_sizer", VALUEFUNC(_wrap_wxWindow_GetContainingSizer), -1);
    rb_define_method(cWxWindow.klass, "get_drop_target", VALUEFUNC(_wrap_wxWindow_GetDropTarget), -1);
    rb_define_method(cWxWindow.klass, "get_event_handler", VALUEFUNC(_wrap_wxWindow_GetEventHandler), -1);
    rb_define_method(cWxWindow.klass, "get_extra_style", VALUEFUNC(_wrap_wxWindow_GetExtraStyle), -1);
    rb_define_method(cWxWindow.klass, "get_foreground_colour", VALUEFUNC(_wrap_wxWindow_GetForegroundColour), -1);
    rb_define_method(cWxWindow.klass, "get_grand_parent", VALUEFUNC(_wrap_wxWindow_GetGrandParent), -1);
    rb_define_method(cWxWindow.klass, "get_handle", VALUEFUNC(_wrap_wxWindow_GetHandle), -1);
    rb_define_method(cWxWindow.klass, "get_help_text", VALUEFUNC(_wrap_wxWindow_GetHelpText), -1);
    rb_define_method(cWxWindow.klass, "get_id", VALUEFUNC(_wrap_wxWindow_GetId), -1);
    rb_define_method(cWxWindow.klass, "get_label", VALUEFUNC(_wrap_wxWindow_GetLabel), -1);
    rb_define_method(cWxWindow.klass, "get_name", VALUEFUNC(_wrap_wxWindow_GetName), -1);
    rb_define_method(cWxWindow.klass, "get_parent", VALUEFUNC(_wrap_wxWindow_GetParent), -1);
    rb_define_method(cWxWindow.klass, "get_position", VALUEFUNC(_wrap_wxWindow_GetPosition), -1);
    rb_define_method(cWxWindow.klass, "get_rect", VALUEFUNC(_wrap_wxWindow_GetRect), -1);
    rb_define_method(cWxWindow.klass, "get_scroll_thumb", VALUEFUNC(_wrap_wxWindow_GetScrollThumb), -1);
    rb_define_method(cWxWindow.klass, "get_scroll_pos", VALUEFUNC(_wrap_wxWindow_GetScrollPos), -1);
    rb_define_method(cWxWindow.klass, "get_scroll_range", VALUEFUNC(_wrap_wxWindow_GetScrollRange), -1);
    rb_define_method(cWxWindow.klass, "get_size", VALUEFUNC(_wrap_wxWindow_GetSize), -1);
    rb_define_method(cWxWindow.klass, "get_sizer", VALUEFUNC(_wrap_wxWindow_GetSizer), -1);
    rb_define_method(cWxWindow.klass, "get_title", VALUEFUNC(_wrap_wxWindow_GetTitle), -1);
    rb_define_method(cWxWindow.klass, "get_tool_tip", VALUEFUNC(_wrap_wxWindow_GetToolTip), -1);
    rb_define_method(cWxWindow.klass, "get_update_region", VALUEFUNC(_wrap_wxWindow_GetUpdateRegion), -1);
    rb_define_method(cWxWindow.klass, "get_virtual_size", VALUEFUNC(_wrap_wxWindow_GetVirtualSize), -1);
    rb_define_method(cWxWindow.klass, "get_window_style_flag", VALUEFUNC(_wrap_wxWindow_GetWindowStyleFlag), -1);
    rb_define_method(cWxWindow.klass, "has_capture", VALUEFUNC(_wrap_wxWindow_HasCapture), -1);
    rb_define_method(cWxWindow.klass, "hide", VALUEFUNC(_wrap_wxWindow_Hide), -1);
    rb_define_method(cWxWindow.klass, "init_dialog", VALUEFUNC(_wrap_wxWindow_InitDialog), -1);
    rb_define_method(cWxWindow.klass, "is_enabled", VALUEFUNC(_wrap_wxWindow_IsEnabled), -1);
    rb_define_method(cWxWindow.klass, "is_retained", VALUEFUNC(_wrap_wxWindow_IsRetained), -1);
    rb_define_method(cWxWindow.klass, "is_shown", VALUEFUNC(_wrap_wxWindow_IsShown), -1);
    rb_define_method(cWxWindow.klass, "is_top_level", VALUEFUNC(_wrap_wxWindow_IsTopLevel), -1);
    rb_define_method(cWxWindow.klass, "layout", VALUEFUNC(_wrap_wxWindow_Layout), -1);
    rb_define_method(cWxWindow.klass, "lower", VALUEFUNC(_wrap_wxWindow_Lower), -1);
    rb_define_method(cWxWindow.klass, "make_modal", VALUEFUNC(_wrap_wxWindow_MakeModal), -1);
    rb_define_method(cWxWindow.klass, "move", VALUEFUNC(_wrap_wxWindow_Move), -1);
    rb_define_method(cWxWindow.klass, "popup_menu", VALUEFUNC(_wrap_wxWindow_PopupMenu), -1);
    rb_define_method(cWxWindow.klass, "push_event_handler", VALUEFUNC(_wrap_wxWindow_PushEventHandler), -1);
    rb_define_method(cWxWindow.klass, "raise", VALUEFUNC(_wrap_wxWindow_Raise), -1);
    rb_define_method(cWxWindow.klass, "refresh", VALUEFUNC(_wrap_wxWindow_Refresh), -1);
    rb_define_method(cWxWindow.klass, "refresh_rect", VALUEFUNC(_wrap_wxWindow_RefreshRect), -1);
    rb_define_method(cWxWindow.klass, "release_mouse", VALUEFUNC(_wrap_wxWindow_ReleaseMouse), -1);
    rb_define_method(cWxWindow.klass, "remove_child", VALUEFUNC(_wrap_wxWindow_RemoveChild), -1);
    rb_define_method(cWxWindow.klass, "remove_event_handler", VALUEFUNC(_wrap_wxWindow_RemoveEventHandler), -1);
    rb_define_method(cWxWindow.klass, "reparent", VALUEFUNC(_wrap_wxWindow_Reparent), -1);
    rb_define_method(cWxWindow.klass, "screen_to_client", VALUEFUNC(_wrap_wxWindow_ScreenToClient), -1);
    rb_define_method(cWxWindow.klass, "scroll_lines", VALUEFUNC(_wrap_wxWindow_ScrollLines), -1);
    rb_define_method(cWxWindow.klass, "scroll_pages", VALUEFUNC(_wrap_wxWindow_ScrollPages), -1);
    rb_define_method(cWxWindow.klass, "scroll_window", VALUEFUNC(_wrap_wxWindow_ScrollWindow), -1);
    rb_define_method(cWxWindow.klass, "set_accelerator_table", VALUEFUNC(_wrap_wxWindow_SetAcceleratorTable), -1);
    rb_define_method(cWxWindow.klass, "set_auto_layout", VALUEFUNC(_wrap_wxWindow_SetAutoLayout), -1);
    rb_define_method(cWxWindow.klass, "set_background_colour", VALUEFUNC(_wrap_wxWindow_SetBackgroundColour), -1);
    rb_define_method(cWxWindow.klass, "set_caret", VALUEFUNC(_wrap_wxWindow_SetCaret), -1);
    rb_define_method(cWxWindow.klass, "set_client_size", VALUEFUNC(_wrap_wxWindow_SetClientSize), -1);
    rb_define_method(cWxWindow.klass, "set_containing_sizer", VALUEFUNC(_wrap_wxWindow_SetContainingSizer), -1);
    rb_define_method(cWxWindow.klass, "set_cursor", VALUEFUNC(_wrap_wxWindow_SetCursor), -1);
    rb_define_method(cWxWindow.klass, "set_constraints", VALUEFUNC(_wrap_wxWindow_SetConstraints), -1);
    rb_define_method(cWxWindow.klass, "set_drop_target", VALUEFUNC(_wrap_wxWindow_SetDropTarget), -1);
    rb_define_method(cWxWindow.klass, "set_event_handler", VALUEFUNC(_wrap_wxWindow_SetEventHandler), -1);
    rb_define_method(cWxWindow.klass, "set_extra_style", VALUEFUNC(_wrap_wxWindow_SetExtraStyle), -1);
    rb_define_method(cWxWindow.klass, "set_focus", VALUEFUNC(_wrap_wxWindow_SetFocus), -1);
    rb_define_method(cWxWindow.klass, "set_focus_from_kbd", VALUEFUNC(_wrap_wxWindow_SetFocusFromKbd), -1);
    rb_define_method(cWxWindow.klass, "set_font", VALUEFUNC(_wrap_wxWindow_SetFont), -1);
    rb_define_method(cWxWindow.klass, "set_foreground_colour", VALUEFUNC(_wrap_wxWindow_SetForegroundColour), -1);
    rb_define_method(cWxWindow.klass, "set_help_text", VALUEFUNC(_wrap_wxWindow_SetHelpText), -1);
    rb_define_method(cWxWindow.klass, "set_id", VALUEFUNC(_wrap_wxWindow_SetId), -1);
    rb_define_method(cWxWindow.klass, "set_name", VALUEFUNC(_wrap_wxWindow_SetName), -1);
    rb_define_method(cWxWindow.klass, "set_scrollbar", VALUEFUNC(_wrap_wxWindow_SetScrollbar), -1);
    rb_define_method(cWxWindow.klass, "set_scroll_pos", VALUEFUNC(_wrap_wxWindow_SetScrollPos), -1);
    rb_define_method(cWxWindow.klass, "set_dimensions", VALUEFUNC(_wrap_wxWindow_SetDimensions), -1);
    rb_define_method(cWxWindow.klass, "set_size", VALUEFUNC(_wrap_wxWindow_SetSize), -1);
    rb_define_method(cWxWindow.klass, "set_size_hints", VALUEFUNC(_wrap_wxWindow_SetSizeHints), -1);
    rb_define_method(cWxWindow.klass, "set_sizer", VALUEFUNC(_wrap_wxWindow_SetSizer), -1);
    rb_define_method(cWxWindow.klass, "set_sizer_and_fit", VALUEFUNC(_wrap_wxWindow_SetSizerAndFit), -1);
    rb_define_method(cWxWindow.klass, "set_title", VALUEFUNC(_wrap_wxWindow_SetTitle), -1);
    rb_define_method(cWxWindow.klass, "set_theme_enabled", VALUEFUNC(_wrap_wxWindow_SetThemeEnabled), -1);
    rb_define_method(cWxWindow.klass, "set_validator", VALUEFUNC(_wrap_wxWindow_SetValidator), -1);
    rb_define_method(cWxWindow.klass, "set_tool_tip", VALUEFUNC(_wrap_wxWindow_SetToolTip), -1);
    rb_define_method(cWxWindow.klass, "set_virtual_size", VALUEFUNC(_wrap_wxWindow_SetVirtualSize), -1);
    rb_define_method(cWxWindow.klass, "set_virtual_size_hints", VALUEFUNC(_wrap_wxWindow_SetVirtualSizeHints), -1);
    rb_define_method(cWxWindow.klass, "set_window_style", VALUEFUNC(_wrap_wxWindow_SetWindowStyle), -1);
    rb_define_method(cWxWindow.klass, "set_window_style_flag", VALUEFUNC(_wrap_wxWindow_SetWindowStyleFlag), -1);
    rb_define_method(cWxWindow.klass, "show", VALUEFUNC(_wrap_wxWindow_Show), -1);
    rb_define_method(cWxWindow.klass, "thaw", VALUEFUNC(_wrap_wxWindow_Thaw), -1);
    rb_define_method(cWxWindow.klass, "transfer_data_from_window", VALUEFUNC(_wrap_wxWindow_TransferDataFromWindow), -1);
    rb_define_method(cWxWindow.klass, "transfer_data_to_window", VALUEFUNC(_wrap_wxWindow_TransferDataToWindow), -1);
    rb_define_method(cWxWindow.klass, "update", VALUEFUNC(_wrap_wxWindow_Update), -1);
    rb_define_method(cWxWindow.klass, "validate", VALUEFUNC(_wrap_wxWindow_Validate), -1);
    rb_define_method(cWxWindow.klass, "warp_pointer", VALUEFUNC(_wrap_wxWindow_WarpPointer), -1);
    rb_define_method(cWxWindow.klass, "this_should_never_be_called", VALUEFUNC(_wrap_wxWindow_this_should_never_be_called), -1);
    rb_define_method(cWxWindow.klass, "paint", VALUEFUNC(_wrap_wxWindow_paint), -1);
    cWxWindow.mark = 0;
    cWxWindow.destroy = (void (*)(void *)) free_wxWindow;
}

