/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.22
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIG_NOINCLUDE
#define SWIG_DIRECTORS

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif

/* ruby.swg */
/* Implementation : RUBY */
#define SWIGRUBY 1

#include "ruby.h"

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

#define NUM2USHRT(n) (\
    (0 <= NUM2UINT(n) && NUM2UINT(n) <= USHRT_MAX)\
    ? (unsigned short) NUM2UINT(n) \
    : (rb_raise(rb_eArgError, "integer %d out of range of `unsigned short'",\
               NUM2UINT(n)), (short)0)\
)

#define NUM2SHRT(n) (\
    (SHRT_MIN <= NUM2INT(n) && NUM2INT(n) <= SHRT_MAX)\
    ? (short)NUM2INT(n)\
    : (rb_raise(rb_eArgError, "integer %d out of range of `short'",\
               NUM2INT(n)), (short)0)\
)

/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
} swig_class;

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING(RB_STRING_VALUE(s))->ptr
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING(RB_STRING_VALUE(s))->len
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { rb_raise(rb_eRuntimeError, (char *) msg ); } else


/*************************************************************** -*- c -*-
 * ruby/precommon.swg
 *
 * Rename all exported symbols from common.swg, to avoid symbol
 * clashes if multiple interpreters are included
 *
 ************************************************************************/

#define SWIG_TypeRegister    SWIG_Ruby_TypeRegister
#define SWIG_TypeCheck       SWIG_Ruby_TypeCheck
#define SWIG_TypeCast        SWIG_Ruby_TypeCast
#define SWIG_TypeDynamicCast SWIG_Ruby_TypeDynamicCast
#define SWIG_TypeName        SWIG_Ruby_TypeName
#define SWIG_TypePrettyName  SWIG_Ruby_TypePrettyName
#define SWIG_TypeQuery       SWIG_Ruby_TypeQuery
#define SWIG_TypeClientData  SWIG_Ruby_TypeClientData
#define SWIG_PackData        SWIG_Ruby_PackData 
#define SWIG_UnpackData      SWIG_Ruby_UnpackData 

/* Also rename all exported symbols from rubydef.swig */

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Ruby_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Ruby_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Ruby_MustGetPtr(p, type, argnum, flags)

/* Ruby-specific SWIG API */

#define SWIG_InitRuntime() \
  SWIG_Ruby_InitRuntime()
#define SWIG_define_class(ty) \
  SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty) \
  SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value) \
  SWIG_Ruby_MangleStr(value)
#define SWIG_CheckConvert(value, ty) \
  SWIG_Ruby_CheckConvert(value, ty)
#define SWIG_NewPackedObj(ptr, sz, ty) \
  SWIG_Ruby_NewPackedObj(ptr, sz, ty)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)


/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    if defined(STATIC_LINKED)
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) extern a
#    else
#      define SWIGEXPORT(a) __declspec(dllexport) a
#      define SWIGIMPORT(a) extern a
#    endif
#  else
#    if defined(__BORLANDC__)
#      define SWIGEXPORT(a) a _export
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGEXPORT(a) a
#  define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#  define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#  define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(const char *)     SWIG_TypePrettyName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);
SWIGIMPORT(char *)           SWIG_PackData(char *, void *, int);
SWIGIMPORT(char *)           SWIG_UnpackData(char *, void *, int);

#else

static swig_type_info *swig_type_list = 0;
static swig_type_info **swig_type_list_handle = &swig_type_list;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = *swig_type_list_handle;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = *swig_type_list_handle;
  *swig_type_list_handle = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Return the pretty name associated with this type,
   that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME(const char *)
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Compare two type names skipping the space characters, therefore
   "char*" == "char *" and "Class<int>" == "Class<int >", etc.

   Return 0 when the two name types are equivalent, as in
   strncmp, but skipping ' '.
*/
static int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
static int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}
  

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = *swig_type_list_handle;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = *swig_type_list_handle;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

#endif

#ifdef __cplusplus
}
#endif

/* rubydec.swg -*- c -*- */
#ifdef __cplusplus
extern "C" {
#endif

SWIGIMPORT(void)   SWIG_Ruby_InitRuntime(void);
SWIGIMPORT(void)   SWIG_Ruby_define_class(swig_type_info *);
SWIGIMPORT(VALUE)  SWIG_Ruby_NewPointerObj(void *, swig_type_info *, int);
SWIGIMPORT(VALUE)  SWIG_Ruby_NewClassInstance(VALUE, swig_type_info *);
SWIGIMPORT(char *) SWIG_Ruby_MangleStr(VALUE);
SWIGIMPORT(int)    SWIG_Ruby_ConvertPtr(VALUE, void**, swig_type_info *, int);
SWIGIMPORT(void *) SWIG_Ruby_MustGetPtr(VALUE, swig_type_info *, int, int);
SWIGIMPORT(int)    SWIG_Ruby_CheckConvert(VALUE, swig_type_info *);
SWIGIMPORT(VALUE)  SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type);
SWIGIMPORT(void)   SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty, int flags);

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_unsigned_char swig_types[0] 
#define  SWIGTYPE_p_wxImage swig_types[1] 
#define  SWIGTYPE_p_wxList swig_types[2] 
#define  SWIGTYPE_p_wxImageHandler swig_types[3] 
#define  SWIGTYPE_p_wxImageHistogram swig_types[4] 
#define  SWIGTYPE_p_wxPalette swig_types[5] 
#define  SWIGTYPE_p_wxInputStream swig_types[6] 
#define  SWIGTYPE_p_wxRect swig_types[7] 
#define  SWIGTYPE_p_wxOutputStream swig_types[8] 
#define  SWIGTYPE_p_wxPoint swig_types[9] 
static swig_type_info *swig_types[11];

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_wxImage
#define SWIG_name    "WxImage"

static VALUE alive = Qnil;

static VALUE mWxImage;
   extern VALUE mWx;

static void SWIG_AsVal(VALUE obj, int *val)
{
    *val = (int) NUM2INT(obj);
}


#  undef GetClassName
#  undef GetClassInfo
#  undef Yield
#  undef GetMessage
#  undef FindWindow
#  undef GetCharWidth
#  undef DrawText
#  undef StartDoc
#  undef CreateDialog
#  undef Sleep
#  undef _
#  undef Connect
#  undef connect

#include <wx/wx.h>
#include <wx/dcbuffer.h>

void GcMarkDeleted(void *);
bool GcIsDeleted(void *);
void GcMapPtrToValue(void *ptr, VALUE val);
VALUE GcGetValueFromPtr(void *ptr);
void GcFreefunc(void *);


#include <wx/datetime.h>


#include <wx/wx.h>
#include <wx/image.h>


extern swig_class cWxObject;
swig_class cWxImage;
static void free_wxImage(wxImage *);
/***********************************************************************
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Ruby extensions.
 *
 * Author : Lyle Johnson (lyle@users.sourceforge.net)
 *          Based on the original Python implementation by
 *          Mark Rose (mrose@stm.lbl.gov).
 ************************************************************************/

#ifdef __cplusplus

#include <string>

namespace Swig {
  struct body_args {
    VALUE recv;
    ID id;
    int argc;
    VALUE *argv;
  };

  /* Base class for director exceptions */
  class DirectorException {
    protected:
      VALUE swig_error;
    protected:
      DirectorException(VALUE error=Qnil) : swig_error(error) {}
    public:
      VALUE getType() const  { 
        return CLASS_OF(swig_error); 
      }
      VALUE getError() const {
        return swig_error;
      }
      virtual ~DirectorException() {}
  };

  /* Type mismatch in the return value from a Ruby method call */
  class DirectorTypeMismatchException : public Swig::DirectorException {
    public:
      DirectorTypeMismatchException(const char *msg="") {
        VALUE str = rb_str_new2("Swig director type mismatch: ");
        rb_str_concat(str, rb_str_new2(msg));
        swig_error = rb_exc_new3(rb_eTypeError, str);
      }
  };

  /* Any Ruby exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException {
    public:
      DirectorMethodException(VALUE error) : Swig::DirectorException(error) {}
  };

  /* Attempted to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException {};


  /* Simple thread abstraction for pthreads on win32 */
#ifdef __THREAD__
#define __PTHREAD__
#if defined(_WIN32) || defined(__WIN32__)
#define pthread_mutex_lock EnterCriticalSection
#define pthread_mutex_unlock LeaveCriticalSection
#define pthread_mutex_t CRITICAL_SECTION
#define MUTEX_INIT(var) CRITICAL_SECTION var
#else
#include <pthread.h>
#define MUTEX_INIT(var) pthread_mutex_t var = PTHREAD_MUTEX_INITIALIZER 
#endif
#endif

  /* director base class */
  class Director {
    private:
      /* pointer to the wrapped Ruby object */
      VALUE swig_self;
      /* flag indicating whether the object is owned by Ruby or c++ */
      mutable bool swig_disown_flag;
      /* shared flag for breaking recursive director calls */
      static bool swig_up;

#ifdef __PTHREAD__
      /* locks for sharing the swig_up flag in a threaded environment */
      static pthread_mutex_t swig_mutex_up;
      static bool swig_mutex_active;
      static pthread_t swig_mutex_thread;
#endif

      /* reset the swig_up flag once the routing direction has been determined */
#ifdef __PTHREAD__
      void swig_clear_up() const { 
        Swig::Director::swig_up = false; 
        Swig::Director::swig_mutex_active = false;
        pthread_mutex_unlock(&swig_mutex_up);
      }
#else
      void swig_clear_up() const { 
        Swig::Director::swig_up = false; 
      }
#endif

    public:
      /* wrap a Ruby object, optionally taking ownership */
      Director(VALUE self, bool disown) : swig_self(self), swig_disown_flag(disown) {

#ifdef wxDEBUG
    printf("Image.cpp" " new Director %p\n", this);
    fflush(stdout);
#endif
    GcMapPtrToValue(this,self);
      }

      /* discard our reference at destruction */
      virtual ~Director() {

#ifdef wxDEBUG
    printf("Image.cpp" " ~Director %p\n", this);
    fflush(stdout);
#endif
    GcMarkDeleted(this);
      }

      /* return a pointer to the wrapped Ruby object */
      VALUE swig_get_self() const { 
        return swig_self; 
      }

      /* get the swig_up flag to determine if the method call should be routed
       * to the c++ base class or through the wrapped Ruby object
       */
#ifdef __PTHREAD__
      bool swig_get_up() const { 
        if (Swig::Director::swig_mutex_active) {
          if (pthread_equal(Swig::Director::swig_mutex_thread, pthread_self())) {
            bool up = swig_up;
            swig_clear_up();
            return up;
          }
        }
        return false;
      }
#else 
      bool swig_get_up() const { 
        bool up = swig_up;
        swig_up = false;
        return up;
      }
#endif

      /* set the swig_up flag if the next method call should be directed to
       * the c++ base class rather than the wrapped Ruby object
       */
#ifdef __PTHREAD__
      void swig_set_up() const { 
        pthread_mutex_lock(&Swig::Director::swig_mutex_up);
        Swig::Director::swig_mutex_thread = pthread_self();
        Swig::Director::swig_mutex_active = true;
        Swig::Director::swig_up = true;
      }
#else 
      void swig_set_up() const { 
        Swig::Director::swig_up = true; 
      }
#endif

      /* acquire ownership of the wrapped Ruby object (the sense of "disown"
       * is from Ruby) */
      void swig_disown() const { 
        if (!swig_disown_flag) { 
          swig_disown_flag = true;
        } 
      }
  };

//  bool Swig::Director::swig_up = false;

#ifdef __PTHREAD__
  MUTEX_INIT(Swig::Director::swig_mutex_up);
  pthread_t Swig::Director::swig_mutex_thread;
  bool Swig::Director::swig_mutex_active = false;
#endif

}

#endif /* __cplusplus */




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "Image.h"

static VALUE
_wrap_new_wxImage__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxImage *result;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (wxImage *)new wxImage();
    DATA_PTR(self) = result;
    return self;
}


static VALUE
_wrap_new_wxImage__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = 0 ;
    wxImage *result;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(argv[0], (void **) &arg1, SWIGTYPE_p_wxImage, 1); if (arg1 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (wxImage *)new wxImage((wxImage const &)*arg1);
    DATA_PTR(self) = result;
    return self;
}


static VALUE
_wrap_new_wxImage__SWIG_2(int argc, VALUE *argv, VALUE self) {
    int arg1 ;
    int arg2 ;
    wxImage *result;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    arg1 = NUM2INT(argv[0]);
    arg2 = NUM2INT(argv[1]);
    result = (wxImage *)new wxImage(arg1,arg2);
    DATA_PTR(self) = result;
    return self;
}


static VALUE
_wrap_new_wxImage__SWIG_3(int argc, VALUE *argv, VALUE self) {
    int arg1 ;
    int arg2 ;
    unsigned char *arg3 = (unsigned char *) 0 ;
    bool arg4 = (bool) false ;
    wxImage *result;
    
    if ((argc < 3) || (argc > 4))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    arg1 = NUM2INT(argv[0]);
    arg2 = NUM2INT(argv[1]);
    SWIG_ConvertPtr(argv[2], (void **) &arg3, SWIGTYPE_p_unsigned_char, 1);
    if (argc > 3) {
        arg4 = RTEST(argv[3]);
    }
    result = (wxImage *)new wxImage(arg1,arg2,arg3,arg4);
    DATA_PTR(self) = result;
    return self;
}


static VALUE
_wrap_new_wxImage__SWIG_4(int argc, VALUE *argv, VALUE self) {
    wxString *arg1 = 0 ;
    long arg2 = (long) wxBITMAP_TYPE_ANY ;
    int arg3 = (int) -1 ;
    wxImage *result;
    
    if ((argc < 1) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    {
        arg1 = new wxString((wxChar *)STR2CSTR(argv[0]));
    }
    if (argc > 1) {
        arg2 = NUM2LONG(argv[1]);
    }
    if (argc > 2) {
        arg3 = NUM2INT(argv[2]);
    }
    result = (wxImage *)new wxImage((wxString const &)*arg1,arg2,arg3);
    DATA_PTR(self) = result;
    return self;
}


static VALUE
_wrap_new_wxImage__SWIG_5(int argc, VALUE *argv, VALUE self) {
    wxString *arg1 = 0 ;
    wxString *arg2 = 0 ;
    int arg3 = (int) -1 ;
    wxImage *result;
    
    if ((argc < 2) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    {
        arg1 = new wxString((wxChar *)STR2CSTR(argv[0]));
    }
    {
        arg2 = new wxString((wxChar *)STR2CSTR(argv[1]));
    }
    if (argc > 2) {
        arg3 = NUM2INT(argv[2]);
    }
    result = (wxImage *)new wxImage((wxString const &)*arg1,(wxString const &)*arg2,arg3);
    DATA_PTR(self) = result;
    return self;
}


static VALUE
_wrap_new_wxImage__SWIG_6(int argc, VALUE *argv, VALUE self) {
    wxInputStream *arg1 = 0 ;
    long arg2 = (long) wxBITMAP_TYPE_ANY ;
    int arg3 = (int) -1 ;
    wxImage *result;
    
    if ((argc < 1) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(argv[0], (void **) &arg1, SWIGTYPE_p_wxInputStream, 1); if (arg1 == NULL) rb_raise(rb_eTypeError, "null reference");
    if (argc > 1) {
        arg2 = NUM2LONG(argv[1]);
    }
    if (argc > 2) {
        arg3 = NUM2INT(argv[2]);
    }
    result = (wxImage *)new wxImage(*arg1,arg2,arg3);
    DATA_PTR(self) = result;
    return self;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
static VALUE
_wrap_wxImage_allocate(VALUE self) {
#else
    static VALUE
    _wrap_wxImage_allocate(int argc, VALUE *argv, VALUE self) {
#endif
        
        
        VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_wxImage);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
        rb_obj_call_init(vresult, argc, argv);
#endif
        return vresult;
    }
    

static VALUE
_wrap_new_wxImage__SWIG_7(int argc, VALUE *argv, VALUE self) {
    wxInputStream *arg1 = 0 ;
    wxString *arg2 = 0 ;
    int arg3 = (int) -1 ;
    wxImage *result;
    
    if ((argc < 2) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(argv[0], (void **) &arg1, SWIGTYPE_p_wxInputStream, 1); if (arg1 == NULL) rb_raise(rb_eTypeError, "null reference");
    {
        arg2 = new wxString((wxChar *)STR2CSTR(argv[1]));
    }
    if (argc > 2) {
        arg3 = NUM2INT(argv[2]);
    }
    result = (wxImage *)new wxImage(*arg1,(wxString const &)*arg2,arg3);
    DATA_PTR(self) = result;
    return self;
}


static VALUE _wrap_new_wxImage(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[4];
    int ii;
    
    argc = nargs;
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = args[ii];
    }
    if (argc == 0) {
        return _wrap_new_wxImage__SWIG_0(nargs, args, self);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxImage, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_wxImage__SWIG_1(nargs, args, self);
        }
    }
    if ((argc >= 1) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxInputStream, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            if (argc <= 1) {
                return _wrap_new_wxImage__SWIG_6(nargs, args, self);
            }
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_new_wxImage__SWIG_6(nargs, args, self);
                }
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_wxImage__SWIG_6(nargs, args, self);
                }
            }
        }
    }
    if ((argc >= 1) && (argc <= 3)) {
        int _v;
        {
            _v = (TYPE(argv[0]) == T_STRING);
        }
        if (_v) {
            if (argc <= 1) {
                return _wrap_new_wxImage__SWIG_4(nargs, args, self);
            }
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_new_wxImage__SWIG_4(nargs, args, self);
                }
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_wxImage__SWIG_4(nargs, args, self);
                }
            }
        }
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxInputStream, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (TYPE(argv[1]) == T_STRING);
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_new_wxImage__SWIG_7(nargs, args, self);
                }
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_wxImage__SWIG_7(nargs, args, self);
                }
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = ((TYPE(argv[0]) == T_FIXNUM) || (TYPE(argv[0]) == T_BIGNUM)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_wxImage__SWIG_2(nargs, args, self);
            }
        }
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            _v = (TYPE(argv[0]) == T_STRING);
        }
        if (_v) {
            {
                _v = (TYPE(argv[1]) == T_STRING);
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_new_wxImage__SWIG_5(nargs, args, self);
                }
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_wxImage__SWIG_5(nargs, args, self);
                }
            }
        }
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        {
            _v = ((TYPE(argv[0]) == T_FIXNUM) || (TYPE(argv[0]) == T_BIGNUM)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    _v = (NIL_P(argv[2]) || (TYPE(argv[2]) == T_DATA && SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_unsigned_char, 0) != -1)) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_new_wxImage__SWIG_3(nargs, args, self);
                    }
                    {
                        _v = (argv[3] == Qtrue || argv[3] == Qfalse) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_new_wxImage__SWIG_3(nargs, args, self);
                    }
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'new_wxImage'");
    return Qnil;
}


static void
free_wxImage(wxImage *arg1) {
    //delete arg1;
}
static VALUE
_wrap_wxImage_AddHandler(int argc, VALUE *argv, VALUE self) {
    wxImageHandler *arg1 = (wxImageHandler *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(argv[0], (void **) &arg1, SWIGTYPE_p_wxImageHandler, 1);
    wxImage::AddHandler(arg1);
    
    return Qnil;
}


static VALUE
_wrap_wxImage_CleanUpHandlers(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    wxImage::CleanUpHandlers();
    
    return Qnil;
}


static VALUE
_wrap_wxImage_ComputeHistogram(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxImageHistogram *arg2 = 0 ;
    unsigned long result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxImageHistogram, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (unsigned long)((wxImage const *)arg1)->ComputeHistogram(*arg2);
    
    vresult = UINT2NUM(result);
    return vresult;
}


static VALUE
_wrap_wxImage_ConvertToMono(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    unsigned char arg2 ;
    unsigned char arg3 ;
    unsigned char arg4 ;
    wxImage result;
    VALUE vresult = Qnil;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    arg2 = (unsigned char) NUM2INT(argv[0]);
    arg3 = (unsigned char) NUM2INT(argv[1]);
    arg4 = (unsigned char) NUM2INT(argv[2]);
    result = ((wxImage const *)arg1)->ConvertToMono(arg2,arg3,arg4);
    
    {
        wxImage * resultptr;
        resultptr = new wxImage((wxImage &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxImage, 1);
    }
    return vresult;
}


static VALUE
_wrap_wxImage_Copy(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxImage result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    result = ((wxImage const *)arg1)->Copy();
    
    {
        wxImage * resultptr;
        resultptr = new wxImage((wxImage &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxImage, 1);
    }
    return vresult;
}


static VALUE
_wrap_wxImage_Create(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    int arg2 ;
    int arg3 ;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    (arg1)->Create(arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_wxImage_Destroy(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    (arg1)->Destroy();
    
    return Qnil;
}


static VALUE
_wrap_wxImage_FindFirstUnusedColour(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    unsigned char *arg2 = (unsigned char *) 0 ;
    unsigned char *arg3 = (unsigned char *) 0 ;
    unsigned char *arg4 = (unsigned char *) 0 ;
    unsigned char arg5 = (unsigned char) 1 ;
    unsigned char arg6 = (unsigned char) 0 ;
    unsigned char arg7 = (unsigned char) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 3) || (argc > 6))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_unsigned_char, 1);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_unsigned_char, 1);
    SWIG_ConvertPtr(argv[2], (void **) &arg4, SWIGTYPE_p_unsigned_char, 1);
    if (argc > 3) {
        arg5 = (unsigned char) NUM2INT(argv[3]);
    }
    if (argc > 4) {
        arg6 = (unsigned char) NUM2INT(argv[4]);
    }
    if (argc > 5) {
        arg7 = (unsigned char) NUM2INT(argv[5]);
    }
    result = (bool)(arg1)->FindFirstUnusedColour(arg2,arg3,arg4,arg5,arg6,arg7);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxImage_FindHandler__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxString *arg1 = 0 ;
    wxImageHandler *result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    {
        arg1 = new wxString((wxChar *)STR2CSTR(argv[0]));
    }
    result = (wxImageHandler *)wxImage::FindHandler((wxString const &)*arg1);
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxImageHandler,0);
    return vresult;
}


static VALUE
_wrap_wxImage_FindHandler__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxString *arg1 = 0 ;
    long arg2 ;
    wxImageHandler *result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    {
        arg1 = new wxString((wxChar *)STR2CSTR(argv[0]));
    }
    arg2 = NUM2LONG(argv[1]);
    result = (wxImageHandler *)wxImage::FindHandler((wxString const &)*arg1,arg2);
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxImageHandler,0);
    return vresult;
}


static VALUE
_wrap_wxImage_FindHandler__SWIG_2(int argc, VALUE *argv, VALUE self) {
    long arg1 ;
    wxImageHandler *result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = NUM2LONG(argv[0]);
    result = (wxImageHandler *)wxImage::FindHandler(arg1);
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxImageHandler,0);
    return vresult;
}


static VALUE _wrap_wxImage_FindHandler(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[2];
    int ii;
    
    argc = nargs;
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii];
    }
    if (argc == 1) {
        int _v;
        {
            _v = ((TYPE(argv[0]) == T_FIXNUM) || (TYPE(argv[0]) == T_BIGNUM)) ? 1 : 0;
        }
        if (_v) {
            return _wrap_wxImage_FindHandler__SWIG_2(nargs, args, self);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = (TYPE(argv[0]) == T_STRING);
        }
        if (_v) {
            return _wrap_wxImage_FindHandler__SWIG_0(nargs, args, self);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (TYPE(argv[0]) == T_STRING);
        }
        if (_v) {
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxImage_FindHandler__SWIG_1(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxImage_FindHandler'");
    return Qnil;
}


static VALUE
_wrap_wxImage_GetBlue(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    int arg2 ;
    int arg3 ;
    unsigned char result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    result = (unsigned char)((wxImage const *)arg1)->GetBlue(arg2,arg3);
    
    vresult = UINT2NUM(result);
    return vresult;
}


static VALUE
_wrap_wxImage_GetData(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    unsigned char *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    result = (unsigned char *)((wxImage const *)arg1)->GetData();
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_unsigned_char,0);
    return vresult;
}


static VALUE
_wrap_wxImage_GetGreen(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    int arg2 ;
    int arg3 ;
    unsigned char result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    result = (unsigned char)((wxImage const *)arg1)->GetGreen(arg2,arg3);
    
    vresult = UINT2NUM(result);
    return vresult;
}


static VALUE
_wrap_wxImage_GetImageCount__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxString *arg1 = 0 ;
    long arg2 = (long) wxBITMAP_TYPE_ANY ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    {
        arg1 = new wxString((wxChar *)STR2CSTR(argv[0]));
    }
    if (argc > 1) {
        arg2 = NUM2LONG(argv[1]);
    }
    result = (int)wxImage::GetImageCount((wxString const &)*arg1,arg2);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_wxImage_GetImageCount__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxInputStream *arg1 = 0 ;
    long arg2 = (long) wxBITMAP_TYPE_ANY ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(argv[0], (void **) &arg1, SWIGTYPE_p_wxInputStream, 1); if (arg1 == NULL) rb_raise(rb_eTypeError, "null reference");
    if (argc > 1) {
        arg2 = NUM2LONG(argv[1]);
    }
    result = (int)wxImage::GetImageCount(*arg1,arg2);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE _wrap_wxImage_GetImageCount(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[2];
    int ii;
    
    argc = nargs;
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii];
    }
    if ((argc >= 1) && (argc <= 2)) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxInputStream, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            if (argc <= 1) {
                return _wrap_wxImage_GetImageCount__SWIG_1(nargs, args, self);
            }
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxImage_GetImageCount__SWIG_1(nargs, args, self);
            }
        }
    }
    if ((argc >= 1) && (argc <= 2)) {
        int _v;
        {
            _v = (TYPE(argv[0]) == T_STRING);
        }
        if (_v) {
            if (argc <= 1) {
                return _wrap_wxImage_GetImageCount__SWIG_0(nargs, args, self);
            }
            {
                _v = ((TYPE(argv[1]) == T_FIXNUM) || (TYPE(argv[1]) == T_BIGNUM)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_wxImage_GetImageCount__SWIG_0(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxImage_GetImageCount'");
    return Qnil;
}


static VALUE
_wrap_wxImage_GetHandlers(int argc, VALUE *argv, VALUE self) {
    wxList *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    {
        wxList &_result_ref = wxImage::GetHandlers();
        result = (wxList *) &_result_ref;
    }
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxList,0);
    return vresult;
}


static VALUE
_wrap_wxImage_GetHeight(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    result = (int)((wxImage const *)arg1)->GetHeight();
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_wxImage_GetMaskBlue(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    unsigned char result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    result = (unsigned char)((wxImage const *)arg1)->GetMaskBlue();
    
    vresult = UINT2NUM(result);
    return vresult;
}


static VALUE
_wrap_wxImage_GetMaskGreen(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    unsigned char result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    result = (unsigned char)((wxImage const *)arg1)->GetMaskGreen();
    
    vresult = UINT2NUM(result);
    return vresult;
}


static VALUE
_wrap_wxImage_GetMaskRed(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    unsigned char result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    result = (unsigned char)((wxImage const *)arg1)->GetMaskRed();
    
    vresult = UINT2NUM(result);
    return vresult;
}


static VALUE
_wrap_wxImage_GetPalette(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxPalette *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    {
        wxPalette const &_result_ref = ((wxImage const *)arg1)->GetPalette();
        result = (wxPalette *) &_result_ref;
    }
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxPalette,0);
    return vresult;
}


static VALUE
_wrap_wxImage_GetRed(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    int arg2 ;
    int arg3 ;
    unsigned char result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    result = (unsigned char)((wxImage const *)arg1)->GetRed(arg2,arg3);
    
    vresult = UINT2NUM(result);
    return vresult;
}


static VALUE
_wrap_wxImage_GetSubImage(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxRect *arg2 = 0 ;
    wxImage result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxRect, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = ((wxImage const *)arg1)->GetSubImage((wxRect const &)*arg2);
    
    {
        wxImage * resultptr;
        resultptr = new wxImage((wxImage &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxImage, 1);
    }
    return vresult;
}


static VALUE
_wrap_wxImage_GetWidth(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    result = (int)((wxImage const *)arg1)->GetWidth();
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_wxImage_HasMask(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    result = (bool)((wxImage const *)arg1)->HasMask();
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxImage_GetOption(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxString *arg2 = 0 ;
    wxString result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    {
        arg2 = new wxString((wxChar *)STR2CSTR(argv[0]));
    }
    result = ((wxImage const *)arg1)->GetOption((wxString const &)*arg2);
    
    {
        vresult = rb_str_new2((const char *)(&result)->c_str());
    }
    return vresult;
}


static VALUE
_wrap_wxImage_GetOptionInt(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxString *arg2 = 0 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    {
        arg2 = new wxString((wxChar *)STR2CSTR(argv[0]));
    }
    result = (int)((wxImage const *)arg1)->GetOptionInt((wxString const &)*arg2);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_wxImage_HasOption(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    {
        arg2 = new wxString((wxChar *)STR2CSTR(argv[0]));
    }
    result = (bool)((wxImage const *)arg1)->HasOption((wxString const &)*arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxImage_InitStandardHandlers(int argc, VALUE *argv, VALUE self) {
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    wxImage::InitStandardHandlers();
    
    return Qnil;
}


static VALUE
_wrap_wxImage_InsertHandler(int argc, VALUE *argv, VALUE self) {
    wxImageHandler *arg1 = (wxImageHandler *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(argv[0], (void **) &arg1, SWIGTYPE_p_wxImageHandler, 1);
    wxImage::InsertHandler(arg1);
    
    return Qnil;
}


static VALUE
_wrap_wxImage_LoadFile__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxString *arg2 = 0 ;
    long arg3 = (long) wxBITMAP_TYPE_ANY ;
    int arg4 = (int) -1 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    {
        arg2 = new wxString((wxChar *)STR2CSTR(argv[0]));
    }
    if (argc > 1) {
        arg3 = NUM2LONG(argv[1]);
    }
    if (argc > 2) {
        arg4 = NUM2INT(argv[2]);
    }
    result = (bool)(arg1)->LoadFile((wxString const &)*arg2,arg3,arg4);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxImage_LoadFile__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxString *arg2 = 0 ;
    wxString *arg3 = 0 ;
    int arg4 = (int) -1 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    {
        arg2 = new wxString((wxChar *)STR2CSTR(argv[0]));
    }
    {
        arg3 = new wxString((wxChar *)STR2CSTR(argv[1]));
    }
    if (argc > 2) {
        arg4 = NUM2INT(argv[2]);
    }
    result = (bool)(arg1)->LoadFile((wxString const &)*arg2,(wxString const &)*arg3,arg4);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxImage_LoadFile__SWIG_2(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxInputStream *arg2 = 0 ;
    long arg3 ;
    int arg4 = (int) -1 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxInputStream, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    arg3 = NUM2LONG(argv[1]);
    if (argc > 2) {
        arg4 = NUM2INT(argv[2]);
    }
    result = (bool)(arg1)->LoadFile(*arg2,arg3,arg4);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxImage_LoadFile__SWIG_3(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxInputStream *arg2 = 0 ;
    wxString *arg3 = 0 ;
    int arg4 = (int) -1 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxInputStream, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    {
        arg3 = new wxString((wxChar *)STR2CSTR(argv[1]));
    }
    if (argc > 2) {
        arg4 = NUM2INT(argv[2]);
    }
    result = (bool)(arg1)->LoadFile(*arg2,(wxString const &)*arg3,arg4);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE _wrap_wxImage_LoadFile(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[5];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = args[ii-1];
    }
    if ((argc >= 2) && (argc <= 4)) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxImage, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (TYPE(argv[1]) == T_STRING);
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_wxImage_LoadFile__SWIG_0(nargs, args, self);
                }
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_wxImage_LoadFile__SWIG_0(nargs, args, self);
                    }
                    {
                        _v = ((TYPE(argv[3]) == T_FIXNUM) || (TYPE(argv[3]) == T_BIGNUM)) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_wxImage_LoadFile__SWIG_0(nargs, args, self);
                    }
                }
            }
        }
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxImage, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxInputStream, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_wxImage_LoadFile__SWIG_2(nargs, args, self);
                    }
                    {
                        _v = ((TYPE(argv[3]) == T_FIXNUM) || (TYPE(argv[3]) == T_BIGNUM)) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_wxImage_LoadFile__SWIG_2(nargs, args, self);
                    }
                }
            }
        }
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxImage, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxInputStream, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (TYPE(argv[2]) == T_STRING);
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_wxImage_LoadFile__SWIG_3(nargs, args, self);
                    }
                    {
                        _v = ((TYPE(argv[3]) == T_FIXNUM) || (TYPE(argv[3]) == T_BIGNUM)) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_wxImage_LoadFile__SWIG_3(nargs, args, self);
                    }
                }
            }
        }
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxImage, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (TYPE(argv[1]) == T_STRING);
            }
            if (_v) {
                {
                    _v = (TYPE(argv[2]) == T_STRING);
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_wxImage_LoadFile__SWIG_1(nargs, args, self);
                    }
                    {
                        _v = ((TYPE(argv[3]) == T_FIXNUM) || (TYPE(argv[3]) == T_BIGNUM)) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_wxImage_LoadFile__SWIG_1(nargs, args, self);
                    }
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxImage_LoadFile'");
    return Qnil;
}


static VALUE
_wrap_wxImage_Ok(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    result = (bool)((wxImage const *)arg1)->Ok();
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxImage_RemoveHandler(int argc, VALUE *argv, VALUE self) {
    wxString *arg1 = 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    {
        arg1 = new wxString((wxChar *)STR2CSTR(argv[0]));
    }
    result = (bool)wxImage::RemoveHandler((wxString const &)*arg1);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxImage_SaveFile__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxString *arg2 = 0 ;
    int arg3 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    {
        arg2 = new wxString((wxChar *)STR2CSTR(argv[0]));
    }
    arg3 = NUM2INT(argv[1]);
    result = (bool)((wxImage const *)arg1)->SaveFile((wxString const &)*arg2,arg3);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxImage_SaveFile__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxString *arg2 = 0 ;
    wxString *arg3 = 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    {
        arg2 = new wxString((wxChar *)STR2CSTR(argv[0]));
    }
    {
        arg3 = new wxString((wxChar *)STR2CSTR(argv[1]));
    }
    result = (bool)((wxImage const *)arg1)->SaveFile((wxString const &)*arg2,(wxString const &)*arg3);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxImage_SaveFile__SWIG_2(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxString *arg2 = 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    {
        arg2 = new wxString((wxChar *)STR2CSTR(argv[0]));
    }
    result = (bool)((wxImage const *)arg1)->SaveFile((wxString const &)*arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxImage_SaveFile__SWIG_3(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxOutputStream *arg2 = 0 ;
    int arg3 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxOutputStream, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    arg3 = NUM2INT(argv[1]);
    result = (bool)((wxImage const *)arg1)->SaveFile(*arg2,arg3);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxImage_SaveFile__SWIG_4(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxOutputStream *arg2 = 0 ;
    wxString *arg3 = 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxOutputStream, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    {
        arg3 = new wxString((wxChar *)STR2CSTR(argv[1]));
    }
    result = (bool)((wxImage const *)arg1)->SaveFile(*arg2,(wxString const &)*arg3);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE _wrap_wxImage_SaveFile(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[4];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxImage, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (TYPE(argv[1]) == T_STRING);
            }
            if (_v) {
                return _wrap_wxImage_SaveFile__SWIG_2(nargs, args, self);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxImage, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxOutputStream, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxImage_SaveFile__SWIG_3(nargs, args, self);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxImage, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_wxOutputStream, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (TYPE(argv[2]) == T_STRING);
                }
                if (_v) {
                    return _wrap_wxImage_SaveFile__SWIG_4(nargs, args, self);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxImage, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (TYPE(argv[1]) == T_STRING);
            }
            if (_v) {
                {
                    _v = (TYPE(argv[2]) == T_STRING);
                }
                if (_v) {
                    return _wrap_wxImage_SaveFile__SWIG_1(nargs, args, self);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxImage, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (TYPE(argv[1]) == T_STRING);
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxImage_SaveFile__SWIG_0(nargs, args, self);
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxImage_SaveFile'");
    return Qnil;
}


static VALUE
_wrap_wxImage_Mirror(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    bool arg2 = (bool) true ;
    wxImage result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    if (argc > 0) {
        arg2 = RTEST(argv[0]);
    }
    result = ((wxImage const *)arg1)->Mirror(arg2);
    
    {
        wxImage * resultptr;
        resultptr = new wxImage((wxImage &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxImage, 1);
    }
    return vresult;
}


static VALUE
_wrap_wxImage_Replace(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    unsigned char arg2 ;
    unsigned char arg3 ;
    unsigned char arg4 ;
    unsigned char arg5 ;
    unsigned char arg6 ;
    unsigned char arg7 ;
    
    if ((argc < 6) || (argc > 6))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    arg2 = (unsigned char) NUM2INT(argv[0]);
    arg3 = (unsigned char) NUM2INT(argv[1]);
    arg4 = (unsigned char) NUM2INT(argv[2]);
    arg5 = (unsigned char) NUM2INT(argv[3]);
    arg6 = (unsigned char) NUM2INT(argv[4]);
    arg7 = (unsigned char) NUM2INT(argv[5]);
    (arg1)->Replace(arg2,arg3,arg4,arg5,arg6,arg7);
    
    return Qnil;
}


static VALUE
_wrap_wxImage_Rescale(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    int arg2 ;
    int arg3 ;
    wxImage *result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    {
        wxImage &_result_ref = (arg1)->Rescale(arg2,arg3);
        result = (wxImage *) &_result_ref;
    }
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_wxImage,0);
    return vresult;
}


static VALUE
_wrap_wxImage_Rotate(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    double arg2 ;
    wxPoint *arg3 = 0 ;
    bool arg4 = (bool) true ;
    wxPoint *arg5 = (wxPoint *) NULL ;
    wxImage result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 4))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    arg2 = (double) NUM2DBL(argv[0]);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_wxPoint, 1); if (arg3 == NULL) rb_raise(rb_eTypeError, "null reference");
    if (argc > 2) {
        arg4 = RTEST(argv[2]);
    }
    if (argc > 3) {
        SWIG_ConvertPtr(argv[3], (void **) &arg5, SWIGTYPE_p_wxPoint, 1);
    }
    result = (arg1)->Rotate(arg2,(wxPoint const &)*arg3,arg4,arg5);
    
    {
        wxImage * resultptr;
        resultptr = new wxImage((wxImage &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxImage, 1);
    }
    return vresult;
}


static VALUE
_wrap_wxImage_Rotate90(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    bool arg2 = (bool) true ;
    wxImage result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    if (argc > 0) {
        arg2 = RTEST(argv[0]);
    }
    result = ((wxImage const *)arg1)->Rotate90(arg2);
    
    {
        wxImage * resultptr;
        resultptr = new wxImage((wxImage &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxImage, 1);
    }
    return vresult;
}


static VALUE
_wrap_wxImage_Scale(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    int arg2 ;
    int arg3 ;
    wxImage result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    result = ((wxImage const *)arg1)->Scale(arg2,arg3);
    
    {
        wxImage * resultptr;
        resultptr = new wxImage((wxImage &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxImage, 1);
    }
    return vresult;
}


static VALUE
_wrap_wxImage_SetData(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    unsigned char *arg2 = (unsigned char *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_unsigned_char, 1);
    (arg1)->SetData(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxImage_SetMask(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    bool arg2 = (bool) true ;
    
    if ((argc < 0) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    if (argc > 0) {
        arg2 = RTEST(argv[0]);
    }
    (arg1)->SetMask(arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxImage_SetMaskColour(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    unsigned char arg2 ;
    unsigned char arg3 ;
    unsigned char arg4 ;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    arg2 = (unsigned char) NUM2INT(argv[0]);
    arg3 = (unsigned char) NUM2INT(argv[1]);
    arg4 = (unsigned char) NUM2INT(argv[2]);
    (arg1)->SetMaskColour(arg2,arg3,arg4);
    
    return Qnil;
}


static VALUE
_wrap_wxImage_SetMaskFromImage(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxImage *arg2 = 0 ;
    unsigned char arg3 ;
    unsigned char arg4 ;
    unsigned char arg5 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 4) || (argc > 4))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxImage, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    arg3 = (unsigned char) NUM2INT(argv[1]);
    arg4 = (unsigned char) NUM2INT(argv[2]);
    arg5 = (unsigned char) NUM2INT(argv[3]);
    result = (bool)(arg1)->SetMaskFromImage((wxImage const &)*arg2,arg3,arg4,arg5);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_wxImage_SetOption__SWIG_0(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxString *arg2 = 0 ;
    wxString *arg3 = 0 ;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    {
        arg2 = new wxString((wxChar *)STR2CSTR(argv[0]));
    }
    {
        arg3 = new wxString((wxChar *)STR2CSTR(argv[1]));
    }
    (arg1)->SetOption((wxString const &)*arg2,(wxString const &)*arg3);
    
    return Qnil;
}


static VALUE
_wrap_wxImage_SetOption__SWIG_1(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxString *arg2 = 0 ;
    int arg3 ;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    {
        arg2 = new wxString((wxChar *)STR2CSTR(argv[0]));
    }
    arg3 = NUM2INT(argv[1]);
    (arg1)->SetOption((wxString const &)*arg2,arg3);
    
    return Qnil;
}


static VALUE _wrap_wxImage_SetOption(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[4];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxImage, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (TYPE(argv[1]) == T_STRING);
            }
            if (_v) {
                {
                    _v = (TYPE(argv[2]) == T_STRING);
                }
                if (_v) {
                    return _wrap_wxImage_SetOption__SWIG_0(nargs, args, self);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_wxImage, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (TYPE(argv[1]) == T_STRING);
            }
            if (_v) {
                {
                    _v = ((TYPE(argv[2]) == T_FIXNUM) || (TYPE(argv[2]) == T_BIGNUM)) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_wxImage_SetOption__SWIG_1(nargs, args, self);
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'wxImage_SetOption'");
    return Qnil;
}


static VALUE
_wrap_wxImage_SetPalette(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    wxPalette *arg2 = 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_wxPalette, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    (arg1)->SetPalette((wxPalette const &)*arg2);
    
    return Qnil;
}


static VALUE
_wrap_wxImage_SetRGB(int argc, VALUE *argv, VALUE self) {
    wxImage *arg1 = (wxImage *) 0 ;
    int arg2 ;
    int arg3 ;
    unsigned char arg4 ;
    unsigned char arg5 ;
    unsigned char arg6 ;
    
    if ((argc < 5) || (argc > 5))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_wxImage, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    arg4 = (unsigned char) NUM2INT(argv[2]);
    arg5 = (unsigned char) NUM2INT(argv[3]);
    arg6 = (unsigned char) NUM2INT(argv[4]);
    (arg1)->SetRGB(arg2,arg3,arg4,arg5,arg6);
    
    return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_unsigned_char[] = {{"_p_unsigned_char", 0, "unsigned char *", 0, 0, 0, 0},{"_p_unsigned_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxImage[] = {{"_p_wxImage", 0, "wxImage *", 0, 0, 0, 0},{"_p_wxImage", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxList[] = {{"_p_wxList", 0, "wxList *", 0, 0, 0, 0},{"_p_wxList", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxImageHandler[] = {{"_p_wxImageHandler", 0, "wxImageHandler *", 0, 0, 0, 0},{"_p_wxImageHandler", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxImageHistogram[] = {{"_p_wxImageHistogram", 0, "wxImageHistogram *", 0, 0, 0, 0},{"_p_wxImageHistogram", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxPalette[] = {{"_p_wxPalette", 0, "wxPalette *", 0, 0, 0, 0},{"_p_wxPalette", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxInputStream[] = {{"_p_wxInputStream", 0, "wxInputStream *", 0, 0, 0, 0},{"_p_wxInputStream", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxRect[] = {{"_p_wxRect", 0, "wxRect *", 0, 0, 0, 0},{"_p_wxRect", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxOutputStream[] = {{"_p_wxOutputStream", 0, "wxOutputStream *", 0, 0, 0, 0},{"_p_wxOutputStream", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wxPoint[] = {{"_p_wxPoint", 0, "wxPoint *", 0, 0, 0, 0},{"_p_wxPoint", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_unsigned_char, 
_swigt__p_wxImage, 
_swigt__p_wxList, 
_swigt__p_wxImageHandler, 
_swigt__p_wxImageHistogram, 
_swigt__p_wxPalette, 
_swigt__p_wxInputStream, 
_swigt__p_wxRect, 
_swigt__p_wxOutputStream, 
_swigt__p_wxPoint, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) Init_wxImage(void) {
static bool initialized;
if(initialized) return;
initialized = true;
    int i;
    
    SWIG_InitRuntime();
mWxImage = mWx;
    
    for (i = 0; swig_types_initial[i]; i++) {
        swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        SWIG_define_class(swig_types[i]);
    }
    
    
    extern void Init_wxObject();
    Init_wxObject();
    //extern swig_class cWxObject;
    cWxImage.klass = rb_define_class_under(mWxImage, "Image", cWxObject.klass);
    SWIG_TypeClientData(SWIGTYPE_p_wxImage, (void *) &cWxImage);
    rb_define_alloc_func(cWxImage.klass, _wrap_wxImage_allocate);
    rb_define_method(cWxImage.klass, "initialize", VALUEFUNC(_wrap_new_wxImage), -1);
    rb_define_singleton_method(cWxImage.klass, "add_handler", VALUEFUNC(_wrap_wxImage_AddHandler), -1);
    rb_define_singleton_method(cWxImage.klass, "clean_up_handlers", VALUEFUNC(_wrap_wxImage_CleanUpHandlers), -1);
    rb_define_method(cWxImage.klass, "compute_histogram", VALUEFUNC(_wrap_wxImage_ComputeHistogram), -1);
    rb_define_method(cWxImage.klass, "convert_to_mono", VALUEFUNC(_wrap_wxImage_ConvertToMono), -1);
    rb_define_method(cWxImage.klass, "copy", VALUEFUNC(_wrap_wxImage_Copy), -1);
    rb_define_method(cWxImage.klass, "create", VALUEFUNC(_wrap_wxImage_Create), -1);
    rb_define_method(cWxImage.klass, "destroy", VALUEFUNC(_wrap_wxImage_Destroy), -1);
    rb_define_method(cWxImage.klass, "find_first_unused_colour", VALUEFUNC(_wrap_wxImage_FindFirstUnusedColour), -1);
    rb_define_singleton_method(cWxImage.klass, "find_handler", VALUEFUNC(_wrap_wxImage_FindHandler), -1);
    rb_define_method(cWxImage.klass, "get_blue", VALUEFUNC(_wrap_wxImage_GetBlue), -1);
    rb_define_method(cWxImage.klass, "get_data", VALUEFUNC(_wrap_wxImage_GetData), -1);
    rb_define_method(cWxImage.klass, "get_green", VALUEFUNC(_wrap_wxImage_GetGreen), -1);
    rb_define_singleton_method(cWxImage.klass, "get_image_count", VALUEFUNC(_wrap_wxImage_GetImageCount), -1);
    rb_define_singleton_method(cWxImage.klass, "get_handlers", VALUEFUNC(_wrap_wxImage_GetHandlers), -1);
    rb_define_method(cWxImage.klass, "get_height", VALUEFUNC(_wrap_wxImage_GetHeight), -1);
    rb_define_method(cWxImage.klass, "get_mask_blue", VALUEFUNC(_wrap_wxImage_GetMaskBlue), -1);
    rb_define_method(cWxImage.klass, "get_mask_green", VALUEFUNC(_wrap_wxImage_GetMaskGreen), -1);
    rb_define_method(cWxImage.klass, "get_mask_red", VALUEFUNC(_wrap_wxImage_GetMaskRed), -1);
    rb_define_method(cWxImage.klass, "get_palette", VALUEFUNC(_wrap_wxImage_GetPalette), -1);
    rb_define_method(cWxImage.klass, "get_red", VALUEFUNC(_wrap_wxImage_GetRed), -1);
    rb_define_method(cWxImage.klass, "get_sub_image", VALUEFUNC(_wrap_wxImage_GetSubImage), -1);
    rb_define_method(cWxImage.klass, "get_width", VALUEFUNC(_wrap_wxImage_GetWidth), -1);
    rb_define_method(cWxImage.klass, "has_mask", VALUEFUNC(_wrap_wxImage_HasMask), -1);
    rb_define_method(cWxImage.klass, "get_option", VALUEFUNC(_wrap_wxImage_GetOption), -1);
    rb_define_method(cWxImage.klass, "get_option_int", VALUEFUNC(_wrap_wxImage_GetOptionInt), -1);
    rb_define_method(cWxImage.klass, "has_option", VALUEFUNC(_wrap_wxImage_HasOption), -1);
    rb_define_singleton_method(cWxImage.klass, "init_standard_handlers", VALUEFUNC(_wrap_wxImage_InitStandardHandlers), -1);
    rb_define_singleton_method(cWxImage.klass, "insert_handler", VALUEFUNC(_wrap_wxImage_InsertHandler), -1);
    rb_define_method(cWxImage.klass, "load_file", VALUEFUNC(_wrap_wxImage_LoadFile), -1);
    rb_define_method(cWxImage.klass, "ok", VALUEFUNC(_wrap_wxImage_Ok), -1);
    rb_define_singleton_method(cWxImage.klass, "remove_handler", VALUEFUNC(_wrap_wxImage_RemoveHandler), -1);
    rb_define_method(cWxImage.klass, "save_file", VALUEFUNC(_wrap_wxImage_SaveFile), -1);
    rb_define_method(cWxImage.klass, "mirror", VALUEFUNC(_wrap_wxImage_Mirror), -1);
    rb_define_method(cWxImage.klass, "replace", VALUEFUNC(_wrap_wxImage_Replace), -1);
    rb_define_method(cWxImage.klass, "rescale", VALUEFUNC(_wrap_wxImage_Rescale), -1);
    rb_define_method(cWxImage.klass, "rotate", VALUEFUNC(_wrap_wxImage_Rotate), -1);
    rb_define_method(cWxImage.klass, "rotate90", VALUEFUNC(_wrap_wxImage_Rotate90), -1);
    rb_define_method(cWxImage.klass, "scale", VALUEFUNC(_wrap_wxImage_Scale), -1);
    rb_define_method(cWxImage.klass, "set_data", VALUEFUNC(_wrap_wxImage_SetData), -1);
    rb_define_method(cWxImage.klass, "set_mask", VALUEFUNC(_wrap_wxImage_SetMask), -1);
    rb_define_method(cWxImage.klass, "set_mask_colour", VALUEFUNC(_wrap_wxImage_SetMaskColour), -1);
    rb_define_method(cWxImage.klass, "set_mask_from_image", VALUEFUNC(_wrap_wxImage_SetMaskFromImage), -1);
    rb_define_method(cWxImage.klass, "set_option", VALUEFUNC(_wrap_wxImage_SetOption), -1);
    rb_define_method(cWxImage.klass, "set_palette", VALUEFUNC(_wrap_wxImage_SetPalette), -1);
    rb_define_method(cWxImage.klass, "set_rgb", VALUEFUNC(_wrap_wxImage_SetRGB), -1);
    cWxImage.mark = 0;
    cWxImage.destroy = (void (*)(void *)) free_wxImage;
}

