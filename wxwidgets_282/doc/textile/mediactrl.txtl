h1(#wxmediactrl). Wx::MediaCtrl

MediaCtrl is a class that allows a way to convieniently display types of 
media, such as videos, audio files, natively through native codecs.

MediaCtrl uses native backends to render media, for example on Windows
there is a ActiveMovie/DirectShow backend, and on Macintosh there is a 
QuickTime backend.

h2. Derived from

"Control":control.html

<div id="methods">

h2. Methods

* "Rendering media":#MediaCtrl_media
* "Operation":#MediaCtrl_Operation
* "Choosing a backend":#MediaCtrl_backend
* "MediaCtrl.new":#MediaCtrl_new
* "MediaCtrl#create":#MediaCtrl_create
* "MediaCtrl#length":#MediaCtrl_length
* "MediaCtrl#tell":#MediaCtrl_tell
* "MediaCtrl#get_state":#MediaCtrl_getstate
* "MediaCtrl#load":#MediaCtrl_load
* "MediaCtrl#load":#MediaCtrl_load
* "MediaCtrl#pause":#MediaCtrl_pause
* "MediaCtrl#play":#MediaCtrl_play
* "MediaCtrl#seek":#MediaCtrl_seek
* "MediaCtrl#stop":#MediaCtrl_stop
* "MediaCtrl#set_volume":#MediaCtrl_setvolume
* "MediaCtrl#get_volume":#MediaCtrl_getvolume
* "MediaCtrl#get_playback_rate":#MediaCtrl_getplaybackrate
* "MediaCtrl#set_playback_rate":#MediaCtrl_setplaybackrate
* "MediaCtrl#show_player_controls":#MediaCtrl_showplayercontrols

</div>


h3(#renderingmediawxmediactrl). Rendering media

Depending upon the backend, MediaCtrl can render
and display pretty much any kind of media that the native system can - 
such as an image, mpeg video, or mp3 (without license restrictions -
since it relies on native system calls that may not technically
have mp3 decoding available, for example, it falls outside the
realm of licensing restrictions).

For general operation, all you need to do is call 
"MediaCtrl#load":mediactrl.html#MediaCtrl_load to load the file
you want to render, catch the EVT_MEDIA_LOADED event,
and then call "MediaCtrl#play":mediactrl.html#MediaCtrl_play 
to show the video/audio of the media in that event.

More complex operations are generally more heavily dependant on the
capabilities of the backend.  For example, QuickTime cannot set
the playback rate of certain streaming media - while DirectShow is 
slightly more flexible in that regard.

h3(#operationwxmediactrl). Operation

When MediaCtrl plays a file, it plays until the stop position
is reached (currently the end of the file/stream).  Right before
it hits the end of the stream, it fires off a EVT_MEDIA_STOP
event to its parent window, at which point the event handler
can choose to veto the event, preventing the stream from actually
stopping.

Example:

 //connect to the media event
 this->Connect(MY_ID, EVT_MEDIA_STOP, (ObjectEventFunction)
 (EventFunction)(MediaEventFunction) &MyFrame::OnMediaStop);
 
 //...
 void MyFrame::OnMediaStop(const MediaEvent& evt)
 {
     if(bUserWantsToSeek)
     {
         m_mediactrl->SetPosition(
             m_mediactrl->GetDuration() << 1
                                 );
         evt.Veto();
     }
 }
 

When MediaCtrl stops, either by the EVT_MEDIA_STOP not being
vetoed, or by manually calling 
"MediaCtrl#stop":mediactrl.html#MediaCtrl_stop, where it actually
stops is not at the beginning, rather, but at the beginning of
the stream.  That is, when it stops and play is called, playback
is gauranteed to start at the beginning of the media.  This is 
because some streams are not seekable, and when stop is called
on them they return to the beginning, thus MediaCtrl tries
to keep consistant for all types of media.

h3(#choosingbackendwxmediactrl). Choosing a backend

Generally, you should almost certainly leave this part up to
MediaCtrl - but if you need a certain backend for a particular
reason, such as QuickTime for playing .mov files, all you need 
to do to choose a specific backend is to pass the
name of the backend class to 
"MediaCtrl#create":mediactrl.html#MediaCtrl_create.

The following are valid backend identifiers -


|*MEDIABACKEND_DIRECTSHOW*| Use ActiveMovie/DirectShow.  Requires USE_DIRECTSHOW to be enabled, requires linkage with the static library strmiids.lib,and is available on Windows Only.|
|*MEDIABACKEND_QUICKTIME*|Use QuickTime.  Windows and Mac Only. NOTE: On Mac Systems lower than OSX 10.2 this defaults to emulating window positioning and suffers from several bugs, including not working correctly embedded in a Notebook. |
|*MEDIABACKEND_MCI*|Use Media Command Interface.  Windows Only. |
|*MEDIABACKEND_GSTREAMER*|Use GStreamer.  Unix Only. |


h3(#MediaCtrl_wxmediactrl). MediaCtrl.new

h3(#MediaCtrl_create). MediaCtrl#create

 Boolean *create*(        %(arg-type)Window% parent,          %(arg-type)String% fileName = T(""), 
                       %(arg-type)Integer% id, 
                        %(arg-type)Point% pos = DEFAULT_POSITION, 
                        %(arg-type)Size% size = DEFAULT_SIZE, 
                        %(arg-type)Integer% style = 0, 
                        %(arg-type)String% szBackend = T(""), 
                       %(arg-type)Validator% validator = DEFAULT_VALIDATOR, 
                       %(arg-type)String% name = PanelNameStr                   )

Creates this control.  Returns @false@ if it can't load the movie located at @fileName@ or it cannot load one of its native backends.

If you specify a file to open via @fileName@ and you don't specify a backend to use, MediaCtrl tries each of its backends until one that can render the path referred to by @fileName@ can be found.

* _parent_ parent of this control.  Must not be NULL.
* _id_ id to use for events
* _fileName_ If not empty, the path of a file to open.
* _pos_ Position to put control at.
* _size_ Size to put the control at and to stretch movie to.
* _style_ Optional styles.
* _szBackend_ Name of backend you want to use, leave blank to make
MediaCtrl figure it out.
* _validator_ validator to use.
* _name_ Window name.


h3(#MediaCtrl_getduration). MediaCtrl#length

 "FileOffset":fileoffset.html *get_duration*()

Obtains the length - the total amount of time the movie has in milliseconds.


h3(#MediaCtrl_getposition). MediaCtrl#tell

 "FileOffset":fileoffset.html *get_position*()

Obtains the current position in time within the movie in milliseconds.


h3(#MediaCtrl_getstate). MediaCtrl#get_state

 "MediaCtrlState":mediactrlstate.html *get_state*()

Obtains the state the playback of the movie is in - 



|*MEDIASTATE_STOPPED*|The movie has stopped.|
|*MEDIASTATE_PAUSED*|The movie is paused.|
|*MEDIASTATE_PLAYING*|The movie is currently playing.|



h3(#MediaCtrl_load). MediaCtrl#load

 Boolean *load*(%(arg-type)String% fileName)

Loads the file that @fileName@ refers to.  Returns false if loading fails.


h3(#MediaCtrl_loaduri). MediaCtrl#load

 Boolean *load*(%(arg-type)URI% location)

Loads the url that @location@ refers to.  Returns false if loading fails.  

h3(#MediaCtrl_pause). MediaCtrl#pause

 Boolean *pause*()

Pauses playback of the movie.


h3(#MediaCtrl_play). MediaCtrl#play

 Boolean *play*()

Resumes playback of the movie.


h3(#MediaCtrl_setposition). MediaCtrl#seek

 "FileOffset":fileoffset.html *seek*(%(arg-type)FileOffset% where,  %(arg-type)SeekMode% mode)

Seeks to a position within the movie.


h3(#MediaCtrl_stop). MediaCtrl#stop

 Boolean *stop*()

Stops the media.

See "Operation":operationwxmediactrl.html for an overview of how stopping works.


h3(#MediaCtrl_setvolume). MediaCtrl#set_volume

 Boolean *set_volume*(%(arg-type)double% dVolume)

Sets the volume of the media from a 0.0 to 1.0 range.


h3(#MediaCtrl_getvolume). MediaCtrl#get_volume

 double *get_volume*()

Gets the volume of the media from a 0.0 to 1.0 range.


h3(#MediaCtrl_getplaybackrate). MediaCtrl#get_playback_rate

 double *get_playbackrate*()

Gets the playback rate of the media; for example 2.0 is double speed.
Not implemented on MCI or GStreamer.


h3(#MediaCtrl_setplaybackrate). MediaCtrl#set_playback_rate

 Boolean *set_playbackrate*(%(arg-type)double% dVolume)

Sets the rate that the media plays; for example 0.5 is half speed.


h3(#MediaCtrl_showplayercontrols). MediaCtrl#show_player_controls

 Boolean *show_player_controls*(%(arg-type)MediaCtrlPlayerControls% flags)

Normally, when you use MediaCtrl it is just a window for the video to 
play in.  However, platforms generally have their own media player interface,
like quicktime has a bar below the video with a slider etc..  If you want that native 
interface instead of making your own use this function.  There are several options
for the flags parameter, however you can look at the mediactrl header for these. 
The two general flags are MEDIACTRLPLAYERCONTROLS_NONE which turns off the 
native interface, and MEDIACTRLPLAYERCONTROLS_DEFAULT which lets MediaCtrl
decide what native controls on the interface.

