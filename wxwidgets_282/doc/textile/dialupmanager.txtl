h1(#wxdialupmanager). Wx::DialUpManager

This class encapsulates functions dealing with verifying the connection status
of the workstation (connected to the Internet via a direct connection,
connected through a modem or not connected at all) and to establish this
connection if possible/required (i.e. in the case of the modem).

The program may also wish to be notified about the change in the connection
status (for example, to perform some action when the user connects to the
network the next time or, on the contrary, to stop receiving data from the net
when the user hangs up the modem). For this, you need to use one of the event
macros described below.

This class is different from other Widgets classes in that there is at most
one instance of this class in the program accessed via 
"DialUpManager::Create()":dialupmanagercreate.html and you can't
create the objects of this class directly.

h2. Derived from

No base class

h2. Event table macros

To be notified about the change in the network connection status, use these
event handler macros to direct input to member functions that take a 
"DialUpEvent":dialupevent.html argument.



|*evt_dialup_connected()&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|A connection with the network was established.|
|*evt_dialup_disconnected()&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|The connection with the network was lost.|

h2. See also

"dialup sample":sampledialup.html

"DialUpEvent":dialupevent.html

<div id="methods">

h2. Methods

* "DialUpManager#create":#DialUpManager_create
* "DialUpManager#is_ok":#DialUpManager_isok
* "DialUpManager#get_isp_names":#DialUpManager_getispnames
* "DialUpManager#dial":#DialUpManager_dial
* "DialUpManager#is_dialing":#DialUpManager_isdialing
* "DialUpManager#cancel_dialing":#DialUpManager_canceldialing
* "DialUpManager#hang_up":#DialUpManager_hangup
* "DialUpManager#is_always_online":#DialUpManager_isalwaysonline
* "DialUpManager#is_online":#DialUpManager_isonline
* "DialUpManager#set_online_status":#DialUpManager_setonlinestatus
* "DialUpManager#enable_auto_check_online_status":#DialUpManager_enableautocheckonlinestatus
* "DialUpManager#disable_auto_check_online_status":#DialUpManager_disableautocheckonlinestatus
* "DialUpManager#set_well_known_host":#DialUpManager_setwellknownhost
* "DialUpManager#set_connect_command":#DialUpManager_setconnectcommand

</div>


h3(#DialUpManager_create). DialUpManager#create

 "DialUpManager":dialupmanager.html *create*()

This function should create and return the object of the platform-specific
class derived from DialUpManager. You should delete the pointer when you are
done with it.

h3(#DialUpManager_isok). DialUpManager#is_ok

 Boolean *is_ok*()

Returns @true@ if the dialup manager was initialized correctly. If this
function returns @false@, no other functions will work neither, so it is a
good idea to call this function and check its result before calling any other
DialUpManager methods

  *destructor*()

Destructor.

h3(#DialUpManager_getispnames). DialUpManager#get_isp_names

 size_t *get_isp_names*(%(arg-type)ArrayString% names)

This function is only implemented under Windows.

Fills the array with the names of all possible values for the first
parameter to "Dial()":dialupmanagerdial.html on this machine and returns
their number (may be $0$).

h3(#DialUpManager_dial). DialUpManager#dial

 Boolean *dial*(%(arg-type)String% nameOfISP = '',  %(arg-type)String% username = '', 
              %(arg-type)String% password = '', 
              %(arg-type)Boolean% async = true)

Dial the given ISP, use _username_ and _password_ to authenticate.

The parameters are only used under Windows currently, for Unix you should use 
"set_connect_command":#DialUpManager_setconnectcommand to customize this
functions behaviour.

If no _nameOfISP_ is given, the function will select the default one
(proposing the user to choose among all connections defined on this machine)
and if no username and/or password are given, the function will try to do
without them, but will ask the user if really needed.

If _async_ parameter is @false@, the function waits until the end of dialing
and returns @true@ upon successful completion.

If _async_ is @true@, the function only initiates the connection and
returns immediately - the result is reported via events (an event is sent
anyhow, but if dialing failed it will be a DISCONNECTED one).

h3(#DialUpManager_isdialing). DialUpManager#is_dialing

 Boolean *is_dialing*()

Returns true if (async) dialing is in progress.

h4. See also

"Dial":dialupmanagerdial.html

h3(#DialUpManager_canceldialing). DialUpManager#cancel_dialing

 Boolean *cancel_dialing*()

Cancel dialing the number initiated with "Dial":dialupmanagerdial.html 
with async parameter equal to @true@.

Note that this won't result in DISCONNECTED event being sent.

h4. See also

"is_dialing":#DialUpManager_isdialing

h3(#DialUpManager_hangup). DialUpManager#hang_up

 Boolean *hang_up*()

Hang up the currently active dial up connection.

h3(#DialUpManager_isalwaysonline). DialUpManager#is_always_online

 Boolean *is_always_online*()

Returns @true@ if the computer has a permanent network connection (i.e. is
on a LAN) and so there is no need to use Dial() function to go online.

*NB:* this functions tries to guess the result and it is not always
guaranteed to be correct, so it is better to ask user for
confirmation or give him a possibility to override it.

h3(#DialUpManager_isonline). DialUpManager#is_online

 Boolean *is_online*()

Returns @true@ if the computer is connected to the network: under Windows,
this just means that a RAS connection exists, under Unix we check that
the "well-known host" (as specified by 
"set_well_known_host":#DialUpManager_setwellknownhost) is reachable.

h3(#DialUpManager_setonlinestatus). DialUpManager#set_online_status

  *set_online_status*(%(arg-type)Boolean% isOnline = true)

Sometimes the built-in logic for determining the online status may fail,
so, in general, the user should be allowed to override it. This function
allows to forcefully set the online status - whatever our internal
algorithm may think about it.

h4. See also

"is_online":#DialUpManager_isonline

h3(#DialUpManager_enableautocheckonlinestatus). DialUpManager#enable_auto_check_online_status

 Boolean *enable_auto_check_online_status*(%(arg-type)size_t% nSeconds = 60)

Enable automatic checks for the connection status and sending of 
@EVT_DIALUP_CONNECTED/EVT_DIALUP_DISCONNECTED@ events. The interval
parameter is only for Unix where we do the check manually and specifies how
often should we repeat the check (each minute by default). Under Windows, the
notification about the change of connection status is sent by the system and so
we don't do any polling and this parameter is ignored.

Returns @false@ if couldn't set up automatic check for online status.

h3(#DialUpManager_disableautocheckonlinestatus). DialUpManager#disable_auto_check_online_status

  *disable_auto_check_online_status*()

Disable automatic check for connection status change - notice that the
@EVT_DIALUP_XXX@ events won't be sent any more neither.

h3(#DialUpManager_setwellknownhost). DialUpManager#set_well_known_host

  *set_well_known_host*(%(arg-type)String% hostname,  %(arg-type)Integer% portno = 80)

This method is for Unix only.

Under Unix, the value of well-known host is used to check whether we're
connected to the internet. It is unused under Windows, but this function
is always safe to call. The default value is @www.yahoo.com:80@.

h3(#DialUpManager_setconnectcommand). DialUpManager#set_connect_command

  *set_connect_command*(%(arg-type)String% commandDial = T("/usr/bin/pon"), 
                      %(arg-type)String% commandHangup = T("/usr/bin/poff"))

This method is for Unix only.

Sets the commands to start up the network and to hang up again.

h4. See also

"Dial":dialupmanagerdial.html

