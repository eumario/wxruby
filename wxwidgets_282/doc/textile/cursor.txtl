h1(#wxcursor). Wx::Cursor

A cursor is a small bitmap usually used for denoting where the mouse
pointer is, with a picture that might indicate the interpretation of a
mouse click. As with icons, cursors in X and MS Windows are created
in a different manner. Therefore, separate cursors will be created for the
different environments.  Platform-specific methods for creating a 
Cursor object are catered for, and this is an occasion where
conditional compilation will probably be required (see "Icon":icon.html for
an example).

A single cursor object may be used in many windows (any subwindow type).
The Widgets convention is to set the cursor for a window, as in X,
rather than to set it globally as in MS Windows, although a
global "::SetCursor":setcursor.html is also available for MS Windows use.

h2. Derived from

"Bitmap":bitmap.html

"GDIObject":gdiobject.html

"Object":object.html

h2. Predefined objects

Objects:

*NullCursor*

Pointers:

*STANDARD_CURSOR

HOURGLASS_CURSOR\\
CROSS_CURSOR*

h2. See also

"Bitmap":bitmap.html, "Icon":icon.html, "Window#set_cursor":window.html#Window_setcursor, "::SetCursor":setcursor.html

<div id="methods">

h2. Methods

* "Cursor.new":#Cursor_new
* "Cursor#ok":#Cursor_ok

</div>


h3(#Cursor_new). Cursor.new

  *Cursor.new*(%(arg-type)char% bits[],  %(arg-type)Integer% width,  %(arg-type)Integer% height, 
             %(arg-type)Integer% hotSpotX=-1, 
             %(arg-type)Integer% hotSpotY=-1, 
             %(arg-type)char% maskBits[]=NULL, 
             %(arg-type)Colour% fg=NULL, 
             %(arg-type)Colour% bg=NULL)

Constructs a cursor by passing an array of bits (Motif and GTK+ only). _maskBits_ is used only under
Motif and GTK+. The parameters _fg_ and _bg_ are only present on GTK+, and force the
cursor to use particular background and foreground colours.

If either _hotSpotX_ or _hotSpotY_ is -1, the hotspot will be the centre of the cursor image (Motif only).

  *Cursor.new*(%(arg-type)String% cursorName,  %(arg-type)Integer% type, 
             %(arg-type)Integer% hotSpotX=0, 
             %(arg-type)Integer% hotSpotY=0)

Constructs a cursor by passing a string resource name or filename.

On MacOS when specifying a string resource name, first the color cursors 'crsr' and then the black/white cursors 'CURS' in the resource chain are scanned through.

_hotSpotX_ and _hotSpotY_ are currently only used under Windows when loading from an
icon file, to specify the cursor hotspot relative to the top left of the image.

  *Cursor.new*(%(arg-type)Integer% cursorId)

Constructs a cursor using a cursor identifier.

  *Cursor.new*(%(arg-type)Image% image)

Constructs a cursor from a Image. The cursor is monochrome, colors with the RGB elements all greater
than 127 will be foreground, colors less than this background. The mask (if any) will be used as transparent.

In MSW the foreground will be white and the background black. If the cursor is larger than 32x32 it is resized.
In GTK, the two most frequent colors will be used for foreground and background. The cursor will be displayed
at the size of the image.
On MacOS if the cursor is larger than 16x16 it is resized and currently only shown as black/white (mask respected).

  *Cursor.new*(%(arg-type)Cursor% cursor)

Copy constructor. This uses reference counting so is a cheap operation.

h4. Parameters

* _bits_ An array of bits.
* _maskBits_ Bits for a mask bitmap.
* _width_ Cursor width.
* _height_ Cursor height.
* _hotSpotX_ Hotspot x coordinate.
* _hotSpotY_ Hotspot y coordinate.
* _type_ Icon type to load. Under Motif, _type_ defaults to *BITMAP_TYPE_XBM*. Under Windows,
it defaults to *BITMAP_TYPE_CUR_RESOURCE*. Under MacOS, it defaults to *BITMAP_TYPE_MACCURSOR_RESOURCE*.

Under X, the permitted cursor types are:



|@BITMAP_TYPE_XBM@|Load an X bitmap file.|


Under Windows, the permitted types are:



|@BITMAP_TYPE_CUR@|Load a cursor from a .cur cursor file (only if USE_RESOURCE_LOADING_IN_MSWis enabled in setup.h).|
|@BITMAP_TYPE_CUR_RESOURCE@|Load a Windows resource (as specified in the .rc file).|
|@BITMAP_TYPE_ICO@|Load a cursor from a .ico icon file (only if USE_RESOURCE_LOADING_IN_MSWis enabled in setup.h). Specify _hotSpotX_ and _hotSpotY_.|

* _cursorId_ A stock cursor identifier. May be one of:



|*CURSOR_ARROW*|A standard arrow cursor.|
|*CURSOR_RIGHT_ARROW*|A standard arrow cursorpointing to the right.|
|*CURSOR_BLANK*|Transparent cursor.|
|*CURSOR_BULLSEYE*|Bullseye cursor.|
|*CURSOR_CHAR*|Rectangular character cursor.|
|*CURSOR_CROSS*|A cross cursor.|
|*CURSOR_HAND*|A hand cursor.|
|*CURSOR_IBEAM*|An I-beam cursor (vertical line).|
|*CURSOR_LEFT_BUTTON*|Represents a mouse with the left button depressed.|
|*CURSOR_MAGNIFIER*|A magnifier icon.|
|*CURSOR_MIDDLE_BUTTON*|Represents a mouse with the middle button depressed.|
|*CURSOR_NO_ENTRY*|A no-entry sign cursor.|
|*CURSOR_PAINT_BRUSH*|A paintbrush cursor.|
|*CURSOR_PENCIL*|A pencil cursor.|
|*CURSOR_POINT_LEFT*|A cursor that points left.|
|*CURSOR_POINT_RIGHT*|A cursor that points right.|
|*CURSOR_QUESTION_ARROW*|An arrow and question mark.|
|*CURSOR_RIGHT_BUTTON*|Represents a mouse with the right button depressed.|
|*CURSOR_SIZENESW*|A sizing cursor pointing NE-SW.|
|*CURSOR_SIZENS*|A sizing cursor pointing N-S.|
|*CURSOR_SIZENWSE*|A sizing cursor pointing NW-SE.|
|*CURSOR_SIZEWE*|A sizing cursor pointing W-E.|
|*CURSOR_SIZING*|A general sizing cursor.|
|*CURSOR_SPRAYCAN*|A spraycan cursor.|
|*CURSOR_WAIT*|A wait cursor.|
|*CURSOR_WATCH*|A watch cursor.|
|*CURSOR_ARROWWAIT*|A cursor with both an arrow andan hourglass, (windows.)|


Note that not all cursors are available on all platforms.
* _cursor_ Pointer or reference to a cursor to copy.





h4. Example

The following is an example of creating a
cursor from 32x32 bitmap data (@down_bits@) and a mask
(@down_mask@) where 1 is black and 0 is white for
the bits, and 1 is opaque and 0 is transparent for
the mask. It works on Windows and GTK+.


 static char down_bits[] = { 255, 255, 255, 255, 31,
   255, 255, 255, 31, 255, 255, 255, 31, 255, 255, 255,
   31, 255, 255, 255, 31, 255, 255, 255, 31, 255, 255,
   255, 31, 255, 255, 255, 31, 255, 255, 255, 25, 243,
   255, 255, 19, 249, 255, 255, 7, 252, 255, 255, 15, 254,
   255, 255, 31, 255, 255, 255, 191, 255, 255, 255, 255,
   255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
   255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
   255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
   255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
   255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
   255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
   255 };
 
 static char down_mask[] = { 240, 1, 0, 0, 240, 1,
   0, 0, 240, 1, 0, 0, 240, 1, 0, 0, 240, 1, 0, 0, 240, 1,
   0, 0, 240, 1, 0, 0, 240, 1, 0, 0, 255, 31, 0, 0, 255,
   31, 0, 0, 254, 15, 0, 0, 252, 7, 0, 0, 248, 3, 0, 0,
   240, 1, 0, 0, 224, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0 };
 
 #ifdef __WXMSW__
 Bitmap down_bitmap(down_bits, 32, 32);
 Bitmap down_mask_bitmap(down_mask, 32, 32);
 
 down_bitmap.SetMask(new Mask(down_mask_bitmap));
 Image down_image = down_bitmap.ConvertToImage();
 down_image.SetOption(IMAGE_OPTION_CUR_HOTSPOT_X, 6);
 down_image.SetOption(IMAGE_OPTION_CUR_HOTSPOT_Y, 14);
 Cursor down_cursor = Cursor(down_image);
 #else
 Cursor down_cursor = Cursor(down_bits, 32, 32,
   6, 14, down_mask, WHITE, BLACK);
 #endif
 

  *destructor*()

Destroys the cursor. A cursor can be reused for more
than one window, and does not get destroyed when the window is
destroyed. Widgets destroys all cursors on application exit, although
it is best to clean them up explicitly.

h3(#Cursor_ok). Cursor#ok

 Boolean *ok*()

Returns true if cursor data is present.

h3(#Cursor_assignment). Cursor#=

 "Cursor":cursor.html *operator $=$*(%(arg-type)Cursor% cursor)

Assignment operator, using reference counting. Returns a reference
to `this'.

h3(#Cursor_equals). Cursor#==

 Boolean *operator $==$*(%(arg-type)Cursor% cursor)

Equality operator. Two cursors are equal if they contain pointers
to the same underlying cursor data. It does not compare each attribute,
so two independently-created cursors using the same parameters will
fail the test.

h3(#Cursor_notequals). Cursor#!=

 Boolean *operator $!=$*(%(arg-type)Cursor% cursor)

Inequality operator. Two cursors are not equal if they contain pointers
to different underlying cursor data. It does not compare each attribute.


