h1(#wxgridtablebase). Wx::GridTableBase

Grid table classes.

h2. Derived from

"Object":object.html

<div id="methods">

h2. Methods

* "GridTableBase.new":#GridTableBase_new
* "GridTableBase#get_number_rows":#GridTableBase_getnumberrows
* "GridTableBase#get_number_cols":#GridTableBase_getnumbercols
* "GridTableBase#is_empty_cell":#GridTableBase_isemptycell
* "GridTableBase#get_value":#GridTableBase_getvalue
* "GridTableBase#set_value":#GridTableBase_setvalue
* "GridTableBase#get_type_name":#GridTableBase_gettypename
* "GridTableBase#can_get_value_as":#GridTableBase_cangetvalueas
* "GridTableBase#can_set_value_as":#GridTableBase_cansetvalueas
* "GridTableBase#get_value_as_long":#GridTableBase_getvalueaslong
* "GridTableBase#get_value_as_double":#GridTableBase_getvalueasdouble
* "GridTableBase#get_value_as_bool":#GridTableBase_getvalueasbool
* "GridTableBase#set_value_as_long":#GridTableBase_setvalueaslong
* "GridTableBase#set_value_as_double":#GridTableBase_setvalueasdouble
* "GridTableBase#set_value_as_bool":#GridTableBase_setvalueasbool
* "GridTableBase#get_value_as_custom":#GridTableBase_getvalueascustom
* "GridTableBase#set_value_as_custom":#GridTableBase_setvalueascustom
* "GridTableBase#set_view":#GridTableBase_setview
* "GridTableBase#get_view":#GridTableBase_getview
* "GridTableBase#clear":#GridTableBase_clear
* "GridTableBase#insert_rows":#GridTableBase_insertrows
* "GridTableBase#append_rows":#GridTableBase_appendrows
* "GridTableBase#delete_rows":#GridTableBase_deleterows
* "GridTableBase#insert_cols":#GridTableBase_insertcols
* "GridTableBase#append_cols":#GridTableBase_appendcols
* "GridTableBase#delete_cols":#GridTableBase_deletecols
* "GridTableBase#get_row_label_value":#GridTableBase_getrowlabelvalue
* "GridTableBase#get_col_label_value":#GridTableBase_getcollabelvalue
* "GridTableBase#set_row_label_value":#GridTableBase_setrowlabelvalue
* "GridTableBase#set_col_label_value":#GridTableBase_setcollabelvalue
* "GridTableBase#set_attr_provider":#GridTableBase_setattrprovider
* "GridTableBase#get_attr_provider":#GridTableBase_getattrprovider
* "GridTableBase#can_have_attributes":#GridTableBase_canhaveattributes
* "GridTableBase#update_attr_rows":#GridTableBase_updateattrrows
* "GridTableBase#update_attr_cols":#GridTableBase_updateattrcols
* "GridTableBase#get_attr":#GridTableBase_getattr
* "GridTableBase#set_attr":#GridTableBase_setattr
* "GridTableBase#set_row_attr":#GridTableBase_setrowattr
* "GridTableBase#set_col_attr":#GridTableBase_setcolattr

</div>


h3(#GridTableBase_wxgridtablebase). GridTableBase.new

  *destructor*()

h3(#GridTableBase_getnumberrows). GridTableBase#get_number_rows

 Integer *get_number_rows*()

You must override these functions in a derived table class.

h3(#GridTableBase_getnumbercols). GridTableBase#get_number_cols

 Integer *get_number_cols*()


h3(#GridTableBase_isemptycell). GridTableBase#is_empty_cell

 Boolean *is_empty_cell*(%(arg-type)Integer% row,  %(arg-type)Integer% col)


h3(#GridTableBase_getvalue). GridTableBase#get_value

 String *get_value*(%(arg-type)Integer% row,  %(arg-type)Integer% col)


h3(#GridTableBase_setvalue). GridTableBase#set_value

  *set_value*(%(arg-type)Integer% row,  %(arg-type)Integer% col,  %(arg-type)String% value)


h3(#GridTableBase_gettypename). GridTableBase#get_type_name

 String *get_type_name*(%(arg-type)Integer% row,  %(arg-type)Integer% col)

Data type determination and value access.

h3(#GridTableBase_cangetvalueas). GridTableBase#can_get_value_as

 Boolean *can_get_value_as*(%(arg-type)Integer% row,  %(arg-type)Integer% col, 
                          %(arg-type)String% typeName)


h3(#GridTableBase_cansetvalueas). GridTableBase#can_set_value_as

 Boolean *can_set_value_as*(%(arg-type)Integer% row,  %(arg-type)Integer% col, 
                          %(arg-type)String% typeName)


h3(#GridTableBase_getvalueaslong). GridTableBase#get_value_as_long

 Integer *get_value_as_long*(%(arg-type)Integer% row,  %(arg-type)Integer% col)


h3(#GridTableBase_getvalueasdouble). GridTableBase#get_value_as_double

 double *get_value_as_double*(%(arg-type)Integer% row,  %(arg-type)Integer% col)


h3(#GridTableBase_getvalueasbool). GridTableBase#get_value_as_bool

 Boolean *get_value_as_bool*(%(arg-type)Integer% row,  %(arg-type)Integer% col)


h3(#GridTableBase_setvalueaslong). GridTableBase#set_value_as_long

  *set_value_as_long*(%(arg-type)Integer% row,  %(arg-type)Integer% col,  %(arg-type)Integer% value)


h3(#GridTableBase_setvalueasdouble). GridTableBase#set_value_as_double

  *set_value_as_double*(%(arg-type)Integer% row,  %(arg-type)Integer% col,  %(arg-type)double% value)


h3(#GridTableBase_setvalueasbool). GridTableBase#set_value_as_bool

  *set_value_as_bool*(%(arg-type)Integer% row,  %(arg-type)Integer% col,  %(arg-type)Boolean% value)


h3(#GridTableBase_getvalueascustom). GridTableBase#get_value_as_custom

  *get_value_as_custom*(%(arg-type)Integer% row,  %(arg-type)Integer% col, 
                      %(arg-type)String% typeName)

For user defined types


h3(#GridTableBase_setvalueascustom). GridTableBase#set_value_as_custom

  *set_value_as_custom*(%(arg-type)Integer% row,  %(arg-type)Integer% col, 
                      %(arg-type)String% typeName,  %(arg-type)% value)


h3(#GridTableBase_setview). GridTableBase#set_view

  *set_view*(%(arg-type)Grid% grid)

Overriding these is optional


h3(#GridTableBase_getview). GridTableBase#get_view

 "Grid":grid.html *get_view*()


h3(#GridTableBase_clear). GridTableBase#clear

  *clear*()


h3(#GridTableBase_insertrows). GridTableBase#insert_rows

 Boolean *insert_rows*(%(arg-type)size_t% pos = 0,  %(arg-type)size_t% numRows = 1)


h3(#GridTableBase_appendrows). GridTableBase#append_rows

 Boolean *append_rows*(%(arg-type)size_t% numRows = 1)


h3(#GridTableBase_deleterows). GridTableBase#delete_rows

 Boolean *delete_rows*(%(arg-type)size_t% pos = 0,  %(arg-type)size_t% numRows = 1)


h3(#GridTableBase_insertcols). GridTableBase#insert_cols

 Boolean *insert_cols*(%(arg-type)size_t% pos = 0,  %(arg-type)size_t% numCols = 1)


h3(#GridTableBase_appendcols). GridTableBase#append_cols

 Boolean *append_cols*(%(arg-type)size_t% numCols = 1)


h3(#GridTableBase_deletecols). GridTableBase#delete_cols

 Boolean *delete_cols*(%(arg-type)size_t% pos = 0,  %(arg-type)size_t% numCols = 1)


h3(#GridTableBase_getrowlabelvalue). GridTableBase#get_row_label_value

 String *get_row_label_value*(%(arg-type)Integer% row)


h3(#GridTableBase_getcollabelvalue). GridTableBase#get_col_label_value

 String *get_col_label_value*(%(arg-type)Integer% col)


h3(#GridTableBase_setrowlabelvalue). GridTableBase#set_row_label_value

  *set_row_label_value*(%(arg-type)Integer% WXUNUSED(row),  %(arg-type)% String&)


h3(#GridTableBase_setcollabelvalue). GridTableBase#set_col_label_value

  *set_col_label_value*(%(arg-type)Integer% WXUNUSED(col),  %(arg-type)% String&)


h3(#GridTableBase_setattrprovider). GridTableBase#set_attr_provider

  *set_attr_provider*(%(arg-type)GridCellAttrProvider% attrProvider)

Attribute handling
give us the attr provider to use - we take ownership of the pointer


h3(#GridTableBase_getattrprovider). GridTableBase#get_attr_provider

 "GridCellAttrProvider":gridcellattrprovider.html *get_attr_provider*()

get the currently used attr provider (may be NULL)


h3(#GridTableBase_canhaveattributes). GridTableBase#can_have_attributes

 Boolean *can_have_attributes*()

Does this table allow attributes?  Default implementation creates
a GridCellAttrProvider if necessary.


h3(#GridTableBase_updateattrrows). GridTableBase#update_attr_rows

  *update_attr_rows*(%(arg-type)size_t% pos,  %(arg-type)Integer% numRows)

change row/col number in attribute if needed


h3(#GridTableBase_updateattrcols). GridTableBase#update_attr_cols

  *update_attr_cols*(%(arg-type)size_t% pos,  %(arg-type)Integer% numCols)


h3(#GridTableBase_getattr). GridTableBase#get_attr

 "GridCellAttr":gridcellattr.html *get_attr*(%(arg-type)Integer% row,  %(arg-type)Integer% col)

by default forwarded to GridCellAttrProvider if any. May be
overridden to handle attributes directly in the table.


h3(#GridTableBase_setattr). GridTableBase#set_attr

  *set_attr*(%(arg-type)GridCellAttr% attr,  %(arg-type)Integer% row,  %(arg-type)Integer% col)

these functions take ownership of the pointer


h3(#GridTableBase_setrowattr). GridTableBase#set_row_attr

  *set_row_attr*(%(arg-type)GridCellAttr% attr,  %(arg-type)Integer% row)


h3(#GridTableBase_setcolattr). GridTableBase#set_col_attr

  *set_col_attr*(%(arg-type)GridCellAttr% attr,  %(arg-type)Integer% col)

