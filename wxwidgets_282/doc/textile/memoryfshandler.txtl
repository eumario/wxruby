h1(#wxmemoryfshandler). Wx::MemoryFSHandler

This "FileSystem":filesystem.html handler can store arbitrary 
data in memory stream and make them accessible via URL. It is particularly
suitable for storing bitmaps from resources or included XPM files so that
they can be used with HTML.

Filenames are prefixed with "memory:", e.g. "memory:myfile.html".

Example:


 #ifndef __WXMSW__
 #include "logo.xpm"
 #endif
 
 void MyFrame::OnAbout(CommandEvent&)
 {
     BusyCursor bcur;
     FileSystem::AddHandler(new MemoryFSHandler);
     MemoryFSHandler::AddFile("logo.pcx", BITMAP(logo), BITMAP_TYPE_PCX);
     MemoryFSHandler::AddFile("about.htm", 
                                "<html><body>About: "
                                "<img src=\"memory:logo.pcx\"></body></html>");
 
     Dialog dlg(this, -1, String(_("About")));
     BoxSizer *topsizer;
     HtmlWindow *html;
     topsizer = new BoxSizer(VERTICAL);
     html = new HtmlWindow(&dlg, -1, DefaultPosition, 
                             Size(380, 160), HW_SCROLLBAR_NEVER);
     html->SetBorders(0);
     html->LoadPage("memory:about.htm");
     html->SetSize(html->GetInternalRepresentation()->GetWidth(), 
                   html->GetInternalRepresentation()->GetHeight());
     topsizer->Add(html, 1, ALL, 10);
     topsizer->Add(new StaticLine(&dlg, -1), 0, EXPAND | LEFT | RIGHT, 10);
     topsizer->Add(new Button(&dlg, ID_OK, "Ok"), 
                   0, ALL | ALIGN_RIGHT, 15);
     dlg.SetAutoLayout(true);
     dlg.SetSizer(topsizer);
     topsizer->Fit(&dlg);
     dlg.Centre();
     dlg.ShowModal();
     
     MemoryFSHandler::RemoveFile("logo.pcx");
     MemoryFSHandler::RemoveFile("about.htm");
 }
 


h2. Derived from

"FileSystemHandler":filesystemhandler.html

<div id="methods">

h2. Methods

* "MemoryFSHandler.new":#MemoryFSHandler_new
* "MemoryFSHandler#add_file":#MemoryFSHandler_addfile
* "MemoryFSHandler#remove_file":#MemoryFSHandler_removefile

</div>



h3(#MemoryFSHandler_wxmemoryfshandler). MemoryFSHandler.new

h3(#MemoryFSHandler_addfile). MemoryFSHandler#add_file

  *add_file*(%(arg-type)String% filename,  %(arg-type)Image% image,  %(arg-type)Integer% type)

  *add_file*(%(arg-type)String% filename,  %(arg-type)Bitmap% bitmap,  %(arg-type)Integer% type)

  *add_file*(%(arg-type)String% filename,  %(arg-type)String% textdata)

  *add_file*(%(arg-type)String% filename,  %(arg-type)% binarydata,  %(arg-type)size_t% size)

Add file to list of files stored in memory. Stored 
data (bitmap, text or raw data)
will be copied into private memory stream and available under 
name "memory:" + filename.

The type argument is one of @BITMAP_TYPE_XXX@ constants.
Note that you must use a type value (aka image format)
that Widgets can save (e.g. JPG, PNG, see "Image
documentation":image.html)!


h3(#MemoryFSHandler_removefile). MemoryFSHandler#remove_file

  *remove_file*(%(arg-type)String% filename)

Remove file from memory FS and free occupied memory.

