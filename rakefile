# rakefile
#   Copyright 2004-2006 by Kevin Smith
#   released under the MIT-style wxruby2 license

# Influential environment variables
# WXRUBY_RELEASE    : build a release version, stripped of debugging info
# WXRUBY_DEBUG      : build a debug version
# WXRUBY_VERSION    : set the version info (x.x.x) for this tree
# WXRUBY_NO_UNICODE : try and build an ANSI version

require "rake/rakeutil"

# DETERMINE OR SET VERSION
require 'rake/rakeversion'

# STANDARD BUILD DIRECTORIES
SWIG_DIR = 'swig'
SRC_DIR  = 'src'
OBJ_DIR  = 'obj'
DEST_DIR = 'lib'
CLASSES_DIR = File.join(SWIG_DIR, 'classes')

SWIG_CMD = ENV['SWIGCMD'] || "swig"
SWIG_MINIMUM_VERSION = '1.3.29'

# What we're eventually building
DLL_LIB = "wxruby2.#{Config::CONFIG["DLEXT"]}"
TARGET_LIB = File.join(DEST_DIR, DLL_LIB)

# SOURCE FILE GROUPS
# All core Wx classes to be built
ALL_CLASSES =  FileList[ "#{CLASSES_DIR}/*.i" ].sort.map do | i_file | 
  File.basename(i_file, '.i')
end

#
MAIN_MODULE = 'wx'
# Extra swig helper files to be built
HELPER_CLASSES = %w|RubyConstants RubyStockObjects Functions Mac|
# Pure-ruby lib files
ALL_RUBY_LIB_FILES = FileList[ 'lib/**/*.rb' ]

# force building against either a release build or debug build of
# wxWidgets. Only one should be used; if neither is specified, the
# default wx configuration will be used. Use of these options depends on
# there being an appropriately compiled version of wxWidgets available.
$debug_build = ENV['WXRUBY_DEBUG'] ? true : false
$release_build = ENV['WXRUBY_RELEASE'] ? true : false

# Force non-unicode build with WXRUBY_NO_UNICODE.  Unicode will be
# the default build now
$unicode_build = ENV['WXRUBY_NO_UNICODE'] ? false : true

$verbose_debug = ENV['WXRUBY_VERBOSE'] ? true : false

if $release_build
	puts('Enabling RELEASE build')
elsif $debug_build
	puts('Enabling DEBUG build')
end

if not $unicode_build
  puts('Disabling UNICODE build')
end

if($verbose_debug)
  puts('Enabling VERBOSE debugging output')
  $verbose_flag = ' -DwxDEBUG=1 '
else
  $verbose_flag = ''
end


# Redcloth library is required to build the documentation, but not
# required just to compile the lib.
begin
  require "rake/rakedocs"
rescue LoadError # documentation tasks will not be available
end

# Rubygems library is required to build a gem, but not just to compile
# the lib.
begin
  require "rake/rakepackage"  
rescue LoadError # package tasks will not be available
end

#############################
# auto-detected settings that can be
# overridden by platform-specific rake files
$ruby_cppflags = Config::CONFIG["CFLAGS"]

# Ruby 1.9.0 changes location of some header files
if RUBY_VERSION >= "1.9.0"
  includes = [ Config::CONFIG["rubyhdrdir"],
    Config::CONFIG["sitehdrdir"],
    Config::CONFIG["vendorhdrdir"],
    File.join(Config::CONFIG["rubyhdrdir"], Config::CONFIG['arch'])  ]
  $ruby_includes = " -I " + includes.join(' -I ')
else
  $ruby_includes = " -I " + $:.join(' -I ')
end

$ruby_ldflags = Config::CONFIG["LDFLAGS"]
$ruby_libs  = Config::CONFIG["LIBS"]
$extra_cppflags = ""
$extra_ldflags = ""
$extra_objs = ""
$extra_libs = ""
$cpp_out_flag =  "-o "
$link_output_flag = "-o "
OBJ_EXT = Config::CONFIG["OBJEXT"]

# some classes are not implemented by WxWidgets on all platforms
$excluded_classes = []

#############################
# platform-specific
if($macosx) then    require "rake/rakemacosx"
elsif($mswin) then  require "rake/rakemswin"
elsif($mingw) then  require "rake/rakemingw"
elsif($cygwin) then require "rake/rakecygwin"
elsif($bccwin) then require "rake/rakebccwin"
elsif($netbsd) then require "rake/rakenetbsd"
else                require "rake/rakelinux"
end

#############################
# put it all together
$cppflags = [$wx_cppflags, $ruby_cppflags, $extra_cppflags, $ruby_includes].join(' ')
$ldflags = [$ruby_ldflags, $extra_ldflags].join(' ')
$libs = [$wx_libs, $ruby_libs, $extra_libs].join(' ')
$extra_objs = $extra_objs


require "rake/rakewx"

#############################
# public tasks

if Object.respond_to?(:create_release_tasks, true)
  create_release_tasks
end

desc "Create the binary Ruby library file"
task :default => TARGET_LIB

desc "Compile object files from SWIG-generated sources"
task :compile => all_obj_files

desc "Force a compile of object files from C++ sources"
task :recompile => [:clean, :compile]

desc "Delete C++ source and header files generated by SWIG"
task :clean_src do
  delete_files_in_with_ext(SRC_DIR, "cpp")
  delete_files_in_with_ext(SRC_DIR, "h")
end

desc "Delete compiled libraries and object files"
task :clean do
  force_delete(TARGET_LIB)
  force_delete(VERSION_FILE)
  delete_files_in(OBJ_DIR)
  #force_rmdir($obj_dir)
end

MAKE_NUM_THREADS = 2
desc "Experimental generation of Makefile so can use multiprocessors to compile faster!"
task :rake_make => "Makefile" do
  sh "make -j #{MAKE_NUM_THREADS}"
end

