h1(#wxdatepickerctrl). Wx::DatePickerCtrl

This control allows the user to select a date. Unlike 
"CalendarCtrl":calendarctrl.html, which is a relatively big control,
DatePickerCtrl is implemented as a small window showing the currently selected date.
The control can be edited using the keyboard, and can also display a popup
window for more user-friendly date selection, depending on the styles used and
the platform, except PalmOS where date is selected using native dialog.

It is only available if @USE_DATEPICKCTRL@ is set to $1$.

h2. Derived from

"Control":control.html

"Window":window.html

"EvtHandler":evthandler.html

"Object":object.html

h2. Window styles


|@DP_SPIN@|Creates a control without a month calendardrop down but with spin-control-like arrows to change individual datecomponents. This style is not supported by the generic version.|
|@DP_DROPDOWN@|Creates a control with a monthcalendar drop-down part from which the user can select a date.|
|@DP_DEFAULT@|Creates a control with the stylethat is best supported for the current platform (currently DP_SPINunder Windows and DP_DROPDOWN elsewhere).|
|@DP_ALLOWNONE@|With this style, the control allowsthe user to not enter any valid date at all. Without it - the default - the control always has some valid date.|
|@DP_SHOWCENTURY@|Forces display of the century inthe default date format. Without this style the century could be displayed, ornot, depending on the default date representation in the system.|


h2. Event handling


|*evt_date_changed(id)&nbsp;{&nbsp;&#124;&nbsp;event&nbsp;&#124;&nbsp;...&nbsp;}*|This event fires when the userchanges the current selection in the control.|


h2. See also

"CalendarCtrl":calendarctrl.html,

"DateEvent":dateevent.html


<div id="methods">

h2. Methods

* "DatePickerCtrl.new":#DatePickerCtrl_new
* "DatePickerCtrl#create":#DatePickerCtrl_create
* "DatePickerCtrl#get_range":#DatePickerCtrl_getrange
* "DatePickerCtrl#get_value":#DatePickerCtrl_getvalue
* "DatePickerCtrl#set_range":#DatePickerCtrl_setrange
* "DatePickerCtrl#set_value":#DatePickerCtrl_setvalue

</div>


h3(#DatePickerCtrl_new). DatePickerCtrl.new

  *DatePickerCtrl.new*(%(arg-type)"Window":window.html% parent,  %(arg-type)Integer% id, 
                     %(arg-type)"DateTime":datetime.html% dt = DefaultDateTime, 
                     %(arg-type)"Point":point.html% pos = DEFAULT_POSITION, 
                     %(arg-type)"Size":size.html% size = DEFAULT_SIZE, 
                     %(arg-type)Integer% style = DP_DEFAULT | DP_SHOWCENTURY, 
                     %(arg-type)"Validator":validator.html% validator = DEFAULT_VALIDATOR, 
                    %(arg-type)String% name = "datectrl")

Initializes the object and calls "Create":datepickerctrlcreate.html with
all the parameters.


h3(#DatePickerCtrl_create). DatePickerCtrl#create

 Boolean *create*(%(arg-type)"Window":window.html% parent,  %(arg-type)Integer% id, 
                %(arg-type)"DateTime":datetime.html% dt = DefaultDateTime, 
                %(arg-type)"Point":point.html% pos = DEFAULT_POSITION, 
                %(arg-type)"Size":size.html% size = DEFAULT_SIZE, 
                %(arg-type)Integer% style = DP_DEFAULT | DP_SHOWCENTURY, 
                %(arg-type)"Validator":validator.html% validator = DEFAULT_VALIDATOR, 
               %(arg-type)String% name = "datectrl")

h4. Parameters

* _parent_ Parent window, must not be non-@NULL@.
* _id_ The identifier for the control.
* _dt_ The initial value of the control, if an invalid date (such as the
default value) is used, the control is set to today.
* _pos_ Initial position.
* _size_ Initial size. If left at default value, the control chooses its
own best size by using the height approximately equal to a text control and
width large enough to show the date string fully.
* _style_ The window style, should be left at $0$ as there are no
special styles for this control in this version.
* _validator_ Validator which can be used for additional date checks.
* _name_ Control name.

h4. Return value

 if the control was successfully created or  if creation failed.


h3(#DatePickerCtrl_getrange). DatePickerCtrl#get_range

 Boolean *get_range*(%(arg-type)"DateTime":datetime.html% dt1,  %(arg-type)"DateTime":datetime.html% dt2)

If the control had been previously limited to a range of dates using 
"set_range()":#DatePickerCtrl_setrange(), returns the lower and upper
bounds of this range. If no range is set (or only one of the bounds is set),
 dt1 and/or dt2 are set to be invalid.

h4. Parameters

* _dt1_ Pointer to the object which receives the lower range limit or
becomes invalid if it is not set. May be @NULL@ if the caller is not
interested in lower limit
* _dt2_ Same as above but for the upper limit

h4. Return value

 if no range limits are currently set,  if at least one bound is
set.


h3(#DatePickerCtrl_getvalue). DatePickerCtrl#get_value

 "DateTime":datetime.html *get_value*()

Returns the currently selected. If there is no selection or the selection is
outside of the current range, an invalid object is returned.


h3(#DatePickerCtrl_setrange). DatePickerCtrl#set_range

  *set_range*(%(arg-type)"DateTime":datetime.html% dt1,  %(arg-type)"DateTime":datetime.html% dt2)

Sets the valid range for the date selection. If dt1 is valid, it becomes
the earliest date (inclusive) accepted by the control. If dt2 is valid,
it becomes the latest possible date.

h4. Remarks

If the current value of the control is outside of the newly set range bounds,
the behaviour is undefined.


h3(#DatePickerCtrl_setvalue). DatePickerCtrl#set_value

  *set_value*(%(arg-type)"DateTime":datetime.html% dt)

Changes the current value of the control. The date should be valid and included
in the currently selected range, if any.

Calling this method does not result in a date change event.

