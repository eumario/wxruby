h1(#wxfsfile). Wx::FSFile

This class represents a single file opened by "FileSystem":filesystem.html.
It provides more information than Window's input stream 
(stream, filename, mime type, anchor).

*Note:* Any pointer returned by a method of FSFile is valid
only as long as the FSFile object exists. For example a call to GetStream()
doesn't _create_ the stream but only returns the pointer to it. In
other words after 10 calls to GetStream() you will obtain ten identical
pointers.

h2. Derived from

"Object":object.html

h2. See Also

"FileSystemHandler":filesystemhandler.html, 
"FileSystem":filesystem.html, 
"Overview":fs.html

<div id="methods">

h2. Methods

* "FSFile.new":#FSFile_new
* "FSFile#get_anchor":#FSFile_getanchor
* "FSFile#get_location":#FSFile_getlocation
* "FSFile#get_mime_type":#FSFile_getmimetype
* "FSFile#get_modification_time":#FSFile_getmodificationtime
* "FSFile#get_stream":#FSFile_getstream

</div>


h3(#FSFile_wxfsfile). FSFile.new

  *FSFile.new*(%(arg-type)"InputStream":inputstream.html% stream,  %(arg-type)String% loc,  %(arg-type)String% mimetype, 
             %(arg-type)String% anchor, 
             %(arg-type)"DateTime":datetime.html% modif)

Constructor. You probably won't use it. See Notes for details.

h4. Parameters

* _stream_ The input stream that will be used to access data
* _location_ The full location (aka filename) of the file
* _mimetype_ MIME type of this file. Mime type is either extension-based or HTTP Content-Type
* _anchor_ Anchor. See "get_anchor()":#FSFile_getanchor() for details.

If you are not sure of the meaning of these params, see the description of the GetXXXX()
functions.

h4. Notes

It is seldom used by the application programmer but you will need it if
you are writing your own virtual FS. For example you may need something
similar to MemoryInputStream, but because MemoryInputStream
doesn't free the memory when destroyed and thus passing a memory stream
pointer into FSFile constructor would lead to memory leaks, you
can write your own class derived from FSFile:


 class MyFSFile : public FSFile
 {
     private:
         void *m_Mem;
     public:
         MyFSFile(.....)
 	~MyFSFile() {free(m_Mem);}
 	    // of course dtor is virtual ;-)
 };
 

h3(#FSFile_getanchor). FSFile#get_anchor

 String *get_anchor*()

Returns anchor (if present). The term of *anchor* can be easily
explained using few examples:


 index.htm#anchor                      /* 'anchor' is anchor */
 index/wx001.htm                       /* NO anchor here!    */
 archive/main.zip#zip:index.htm#global /* 'global'           */
 archive/main.zip#zip:index.htm        /* NO anchor here!    */
 

Usually an anchor is presented only if the MIME type is 'text/html'.
But it may have some meaning with other files;
for example myanim.avi\#200 may refer to position in animation
or reality.wrl\#MyView may refer to a predefined view in VRML.

h3(#FSFile_getlocation). FSFile#get_location

 String *get_location*()

Returns full location of the file, including path and protocol. 
Examples : 


 http://www.wxwidgets.org
 http://www.ms.mff.cuni.cz/~vsla8348/wxhtml/archive.zip#zip:info.txt
 file:/home/vasek/index.htm
 relative-file.htm
 

h3(#FSFile_getmimetype). FSFile#get_mime_type

 String *get_mime_type*()

Returns the MIME type of the content of this file. It is either
extension-based (see MimeTypesManager) or extracted from
HTTP protocol Content-Type header.

h3(#FSFile_getmodificationtime). FSFile#get_modification_time

 "DateTime":datetime.html *get_modification_time*()

Returns time when this file was modified.

h3(#FSFile_getstream). FSFile#get_stream

 "InputStream":inputstream.html *get_stream*()

Returns pointer to the stream. You can use the returned
stream to directly access data. You may suppose
that the stream provide Seek and GetSize functionality
(even in the case of the HTTP protocol which doesn't provide
this by default. Html uses local cache to work around
this and to speed up the connection).

