<?xml version="1.0" encoding="ISO-8859-1"?>

<classes>
<class name="wxAcceleratorEntry">
<description>
<p class="classdesc">
An object used by an application wishing to create an <ref target="wxacceleratortable">accelerator table</ref>.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/accel.h"/></includes>
<seealso>

<ref target="wxacceleratortable">wxAcceleratorTable</ref><ref target="wxwindowsetacceleratortable">wxWindow::SetAcceleratorTable</ref>

</seealso>
<members>
<member class="wxAcceleratorEntry" name="wxAcceleratorEntry"><function type="" name="wxAcceleratorEntry"><description>

Default constructor.

</description></function>
<function type="" name="wxAcceleratorEntry"><parameters><parameter type="int" name=" flags"></parameter><parameter type="int" name=" keyCode"></parameter><parameter type="int" name=" cmd"></parameter></parameters><description>

Constructor.









</description></function></member>
<member class="wxAcceleratorEntry" name="GetCommand"><function type="int" name="GetCommand" suffix="const"><description>

Returns the command identifier for the accelerator table entry.

</description></function></member>
<member class="wxAcceleratorEntry" name="GetFlags"><function type="int" name="GetFlags" suffix="const"><description>

Returns the flags for the accelerator table entry.

</description></function></member>
<member class="wxAcceleratorEntry" name="GetKeyCode"><function type="int" name="GetKeyCode" suffix="const"><description>

Returns the keycode for the accelerator table entry.

</description></function></member>
<member class="wxAcceleratorEntry" name="Set"><function type="void" name="Set"><parameters><parameter type="int" name=" flags"></parameter><parameter type="int" name=" keyCode"></parameter><parameter type="int" name=" cmd"></parameter></parameters><description>

Sets the accelerator entry parameters.








</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxAcceleratorTable">
<description>
<p class="classdesc">
An accelerator table allows the application to specify a table of keyboard shortcuts for
menus or other commands. On Windows, menu or button commands are supported; on GTK,
only menu commands are supported.</p><p class="classdesc">The object <b> wxNullAcceleratorTable</b> is defined to be a table with no data, and is the
initial accelerator table for a window.</p>
</description>
<example>

<pre>
  wxAcceleratorEntry entries&#91;4];
  entries&#91;0].Set(wxACCEL_CTRL,  (int) 'N',     ID_NEW_WINDOW);
  entries&#91;1].Set(wxACCEL_CTRL,  (int) 'X',     wxID_EXIT);
  entries&#91;2].Set(wxACCEL_SHIFT, (int) 'A',     ID_ABOUT);
  entries&#91;3].Set(wxACCEL_NORMAL,  WXK_DELETE,    wxID_CUT);
  wxAcceleratorTable accel(4, entries);
  frame-&gt;SetAcceleratorTable(accel);
</pre>

</example>
<remarks>

An accelerator takes precedence over normal processing and can be a convenient way to program some event handling.
For example, you can use an accelerator table to enable a dialog with a multi-line text control to
accept CTRL-Enter as meaning `OK' (but not in GTK at present).

</remarks>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/accel.h"/></includes>
<seealso>

<ref target="wxacceleratorentry">wxAcceleratorEntry</ref><ref target="wxwindowsetacceleratortable">wxWindow::SetAcceleratorTable</ref>

</seealso>
<members>
<member class="wxAcceleratorTable" name="wxAcceleratorTable"><function type="" name="wxAcceleratorTable"><description>

Default constructor.

</description></function>
<function type="" name="wxAcceleratorTable"><parameters><parameter type="const wxAcceleratorTable&amp; " name="bitmap"></parameter></parameters><description>

Copy constructor.

</description></function>
<function type="" name="wxAcceleratorTable"><parameters><parameter type="int" name=" n"></parameter><parameter type="wxAcceleratorEntry" name=" entries&#91;]"></parameter></parameters><description>

Creates from an array of <ref target="wxacceleratorentry">wxAcceleratorEntry</ref> objects.

</description></function>
<function type="" name="wxAcceleratorTable"><parameters><parameter type="const wxString&amp;" name=" resource"></parameter></parameters><description>

Loads the accelerator table from a Windows resource (Windows only).









\pythonnote{The wxPython constructor accepts a list of
wxAcceleratorEntry objects, or 3-tuples consisting of flags, keyCode,
and cmd values like you would construct wxAcceleratorEntry objects with.}

\perlnote{The wxPerl constructor accepts a list of either
  Wx::AcceleratorEntry objects or references to 3-element arrays
  ( flags, keyCode, cmd ), like the parameters of Wx::AcceleratorEntry::new.}

</description></function></member>
<member class="wxAcceleratorTable" name="~wxAcceleratorTable"><function type="" name="~wxAcceleratorTable"><description>

Destroys the wxAcceleratorTable object.

</description></function></member>
<member class="wxAcceleratorTable" name="Ok"><function type="bool" name="Ok" suffix="const"><description>

Returns true if the accelerator table is valid.

</description></function></member>
<member class="wxAcceleratorTable" name="operator $=$"><function type="wxAcceleratorTable&amp; " name="operator $=$"><parameters><parameter type="const wxAcceleratorTable&amp; " name="accel">Accelerator table to assign.</parameter></parameters><returnvalue>

Returns reference to this object.

</returnvalue><description>

Assignment operator. This operator does not copy any data, but instead
passes a pointer to the data in <i> accel</i> and increments a reference
counter. It is a fast operation.





</description></function></member>
<member class="wxAcceleratorTable" name="operator $==$"><function type="bool" name="operator $==$"><parameters><parameter type="const wxAcceleratorTable&amp; " name="accel">Accelerator table to compare with</parameter></parameters><returnvalue>

Returns true if the accelerator tables were effectively equal, false otherwise.

</returnvalue><description>

Equality operator. This operator tests whether the internal data pointers are
equal (a fast test).





</description></function></member>
<member class="wxAcceleratorTable" name="operator $!=$"><function type="bool" name="operator $!=$"><parameters><parameter type="const wxAcceleratorTable&amp; " name="accel">Accelerator table to compare with</parameter></parameters><returnvalue>

Returns true if the accelerator tables were unequal, false otherwise.


</returnvalue><description>

Inequality operator. This operator tests whether the internal data pointers are
unequal (a fast test).





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxAccessible">
<description>
<p class="classdesc">
The wxAccessible class allows wxWindows applications, and
wxWindows itself, to return extended information about user interface elements
to client applications such as screen readers. This is the
main way in which wxWindows implements accessibility features.</p><p class="classdesc">At present, only Microsoft Active Accessibility is supported
by this class.</p><p class="classdesc">To use this class, derive from wxAccessible, implement appropriate
functions, and associate an object of the class with a
window using <ref target="wxwindowsetaccessible">wxWindow::SetAccessible</ref>.</p><p class="classdesc">All functions return an indication of success, failure, or not implemented
using values of the wxAccStatus enum type.</p><p class="classdesc">If you return wxACC_NOT_IMPLEMENTED from any functioon, the system will try to
implement the appropriate functionality. However this will not work with
all functions.</p><p class="classdesc">Most functions work with an <i> object id</i>, which can be zero to refer to
'this' UI element, or greater than zero to refer to the nth child element.
This allows you to specify elements that don't have a corresponding wxWindow or
wxAccessible; for example, the sash of a splitter window.</p><p class="classdesc">For details on the semantics of functions and types, please refer to the
Microsoft Active Accessibility 1.2 documentation.</p><p class="classdesc">This class is compiled into wxWindows only if the wxUSE_ACCESSIBILITY setup
symbol is set to 1.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/access.h"/></includes>
<structs>

Functions return a wxAccStatus error code, which
may be one of the following:

<pre>
typedef enum
{
    wxACC_FAIL,             // The function failed
    wxACC_FALSE,            // The function returned false
    wxACC_OK,               // The function completed successfully
    wxACC_NOT_IMPLEMENTED, // The function is not implemented
    wxACC_NOT_SUPPORTED    // The function is not supported
} wxAccStatus
</pre>

Directions of navigation are represented by
the following:

<pre>
typedef enum
{
    wxNAVDIR_DOWN,
    wxNAVDIR_FIRSTCHILD,
    wxNAVDIR_LASTCHILD,
    wxNAVDIR_LEFT,
    wxNAVDIR_NEXT,
    wxNAVDIR_PREVIOUS,
    wxNAVDIR_RIGHT,
    wxNAVDIR_UP
} wxNavDir
</pre>

The role of a user interface element is represented
by the following type:

<pre>
typedef enum {  
    wxROLE_NONE,
    wxROLE_SYSTEM_ALERT,
    wxROLE_SYSTEM_ANIMATION,
    wxROLE_SYSTEM_APPLICATION,
    wxROLE_SYSTEM_BORDER,
    wxROLE_SYSTEM_BUTTONDROPDOWN,
    wxROLE_SYSTEM_BUTTONDROPDOWNGRID,
    wxROLE_SYSTEM_BUTTONMENU,
    wxROLE_SYSTEM_CARET,
    wxROLE_SYSTEM_CELL,
    wxROLE_SYSTEM_CHARACTER,
    wxROLE_SYSTEM_CHART,
    wxROLE_SYSTEM_CHECKBUTTON,
    wxROLE_SYSTEM_CLIENT,
    wxROLE_SYSTEM_CLOCK,
    wxROLE_SYSTEM_COLUMN,
    wxROLE_SYSTEM_COLUMNHEADER,
    wxROLE_SYSTEM_COMBOBOX,
    wxROLE_SYSTEM_CURSOR,
    wxROLE_SYSTEM_DIAGRAM,
    wxROLE_SYSTEM_DIAL,
    wxROLE_SYSTEM_DIALOG,
    wxROLE_SYSTEM_DOCUMENT,
    wxROLE_SYSTEM_DROPLIST,
    wxROLE_SYSTEM_EQUATION,
    wxROLE_SYSTEM_GRAPHIC,
    wxROLE_SYSTEM_GRIP,
    wxROLE_SYSTEM_GROUPING,
    wxROLE_SYSTEM_HELPBALLOON,
    wxROLE_SYSTEM_HOTKEYFIELD,
    wxROLE_SYSTEM_INDICATOR,
    wxROLE_SYSTEM_LINK,
    wxROLE_SYSTEM_LIST,
    wxROLE_SYSTEM_LISTITEM,
    wxROLE_SYSTEM_MENUBAR,
    wxROLE_SYSTEM_MENUITEM,
    wxROLE_SYSTEM_MENUPOPUP,
    wxROLE_SYSTEM_OUTLINE,
    wxROLE_SYSTEM_OUTLINEITEM,
    wxROLE_SYSTEM_PAGETAB,
    wxROLE_SYSTEM_PAGETABLIST,
    wxROLE_SYSTEM_PANE,
    wxROLE_SYSTEM_PROGRESSBAR,
    wxROLE_SYSTEM_PROPERTYPAGE,
    wxROLE_SYSTEM_PUSHBUTTON,
    wxROLE_SYSTEM_RADIOBUTTON,
    wxROLE_SYSTEM_ROW,
    wxROLE_SYSTEM_ROWHEADER,
    wxROLE_SYSTEM_SCROLLBAR,
    wxROLE_SYSTEM_SEPARATOR,
    wxROLE_SYSTEM_SLIDER,
    wxROLE_SYSTEM_SOUND,
    wxROLE_SYSTEM_SPINBUTTON,
    wxROLE_SYSTEM_STATICTEXT,
    wxROLE_SYSTEM_STATUSBAR,
    wxROLE_SYSTEM_TABLE,
    wxROLE_SYSTEM_TEXT,
    wxROLE_SYSTEM_TITLEBAR,
    wxROLE_SYSTEM_TOOLBAR,
    wxROLE_SYSTEM_TOOLTIP,
    wxROLE_SYSTEM_WHITESPACE,
    wxROLE_SYSTEM_WINDOW
} wxAccRole
</pre>

Objects are represented by the following type:

<pre>
typedef enum {
    wxOBJID_WINDOW =    0x00000000,
    wxOBJID_SYSMENU =   0xFFFFFFFF,
    wxOBJID_TITLEBAR =  0xFFFFFFFE,
    wxOBJID_MENU =      0xFFFFFFFD,
    wxOBJID_CLIENT =    0xFFFFFFFC,
    wxOBJID_VSCROLL =   0xFFFFFFFB,
    wxOBJID_HSCROLL =   0xFFFFFFFA,
    wxOBJID_SIZEGRIP =  0xFFFFFFF9,
    wxOBJID_CARET =     0xFFFFFFF8,
    wxOBJID_CURSOR =    0xFFFFFFF7,
    wxOBJID_ALERT =     0xFFFFFFF6,
    wxOBJID_SOUND =     0xFFFFFFF5
} wxAccObject
</pre>

Selection actions are identified by
this type:

<pre>
typedef enum
{
    wxACC_SEL_NONE            = 0,
    wxACC_SEL_TAKEFOCUS       = 1,
    wxACC_SEL_TAKESELECTION   = 2,
    wxACC_SEL_EXTENDSELECTION = 4,
    wxACC_SEL_ADDSELECTION    = 8,
    wxACC_SEL_REMOVESELECTION = 16
} wxAccSelectionFlags
</pre>

States are represented by the following:

<pre>
#define wxACC_STATE_SYSTEM_ALERT_HIGH       0x00000001
#define wxACC_STATE_SYSTEM_ALERT_MEDIUM     0x00000002
#define wxACC_STATE_SYSTEM_ALERT_LOW        0x00000004
#define wxACC_STATE_SYSTEM_ANIMATED         0x00000008
#define wxACC_STATE_SYSTEM_BUSY             0x00000010
#define wxACC_STATE_SYSTEM_CHECKED          0x00000020
#define wxACC_STATE_SYSTEM_COLLAPSED        0x00000040
#define wxACC_STATE_SYSTEM_DEFAULT          0x00000080
#define wxACC_STATE_SYSTEM_EXPANDED         0x00000100
#define wxACC_STATE_SYSTEM_EXTSELECTABLE    0x00000200
#define wxACC_STATE_SYSTEM_FLOATING         0x00000400
#define wxACC_STATE_SYSTEM_FOCUSABLE        0x00000800
#define wxACC_STATE_SYSTEM_FOCUSED          0x00001000
#define wxACC_STATE_SYSTEM_HOTTRACKED       0x00002000
#define wxACC_STATE_SYSTEM_INVISIBLE        0x00004000
#define wxACC_STATE_SYSTEM_MARQUEED         0x00008000
#define wxACC_STATE_SYSTEM_MIXED            0x00010000
#define wxACC_STATE_SYSTEM_MULTISELECTABLE  0x00020000
#define wxACC_STATE_SYSTEM_OFFSCREEN        0x00040000
#define wxACC_STATE_SYSTEM_PRESSED          0x00080000
#define wxACC_STATE_SYSTEM_PROTECTED        0x00100000
#define wxACC_STATE_SYSTEM_READONLY         0x00200000
#define wxACC_STATE_SYSTEM_SELECTABLE       0x00400000
#define wxACC_STATE_SYSTEM_SELECTED         0x00800000
#define wxACC_STATE_SYSTEM_SELFVOICING      0x01000000
#define wxACC_STATE_SYSTEM_UNAVAILABLE      0x02000000
</pre>

Event identifiers that can be sent via <ref target="wxaccessiblenotifyevent">wxAccessible::NotifyEvent</ref> are
as follows:

<pre>
#define wxACC_EVENT_SYSTEM_SOUND              0x0001
#define wxACC_EVENT_SYSTEM_ALERT              0x0002
#define wxACC_EVENT_SYSTEM_FOREGROUND         0x0003
#define wxACC_EVENT_SYSTEM_MENUSTART          0x0004
#define wxACC_EVENT_SYSTEM_MENUEND            0x0005
#define wxACC_EVENT_SYSTEM_MENUPOPUPSTART     0x0006
#define wxACC_EVENT_SYSTEM_MENUPOPUPEND       0x0007
#define wxACC_EVENT_SYSTEM_CAPTURESTART       0x0008
#define wxACC_EVENT_SYSTEM_CAPTUREEND         0x0009
#define wxACC_EVENT_SYSTEM_MOVESIZESTART      0x000A
#define wxACC_EVENT_SYSTEM_MOVESIZEEND        0x000B
#define wxACC_EVENT_SYSTEM_CONTEXTHELPSTART   0x000C
#define wxACC_EVENT_SYSTEM_CONTEXTHELPEND     0x000D
#define wxACC_EVENT_SYSTEM_DRAGDROPSTART      0x000E
#define wxACC_EVENT_SYSTEM_DRAGDROPEND        0x000F
#define wxACC_EVENT_SYSTEM_DIALOGSTART        0x0010
#define wxACC_EVENT_SYSTEM_DIALOGEND          0x0011
#define wxACC_EVENT_SYSTEM_SCROLLINGSTART     0x0012
#define wxACC_EVENT_SYSTEM_SCROLLINGEND       0x0013
#define wxACC_EVENT_SYSTEM_SWITCHSTART        0x0014
#define wxACC_EVENT_SYSTEM_SWITCHEND          0x0015
#define wxACC_EVENT_SYSTEM_MINIMIZESTART      0x0016
#define wxACC_EVENT_SYSTEM_MINIMIZEEND        0x0017
#define wxACC_EVENT_OBJECT_CREATE                 0x8000
#define wxACC_EVENT_OBJECT_DESTROY                0x8001
#define wxACC_EVENT_OBJECT_SHOW                   0x8002
#define wxACC_EVENT_OBJECT_HIDE                   0x8003
#define wxACC_EVENT_OBJECT_REORDER                0x8004
#define wxACC_EVENT_OBJECT_FOCUS                  0x8005
#define wxACC_EVENT_OBJECT_SELECTION              0x8006
#define wxACC_EVENT_OBJECT_SELECTIONADD           0x8007
#define wxACC_EVENT_OBJECT_SELECTIONREMOVE        0x8008
#define wxACC_EVENT_OBJECT_SELECTIONWITHIN        0x8009
#define wxACC_EVENT_OBJECT_STATECHANGE            0x800A
#define wxACC_EVENT_OBJECT_LOCATIONCHANGE         0x800B
#define wxACC_EVENT_OBJECT_NAMECHANGE             0x800C
#define wxACC_EVENT_OBJECT_DESCRIPTIONCHANGE      0x800D
#define wxACC_EVENT_OBJECT_VALUECHANGE            0x800E
#define wxACC_EVENT_OBJECT_PARENTCHANGE           0x800F
#define wxACC_EVENT_OBJECT_HELPCHANGE             0x8010
#define wxACC_EVENT_OBJECT_DEFACTIONCHANGE        0x8011
#define wxACC_EVENT_OBJECT_ACCELERATORCHANGE      0x8012
</pre>

</structs>
<members>
<member class="wxAccessible" name="wxAccessible"><function type="" name="wxAccessible"><parameters><parameter type="wxWindow&#42; " name="win" value="NULL"></parameter></parameters><description>

Constructor, taking an optional window. The object can be associated with
a window later.

</description></function></member>
<member class="wxAccessible" name="~wxAccessible"><function type="" name="~wxAccessible"><description>

Destructor.

</description></function></member>
<member class="wxAccessible" name="DoDefaultAction"><function type="virtual wxAccStatus" name="DoDefaultAction"><parameters><parameter type="int " name="childId"></parameter></parameters><description>

Performs the default action for the object. <i> childId</i> is 0 (the action for this object)
or greater than 0 (the action for a child). Return wxACC_NOT_SUPPORTED if there
is no default action for this window (e.g. an edit control).

</description></function></member>
<member class="wxAccessible" name="GetChild"><function type="virtual wxAccStatus" name="GetChild"><parameters><parameter type="int " name="childId"></parameter><parameter type="wxAccessible&#42;&#42; " name="child"></parameter></parameters><description>

Gets the specified child (starting from 1). If <i> child</i> is NULL and the return value is wxACC_OK,
this means that the child is a simple element and not an accessible object.

</description></function></member>
<member class="wxAccessible" name="GetChildCount"><function type="virtual wxAccStatus" name="GetChildCount"><parameters><parameter type="int&#42; " name="childCount"></parameter></parameters><description>

Returns the number of children in <i> childCount</i>.

</description></function></member>
<member class="wxAccessible" name="GetDefaultAction"><function type="virtual wxAccStatus" name="GetDefaultAction"><parameters><parameter type="int " name="childId"></parameter><parameter type="wxString&#42; " name="actionName"></parameter></parameters><description>

Gets the default action for this object (0) or a child (greater than 0).
Return wxACC_OK even if there is no action. <i> actionName</i> is the action, or the empty
string if there is no action. The retrieved string describes the action that is performed on an object,
not what the object does as a result. For example, a toolbar button that prints
a document has a default action of &quot;Press&quot; rather than &quot;Prints the current document.&quot;

</description></function></member>
<member class="wxAccessible" name="GetDescription"><function type="virtual wxAccStatus" name="GetDescription"><parameters><parameter type="int " name="childId"></parameter><parameter type="wxString&#42; " name="description"></parameter></parameters><description>

Returns the description for this object or a child.

</description></function></member>
<member class="wxAccessible" name="GetFocus"><function type="virtual wxAccStatus" name="GetFocus"><parameters><parameter type="int&#42; " name="childId"></parameter><parameter type="wxAccessible&#42;&#42; " name="child"></parameter></parameters><description>

Gets the window with the keyboard focus. If childId is 0 and child is NULL, no object in
this subhierarchy has the focus. If this object has the focus, child should be 'this'.

</description></function></member>
<member class="wxAccessible" name="GetHelpText"><function type="virtual wxAccStatus" name="GetHelpText"><parameters><parameter type="int " name="childId"></parameter><parameter type="wxString&#42; " name="helpText"></parameter></parameters><description>

Returns help text for this object or a child, similar to tooltip text.

</description></function></member>
<member class="wxAccessible" name="GetKeyboardShortcut"><function type="virtual wxAccStatus" name="GetKeyboardShortcut"><parameters><parameter type="int " name="childId"></parameter><parameter type="wxString&#42; " name="shortcut"></parameter></parameters><description>

Returns the keyboard shortcut for this object or child.
Return e.g. ALT+K.

</description></function></member>
<member class="wxAccessible" name="GetLocation"><function type="virtual wxAccStatus" name="GetLocation"><parameters><parameter type="wxRect&amp; " name="rect"></parameter><parameter type="int " name="elementId"></parameter></parameters><description>

Returns the rectangle for this object (id is 0) or a child element (id is greater than 0).
<i> rect</i> is in screen coordinates.

</description></function></member>
<member class="wxAccessible" name="GetName"><function type="virtual wxAccStatus" name="GetName"><parameters><parameter type="int " name="childId"></parameter><parameter type="wxString&#42; " name="name"></parameter></parameters><description>

Gets the name of the specified object.

</description></function></member>
<member class="wxAccessible" name="GetParent"><function type="virtual wxAccStatus" name="GetParent"><parameters><parameter type="wxAccessible&#42;&#42; " name="parent"></parameter></parameters><description>

Returns the parent of this object, or NULL.

</description></function></member>
<member class="wxAccessible" name="GetRole"><function type="virtual wxAccStatus" name="GetRole"><parameters><parameter type="int " name="childId"></parameter><parameter type="wxAccRole&#42; " name="role"></parameter></parameters><description>

Returns a role constant describing this object. See <ref target="wxaccessible">wxAccessible</ref> for a list
of these roles.

</description></function></member>
<member class="wxAccessible" name="GetSelections"><function type="virtual wxAccStatus" name="GetSelections"><parameters><parameter type="wxVariant&#42; " name="selections"></parameter></parameters><description>

Gets a variant representing the selected children
of this object.

Acceptable values are:

<ul><li>  a null variant (IsNull() returns TRUE)
</li>
<li>  a list variant (GetType() == wxT(&quot;list&quot;))
</li>
<li>  an integer representing the selected child element,
or 0 if this object is selected (GetType() == wxT(&quot;long&quot;))
</li>
<li> a &quot;void&#42;&quot; pointer to a wxAccessible child object
</li></ul>

</description></function></member>
<member class="wxAccessible" name="GetState"><function type="virtual wxAccStatus" name="GetState"><parameters><parameter type="int " name="childId"></parameter><parameter type="long&#42; " name="state"></parameter></parameters><description>

Returns a state constant. See <ref target="wxaccessible">wxAccessible</ref> for a list
of these states.

</description></function></member>
<member class="wxAccessible" name="GetValue"><function type="virtual wxAccStatus" name="GetValue"><parameters><parameter type="int " name="childId"></parameter><parameter type="wxString&#42; " name="strValue"></parameter></parameters><description>

Returns a localized string representing the value for the object
or child.

</description></function></member>
<member class="wxAccessible" name="GetWindow"><function type="wxWindow&#42;" name="GetWindow"><description>

Returns the window associated with this object.

</description></function></member>
<member class="wxAccessible" name="HitTest"><function type="virtual wxAccStatus" name="HitTest"><parameters><parameter type="const wxPoint&amp; " name="pt"></parameter><parameter type="int&#42; " name="childId"></parameter><parameter type="wxAccessible&#42;&#42; " name="childObject"></parameter></parameters><description>

Returns a status value and object id to indicate whether the given point was on this or
a child object. Can return either a child object, or an integer
representing the child element, starting from 1.

<i> pt</i> is in screen coordinates.

</description></function></member>
<member class="wxAccessible" name="Navigate"><function type="virtual wxAccStatus" name="Navigate"><parameters><parameter type="wxNavDir " name="navDir"></parameter><parameter type="int " name="fromId"></parameter><parameter type="int&#42; " name="toId"></parameter><parameter type="wxAccessible&#42;&#42; " name="toObject"></parameter></parameters><description>

Navigates from <i> fromId</i> to <i> toId</i>/<i> toObject</i>.

</description></function></member>
<member class="wxAccessible" name="NotifyEvent"><function type="virtual static void" name="NotifyEvent"><parameters><parameter type="int" name=" eventType"></parameter><parameter type="wxWindow&#42; " name="window"></parameter><parameter type="wxAccObjectt " name="objectType"></parameter><parameter type="int " name="objectType"></parameter></parameters><description>

Allows the application to send an event when something changes in an accessible object.

</description></function></member>
<member class="wxAccessible" name="Select"><function type="virtual wxAccStatus" name="Select"><parameters><parameter type="int " name="childId"></parameter><parameter type="wxAccSelectionFlags " name="selectFlags"></parameter></parameters><description>

Selects the object or child. See <ref target="wxaccessible">wxAccessible</ref> for a list
of the selection actions.

</description></function></member>
<member class="wxAccessible" name="SetWindow"><function type="void" name="SetWindow"><parameters><parameter type="wxWindow&#42; " name="window"></parameter></parameters><description>

Sets the window associated with this object.

</description></function></member></members>
<supported>
</supported>
</class><class name="wxActivateEvent">
<description>
<p class="classdesc">
An activate event is sent when a window or application is being activated
or deactivated.</p>
</description>
<remarks>

A top-level window (a dialog or frame) receives an activate event when is
being activated or deactivated. This is indicated visually by the title
bar changing colour, and a subwindow gaining the keyboard focus.

An application is activated or deactivated when one of its frames becomes activated,
or a frame becomes inactivate resulting in all application frames being inactive. (Windows only)

</remarks>
<parents>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_ACTIVATE(func)">Process a wxEVT_ACTIVATE event.</event><event name="EVT_ACTIVATE_APP(func)">Process a wxEVT_ACTIVATE_APP event.</event></events>
<seealso>

<ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxActivateEvent" name="wxActivateEvent"><function type="" name="wxActivateEvent"><parameters><parameter type="WXTYPE " name="eventType" value="0"></parameter><parameter type="bool" name="active" value="true"></parameter><parameter type="int " name="id" value="0"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxActivateEvent" name="m_active"></member>
<member class="wxActivateEvent" name="GetActive"><function type="bool" name="GetActive" suffix="const"><description>

Returns true if the application or window is being activated, false otherwise.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxApp">
<description>
<p class="classdesc">
The <b> wxApp</b> class represents the application itself. It is used
to:</p><p class="classdesc"><ul><li> set and get application-wide properties;
</li>
<li> implement the windowing system message or event loop;
</li>
<li> initiate application processing via <ref target="wxapponinit">wxApp::OnInit</ref>;
</li>
<li> allow default processing of events not handled by other
objects in the application.
</li></ul></p><p class="classdesc">You should use the macro IMPLEMENT_APP(appClass) in your application implementation
file to tell wxWindows how to create an instance of your application class.</p><p class="classdesc">Use DECLARE_APP(appClass) in a header file if you want the wxGetApp function (which returns
a reference to your application object) to be visible to other files.</p>
</description>
<parents>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/app.h"/></includes>
<seealso>

<ref target="wxappoverview">wxApp overview</ref>

</seealso>
<members>
<member class="wxApp" name="wxApp"><function type="void" name="wxApp"><description>

Constructor. Called implicitly with a definition of a wxApp object.

</description></function></member>
<member class="wxApp" name="~wxApp"><function type="void" name="~wxApp"><description>

Destructor. Will be called implicitly on program exit if the wxApp
object is created on the stack.

</description></function></member>
<member class="wxApp" name="argc"></member>
<member class="wxApp" name="argv"></member>
<member class="wxApp" name="CreateLogTarget"><function type="virtual wxLog&#42;" name="CreateLogTarget"><seealso>

<ref target="wxlog">wxLog</ref>

</seealso><description>

Creates a wxLog class for the application to use for logging errors. The default
implementation returns a new wxLogGui class.

</description></function></member>
<member class="wxApp" name="Dispatch"><function type="void" name="Dispatch"><seealso>

<ref target="wxapppending">wxApp::Pending</ref>

</seealso><description>

Dispatches the next event in the windowing system event queue.

This can be used for programming event loops, e.g.

<pre>
  while (app.Pending())
    Dispatch();
</pre>

</description></function></member>
<member class="wxApp" name="FilterEvent"><function type="int" name="FilterEvent"><parameters><parameter type="wxEvent&amp; " name="event"></parameter></parameters><description>

This function is called before processing any event and allows the application
to preempt the processing of some events. If this method returns $-1$ the event
is processed normally, otherwise either <tt> true</tt> or <tt> false</tt> should be
returned and the event processing stops immediately considering that the event
had been already processed (for the former return value) or that it is not
going to be processed at all (for the latter one).

</description></function></member>
<member class="wxApp" name="GetAppName"><function type="wxString" name="GetAppName" suffix="const"><remarks>

wxWindows sets this to a reasonable default before
calling <ref target="wxapponinit">wxApp::OnInit</ref>, but the application can reset it at will.

</remarks><description>

Returns the application name.

</description></function></member>
<member class="wxApp" name="GetAuto3D"><function type="bool" name="GetAuto3D" suffix="const"><seealso>

<ref target="wxappsetauto3d">wxApp::SetAuto3D</ref>

</seealso><description>

Returns true if 3D control mode is on, false otherwise.

</description></function></member>
<member class="wxApp" name="GetClassName"><function type="wxString" name="GetClassName" suffix="const"><seealso>

<ref target="wxappsetclassname">wxApp::SetClassName</ref>

</seealso><description>

Gets the class name of the application. The class name may be used in a platform specific
manner to refer to the application.

</description></function></member>
<member class="wxApp" name="GetExitOnFrameDelete"><function type="bool" name="GetExitOnFrameDelete" suffix="const"><seealso>

<ref target="wxappsetexitonframedelete">wxApp::SetExitOnFrameDelete</ref>,<br/>
<ref target="wxappshutdownoverview">wxApp shutdown overview</ref>

</seealso><description>

Returns true if the application will exit when the top-level window is deleted, false
otherwise.

</description></function></member>
<member class="wxApp" name="GetTopWindow"><function type="virtual wxWindow &#42;" name="GetTopWindow" suffix="const"><seealso>

<ref target="wxappsettopwindow">SetTopWindow</ref>

</seealso><remarks>

If the top window hasn't been set using <ref target="wxappsettopwindow">wxApp::SetTopWindow</ref>, this
function will find the first top-level window (frame or dialog) and return that.

</remarks><description>

Returns a pointer to the top window.

</description></function></member>
<member class="wxApp" name="GetUseBestVisual"><function type="bool" name="GetUseBestVisual" suffix="const"><seealso>

<ref target="wxappsetusebestvisual">SetUseBestVisual</ref>

</seealso><description>

Returns true if the application will use the best visual on systems that support
different visuals, false otherwise.

</description></function></member>
<member class="wxApp" name="GetVendorName"><function type="wxString" name="GetVendorName" suffix="const"><description>

Returns the application's vendor name.

</description></function></member>
<member class="wxApp" name="ExitMainLoop"><function type="void" name="ExitMainLoop"><description>

Call this to explicitly exit the main message (event) loop.
You should normally exit the main loop (and the application) by deleting
the top window.

</description></function></member>
<member class="wxApp" name="Initialized"><function type="bool" name="Initialized"><description>

Returns true if the application has been initialized (i.e. if
<ref target="wxapponinit">wxApp::OnInit</ref> has returned successfully).  This can be useful for error
message routines to determine which method of output is best for the
current state of the program (some windowing systems may not like
dialogs to pop up before the main loop has been entered).

</description></function></member>
<member class="wxApp" name="MainLoop"><function type="int" name="MainLoop"><returnvalue>

Returns 0 under X, and the wParam of the WM_QUIT message under Windows.


</returnvalue><description>

Called by wxWindows on creation of the application. Override this if you wish
to provide your own (environment-dependent) main loop.

</description></function></member>
<member class="wxApp" name="OnAssert"><function type="void" name="OnAssert"><parameters><parameter type="const wxChar " name="&#42;file"></parameter><parameter type="int " name="line">the line number in this file where the assert occured</parameter><parameter type="const wxChar " name="&#42;cond"></parameter><parameter type="const wxChar " name="&#42;msg"></parameter></parameters><description>

This function is called when an assert failure occurs, i.e. the condition
specified in <ref target="wxassert">wxASSERT</ref> macro evaluated to <tt> false</tt>.
It is only called in debug mode (when <tt> __WXDEBUG__</tt> is defined) as
asserts are not left in the release code at all.

The base class version show the default assert failure dialog box proposing to
the user to stop the program, continue or ignore all subsequent asserts.











</description></function></member>
<member class="wxApp" name="OnExit"><function type="int" name="OnExit"><description>

Provide this member function for any processing which needs to be
done as the application is about to exit. OnExit is called after
destroying all application windows and controls, but before
wxWindows cleanup.

</description></function></member>
<member class="wxApp" name="OnCmdLineError"><function type="bool" name="OnCmdLineError"><parameters><parameter type="wxCmdLineParser&amp; " name="parser"></parameter></parameters><seealso>

<ref target="wxapponinitcmdline">OnInitCmdLine</ref>

</seealso><description>

Called when command line parsing fails (i.e. an incorrect command line option
was specified by the user). The default behaviour is to show the program usage
text and abort the program.

Return <tt> true</tt> to continue normal execution or <tt> false</tt> to return 
<tt> false</tt> from <ref target="wxapponinit">OnInit</ref> thus terminating the program.

</description></function></member>
<member class="wxApp" name="OnCmdLineHelp"><function type="bool" name="OnCmdLineHelp"><parameters><parameter type="wxCmdLineParser&amp; " name="parser"></parameter></parameters><seealso>

<ref target="wxapponinitcmdline">OnInitCmdLine</ref>

</seealso><description>

Called when the help option (<tt> --help</tt>) was specified on the command line.
The default behaviour is to show the program usage text and abort the program.

Return <tt> true</tt> to continue normal execution or <tt> false</tt> to return 
<tt> false</tt> from <ref target="wxapponinit">OnInit</ref> thus terminating the program.

</description></function></member>
<member class="wxApp" name="OnCmdLineParsed"><function type="bool" name="OnCmdLineParsed"><parameters><parameter type="wxCmdLineParser&amp; " name="parser"></parameter></parameters><seealso>

<ref target="wxapponinitcmdline">OnInitCmdLine</ref>

</seealso><description>

Called after the command line had been successfully parsed. You may override
this method to test for the values of the various parameters which could be
set from the command line.

Don't forget to call the base class version unless you want to suppress
processing of the standard command line options.

Return <tt> true</tt> to continue normal execution or <tt> false</tt> to return 
<tt> false</tt> from <ref target="wxapponinit">OnInit</ref> thus terminating the program.

</description></function></member>
<member class="wxApp" name="OnFatalException"><function type="void" name="OnFatalException"><seealso>

<ref target="wxhandlefatalexceptions">wxHandleFatalExcetions</ref>


</seealso><description>

This function may be called if something fatal happens: an unhandled
exception under Win32 or a a fatal signal under Unix, for example. However,
this will not happen by default: you have to explicitly call 
<ref target="wxhandlefatalexceptions">wxHandleFatalExceptions</ref> to enable this.

Generally speaking, this function should only show a message to the user and
return. You may attempt to save unsaved data but this is not guaranteed to
work and, in fact, probably won't.

</description></function></member>
<member class="wxApp" name="OnInit"><function type="bool" name="OnInit"><description>

This must be provided by the application, and will usually create the
application's main window, optionally calling 
<ref target="wxappsettopwindow">wxApp::SetTopWindow</ref>.

Notice that if you want to to use the command line processing provided by
wxWindows you have to call the base class version in the derived class
OnInit().

Return true to continue processing, false to exit the application.

</description></function></member>
<member class="wxApp" name="OnInitCmdLine"><function type="void" name="OnInitCmdLine"><parameters><parameter type="wxCmdLineParser&amp; " name="parser"></parameter></parameters><description>

Called from <ref target="wxapponinit">OnInit</ref> and may be used to initialize the
parser with the command line options for this application. The base class
versions adds support for a few standard options only.

</description></function></member>
<member class="wxApp" name="OnQueryEndSession"><function type="void" name="OnQueryEndSession"><parameters><parameter type="wxCloseEvent&amp; " name="event"></parameter></parameters><seealso>

<ref target="wxwindowclose">wxWindow::Close</ref>,
<ref target="wxcloseevent">wxCloseEvent</ref>

</seealso><remarks>

Under X, OnQueryEndSession is called in response to the `save session' event.

Under Windows, OnQueryEndSession is called in response to the WM_QUERYENDSESSION message.

</remarks><description>

This is an event handler function called when the operating system or GUI session is
about to close down. Typically, an application will try to save unsaved documents
at this point.

If <ref target="wxcloseeventcanveto">wxCloseEvent::CanVeto</ref> returns true, the application
is allowed to veto the shutdown by calling <ref target="wxcloseeventveto">wxCloseEvent::Veto</ref>.
The application might veto the shutdown after prompting for documents to be saved, and the
user has cancelled the save.

Use the EVT_QUERY_END_SESSION event table macro to handle query end session events.

You should check whether the application is forcing the deletion of the window
using <ref target="wxcloseeventgetforce">wxCloseEvent::GetForce</ref>. If this is true,
destroy the window using <ref target="wxwindowdestroy">wxWindow::Destroy</ref>.
If not, it is up to you whether you respond by destroying the window.

The default handler calls <ref target="wxwindowclose">wxWindow::Close</ref> on the top-level window,
and vetoes the shutdown if Close returns false. This will be sufficient for many applications.

</description></function></member>
<member class="wxApp" name="ProcessMessage"><function type="bool" name="ProcessMessage"><parameters><parameter type="WXMSG &#42;" name="msg"></parameter></parameters><description>

Windows-only function for processing a message. This function
is called from the main message loop, checking for windows that
may wish to process it. The function returns true if the message
was processed, false otherwise. If you use wxWindows with another class
library with its own message loop, you should make sure that this
function is called to allow wxWindows to receive messages. For example,
to allow co-existence with the Microsoft Foundation Classes, override
the PreTranslateMessage function:

<pre>
// Provide wxWindows message loop compatibility
BOOL CTheApp::PreTranslateMessage(MSG &#42;msg)
{
  if (wxTheApp &amp;&amp; wxTheApp-&gt;ProcessMessage((WXMSW &#42;)msg))
    return true;
  else
    return CWinApp::PreTranslateMessage(msg);
}
</pre>

</description></function></member>
<member class="wxApp" name="Pending"><function type="bool" name="Pending"><seealso>

<ref target="wxappdispatch">wxApp::Dispatch</ref>

</seealso><description>

Returns true if unprocessed events are in the window system event queue.

</description></function></member>
<member class="wxApp" name="SendIdleEvents"><function type="bool" name="SendIdleEvents"><description>

Sends idle events to all top-level windows.

</description></function>
<function type="bool" name="SendIdleEvents"><parameters><parameter type="wxWindow&#42;" name=" win"></parameter></parameters><seealso>

<ref target="wxidleevent">wxIdleEvent</ref>

</seealso><remarks>

These functions poll the top-level windows, and their children, for idle event processing.
If true is returned, more OnIdle processing is requested by one or more window.

</remarks><description>

Sends idle events to a window and its children.

</description></function></member>
<member class="wxApp" name="SetAppName"><function type="void" name="SetAppName"><parameters><parameter type="const wxString&amp; " name="name"></parameter></parameters><seealso>

<ref target="wxappgetappname">wxApp::GetAppName</ref>

</seealso><description>

Sets the name of the application. The name may be used in dialogs
(for example by the document/view framework). A default name is set by
wxWindows.

</description></function></member>
<member class="wxApp" name="SetAuto3D"><function type="void" name="SetAuto3D"><parameters><parameter type="const bool" name=" auto3D"></parameter></parameters><seealso>

<ref target="wxappgetauto3d">wxApp::GetAuto3D</ref>

</seealso><remarks>

This has an effect on Windows only.

</remarks><description>

Switches automatic 3D controls on or off.





</description></function></member>
<member class="wxApp" name="SetClassName"><function type="void" name="SetClassName"><parameters><parameter type="const wxString&amp; " name="name"></parameter></parameters><seealso>

<ref target="wxappgetclassname">wxApp::GetClassName</ref>

</seealso><description>

Sets the class name of the application. This may be used in a platform specific
manner to refer to the application.

</description></function></member>
<member class="wxApp" name="SetExitOnFrameDelete"><function type="void" name="SetExitOnFrameDelete"><parameters><parameter type="bool" name=" flag"></parameter></parameters><seealso>

<ref target="wxappgetexitonframedelete">wxApp::GetExitOnFrameDelete</ref>,<br/>
<ref target="wxappshutdownoverview">wxApp shutdown overview</ref>

</seealso><description>

Allows the programmer to specify whether the application will exit when the
top-level frame is deleted.





</description></function></member>
<member class="wxApp" name="SetTopWindow"><function type="void" name="SetTopWindow"><parameters><parameter type="wxWindow&#42; " name="window">The new top window.</parameter></parameters><seealso>

<ref target="wxappgettopwindow">wxApp::GetTopWindow</ref><ref target="wxapponinit">wxApp::OnInit</ref>


</seealso><description></description></function></member>
<member class="wxApp" name="SetVendorName"><function type="void" name="SetVendorName"><parameters><parameter type="const wxString&amp; " name="name"></parameter></parameters><seealso>

<ref target="wxappgetvendorname">wxApp::GetVendorName</ref>

</seealso><description>

Sets the name of application's vendor. The name will be used
in registry access. A default name is set by
wxWindows.

</description></function></member>
<member class="wxApp" name="SetUseBestVisual"><function type="void" name="SetUseBestVisual"><parameters><parameter type="bool" name=" flag"></parameter></parameters><description>

Allows the programmer to specify whether the application will use the best visual
on systems that support several visual on the same display. This is typically the
case under Solaris and IRIX, where the default visual is only 8-bit whereas certain
applications are supposed to run in TrueColour mode.

Note that this function has to be called in the constructor of the <tt> wxApp</tt> 
instance and won't have any effect when called later on.

This function currently only has effect under GTK.





</description></function></member>
<member class="wxApp" name="Yield"><function type="bool" name="Yield"><parameters><parameter type="bool" name="onlyIfNeeded" value="false"></parameter></parameters><description>

Yields control to pending messages in the windowing system. This can be useful, for example, when a
time-consuming process writes to a text window. Without an occasional
yield, the text window will not be updated properly, and on systems with
cooperative multitasking, such as Windows 3.1 other processes will not respond.

Caution should be exercised, however, since yielding may allow the
user to perform actions which are not compatible with the current task.
Disabling menu items or whole menus during processing can avoid unwanted
reentrance of code: see <ref target="wxsafeyield">::wxSafeYield</ref> for a better
function.

Note that Yield() will not flush the message logs. This is intentional as
calling Yield() is usually done to quickly update the screen and popping up a
message box dialog may be undesirable. If you do wish to flush the log
messages immediately (otherwise it will be done during the next idle loop
iteration), call <ref target="wxlogflushactive">wxLog::FlushActive</ref>.

Calling Yield() recursively is normally an error and an assert failure is
raised in debug build if such situation is detected. However if the the 
<i> onlyIfNeeded</i> parameter is <tt> true</tt>, the method will just silently
return <tt> false</tt> instead.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxArray">
<description>
<p class="classdesc">
This section describes the so called <i> dynamic arrays</i>. This is a C
array-like data structure i.e. the member access time is constant (and not
linear according to the number of container elements as for linked lists). However, these
arrays are dynamic in the sense that they will automatically allocate more
memory if there is not enough of it for adding a new element. They also perform
range checking on the index values but in debug mode only, so please be sure to
compile your application in debug mode to use it (see <ref target="debuggingoverview">debugging overview</ref> for
details). So, unlike the arrays in some other
languages, attempt to access an element beyond the arrays bound doesn't
automatically expand the array but provokes an assertion failure instead in
debug build and does nothing (except possibly crashing your program) in the
release build.</p><p class="classdesc">The array classes were designed to be reasonably efficient, both in terms of
run-time speed and memory consumption and the executable size. The speed of
array item access is, of course, constant (independent of the number of elements)
making them much more efficient than linked lists (<ref target="wxlist">wxList</ref>).
Adding items to the arrays is also implemented in more or less constant time -
but the price is preallocating the memory in advance. In the <ref target="wxarraymemorymanagement">memory management</ref> section
you may find some useful hints about optimizing wxArray memory usage. As for executable size, all
wxArray functions are inline, so they do not take <i> any space at all</i>.</p><p class="classdesc">wxWindows has three different kinds of array. All of them derive from
wxBaseArray class which works with untyped data and can not be used directly.
The standard macros WX_DEFINE_ARRAY(), WX_DEFINE_SORTED_ARRAY() and
WX_DEFINE_OBJARRAY() are used to define a new class deriving from it. The
classes declared will be called in this documentation wxArray, wxSortedArray and
wxObjArray but you should keep in mind that no classes with such names actually
exist, each time you use one of WX_DEFINE_XXXARRAY macro you define a class
with a new name. In fact, these names are &quot;template&quot; names and each usage of one
of the macros mentioned above creates a template specialization for the given
element type.</p><p class="classdesc">wxArray is suitable for storing integer types and pointers which it does not
treat as objects in any way, i.e. the element pointed to by the pointer is not
deleted when the element is removed from the array. It should be noted that
all of wxArray's functions are inline, so it costs strictly nothing to define as
many array types as you want (either in terms of the executable size or the
speed) as long as at least one of them is defined and this is always the case
because wxArrays are used by wxWindows internally. This class has one serious
limitation: it can only be used for storing integral types (bool, char, short,
int, long and their unsigned variants) or pointers (of any kind). An attempt
to use with objects of sizeof() greater than sizeof(long) will provoke a
runtime assertion failure, however declaring a wxArray of floats will not (on
the machines where sizeof(float) &lt;= sizeof(long)), yet it will <b> not</b> work,
please use wxObjArray for storing floats and doubles (NB: a more efficient
wxArrayDouble class is scheduled for the next release of wxWindows).</p><p class="classdesc">wxSortedArray is a wxArray variant which should be used when searching in the
array is a frequently used operation. It requires you to define an additional
function for comparing two elements of the array element type and always stores
its items in the sorted order (according to this function). Thus, it is 
 <ref target="wxarrayindex">Index()</ref> function execution time is $O(log(N))$ instead of
$O(N)$ for the usual arrays but the <ref target="wxarrayadd">Add()</ref> method is
slower: it is $O(log(N))$ instead of constant time (neglecting time spent in
memory allocation routine). However, in a usual situation elements are added to
an array much less often than searched inside it, so wxSortedArray may lead to
huge performance improvements compared to wxArray. Finally, it should be
noticed that, as wxArray, wxSortedArray can be only used for storing integral
types or pointers.</p><p class="classdesc">wxObjArray class treats its elements like &quot;objects&quot;. It may delete them when
they are removed from the array (invoking the correct destructor) and copies
them using the objects copy constructor. In order to implement this behaviour
the definition of the wxObjArray arrays is split in two parts: first, you should
declare the new wxObjArray class using WX_DECLARE_OBJARRAY() macro and then
you must include the file defining the implementation of template type:
&lt;wx/arrimpl.cpp&gt; and define the array class with WX_DEFINE_OBJARRAY() macro
from a point where the full (as opposed to `forward') declaration of the array
elements class is in scope. As it probably sounds very complicated here is an
example:</p><p class="classdesc"><pre>
#include &lt;wx/dynarray.h&gt;

// we must forward declare the array because it is used inside the class
// declaration
class MyDirectory;
class MyFile;

// this defines two new types: ArrayOfDirectories and ArrayOfFiles which can be
// now used as shown below
WX_DECLARE_OBJARRAY(MyDirectory, ArrayOfDirectories);
WX_DECLARE_OBJARRAY(MyFile,      ArrayOfFiles);

class MyDirectory
{
...
    ArrayOfDirectories m_subdirectories; // all subdirectories
    ArrayOfFiles       m_files;          // all files in this directory
};

...

// now that we have MyDirectory declaration in scope we may finish the
// definition of ArrayOfDirectories -- note that this expands into some C++
// code and so should only be compiled once (i.e., don't put this in the
// header, but into a source file or you will get linking errors)
#include &lt;wx/arrimpl.cpp&gt; // this is a magic incantation which must be done!
WX_DEFINE_OBJARRAY(ArrayOfDirectories);

// that's all!
</pre></p><p class="classdesc">It is not as elegant as writing</p><p class="classdesc"><pre> 
typedef std::vector&lt;MyDirectory&gt; ArrayOfDirectories;
</pre></p><p class="classdesc">but is not that complicated and allows the code to be compiled with any, however
dumb, C++ compiler in the world.</p><p class="classdesc">Things are much simpler for wxArray and wxSortedArray however: it is enough
just to write</p><p class="classdesc"><pre> 
WX_DEFINE_ARRAY(MyDirectory &#42;, ArrayOfDirectories);
WX_DEFINE_SORTED_ARRAY(MyFile &#42;, ArrayOfFiles);
</pre></p>
</description>
<includes>
<header name="wx/dynarray.h" comment="for wxArray and wxSortedArray and additionally &lt;wx/arrimpl.cpp&gt;"/></includes>
<seealso>

<ref target="wxcontaineroverview">Container classes overview</ref><ref target="wxlist">wxList</ref>

</seealso>
<members>
<member class="wxObjArray" name=""></member>
<member class="wxObjArray" name=""></member>
<member class="wxObjArray" name=""></member>
<member class="wxObjArray" name=""></member>
<member class="wxObjArray" name=""></member>
<member class="wxObjArray" name=""></member>
<member class="wxObjArray" name=""></member>
<member class="wxObjArray" name=""></member>
<member class="wxObjArray" name=""></member>
<member class="wxObjArray" name=""></member>
<member class="wxObjArray" name=""></member>
<member class="wxObjArray" name=""></member>
<member class="wxObjArray" name=""></member>
<member class="wxObjArray" name=""></member>
<member class="wxObjArray" name=""></member>
<member class="wxArray" name="~wxArray"><function type="" name="~wxArray"><description>

</description></function>
<function type="" name="~wxSortedArray"><description>

</description></function>
<function type="" name="~wxObjArray"><description>

The wxObjArray destructor deletes all the items owned by the array. This is not
done by wxArray and wxSortedArray versions - you may use 
<ref target="wxcleararray">WX_CLEAR_ARRAY</ref> macro for this.

</description></function></member>
<member class="wxArray" name="Add"><function type="void" name="Add"><parameters><parameter type="T " name="item"></parameter><parameter type="size_t" name="copies" value="1"></parameter></parameters><description>

</description></function>
<function type="void" name="Add"><parameters><parameter type="T &#42;" name="item"></parameter></parameters><description>

</description></function>
<function type="void" name="Add"><parameters><parameter type="T &amp;" name="item"></parameter><parameter type="size_t" name="copies" value="1"></parameter></parameters><description>

Appends the given number of <i> copies</i> of the <i> item</i> to the array
consisting of the elements of type <i> T</i>.

The first version is used with wxArray and wxSortedArray. The second and the
third are used with wxObjArray. There is an important difference between
them: if you give a pointer to the array, it will take ownership of it, i.e.
will delete it when the item is deleted from the array. If you give a reference
to the array, however, the array will make a copy of the item and will not take
ownership of the original item. Once again, it only makes sense for wxObjArrays
because the other array types never take ownership of their elements. Also note
that you cannot append more than one pointer as reusing it would lead to
deleting it twice (or more) and hence to a crash.

You may also use <ref target="wxappendarray">WX_APPEND_ARRAY</ref> macro to append all
elements of one array to another one but it is more efficient to use 
<i> copies</i> parameter and modify the elements in place later if you plan to
append a lot of items.

</description></function></member>
<member class="wxArray" name="Alloc"><function type="void" name="Alloc"><parameters><parameter type="size_t " name="count"></parameter></parameters><description>

Preallocates memory for a given number of array elements. It is worth calling
when the number of items which are going to be added to the array is known in
advance because it will save unneeded memory reallocation. If the array already
has enough memory for the given number of items, nothing happens.

</description></function></member>
<member class="wxArray" name="Clear"><function type="void" name="Clear"><description>

This function does the same as <ref target="wxarrayempty">Empty()</ref> and additionally
frees the memory allocated to the array.

</description></function></member>
<member class="wxArray" name="Count"><function type="size_t" name="Count" suffix="const"><description>

Same as <ref target="wxarraygetcount">GetCount()</ref>. This function is deprecated -
it exists only for compatibility.

</description></function></member>
<member class="wxObjArray" name="Detach"><function type="T &#42;" name="Detach"><parameters><parameter type="size_t " name="index"></parameter></parameters><description>

Removes the element from the array, but, unlike, 
<ref target="wxarrayremove">Remove()</ref> doesn't delete it. The function returns the
pointer to the removed element.

</description></function></member>
<member class="wxArray" name="Empty"><function type="void" name="Empty"><description>

Empties the array. For wxObjArray classes, this destroys all of the array
elements. For wxArray and wxSortedArray this does nothing except marking the
array of being empty - this function does not free the allocated memory, use 
<ref target="wxarrayclear">Clear()</ref> for this.

</description></function></member>
<member class="wxArray" name="GetCount"><function type="size_t" name="GetCount" suffix="const"><description>

Return the number of items in the array.

</description></function></member>
<member class="wxArray" name="Index"><function type="int" name="Index"><parameters><parameter type="T&amp; " name="item"></parameter><parameter type="bool " name="searchFromEnd" value="false"></parameter></parameters><description>

</description></function>
<function type="int" name="Index"><parameters><parameter type="T&amp; " name="item"></parameter></parameters><description>

The first version of the function is for wxArray and wxObjArray, the second is
for wxSortedArray only.

Searches the element in the array, starting from either beginning or the end
depending on the value of <i> searchFromEnd</i> parameter. wxNOT_FOUND is
returned if the element is not found, otherwise the index of the element is
returned.

Linear search is used for the wxArray and wxObjArray classes but binary search
in the sorted array is used for wxSortedArray (this is why searchFromEnd
parameter doesn't make sense for it).

<b> NB:</b> even for wxObjArray classes, the operator==() of the elements in the
array is <b> not</b> used by this function. It searches exactly the given
element in the array and so will only succeed if this element had been
previously added to the array, but fail even if another, identical, element is
in the array.

</description></function></member>
<member class="wxArray" name="Insert"><function type="void" name="Insert"><parameters><parameter type="T " name="item"></parameter><parameter type="size_t " name="n"></parameter><parameter type="size_t " name="copies" value="1"></parameter></parameters><description>

</description></function>
<function type="void" name="Insert"><parameters><parameter type="T &#42;" name="item"></parameter><parameter type="size_t " name="n"></parameter></parameters><description>

</description></function>
<function type="void" name="Insert"><parameters><parameter type="T &amp;" name="item"></parameter><parameter type="size_t " name="n"></parameter><parameter type="size_t " name="copies" value="1"></parameter></parameters><description>

Insert the given number of <i> copies</i> of the <i> item</i> into the array before
the existing item <i> n</i> - thus, <i> Insert(something, 0u)</i> will insert an
item in such way that it will become the first array element.

Please see <ref target="wxarrayadd">Add()</ref> for explanation of the differences
between the overloaded versions of this function.

</description></function></member>
<member class="wxArray" name="IsEmpty"><function type="bool" name="IsEmpty" suffix="const"><description>

Returns true if the array is empty, false otherwise.

</description></function></member>
<member class="wxArray" name="Item"><function type="T&amp;" name="Item" suffix="const"><parameters><parameter type="size_t " name="index"></parameter></parameters><description>

Returns the item at the given position in the array. If <i> index</i> is out of
bounds, an assert failure is raised in the debug builds but nothing special is
done in the release build.

The returned value is of type &quot;reference to the array element type&quot; for all of
the array classes.

</description></function></member>
<member class="wxArray" name="Last"><function type="T&amp;" name="Last" suffix="const"><description>

Returns the last element in the array, i.e. is the same as Item(GetCount() - 1).
An assert failure is raised in the debug mode if the array is empty.

The returned value is of type &quot;reference to the array element type&quot; for all of
the array classes.

</description></function></member>
<member class="wxArray" name="Remove"><function type="void" name="Remove"><parameters><parameter type="T " name="item"></parameter></parameters><description>

Removes an element from the array by value: the first item of the
array equal to <i> item</i> is removed, an assert failure will result from an
attempt to remove an item which doesn't exist in the array.

When an element is removed from wxObjArray it is deleted by the array - use 
<ref target="wxobjarraydetach">Detach()</ref> if you don't want this to happen. On the
other hand, when an object is removed from a wxArray nothing happens - you
should delete it manually if required:

<pre>
T &#42;item = array&#91;n];
delete item;
array.Remove(n)
</pre>

See also <ref target="wxcleararray">WX_CLEAR_ARRAY</ref> macro which deletes all
elements of a wxArray (supposed to contain pointers).

</description></function></member>
<member class="wxArray" name="RemoveAt"><function type="void" name="RemoveAt"><parameters><parameter type="size_t " name="index"></parameter><parameter type="size_t " name="count" value="1"></parameter></parameters><description>

Removes <i> count</i> elements starting at <i> index</i> from the array. When an
element is removed from wxObjArray it is deleted by the array - use
<ref target="wxobjarraydetach">Detach()</ref> if you don't want this to happen. On
the other hand, when an object is removed from a wxArray nothing happens -
you should delete it manually if required:

<pre>
T &#42;item = array&#91;n];
delete item;
array.RemoveAt(n)
</pre>

See also <ref target="wxcleararray">WX_CLEAR_ARRAY</ref> macro which deletes all
elements of a wxArray (supposed to contain pointers).

</description></function></member>
<member class="wxArray" name="SetCount"><function type="void" name="SetCount"><parameters><parameter type="size_t " name="count"></parameter><parameter type="T " name="defval" value="T(0)"></parameter></parameters><seealso>

<ref target="wxarraygetcount">GetCount</ref>

</seealso><description>

This function ensures that the number of array elements is at least 
<i> count</i>. If the array has already <i> count</i> or mroe items, nothing is
done. Otherwise, <tt> count - GetCount()</tt> elements are added and initialized to
the value <i> defval</i>.

</description></function></member>
<member class="wxArray" name="Shrink"><function type="void" name="Shrink"><description>

Frees all memory unused by the array. If the program knows that no new items
will be added to the array it may call Shrink() to reduce its memory usage.
However, if a new item is added to the array, some extra memory will be
allocated again.

</description></function></member>
<member class="wxArray" name="Sort"><function type="void" name="Sort"><parameters><parameter type="CMPFUNC&lt;T&gt; " name="compareFunction"></parameter></parameters><description>

The notation CMPFUNC&lt;T&gt; should be read as if we had the following declaration:

<pre>
template int CMPFUNC(T &#42;first, T &#42;second);
</pre>

where <i> T</i> is the type of the array elements. I.e. it is a function returning 
<i> int</i> which is passed two arguments of type <i> T &#42;</i>.

Sorts the array using the specified compare function: this function should
return a negative, zero or positive value according to whether the first element
passed to it is less than, equal to or greater than the second one.

wxSortedArray doesn't have this function because it is always sorted.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxArrayString">
<description>
<p class="classdesc">
wxArrayString is an efficient container for storing 
<ref target="wxstring">wxString</ref> objects. It has the same features as all 
<ref target="wxarray">wxArray</ref> classes, i.e. it dynamically expands when new items
are added to it (so it is as easy to use as a linked list), but the access
time to the elements is constant, instead of being linear in number of
elements as in the case of linked lists. It is also very size efficient and
doesn't take more space than a C array <i> wxString&#91;]</i> type (wxArrayString
uses its knowledge of internals of wxString class to achieve this).</p><p class="classdesc">This class is used in the same way as other dynamic <ref target="wxarray">arrays</ref>,
except that no <i> WX_DEFINE_ARRAY</i> declaration is needed for it. When a
string is added or inserted in the array, a copy of the string is created, so
the original string may be safely deleted (e.g. if it was a <i> char &#42;</i> 
pointer the memory it was using can be freed immediately after this). In
general, there is no need to worry about string memory deallocation when using
this class - it will always free the memory it uses itself.</p><p class="classdesc">The references returned by <ref target="wxarraystringitem">Item</ref>, 
<ref target="wxarraystringlast">Last</ref> or 
<ref target="wxarraystringoperatorindex">operator&#91;]</ref> are not constant, so the
array elements may be modified in place like this</p><p class="classdesc"><pre>
    array.Last().MakeUpper();
</pre></p><p class="classdesc">There is also a variant of wxArrayString called wxSortedArrayString which has
exactly the same methods as wxArrayString, but which always keeps the string
in it in (alphabetical) order. wxSortedArrayString uses binary search in its 
<ref target="wxarraystringindex">Index</ref> function (instead of linear search for
wxArrayString::Index) which makes it much more efficient if you add strings to
the array rarely (because, of course, you have to pay for Index() efficiency
by having Add() be slower) but search for them often. Several methods should
not be used with sorted array (basically, all which break the order of items)
which is mentioned in their description.</p><p class="classdesc">Final word: none of the methods of wxArrayString is virtual including its
destructor, so this class should not be used as a base class.</p>
</description>
<note>
Although this is not true strictly speakingthis class may be considered as a
specialization of <classref name="wxArray"/> class for the wxString member
data: it is not implemented like thisbut it does have all of the wxArray
functions.

</note>
<includes>
<header name="wx/string.h"/></includes>
<seealso>

<ref target="wxarray">wxArray</ref><ref target="wxstring">wxString</ref><ref target="wxstringoverview">wxString overview</ref>

</seealso>
<members>
<member class="wxArrayString" name="wxArrayString"><function type="" name="wxArrayString"><description>

</description></function>
<function type="" name="wxArrayString"><parameters><parameter type="const wxArrayString&amp;" name=" array"></parameter></parameters><description>

Default and copy constructors.

Note that when an array is assigned to a sorted array, its contents is
automatically sorted during construction.

</description></function></member>
<member class="wxArrayString" name="~wxArrayString"><function type="" name="~wxArrayString"><parameters></parameters><description>

Destructor frees memory occupied by the array strings. For the performance
reasons it is not virtual, so this class should not be derived from.

</description></function></member>
<member class="wxArrayString" name="operator="><function type="wxArrayString &amp;" name="operator $=$"><parameters><parameter type="const wxArrayString&amp;" name=" array"></parameter></parameters><description>

Assignment operator.

</description></function></member>
<member class="wxArrayString" name="operator=="><function type="bool" name="operator $==$" suffix="const"><parameters><parameter type="const wxArrayString&amp;" name=" array"></parameter></parameters><description>

Compares 2 arrays respecting the case. Returns true only if the arrays have
the same number of elements and the same strings in the same order.

</description></function></member>
<member class="wxArrayString" name="operator!="><function type="bool" name="operator $!=$" suffix="const"><parameters><parameter type="const wxArrayString&amp;" name=" array"></parameter></parameters><description>

Compares 2 arrays respecting the case. Returns true if the arrays have
different number of elements or if the elements don't match pairwise.

</description></function></member>
<member class="wxArrayString" name="operator&#91;]"><function type="wxString&amp;" name="operator&#91;]"><parameters><parameter type="size_t " name="nIndex"></parameter></parameters><description>

Return the array element at position <i> nIndex</i>. An assert failure will
result from an attempt to access an element beyond the end of array in debug
mode, but no check is done in release mode.

This is the operator version of <ref target="wxarraystringitem">Item</ref> method.

</description></function></member>
<member class="wxArrayString" name="Add"><function type="size_t" name="Add"><parameters><parameter type="const wxString&amp; " name="str"></parameter><parameter type="size_t" name="copies" value="1"></parameter></parameters><description>

Appends the given number of <i> copies</i> of the new item <i> str</i> to the
array and returns the index of the first new item in the array.

<b> Warning:</b> For sorted arrays, the index of the inserted item will not be,
in general, equal to <ref target="wxarraystringgetcount">GetCount()</ref> - 1 because
the item is inserted at the correct position to keep the array sorted and not
appended.

See also: <ref target="wxarraystringinsert">Insert</ref>

</description></function></member>
<member class="wxArrayString" name="Alloc"><function type="void" name="Alloc"><parameters><parameter type="size_t " name="nCount"></parameter></parameters><description>

Preallocates enough memory to store <i> nCount</i> items. This function may be
used to improve array class performance before adding a known number of items
consecutively.

See also: <ref target="wxarraymemorymanagement">Dynamic array memory management</ref>

</description></function></member>
<member class="wxArrayString" name="Clear"><function type="void" name="Clear"><description>

Clears the array contents and frees memory.

See also: <ref target="wxarraystringempty">Empty</ref>

</description></function></member>
<member class="wxArrayString" name="Count"><function type="size_t" name="Count" suffix="const"><description>

Returns the number of items in the array. This function is deprecated and is
for backwards compatibility only, please use 
<ref target="wxarraystringgetcount">GetCount</ref> instead.

</description></function></member>
<member class="wxArrayString" name="Empty"><function type="void" name="Empty"><description>

Empties the array: after a call to this function 
<ref target="wxarraystringgetcount">GetCount</ref> will return 0. However, this
function does not free the memory used by the array and so should be used when
the array is going to be reused for storing other strings. Otherwise, you
should use <ref target="wxarraystringclear">Clear</ref> to empty the array and free
memory.

</description></function></member>
<member class="wxArrayString" name="GetCount"><function type="size_t" name="GetCount" suffix="const"><description>

Returns the number of items in the array.

</description></function></member>
<member class="wxArrayString" name="Index"><function type="int" name="Index"><parameters><parameter type="const char &#42;" name=" sz"></parameter><parameter type="bool" name="bCase" value="true"></parameter><parameter type="bool" name="bFromEnd" value="false"></parameter></parameters><description>

Search the element in the array, starting from the beginning if
<i> bFromEnd</i> is false or from end otherwise. If <i> bCase</i>, comparison is
case sensitive (default), otherwise the case is ignored.

This function uses linear search for wxArrayString and binary search for
wxSortedArrayString, but it ignores the <i> bCase</i> and <i> bFromEnd</i> 
parameters in the latter case.

Returns index of the first item matched or wxNOT_FOUND if there is no match.

</description></function></member>
<member class="wxArrayString" name="Insert"><function type="void" name="Insert"><parameters><parameter type="const wxString&amp; " name="str"></parameter><parameter type="size_t" name=" nIndex"></parameter><parameter type="size_t " name="copies" value="1"></parameter></parameters><description>

Insert the given number of <i> copies</i> of the new element in the array before the position <i> nIndex</i>. Thus, for
example, to insert the string in the beginning of the array you would write

<pre>
Insert(&quot;foo&quot;, 0);
</pre>

If <i> nIndex</i> is equal to <i> GetCount()</i> this function behaves as 
<ref target="wxarraystringadd">Add</ref>.

<b> Warning:</b> this function should not be used with sorted arrays because it
could break the order of items and, for example, subsequent calls to 
<ref target="wxarraystringindex">Index()</ref> would then not work!

</description></function></member>
<member class="wxArrayString" name="IsEmpty"><function type="" name="IsEmpty"><parameters></parameters><description>

Returns true if the array is empty, false otherwise. This function returns the
same result as <i> GetCount() == 0</i> but is probably easier to read.

</description></function></member>
<member class="wxArrayString" name="Item"><function type="wxString&amp;" name="Item" suffix="const"><parameters><parameter type="size_t " name="nIndex"></parameter></parameters><description>

Return the array element at position <i> nIndex</i>. An assert failure will
result from an attempt to access an element beyond the end of array in debug
mode, but no check is done in release mode.

See also <ref target="wxarraystringoperatorindex">operator&#91;]</ref> for the operator
version.

</description></function></member>
<member class="wxArrayString" name="Last"><function type="" name="Last"><parameters></parameters><description>

Returns the last element of the array. Attempt to access the last element of
an empty array will result in assert failure in debug build, however no checks
are done in release mode.

</description></function></member>
<member class="wxArrayString" name="Remove"><function type="void" name="Remove"><parameters><parameter type="const char &#42;" name=" sz"></parameter></parameters><description>

Removes the first item matching this value. An assert failure is provoked by
an attempt to remove an element which does not exist in debug build.

See also: <ref target="wxarraystringindex">Index</ref>

</description></function>
<function type="void" name="Remove"><parameters><parameter type="size_t " name="nIndex"></parameter><parameter type="size_t " name="count" value="1"></parameter></parameters><description>

Removes <i> count</i> items starting at position <i> nIndex</i> from the array.

</description></function></member>
<member class="wxArrayString" name="Shrink"><function type="void" name="Shrink"><description>

Releases the extra memory allocated by the array. This function is useful to
minimize the array memory consumption.

See also: <ref target="wxarraystringalloc">Alloc</ref>, <ref target="wxarraymemorymanagement">Dynamic array memory management</ref>

</description></function></member>
<member class="wxArrayString" name="Sort"><function type="void" name="Sort"><parameters><parameter type="bool" name="reverseOrder" value="false"></parameter></parameters><description>

Sorts the array in alphabetical order or in reverse alphabetical order if 
<i> reverseOrder</i> is true. The sort is case-sensitive.

<b> Warning:</b> this function should not be used with sorted array because it
could break the order of items and, for example, subsequent calls to 
<ref target="wxarraystringindex">Index()</ref> would then not work!

</description></function>
<function type="void" name="Sort"><parameters><parameter type="CompareFunction " name="compareFunction"></parameter></parameters><example>

The following example sorts strings by their length.

<pre>
static int CompareStringLen(const wxString&amp; first, const wxString&amp; second)
{
    return first.length() - second.length();
}

...

wxArrayString array;

array.Add(&quot;one&quot;);
array.Add(&quot;two&quot;);
array.Add(&quot;three&quot;);
array.Add(&quot;four&quot;);

array.Sort(CompareStringLen);
</pre>

<b> Warning:</b> this function should not be used with sorted array because it
could break the order of items and, for example, subsequent calls to 
<ref target="wxarraystringindex">Index()</ref> would then not work!

</example><description>

Sorts the array using the specified <i> compareFunction</i> for item comparison.
<i> CompareFunction</i> is defined as a function taking two <i> const
wxString&amp;</i> parameters and returning an <i> int</i> value less than, equal to or
greater than 0 if the first string is less than, equal to or greater than the
second one.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class>
<class name="wxArtProvider">
<description>
<p class="classdesc">
wxArtProvider class is used to customize the look of wxWindows application.
When wxWindows need to display an icon or a bitmap (e.g. in the standard file
dialog), it does not use hard-coded resource but asks wxArtProvider for it
instead. This way the users can plug in own wxArtProvider class and easily
replace standard art with his/her own version. It is easy thing to do: all
that is needed is to derive a class from wxArtProvider, override it's
<ref target="wxartprovidercreatebitmap">CreateBitmap</ref> method and register the
provider with
<ref target="wxartproviderpushprovider">wxArtProvider::PushProvider</ref>:</p><p class="classdesc"><pre>
  class MyProvider : public wxArtProvider
  {
  protected:
    wxBitmap CreateBitmap(const wxArtID&amp; id, 
                          const wxArtClient&amp; client,
                          const wxSize size)
    { ... }
  };
  ...
  wxArtProvider::PushProvider(new MyProvider);
</pre></p><p class="classdesc">There's another way of taking advantage of this class: you can use it in your code and use
platform native icons as provided by
<ref target="wxartprovidergetbitmap">wxArtProvider::GetBitmap</ref> or 
<ref target="wxartprovidergeticon">wxArtProvider::GetIcon</ref> (NB: this is not yet really
possible as of wxWindows 2.3.3, the set of wxArtProvider bitmaps is too
small). </p><p class="classdesc">\membersection{Identifying art resources}</p><p class="classdesc">Every bitmap is known to wxArtProvider under an unique ID that is used by when
requesting a resource from it. The ID is represented by wxArtID type and can
have one of these predefined values (you can see bitmaps represented by these
constants in the <ref target="sampleartprovider">artprov</ref> sample):
<ul><li> wxART_ADD_BOOKMARK     
</li>
<li> wxART_DEL_BOOKMARK     
</li>
<li> wxART_HELP_SIDE_PANEL  
</li>
<li> wxART_HELP_SETTINGS    
</li>
<li> wxART_HELP_BOOK        
</li>
<li> wxART_HELP_FOLDER      
</li>
<li> wxART_HELP_PAGE        
</li>
<li> wxART_GO_BACK          
</li>
<li> wxART_GO_FORWARD       
</li>
<li> wxART_GO_UP            
</li>
<li> wxART_GO_DOWN          
</li>
<li> wxART_GO_TO_PARENT     
</li>
<li> wxART_GO_HOME          
</li>
<li> wxART_FILE_OPEN        
</li>
<li> wxART_PRINT            
</li>
<li> wxART_HELP             
</li>
<li> wxART_TIP              
</li>
<li> wxART_REPORT_VIEW      
</li>
<li> wxART_LIST_VIEW        
</li>
<li> wxART_NEW_DIR          
</li>
<li> wxART_FOLDER           
</li>
<li> wxART_GO_DIR_UP        
</li>
<li> wxART_EXECUTABLE_FILE  
</li>
<li> wxART_NORMAL_FILE      
</li>
<li> wxART_TICK_MARK        
</li>
<li> wxART_CROSS_MARK       
</li>
<li> wxART_ERROR            
</li>
<li> wxART_QUESTION         
</li>
<li> wxART_WARNING          
</li>
<li> wxART_INFORMATION      
</li>
<li> wxART_MISSING_IMAGE      
</li></ul></p><p class="classdesc">\membersection{Clients}</p><p class="classdesc">Client is the entity that calls wxArtProvider's GetBitmap or GetIcon
function. It is represented by wxClientID type and can have one of these 
values:
<ul><li> wxART_TOOLBAR
</li>
<li> wxART_MENU
</li>
<li> wxART_FRAME_ICON
</li>
<li> wxART_CMN_DIALOG
</li>
<li> wxART_HELP_BROWSER
</li>
<li> wxART_MESSAGE_BOX
</li>
<li> wxART_OTHER (used for all requests that don't fit into any of the categories above)
</li></ul>
Client ID servers as a hint to wxArtProvider that is supposed to help it to
choose the best looking bitmap. For example it is often desirable to use
slightly different icons in menus and toolbars even though they represent the
same action (e.g. <tt> wx_ART_FILE_OPEN</tt>). Remember that this is really
only a hint for wxArtProvider -- it is common that
<ref target="wxartprovidergetbitmap">wxArtProvider::GetBitmap</ref> 
returns identical bitmap for different <i> client</i> values!</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/artprov.h"/></includes>
<seealso>

See the <ref target="sampleartprovider">artprov</ref> sample for an example of wxArtProvider usage.

</seealso>
<members>
<member class="wxArtProvider" name="CreateBitmap"><function type="wxBitmap" name="CreateBitmap"><parameters><parameter type="const wxArtID&amp; " name="id">wxArtID unique identifier of the bitmap.</parameter><parameter type="const wxArtClient&amp; " name="client">wxArtClient identifier of the client (i.e. who is asking for the bitmap).
This only servers as a hint.</parameter><parameter type="const wxSize&amp; " name="size">Prefered size of the bitmap. The function may return a bitmap of different
dimensions, it will be automatically rescaled to meet client's request.</parameter></parameters><note>

This is <b> not</b> part of wxArtProvider's public API, use
<ref target="wxartprovidergetbitmap">wxArtProvider::GetBitmap</ref> or 
<ref target="wxartprovidergeticon">wxArtProvider::GetIcon</ref>
to query wxArtProvider for a resource.

</note><description>

Derived art provider classes must override this method to create requested 
art resource. Note that returned bitmaps are cached by wxArtProvider and it is therefore
not neccessary to optimize CreateBitmap for speed (e.g. you may create wxBitmap objects
from XPMs here).









</description></function></member>
<member class="wxArtProvider" name="GetBitmap"><function type="static wxBitmap" name="GetBitmap"><parameters><parameter type="const wxArtID&amp; " name="id">wxArtID unique identifier of the bitmap.</parameter><parameter type="const wxArtClient&amp; " name="client" value="wxART_OTHER">wxArtClient identifier of the client (i.e. who is asking for the bitmap).</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Size of the returned bitmap or <tt> wxDefaultSize</tt> if size doesn't matter.</parameter></parameters><returnvalue>

The bitmap if one of registered providers recognizes the ID or wxNullBitmap otherwise.

</returnvalue><description>

Query registered providers for bitmap with given ID.









</description></function></member>
<member class="wxArtProvider" name="GetIcon"><function type="static wxIcon" name="GetIcon"><parameters><parameter type="const wxArtID&amp; " name="id"></parameter><parameter type="const wxArtClient&amp; " name="client" value="wxART_OTHER"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter></parameters><description>

Same as <ref target="wxartprovidergetbitmap">wxArtProvider::GetBitmap</ref>, but
return a wxIcon object (or wxNullIcon on failure).

</description></function></member>
<member class="wxArtProvider" name="PopProvider"><function type="static bool" name="PopProvider"><description>

Remove latest added provider and delete it.

</description></function></member>
<member class="wxArtProvider" name="PushProvider"><function type="static void" name="PushProvider"><parameters><parameter type="wxArtProvider&#42; " name="provider"></parameter></parameters><description>

Register new art provider (add it to the top of providers stack).

</description></function></member>
<member class="wxArtProvider" name="RemoveProvider"><function type="static bool" name="RemoveProvider"><parameters><parameter type="wxArtProvider&#42; " name="provider"></parameter></parameters><description>

Remove a provider from the stack. The provider must have been added previously
and is <i> not</i> deleted.

</description></function></member></members>
<supported>
</supported>
</class><class name="wxAutomationObject">
<description>
<p class="classdesc">
The <b> wxAutomationObject</b> class represents an OLE automation object containing a single data member,
an IDispatch pointer. It contains a number of functions that make it easy to perform
automation operations, and set and get properties. The class makes heavy use of the <ref target="wxvariant">wxVariant</ref> class.</p><p class="classdesc">The usage of these classes is quite close to OLE automation usage in Visual Basic. The API is
high-level, and the application can specify multiple properties in a single string. The following example
gets the current Excel instance, and if it exists, makes the active cell bold.</p><p class="classdesc"><pre>
  wxAutomationObject excelObject;
  if (excelObject.GetInstance(&quot;Excel.Application&quot;))
      excelObject.PutProperty(&quot;ActiveCell.Font.Bold&quot;, true);
</pre></p><p class="classdesc">Note that this class works under Windows only, and currently only for Visual C++.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/msw/ole/automtn.h"/></includes>
<seealso>

<ref target="wxvariant">wxVariant</ref>

</seealso>
<members>
<member class="wxAutomationObject" name="wxAutomationObject"><function type="" name="wxAutomationObject"><parameters><parameter type="WXIDISPATCH&#42;" name="dispatchPtr" value="NULL"></parameter></parameters><description>

Constructor, taking an optional IDispatch pointer which will be released when the
object is deleted.

</description></function></member>
<member class="wxAutomationObject" name="~wxAutomationObject"><function type="" name="~wxAutomationObject"><description>

Destructor. If the internal IDispatch pointer is non-null, it will be released.

</description></function></member>
<member class="wxAutomationObject" name="CallMethod"><function type="wxVariant" name="CallMethod" suffix="const"><parameters><parameter type="const wxString&amp;" name=" method"></parameter><parameter type="int" name=" noArgs"></parameter><parameter type="wxVariant " name="args&#91;]"></parameter></parameters><description>

</description></function>
<function type="wxVariant" name="CallMethod" suffix="const"><parameters><parameter type="const wxString&amp;" name=" method"></parameter><parameter type="..." name=""></parameter></parameters><description>

Calls an automation method for this object. The first form takes a method name, number of
arguments, and an array of variants. The second form takes a method name and zero to six
constant references to variants. Since the variant class has constructors for the basic
data types, and C++ provides temporary objects automatically, both of the following lines
are syntactically valid:

<pre>
  wxVariant res = obj.CallMethod(&quot;Sum&quot;, wxVariant(1.2), wxVariant(3.4));
  wxVariant res = obj.CallMethod(&quot;Sum&quot;, 1.2, 3.4);
</pre>

Note that <i> method</i> can contain dot-separated property names, to save the application
needing to call GetProperty several times using several temporary objects. For example:

<pre>
  object.CallMethod(&quot;ActiveCell.Font.ShowDialog&quot;, &quot;My caption&quot;);
</pre>

</description></function></member>
<member class="wxAutomationObject" name="CreateInstance"><function type="bool" name="CreateInstance" suffix="const"><parameters><parameter type="const wxString&amp;" name=" classId"></parameter></parameters><description>

Creates a new object based on the class id, returning true if the object was successfully created,
or false if not.

</description></function></member>
<member class="wxAutomationObject" name="GetDispatchPtr"><function type="IDispatch&#42;" name="GetDispatchPtr" suffix="const"><description>

Gets the IDispatch pointer.

</description></function></member>
<member class="wxAutomationObject" name="GetInstance"><function type="bool" name="GetInstance" suffix="const"><parameters><parameter type="const wxString&amp;" name=" classId"></parameter></parameters><description>

Retrieves the current object associated with a class id, and attaches the IDispatch pointer
to this object. Returns true if a pointer was successfully retrieved, false otherwise.

Note that this cannot cope with two instances of a given OLE object being active simultaneously,
such as two copies of Excel running. Which object is referenced cannot currently be specified.

</description></function></member>
<member class="wxAutomationObject" name="GetObject"><function type="bool" name="GetObject" suffix="const"><parameters><parameter type="wxAutomationObject&amp;" name="obj"></parameter><parameter type="const wxString&amp;" name=" property"></parameter><parameter type="int" name="noArgs" value="0"></parameter><parameter type="wxVariant " name="args&#91;]" value="NULL"></parameter></parameters><seealso>

<ref target="wxautomationobjectgetproperty">wxAutomationObject::GetProperty</ref>

</seealso><description>

Retrieves a property from this object, assumed to be a dispatch pointer, and initialises <i> obj</i> with it.
To avoid having to deal with IDispatch pointers directly, use this function in preference
to <ref target="wxautomationobjectgetproperty">wxAutomationObject::GetProperty</ref> when retrieving objects
from other objects.

Note that an IDispatch pointer is stored as a void&#42; pointer in wxVariant objects.

</description></function></member>
<member class="wxAutomationObject" name="GetProperty"><function type="wxVariant" name="GetProperty" suffix="const"><parameters><parameter type="const wxString&amp;" name=" property"></parameter><parameter type="int" name=" noArgs"></parameter><parameter type="wxVariant " name="args&#91;]"></parameter></parameters><description>

</description></function>
<function type="wxVariant" name="GetProperty" suffix="const"><parameters><parameter type="const wxString&amp;" name=" property"></parameter><parameter type="..." name=""></parameter></parameters><description>

Gets a property value from this object. The first form takes a property name, number of
arguments, and an array of variants. The second form takes a property name and zero to six
constant references to variants. Since the variant class has constructors for the basic
data types, and C++ provides temporary objects automatically, both of the following lines
are syntactically valid:

<pre>
  wxVariant res = obj.GetProperty(&quot;Range&quot;, wxVariant(&quot;A1&quot;));
  wxVariant res = obj.GetProperty(&quot;Range&quot;, &quot;A1&quot;);
</pre>

Note that <i> property</i> can contain dot-separated property names, to save the application
needing to call GetProperty several times using several temporary objects.

</description></function></member>
<member class="wxAutomationObject" name="Invoke"><function type="bool" name="Invoke" suffix="const"><parameters><parameter type="const wxString&amp;" name=" member"></parameter><parameter type="int" name=" action"></parameter><parameter type="wxVariant&amp; " name="retValue">Return value (ignored if there is no return value)</parameter><parameter type="int" name=" noArgs"></parameter><parameter type="wxVariant" name=" args&#91;]"></parameter><parameter type="const wxVariant&#42;" name="ptrArgs&#91;]" value="0"></parameter></parameters><remarks>

Two types of argument array are provided, so that when possible pointers are used for efficiency.

</remarks><returnvalue>

true if the operation was successful, false otherwise.

</returnvalue><description>

This function is a low-level implementation that allows access to the IDispatch Invoke function.
It is not meant to be called directly by the application, but is used by other convenience functions.







.







</description></function></member>
<member class="wxAutomationObject" name="PutProperty"><function type="bool" name="PutProperty" suffix="const"><parameters><parameter type="const wxString&amp;" name=" property"></parameter><parameter type="int" name=" noArgs"></parameter><parameter type="wxVariant " name="args&#91;]"></parameter></parameters><description>

</description></function>
<function type="bool" name="PutProperty"><parameters><parameter type="const wxString&amp;" name=" property"></parameter><parameter type="..." name=""></parameter></parameters><description>

Puts a property value into this object. The first form takes a property name, number of
arguments, and an array of variants. The second form takes a property name and zero to six
constant references to variants. Since the variant class has constructors for the basic
data types, and C++ provides temporary objects automatically, both of the following lines
are syntactically valid:

<pre>
  obj.PutProperty(&quot;Value&quot;, wxVariant(23));
  obj.PutProperty(&quot;Value&quot;, 23);
</pre>

Note that <i> property</i> can contain dot-separated property names, to save the application
needing to call GetProperty several times using several temporary objects.

</description></function></member>
<member class="wxAutomationObject" name="SetDispatchPtr"><function type="void" name="SetDispatchPtr"><parameters><parameter type="WXIDISPATCH&#42;" name=" dispatchPtr"></parameter></parameters><description>

Sets the IDispatch pointer. This function does not check if there is already an IDispatch pointer.

You may need to cast from IDispatch&#42; to WXIDISPATCH&#42; when calling this function.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxBitmap">
<description>
<p class="classdesc">
This class encapsulates the concept of a platform-dependent bitmap,
either monochrome or colour.</p>
</description>
<parents>
<classref name="wxGDIObject"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/bitmap.h"/></includes>
<predefs>

Objects:

<b> wxNullBitmap</b>

</predefs>
<seealso>

<ref target="wxbitmapoverview">wxBitmap overview</ref>,
<ref target="supportedbitmapformats">supported bitmap file formats</ref>,
<ref target="wxdcblit">wxDC::Blit</ref>,
<ref target="wxicon">wxIcon</ref><ref target="wxcursor">wxCursor</ref><ref target="wxbitmap">wxBitmap</ref>,
<ref target="wxmemorydc">wxMemoryDC</ref>

</seealso>
<members>
<member class="wxBitmap" name="wxBitmap"><function type="" name="wxBitmap"><description>

Default constructor.

</description></function>
<function type="" name="wxBitmap"><parameters><parameter type="const wxBitmap&amp; " name="bitmap"></parameter></parameters><description>

Copy constructor.

</description></function>
<function type="" name="wxBitmap"><parameters><parameter type="void&#42;" name=" data"></parameter><parameter type="int" name=" type"></parameter><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter><parameter type="int" name="depth" value="-1">Specifies the depth of the bitmap. If this is omitted, the display depth of the
screen is used.</parameter></parameters><description>

Creates a bitmap from the given data which is interpreted in platform-dependent
manner.

</description></function>
<function type="" name="wxBitmap"><parameters><parameter type="const char" name=" bits&#91;]"></parameter><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter><parameter type="int" name="depth" value="1">Specifies the depth of the bitmap. If this is omitted, the display depth of the
screen is used.</parameter></parameters><description>

Creates a bitmap from an array of bits.

You should only use this function for monochrome bitmaps (<i> depth</i> 1) in
portable programs: in this case the <i> bits</i> parameter should contain an XBM
image.

For other bit depths, the behaviour is platform dependent: under Windows, the
data is passed without any changes to the underlying <tt> CreateBitmap()</tt> API.
Under other platforms, only monochrome bitmaps may be created using this
constructor and <ref target="wximage">wxImage</ref> should be used for creating colour
bitmaps from static data.

</description></function>
<function type="" name="wxBitmap"><parameters><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter><parameter type="int" name="depth" value="-1">Specifies the depth of the bitmap. If this is omitted, the display depth of the
screen is used.</parameter></parameters><description>

Creates a new bitmap. A depth of -1 indicates the depth of the current screen
or visual. Some platforms only support 1 for monochrome and -1 for the current
colour setting.

</description></function>
<function type="" name="wxBitmap"><parameters><parameter type="const char&#42;&#42;" name=" bits"></parameter></parameters><description>

Creates a bitmap from XPM data.

</description></function>
<function type="" name="wxBitmap"><parameters><parameter type="const wxString&amp; " name="name">This can refer to a resource name under MS Windows, or a filename under MS Windows and X.
Its meaning is determined by the <i> type</i> parameter.</parameter><parameter type="long" name=" type"></parameter></parameters><description>

Loads a bitmap from a file or resource.

</description></function>
<function type="" name="wxBitmap"><parameters><parameter type="const wxImage&amp;" name=" img"></parameter><parameter type="int" name="depth" value="-1">Specifies the depth of the bitmap. If this is omitted, the display depth of the
screen is used.</parameter></parameters><seealso>

<ref target="wxbitmaploadfile">wxBitmap::LoadFile</ref>

\pythonnote{Constructors supported by wxPython are:\par
\indented{2cm}{<table>
<tr><td><b> wxBitmap(nameflag)</b></td><td>Loads a bitmap from a file</td></tr>
<tr><td><b> wxEmptyBitmap(widthheightdepth = -1)</b></td><td>Creates an
empty bitmap with the given specifications</td></tr>
<tr><td><b> wxBitmapFromXPMData(listOfStrings)</b></td><td>Create a bitmap
from a Python list of strings whose contents are XPM data.</td></tr>
<tr><td><b> wxBitmapFromBits(bitswidthheight,
depth=-1)</b></td><td>Create a bitmap from an array of bits contained in a
string.</td></tr>
<tr><td><b> wxBitmapFromImage(imagedepth=-1)</b></td><td>Convert a
wxImage to a wxBitmap.</td></tr>
</table>}
}

\perlnote{Constructors supported by wxPerl are:\par
<ul><li>{Wx::Bitmap-&gt;new( widthheightdepth = -1 )}
</li>
<li>{Wx::Bitmap-&gt;new( nametype )}
</li>
<li>{Wx::Bitmap-&gt;new( icon )}
</li>
<li>{Wx::Bitmap-&gt;newFromBits( bitswidthheightdepth = 1 )}
</li>
<li>{Wx::Bitmap-&gt;newFromXPM( data )}
</li></ul>
}

</seealso><description></description></function></member>
<member class="wxBitmap" name="~wxBitmap"><function type="" name="~wxBitmap"><description>

Destroys the wxBitmap object and possibly the underlying bitmap data.
Because reference counting is used, the bitmap may not actually be
destroyed at this point - only when the reference count is zero will the
data be deleted.

If the application omits to delete the bitmap explicitly, the bitmap will be
destroyed automatically by wxWindows when the application exits.

Do not delete a bitmap that is selected into a memory device context.

</description></function></member>
<member class="wxBitmap" name="AddHandler"><function type="static void" name="AddHandler"><parameters><parameter type="wxBitmapHandler&#42;" name=" handler"></parameter></parameters><seealso>

<ref target="wxbitmaphandler">wxBitmapHandler</ref>

</seealso><description>

Adds a handler to the end of the static list of format handlers.



</description></function></member>
<member class="wxBitmap" name="CleanUpHandlers"><function type="static void" name="CleanUpHandlers"><description>

Deletes all bitmap handlers.

This function is called by wxWindows on exit.

</description></function></member>
<member class="wxBitmap" name="ConvertToImage"><function type="wxImage" name="ConvertToImage"><description>

Creates an image from a platform-dependent bitmap. This preserves
mask information so that bitmaps and images can be converted back
and forth without loss in that respect.

</description></function></member>
<member class="wxBitmap" name="CopyFromIcon"><function type="bool" name="CopyFromIcon"><parameters><parameter type="const wxIcon&amp;" name=" icon"></parameter></parameters><description>

Creates the bitmap from an icon.

</description></function></member>
<member class="wxBitmap" name="Create"><function type="virtual bool" name="Create"><parameters><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter><parameter type="int" name="depth" value="-1">The depth of the bitmap in pixels. If this is -1, the screen depth is used.</parameter></parameters><description>

Creates a fresh bitmap. If the final argument is omitted, the display depth of
the screen is used.

</description></function>
<function type="virtual bool" name="Create"><parameters><parameter type="void&#42;" name=" data"></parameter><parameter type="int" name=" type"></parameter><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter><parameter type="int" name="depth" value="-1">The depth of the bitmap in pixels. If this is -1, the screen depth is used.</parameter></parameters><seealso>

<ref target="wxbitmapconstr">wxBitmap::wxBitmap</ref>

</seealso><remarks>

The first form works on all platforms. The portability of the second form depends on the
type of data.

</remarks><returnvalue>

true if the call succeeded, false otherwise.

</returnvalue><description>

Creates a bitmap from the given data, which can be of arbitrary type.













</description></function></member>
<member class="wxBitmap" name="FindHandler"><function type="static wxBitmapHandler&#42;" name="FindHandler"><parameters><parameter type="const wxString&amp; " name="name">The handler name.</parameter></parameters><description>

Finds the handler with the given name.

</description></function>
<function type="static wxBitmapHandler&#42;" name="FindHandler"><parameters><parameter type="const wxString&amp; " name="extension">The file extension, such as ``bmp&quot;.</parameter><parameter type="long" name=" bitmapType"></parameter></parameters><description>

Finds the handler associated with the given extension and type.

</description></function>
<function type="static wxBitmapHandler&#42;" name="FindHandler"><parameters><parameter type="long " name="bitmapType">The bitmap type, such as wxBITMAP_TYPE_BMP.</parameter></parameters><seealso>

<ref target="wxbitmaphandler">wxBitmapHandler</ref>

</seealso><returnvalue>

A pointer to the handler if found, NULL otherwise.

</returnvalue><description>

Finds the handler associated with the given bitmap type.







</description></function></member>
<member class="wxBitmap" name="GetDepth"><function type="int" name="GetDepth" suffix="const"><description>

Gets the colour depth of the bitmap. A value of 1 indicates a
monochrome bitmap.

</description></function></member>
<member class="wxBitmap" name="GetHandlers"><function type="static wxList&amp;" name="GetHandlers"><seealso>

<ref target="wxbitmaphandler">wxBitmapHandler</ref>

</seealso><description>

Returns the static list of bitmap format handlers.

</description></function></member>
<member class="wxBitmap" name="GetHeight"><function type="int" name="GetHeight" suffix="const"><description>

Gets the height of the bitmap in pixels.

</description></function></member>
<member class="wxBitmap" name="GetPalette"><function type="wxPalette&#42;" name="GetPalette" suffix="const"><seealso>

<ref target="wxpalette">wxPalette</ref>

</seealso><description>

Gets the associated palette (if any) which may have been loaded from a file
or set for the bitmap.

</description></function></member>
<member class="wxBitmap" name="GetMask"><function type="wxMask&#42;" name="GetMask" suffix="const"><seealso>

<ref target="wxbitmapsetmask">wxBitmap::SetMask</ref><ref target="wxmask">wxMask</ref>

</seealso><description></description></function></member>
<member class="wxBitmap" name="GetWidth"><function type="int" name="GetWidth" suffix="const"><seealso>

<ref target="wxbitmapgetheight">wxBitmap::GetHeight</ref>

</seealso><description>

Gets the width of the bitmap in pixels.

</description></function></member>
<member class="wxBitmap" name="GetSubBitmap"><function type="wxBitmap" name="GetSubBitmap" suffix="const"><parameters><parameter type="const wxRect&amp;" name="rect"></parameter></parameters><description>

Returns a sub bitmap of the current one as long as the rect belongs entirely to
the bitmap. This function preserves bit depth and mask information.

</description></function></member>
<member class="wxBitmap" name="InitStandardHandlers"><function type="static void" name="InitStandardHandlers"><seealso>

<ref target="wxbitmaphandler">wxBitmapHandler</ref>

</seealso><description>

Adds the standard bitmap format handlers, which, depending on wxWindows
configuration, can be handlers for Windows bitmap, Windows bitmap resource, and XPM.

This function is called by wxWindows on startup.

</description></function></member>
<member class="wxBitmap" name="InsertHandler"><function type="static void" name="InsertHandler"><parameters><parameter type="wxBitmapHandler&#42;" name=" handler"></parameter></parameters><seealso>

<ref target="wxbitmaphandler">wxBitmapHandler</ref>

</seealso><description>

Adds a handler at the start of the static list of format handlers.



</description></function></member>
<member class="wxBitmap" name="LoadFile"><function type="bool" name="LoadFile"><parameters><parameter type="const wxString&amp;" name=" name"></parameter><parameter type="long" name=" type"></parameter></parameters><seealso>

<ref target="wxbitmapsavefile">wxBitmap::SaveFile</ref>

</seealso><remarks>

A palette may be associated with the bitmap if one exists (especially for
colour Windows bitmaps), and if the code supports it. You can check
if one has been created by using the <ref target="wxbitmapgetpalette">GetPalette</ref> member.

</remarks><returnvalue>

true if the operation succeeded, false otherwise.

</returnvalue><description>

Loads a bitmap from a file or resource.







</description></function></member>
<member class="wxBitmap" name="Ok"><function type="bool" name="Ok" suffix="const"><description>

Returns true if bitmap data is present.

</description></function></member>
<member class="wxBitmap" name="RemoveHandler"><function type="static bool" name="RemoveHandler"><parameters><parameter type="const wxString&amp; " name="name">The handler name.</parameter></parameters><seealso>

<ref target="wxbitmaphandler">wxBitmapHandler</ref>

</seealso><returnvalue>

true if the handler was found and removed, false otherwise.

</returnvalue><description>

Finds the handler with the given name, and removes it. The handler
is not deleted.



</description></function></member>
<member class="wxBitmap" name="SaveFile"><function type="bool" name="SaveFile"><parameters><parameter type="const wxString&amp; " name="name">A filename. The meaning of <i> name</i> is determined by the <i> type</i> parameter.</parameter><parameter type="int" name=" type"></parameter><parameter type="wxPalette&#42; " name="palette" value="NULL">An optional palette used for saving the bitmap.</parameter></parameters><seealso>

<ref target="wxbitmaploadfile">wxBitmap::LoadFile</ref>

</seealso><remarks>

Depending on how wxWindows has been configured, not all formats may be available.

</remarks><returnvalue>

true if the operation succeeded, false otherwise.

</returnvalue><description>

Saves a bitmap in the named file.









</description></function></member>
<member class="wxBitmap" name="SetDepth"><function type="void" name="SetDepth"><parameters><parameter type="int " name="depth">Bitmap depth.</parameter></parameters><description>

Sets the depth member (does not affect the bitmap data).





</description></function></member>
<member class="wxBitmap" name="SetHeight"><function type="void" name="SetHeight"><parameters><parameter type="int " name="height">Bitmap height in pixels.</parameter></parameters><description>

Sets the height member (does not affect the bitmap data).





</description></function></member>
<member class="wxBitmap" name="SetMask"><function type="void" name="SetMask"><parameters><parameter type="wxMask&#42; " name="mask"></parameter></parameters><seealso>

<ref target="wxbitmapgetmask">wxBitmap::GetMask</ref><ref target="wxmask">wxMask</ref>


</seealso><description></description></function></member>
<member class="wxBitmap" name="SetPalette"><function type="void" name="SetPalette"><parameters><parameter type="const wxPalette&amp; " name="palette">The palette to set.</parameter></parameters><seealso>

<ref target="wxpalette">wxPalette</ref>

</seealso><description>

Sets the associated palette.





</description></function></member>
<member class="wxBitmap" name="SetWidth"><function type="void" name="SetWidth"><parameters><parameter type="int " name="width">Bitmap width in pixels.</parameter></parameters><description>

Sets the width member (does not affect the bitmap data).





</description></function></member>
<member class="wxBitmap" name="operator $=$"><function type="wxBitmap&amp; " name="operator $=$"><parameters><parameter type="const wxBitmap&amp; " name="bitmap">Bitmap to assign.</parameter></parameters><returnvalue>

Returns 'this' object.

</returnvalue><description>

Assignment operator. This operator does not copy any data, but instead
passes a pointer to the data in <i> bitmap</i> and increments a reference
counter. It is a fast operation.





</description></function></member>
<member class="wxBitmap" name="operator $==$"><function type="bool" name="operator $==$"><parameters><parameter type="const wxBitmap&amp; " name="bitmap">Bitmap to compare with 'this'</parameter></parameters><returnvalue>

Returns true if the bitmaps were effectively equal, false otherwise.

</returnvalue><description>

Equality operator. This operator tests whether the internal data pointers are
equal (a fast test).





</description></function></member>
<member class="wxBitmap" name="operator $!=$"><function type="bool" name="operator $!=$"><parameters><parameter type="const wxBitmap&amp; " name="bitmap">Bitmap to compare with 'this'</parameter></parameters><returnvalue>

Returns true if the bitmaps were unequal, false otherwise.

</returnvalue><description>

Inequality operator. This operator tests whether the internal data pointers are
unequal (a fast test).





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxBitmapButton">
<description>
<p class="classdesc">
A bitmap button is a control that contains a bitmap.
It may be placed on a <ref target="wxdialog">dialog box</ref> or <ref target="wxpanel">panel</ref>, or indeed
almost any other window.</p>
</description>
<remarks>

A bitmap button can be supplied with a single bitmap, and wxWindows will draw
all button states using this bitmap. If the application needs more control, additional bitmaps for
the selected state, unpressed focused state, and greyed-out state may be supplied.

</remarks>
<parents>
<classref name="wxButton"/>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/bmpbuttn.h"/></includes>
<windowstyles>
<style name="wxBU_AUTODRAW">If
this is specified, the button will be drawn automatically using the label bitmap only, providing
a 3D-look border. If this style is not specified, the button will be drawn without borders and using all
provided bitmaps. WIN32 only.</style><style name="wxBU_LEFT" platforms="WIN32">Left-justifies the bitmap label. </style><style name="wxBU_TOP" platforms="WIN32">Aligns the bitmap label to the top of the button. </style><style name="wxBU_RIGHT" platforms="WIN32">Right-justifies the bitmap label. </style><style name="wxBU_BOTTOM" platforms="WIN32">Aligns the bitmap label to the bottom of the button. </style></windowstyles>
<events>
<event name="EVT_BUTTON(id, func)">Process a wxEVT_COMMAND_BUTTON_CLICKED event,
when the button is clicked.</event></events>
<seealso>

<ref target="wxbutton">wxButton</ref>

</seealso>
<members>
<member class="wxBitmapButton" name="wxBitmapButton"><function type="" name="wxBitmapButton"><description>

Default constructor.

</description></function>
<function type="" name="wxBitmapButton"><parameters><parameter type="wxWindow&#42; " name="parent">Parent window. Must not be NULL.</parameter><parameter type="wxWindowID " name="id">Button identifier. A value of -1 indicates a default value.</parameter><parameter type="const wxBitmap&amp; " name="bitmap">Bitmap to be displayed.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Button position.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Button size. If the default size (-1, -1) is specified then the button is sized
appropriately for the bitmap.</parameter><parameter type="long " name="style" value="wxBU_AUTODRAW">Window style. See <ref target="wxbitmapbutton">wxBitmapButton</ref>.</parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator">Window validator.</parameter><parameter type="const wxString&amp; " name="name" value="``button&quot;">Window name.</parameter></parameters><seealso>

<ref target="wxbitmapbuttoncreate">wxBitmapButton::Create</ref><ref target="wxvalidator">wxValidator</ref>

</seealso><description></description></function></member>
<member class="wxBitmapButton" name="~wxBitmapButton"><function type="" name="~wxBitmapButton"><description>

Destructor, destroying the button.

</description></function></member>
<member class="wxBitmapButton" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxBitmap&amp; " name="bitmap"></parameter><parameter type="const wxPoint&amp; " name="pos"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="0"></parameter><parameter type="const wxValidator&amp; " name="validator"></parameter><parameter type="const wxString&amp; " name="name" value="``button&quot;"></parameter></parameters><description>

Button creation function for two-step creation. For more details, see <ref target="wxbitmapbuttonconstr">wxBitmapButton::wxBitmapButton</ref>.

</description></function></member>
<member class="wxBitmapButton" name="GetBitmapDisabled"><function type="wxBitmap&amp;" name="GetBitmapDisabled" suffix="const"><seealso>

<ref target="wxbitmapbuttonsetbitmapdisabled">wxBitmapButton::SetBitmapDisabled</ref>

</seealso><returnvalue>

A reference to the disabled state bitmap.

</returnvalue><description>

Returns the bitmap for the disabled state.

</description></function></member>
<member class="wxBitmapButton" name="GetBitmapFocus"><function type="wxBitmap&amp;" name="GetBitmapFocus" suffix="const"><seealso>

<ref target="wxbitmapbuttonsetbitmapfocus">wxBitmapButton::SetBitmapFocus</ref>

</seealso><returnvalue>

A reference to the focused state bitmap.

</returnvalue><description>

Returns the bitmap for the focused state.

</description></function></member>
<member class="wxBitmapButton" name="GetBitmapLabel"><function type="wxBitmap&amp;" name="GetBitmapLabel" suffix="const"><seealso>

<ref target="wxbitmapbuttonsetbitmaplabel">wxBitmapButton::SetBitmapLabel</ref>

</seealso><returnvalue>

A reference to the button's label bitmap.

</returnvalue><description>

Returns the label bitmap (the one passed to the constructor).

</description></function></member>
<member class="wxBitmapButton" name="GetBitmapSelected"><function type="wxBitmap&amp;" name="GetBitmapSelected" suffix="const"><seealso>

<ref target="wxbitmapbuttonsetbitmapselected">wxBitmapButton::SetBitmapSelected</ref>

</seealso><returnvalue>

A reference to the selected state bitmap.

</returnvalue><description>

Returns the bitmap for the selected state.

</description></function></member>
<member class="wxBitmapButton" name="SetBitmapDisabled"><function type="void" name="SetBitmapDisabled"><parameters><parameter type="const wxBitmap&amp; " name="bitmap">The bitmap to set.</parameter></parameters><seealso>

<ref target="wxbitmapbuttongetbitmapdisabled">wxBitmapButton::GetBitmapDisabled</ref>,
<ref target="wxbitmapbuttonsetbitmaplabel">wxBitmapButton::SetBitmapLabel</ref>,
<ref target="wxbitmapbuttonsetbitmapselected">wxBitmapButton::SetBitmapSelected</ref>,
<ref target="wxbitmapbuttonsetbitmapfocus">wxBitmapButton::SetBitmapFocus</ref>

</seealso><description>

Sets the bitmap for the disabled button appearance.





</description></function></member>
<member class="wxBitmapButton" name="SetBitmapFocus"><function type="void" name="SetBitmapFocus"><parameters><parameter type="const wxBitmap&amp; " name="bitmap">The bitmap to set.</parameter></parameters><seealso>

<ref target="wxbitmapbuttongetbitmapfocus">wxBitmapButton::GetBitmapFocus</ref>,
<ref target="wxbitmapbuttonsetbitmaplabel">wxBitmapButton::SetBitmapLabel</ref>,
<ref target="wxbitmapbuttonsetbitmapselected">wxBitmapButton::SetBitmapSelected</ref>,
<ref target="wxbitmapbuttonsetbitmapdisabled">wxBitmapButton::SetBitmapDisabled</ref>

</seealso><description>

Sets the bitmap for the button appearance when it has the keyboard focus.





</description></function></member>
<member class="wxBitmapButton" name="SetBitmapLabel"><function type="void" name="SetBitmapLabel"><parameters><parameter type="const wxBitmap&amp; " name="bitmap">The bitmap label to set.</parameter></parameters><seealso>

<ref target="wxbitmapbuttongetbitmaplabel">wxBitmapButton::GetBitmapLabel</ref>

</seealso><remarks>

This is the bitmap used for the unselected state, and for all other states
if no other bitmaps are provided.

</remarks><description>

Sets the bitmap label for the button.





</description></function></member>
<member class="wxBitmapButton" name="SetBitmapSelected"><function type="void" name="SetBitmapSelected"><parameters><parameter type="const wxBitmap&amp; " name="bitmap">The bitmap to set.</parameter></parameters><seealso>

<ref target="wxbitmapbuttongetbitmapselected">wxBitmapButton::GetBitmapSelected</ref>,
<ref target="wxbitmapbuttonsetbitmaplabel">wxBitmapButton::SetBitmapLabel</ref>,
<ref target="wxbitmapbuttonsetbitmapfocus">wxBitmapButton::SetBitmapFocus</ref>,
<ref target="wxbitmapbuttonsetbitmapdisabled">wxBitmapButton::SetBitmapDisabled</ref>

</seealso><description>

Sets the bitmap for the selected (depressed) button appearance.





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxBitmapDataObject">
<description>
<p class="classdesc">
wxBitmapDataObject is a specialization of wxDataObject for bitmap data. It can
be used without change to paste data into the 
<ref target="wxclipboard">wxClipboard</ref> or a <ref target="wxdropsource">wxDropSource</ref>. A
user may wish to derive a new class from this class for providing a bitmap
on-demand in order to minimize memory consumption when offering data in several
formats, such as a bitmap and GIF.</p>
</description>
<parents>
<classref name="wxDataObjectSimple"/>
<classref name="wxDataObject"/>

</parents>
<includes>
<header name="wx/dataobj.h"/></includes>
<override>

This class may be used as is, but 
<ref target="wxbitmapdataobjectgetbitmap">GetBitmap</ref> may be overridden to increase
efficiency.

</override>
<members>
<member class="wxBitmapDataObject" name="GetBitmap"><function type="virtual wxBitmap" name="GetBitmap" suffix="const"><description>

Returns the bitmap associated with the data object. You may wish to override
this method when offering data on-demand, but this is not required by
wxWindows' internals. Use this method to get data in bitmap form from
the <ref target="wxclipboard">wxClipboard</ref>.

</description></function></member>
<member class="wxBitmapDataObject" name="SetBitmap"><function type="virtual void" name="SetBitmap"><parameters><parameter type="const wxBitmap&amp; " name="bitmap"></parameter></parameters><description>

Sets the bitmap associated with the data object. This method is called when the
data object receives data. Usually there will be no reason to override this
function.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="N"/><platform name="os2" status="Y"/></supported>
</class><class name="wxBitmapHandler">
<description>
<p class="classdesc">
\overview{Overview}{wxbitmapoverview}</p><p class="classdesc">This is the base class for implementing bitmap file loading/saving, and bitmap creation from data.
It is used within wxBitmap and is not normally seen by the application.</p><p class="classdesc">If you wish to extend the capabilities of wxBitmap, derive a class from wxBitmapHandler
and add the handler using <ref target="wxbitmapaddhandler">wxBitmap::AddHandler</ref> in your
application initialisation.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/bitmap.h"/></includes>
<seealso>

<ref target="wxbitmap">wxBitmap</ref><ref target="wxicon">wxIcon</ref><ref target="wxcursor">wxCursor</ref>

</seealso>
<members>
<member class="wxBitmapHandler" name="wxBitmapHandler"><function type="" name="wxBitmapHandler"><description>

Default constructor. In your own default constructor, initialise the members
m_name, m_extension and m_type.

</description></function></member>
<member class="wxBitmapHandler" name="~wxBitmapHandler"><function type="" name="~wxBitmapHandler"><description>

Destroys the wxBitmapHandler object.

</description></function></member>
<member class="wxBitmapHandler" name="Create"><function type="virtual bool" name="Create"><parameters><parameter type="wxBitmap&#42; " name="bitmap">The wxBitmap object.</parameter><parameter type="void&#42;" name=" data"></parameter><parameter type="int" name=" type"></parameter><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter><parameter type="int" name="depth" value="-1">The depth of the bitmap in pixels. If this is -1, the screen depth is used.</parameter></parameters><returnvalue>

true if the call succeeded, false otherwise (the default).

</returnvalue><description>

Creates a bitmap from the given data, which can be of arbitrary type. The wxBitmap object <i> bitmap</i> is
manipulated by this function.















</description></function></member>
<member class="wxBitmapHandler" name="GetName"><function type="wxString" name="GetName" suffix="const"><description>

Gets the name of this handler.

</description></function></member>
<member class="wxBitmapHandler" name="GetExtension"><function type="wxString" name="GetExtension" suffix="const"><description>

Gets the file extension associated with this handler.

</description></function></member>
<member class="wxBitmapHandler" name="GetType"><function type="long" name="GetType" suffix="const"><description>

Gets the bitmap type associated with this handler.

</description></function></member>
<member class="wxBitmapHandler" name="LoadFile"><function type="bool" name="LoadFile"><parameters><parameter type="wxBitmap&#42; " name="bitmap">The bitmap object which is to be affected by this operation.</parameter><parameter type="const wxString&amp;" name=" name"></parameter><parameter type="long" name=" type"></parameter></parameters><seealso>

<ref target="wxbitmaploadfile">wxBitmap::LoadFile</ref><br/>
<ref target="wxbitmapsavefile">wxBitmap::SaveFile</ref><br/>
<ref target="wxbitmaphandlersavefile">wxBitmapHandler::SaveFile</ref>

</seealso><returnvalue>

true if the operation succeeded, false otherwise.

</returnvalue><description>

Loads a bitmap from a file or resource, putting the resulting data into <i> bitmap</i>.









</description></function></member>
<member class="wxBitmapHandler" name="SaveFile"><function type="bool" name="SaveFile"><parameters><parameter type="wxBitmap&#42; " name="bitmap">The bitmap object which is to be affected by this operation.</parameter><parameter type="const wxString&amp; " name="name">A filename. The meaning of <i> name</i> is determined by the <i> type</i> parameter.</parameter><parameter type="int" name=" type"></parameter><parameter type="wxPalette&#42; " name="palette" value="NULL">An optional palette used for saving the bitmap.</parameter></parameters><seealso>

<ref target="wxbitmaploadfile">wxBitmap::LoadFile</ref><br/>
<ref target="wxbitmapsavefile">wxBitmap::SaveFile</ref><br/>
<ref target="wxbitmaphandlerloadfile">wxBitmapHandler::LoadFile</ref>

</seealso><returnvalue>

true if the operation succeeded, false otherwise.

</returnvalue><description>

Saves a bitmap in the named file.











</description></function></member>
<member class="wxBitmapHandler" name="SetName"><function type="void" name="SetName"><parameters><parameter type="const wxString&amp; " name="name">Handler name.</parameter></parameters><description>

Sets the handler name.





</description></function></member>
<member class="wxBitmapHandler" name="SetExtension"><function type="void" name="SetExtension"><parameters><parameter type="const wxString&amp; " name="extension">Handler extension.</parameter></parameters><description>

Sets the handler extension.





</description></function></member>
<member class="wxBitmapHandler" name="SetType"><function type="void" name="SetType"><parameters><parameter type="long " name="type"></parameter></parameters><description>

Sets the handler type.







</description></function></member></members>
<supported>
<platform name="gtk" status="N"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxBoxSizer">
<description>
<p class="classdesc">
The basic idea behind a box sizer is that windows will most often be laid out in rather
simple basic geometry, typically in a row or a column or several hierarchies of either.</p><p class="classdesc">For more information, please see <ref target="boxsizerprogramming">Programming with wxBoxSizer</ref>.</p>
</description>
<parents>
<classref name="wxSizer"/>
<classref name="wxObject"/>

</parents>
<members>
<member class="wxBoxSizer" name="wxBoxSizer"><function type="" name="wxBoxSizer"><parameters><parameter type="int " name="orient"></parameter></parameters><description>

Constructor for a wxBoxSizer. <i> orient</i> may be either of wxVERTICAL
or wxHORIZONTAL for creating either a column sizer or a row sizer.

</description></function></member>
<member class="wxBoxSizer" name="RecalcSizes"><function type="void" name="RecalcSizes"><description>

Implements the calculation of a box sizer's dimensions and then sets
the size of its its children (calling <ref target="wxwindowsetsize">wxWindow::SetSize</ref> 
if the child is a window). It is used internally only and must not be called
by the user. Documented for information.

</description></function></member>
<member class="wxBoxSizer" name="CalcMin"><function type="wxSize" name="CalcMin"><description>

Implements the calculation of a box sizer's minimal. It is used internally
only and must not be called by the user. Documented for information.

</description></function></member>
<member class="wxBoxSizer" name="GetOrientation"><function type="int" name="GetOrientation"><description>

Returns the orientation of the box sizer, either wxVERTICAL
or wxHORIZONTAL.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxBrush">
<description>
<p class="classdesc">
A brush is a drawing tool for filling in areas. It is used for painting
the background of rectangles, ellipses, etc. It has a colour and a
style.</p>
</description>
<remarks>

On a monochrome display, wxWindows shows
all brushes as white unless the colour is really black.

Do not initialize objects on the stack before the program commences,
since other required structures may not have been set up yet. Instead,
define global pointers to objects and create them in <ref target="wxapponinit">wxApp::OnInit</ref> or
when required.

An application may wish to create brushes with different
characteristics dynamically, and there is the consequent danger that a
large number of duplicate brushes will be created. Therefore an
application may wish to get a pointer to a brush by using the global
list of brushes <b> wxTheBrushList</b>, and calling the member function
<b> FindOrCreateBrush</b>.

wxBrush uses a reference counting system, so assignments between brushes are very
cheap. You can therefore use actual wxBrush objects instead of pointers without
efficiency problems. Once one wxBrush object changes its data it will create its
own brush data internally so that other brushes, which previously shared the
data using the reference counting, are not affected.

</remarks>
<parents>
<classref name="wxGDIObject"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/brush.h"/></includes>
<predefs>

Objects:

<b> wxNullBrush</b>

Pointers:

<b> wxBLUE_BRUSH<br/>
wxGREEN_BRUSH<br/>
wxWHITE_BRUSH<br/>
wxBLACK_BRUSH<br/>
wxGREY_BRUSH<br/>
wxMEDIUM_GREY_BRUSH<br/>
wxLIGHT_GREY_BRUSH<br/>
wxTRANSPARENT_BRUSH<br/>
wxCYAN_BRUSH<br/>
wxRED_BRUSH</b>

</predefs>
<seealso>

<ref target="wxbrushlist">wxBrushList</ref><ref target="wxdc">wxDC</ref><ref target="wxdcsetbrush">wxDC::SetBrush</ref>

</seealso>
<members>
<member class="wxBrush" name="wxBrush"><function type="" name="wxBrush"><description>

Default constructor. The brush will be uninitialised, and <ref target="wxbrushok">wxBrush::Ok</ref> will
return false.

</description></function>
<function type="" name="wxBrush"><parameters><parameter type="const wxColour&amp;" name=" colour"></parameter><parameter type="int" name=" style"></parameter></parameters><description>

Constructs a brush from a colour object and style.

</description></function>
<function type="" name="wxBrush"><parameters><parameter type="const wxString&amp; " name="colourName">Colour name. The name will be looked up in the colour database.</parameter><parameter type="int" name=" style"></parameter></parameters><description>

Constructs a brush from a colour name and style.

</description></function>
<function type="" name="wxBrush"><parameters><parameter type="const wxBitmap&amp; " name="stippleBitmap">A bitmap to use for stippling.</parameter></parameters><description>

Constructs a stippled brush using a bitmap.

</description></function>
<function type="" name="wxBrush"><parameters><parameter type="const wxBrush&amp;" name=" brush"></parameter></parameters><seealso>

<ref target="wxbrushlist">wxBrushList</ref><ref target="wxcolour">wxColour</ref><ref target="wxcolourdatabase">wxColourDatabase</ref>

</seealso><description></description></function></member>
<member class="wxBrush" name="~wxBrush"><function type="void" name="~wxBrush"><remarks>

The destructor may not delete the underlying brush object of the native windowing
system, since wxBrush uses a reference counting system for efficiency.

Although all remaining brushes are deleted when the application exits,
the application should try to clean up all brushes itself. This is because
wxWindows cannot know if a pointer to the brush object is stored in an
application data structure, and there is a risk of double deletion.

</remarks><description>

Destructor.

</description></function></member>
<member class="wxBrush" name="GetColour"><function type="wxColour&amp;" name="GetColour" suffix="const"><seealso>

<ref target="wxbrushsetcolour">wxBrush::SetColour</ref>

</seealso><description>

Returns a reference to the brush colour.

</description></function></member>
<member class="wxBrush" name="GetStipple"><function type="wxBitmap &#42;" name="GetStipple" suffix="const"><seealso>

<ref target="wxbrushsetstipple">wxBrush::SetStipple</ref>

</seealso><description>

Gets a pointer to the stipple bitmap. If the brush does not have a wxSTIPPLE style,
this bitmap may be non-NULL but uninitialised (<ref target="wxbitmapok">wxBitmap::Ok</ref> returns false).

</description></function></member>
<member class="wxBrush" name="GetStyle"><function type="int" name="GetStyle" suffix="const"><seealso>

<ref target="wxbrushsetstyle">wxBrush::SetStyle</ref><ref target="wxbrushsetcolour">wxBrush::SetColour</ref>,
<ref target="wxbrushsetstipple">wxBrush::SetStipple</ref>

</seealso><description></description></function></member>
<member class="wxBrush" name="Ok"><function type="bool" name="Ok" suffix="const"><description>

Returns true if the brush is initialised. It will return false if the default
constructor has been used (for example, the brush is a member of a class, or
NULL has been assigned to it).

</description></function></member>
<member class="wxBrush" name="SetColour"><function type="void" name="SetColour"><parameters><parameter type="wxColour&amp; " name="colour"></parameter></parameters><description>

Sets the brush colour using a reference to a colour object.

</description></function>
<function type="void" name="SetColour"><parameters><parameter type="const wxString&amp; " name="colourName"></parameter></parameters><description>

Sets the brush colour using a colour name from the colour database.

</description></function>
<function type="void" name="SetColour"><parameters><parameter type="const unsigned char" name=" red"></parameter><parameter type="const unsigned char" name=" green"></parameter><parameter type="const unsigned char" name=" blue"></parameter></parameters><seealso>

<ref target="wxbrushgetcolour">wxBrush::GetColour</ref>

</seealso><description>

Sets the brush colour using red, green and blue values.

</description></function></member>
<member class="wxBrush" name="SetStipple"><function type="void" name="SetStipple"><parameters><parameter type="const wxBitmap&amp;" name=" bitmap"></parameter></parameters><seealso>

<ref target="wxbitmap">wxBitmap</ref>

</seealso><remarks>

The style will be set to wxSTIPPLE, unless the bitmap has a mask associated
to it, in which case the style will be set to wxSTIPPLE_MASK_OPAQUE.

If the wxSTIPPLE variant is used, the bitmap will be used to fill out the
area to be drawn. If the wxSTIPPLE_MASK_OPAQUE is used, the current
text foreground and text background determine what colours are used for
displaying and the bits in the mask (which is a mono-bitmap actually)
determine where to draw what.

Note that under Windows 95, only 8x8 pixel large stipple bitmaps are
supported, Windows 98 and NT as well as GTK support arbitrary bitmaps.

</remarks><description>

Sets the stipple bitmap.





</description></function></member>
<member class="wxBrush" name="SetStyle"><function type="void" name="SetStyle"><parameters><parameter type="int" name=" style"></parameter></parameters><seealso>

<ref target="wxbrushgetstyle">wxBrush::GetStyle</ref>

</seealso><description>

Sets the brush style.



</description></function></member>
<member class="wxBrush" name="operator $=$"><function type="wxBrush&amp;" name="operator $=$"><parameters><parameter type="const wxBrush&amp; " name="brush"></parameter></parameters><description>

Assignment operator, using reference counting. Returns a reference
to `this'.

</description></function></member>
<member class="wxBrush" name="operator $==$"><function type="bool" name="operator $==$"><parameters><parameter type="const wxBrush&amp; " name="brush"></parameter></parameters><description>

Equality operator. Two brushes are equal if they contain pointers
to the same underlying brush data. It does not compare each attribute,
so two independently-created brushes using the same parameters will
fail the test.

</description></function></member>
<member class="wxBrush" name="operator $!=$"><function type="bool" name="operator $!=$"><parameters><parameter type="const wxBrush&amp; " name="brush"></parameter></parameters><description>

Inequality operator. Two brushes are not equal if they contain pointers
to different underlying brush data. It does not compare each attribute.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxBrushList">
<description>
<p class="classdesc">
A brush list is a list containing all brushes which have been created.</p>
</description>
<remarks>

There is only one instance of this class: <b> wxTheBrushList</b>.  Use
this object to search for a previously created brush of the desired
type and create it if not already found. In some windowing systems,
the brush may be a scarce resource, so it can pay to reuse old
resources if possible. When an application finishes, all brushes will
be deleted and their resources freed, eliminating the possibility of
`memory leaks'. However, it is best not to rely on this automatic
cleanup because it can lead to double deletion in some circumstances.

There are two mechanisms in recent versions of wxWindows which make the
brush list less useful than it once was. Under Windows, scarce resources
are cleaned up internally if they are not being used. Also, a referencing
counting mechanism applied to all GDI objects means that some sharing
of underlying resources is possible. You don't have to keep track of pointers,
working out when it is safe delete a brush, because the referencing counting does
it for you. For example, you can set a brush in a device context, and then
immediately delete the brush you passed, because the brush is `copied'.

So you may find it easier to ignore the brush list, and instead create
and copy brushes as you see fit. If your Windows resource meter suggests
your application is using too many resources, you can resort to using
GDI lists to share objects explicitly.

The only compelling use for the brush list is for wxWindows to keep
track of brushes in order to clean them up on exit. It is also kept for
backward compatibility with earlier versions of wxWindows.

</remarks>
<parents>
<classref name="wxList"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/gdicmn.h"/></includes>
<seealso>

<ref target="wxbrush">wxBrush</ref>

</seealso>
<members>
<member class="wxBrushList" name="wxBrushList"><function type="void" name="wxBrushList"><description>

Constructor. The application should not construct its own brush list:
use the object pointer <b> wxTheBrushList</b>.

</description></function></member>
<member class="wxBrushList" name="AddBrush"><function type="void" name="AddBrush"><parameters><parameter type="wxBrush &#42;" name="brush"></parameter></parameters><description>

Used internally by wxWindows to add a brush to the list.

</description></function></member>
<member class="wxBrushList" name="FindOrCreateBrush"><function type="wxBrush &#42;" name="FindOrCreateBrush"><parameters><parameter type="const wxColour&amp; " name="colour">Colour object.</parameter><parameter type="int" name=" style"></parameter></parameters><description>

Finds a brush with the specified attributes and returns it, else creates a new brush, adds it
to the brush list, and returns it.

</description></function>
<function type="wxBrush &#42;" name="FindOrCreateBrush"><parameters><parameter type="const wxString&amp; " name="colourName">Colour name, which should be in the colour database.</parameter><parameter type="int" name=" style"></parameter></parameters><description>

Finds a brush with the specified attributes and returns it, else creates a new brush, adds it
to the brush list, and returns it.

Finds a brush of the given specification, or creates one and adds it to the list.









</description></function></member>
<member class="wxBrushList" name="RemoveBrush"><function type="void" name="RemoveBrush"><parameters><parameter type="wxBrush &#42;" name="brush"></parameter></parameters><description>

Used by wxWindows to remove a brush from the list.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxBufferedInputStream">
<description>
<p class="classdesc">
This stream acts as a cache. It caches the bytes read from the specified
input stream (See <ref target="wxfilterinputstream">wxFilterInputStream</ref>).
It uses wxStreamBuffer and sets the default in-buffer size to 1024 bytes.
This class may not be used without some other stream to read the data
from (such as a file stream or a memory stream).</p>
</description>
<parents>
<classref name="wxFilterInputStream"/>

</parents>
<includes>
<header name="wx/stream.h"/></includes>
<members>
</members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxBufferedOutputStream">
<description>
<p class="classdesc">
This stream acts as a cache. It caches the bytes to be written to the specified
output stream (See <ref target="wxfilteroutputstream">wxFilterOutputStream</ref>). The
data is only written when the cache is full, when the buffered stream is
destroyed or when calling SeekO().</p><p class="classdesc">This class may not be used without some other stream to write the data
to (such as a file stream or a memory stream).</p>
</description>
<parents>
<classref name="wxFilterOutputStream"/>

</parents>
<includes>
<header name="wx/stream.h"/></includes>
<seealso>

<ref target="wxstreambuffer">wxStreamBuffer</ref><ref target="wxoutputstream">wxOutputStream</ref>

</seealso>
<members>
<member class="wxBufferedOutputStream" name="wxBufferedOutputStream"><function type="" name="wxBufferedOutputStream"><parameters><parameter type="const wxOutputStream&amp;" name=" parent"></parameter></parameters><description>

Creates a buffered stream using a buffer of a default size of 1024 bytes for cashing
the stream <i> parent</i>.

</description></function></member>
<member class="wxBufferedOutputStream" name="~wxBufferedOutputStream"><function type="" name="~wxBufferedOutputStream"><description>

Destructor. Calls Sync() and destroys the internal buffer.

</description></function></member>
<member class="wxBufferedOutputStream" name="SeekO"><function type="off_t" name="SeekO"><parameters><parameter type="off_t" name=" pos"></parameter><parameter type="wxSeekMode" name=" mode"></parameter></parameters><description>

Calls Sync() and changes the stream position.

</description></function></member>
<member class="wxBufferedOutputStream" name="Sync"><function type="void" name="Sync"><description>

Flushes the buffer and calls Sync() on the parent stream.



</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxBusyCursor">
<description>
<p class="classdesc">
This class makes it easy to tell your user that the program is temporarily busy.
Just create a wxBusyCursor object on the stack, and within the current scope,
the hourglass will be shown.</p><p class="classdesc">For example:</p><p class="classdesc"><pre>
  wxBusyCursor wait;

  for (int i = 0; i &lt; 100000; i++)
    DoACalculation();
</pre></p><p class="classdesc">It works by calling <ref target="wxbeginbusycursor">wxBeginBusyCursor</ref> in the constructor,
and <ref target="wxendbusycursor">wxEndBusyCursor</ref> in the destructor.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/utils.h"/></includes>
<seealso>

<ref target="wxbeginbusycursor">wxBeginBusyCursor</ref>,
<ref target="wxendbusycursor">wxEndBusyCursor</ref>,
<ref target="wxwindowdisabler">wxWindowDisabler</ref>

</seealso>
<members>
<member class="wxBusyCursor" name="wxBusyCursor"><function type="" name="wxBusyCursor"><parameters><parameter type="wxCursor&#42;" name="cursor" value="wxHOURGLASS_CURSOR"></parameter></parameters><description>

Constructs a busy cursor object, calling <ref target="wxbeginbusycursor">wxBeginBusyCursor</ref>.

</description></function></member>
<member class="wxBusyCursor" name="~wxBusyCursor"><function type="" name="~wxBusyCursor"><description>

Destroys the busy cursor object, calling <ref target="wxendbusycursor">wxEndBusyCursor</ref>.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxBusyInfo">
<description>
<p class="classdesc">
This class makes it easy to tell your user that the program is temporarily busy.
Just create a wxBusyInfo object on the stack, and within the current scope,
a message window will be shown.</p><p class="classdesc">For example:</p><p class="classdesc"><pre>
    wxBusyInfo wait(&quot;Please wait, working...&quot;);

    for (int i = 0; i &lt; 100000; i++)
    {
        DoACalculation();
    }
</pre></p><p class="classdesc">It works by creating a window in the constructor,
and deleting it in the destructor.</p><p class="classdesc">You may also want to call wxTheApp-&gt;Yield() to refresh the window
periodically (in case it had been obscured by other windows, for
example) like this:</p><p class="classdesc"><pre>
    wxWindowDisabler disableAll;

    wxBusyInfo wait(&quot;Please wait, working...&quot;);

    for (int i = 0; i &lt; 100000; i++)
    {
        DoACalculation();

        if ( !(i             wxTheApp-&gt;Yield();
    }
</pre></p><p class="classdesc">but take care to not cause undesirable reentrancies when doing it (see 
<ref target="wxappyield">wxApp::Yield()</ref> for more details). The simplest way to do
it is to use <ref target="wxwindowdisabler">wxWindowDisabler</ref> class as illustrated
in the above example.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/busyinfo.h"/></includes>
<members>
<member class="wxBusyInfo" name="wxBusyInfo"><function type="" name="wxBusyInfo"><parameters><parameter type="const wxString&amp;" name=" msg"></parameter><parameter type="wxParent " name="&#42;parent" value="NULL"></parameter></parameters><description>

Constructs a busy info window as child of <i> parent</i> and displays <i> msg</i>
in it.

<b> NB:</b> If <i> parent</i> is not <tt> NULL</tt> you must ensure that it is not
closed while the busy info is shown.

</description></function></member>
<member class="wxBusyInfo" name="~wxBusyInfo"><function type="" name="~wxBusyInfo"><description>

Hides and closes the window containing the information text.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxButton">
<description>
<p class="classdesc">
A button is a control that contains a text string,
and is one of the commonest elements of a GUI. It may be placed on a
<ref target="wxdialog">dialog box</ref> or <ref target="wxpanel">panel</ref>, or indeed
almost any other window.</p>
</description>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/button.h"/></includes>
<windowstyles>
<style name="wxBU_LEFT" platforms="WIN32">Left-justifies the label. </style><style name="wxBU_TOP" platforms="WIN32">Aligns the label to the top of the button. </style><style name="wxBU_RIGHT" platforms="WIN32">Right-justifies the bitmap label. </style><style name="wxBU_BOTTOM" platforms="WIN32">Aligns the label to the bottom of the button. </style><style name="wxBU_EXACTFIT">Creates the button as small as possible instead of making it of the standard size (which is the default behaviour ).</style></windowstyles>
<events>
<event name="EVT_BUTTON(id, func)">Process a wxEVT_COMMAND_BUTTON_CLICKED event,
when the button is clicked.</event></events>
<seealso>

<ref target="wxbitmapbutton">wxBitmapButton</ref>

</seealso>
<members>
<member class="wxButton" name="wxButton"><function type="" name="wxButton"><description>

Default constructor.

</description></function>
<function type="" name="wxButton"><parameters><parameter type="wxWindow&#42; " name="parent">Parent window. Must not be NULL.</parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp; " name="label">Text to be displayed on the button.</parameter><parameter type="const wxPoint&amp; " name="pos">Button position.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Button size. If the default size (-1, -1) is specified then the button is sized
appropriately for the text.</parameter><parameter type="long" name="style" value="0">Window style. See <ref target="wxbutton">wxButton</ref>.</parameter><parameter type="const wxValidator&amp; " name="validator">Window validator.</parameter><parameter type="const wxString&amp; " name="name" value="``button&quot;">Window name.</parameter></parameters><seealso>

<ref target="wxbuttoncreate">wxButton::Create</ref><ref target="wxvalidator">wxValidator</ref>

</seealso><description></description></function></member>
<member class="wxButton" name="~wxButton"><function type="" name="~wxButton"><description>

Destructor, destroying the button.

</description></function></member>
<member class="wxButton" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp; " name="label"></parameter><parameter type="const wxPoint&amp; " name="pos"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="0"></parameter><parameter type="const wxValidator&amp; " name="validator"></parameter><parameter type="const wxString&amp; " name="name" value="``button&quot;"></parameter></parameters><description>

Button creation function for two-step creation. For more details, see <ref target="wxbuttonconstr">wxButton::wxButton</ref>.

</description></function></member>
<member class="wxButton" name="GetLabel"><function type="wxString" name="GetLabel" suffix="const"><seealso>

<ref target="wxbuttonsetlabel">wxButton::SetLabel</ref>

</seealso><returnvalue>

The button's label.

</returnvalue><description>

Returns the string label for the button.

</description></function></member>
<member class="wxButton" name="GetDefaultSize"><function type="wxSize" name="GetDefaultSize"><description>

Returns the default size for the buttons. It is advised to make all the dialog
buttons of the same size and this function allows to retrieve the (platform and
current font dependent size) which should be the best suited for this.

</description></function></member>
<member class="wxButton" name="SetDefault"><function type="void" name="SetDefault"><remarks>

Under Windows, only dialog box buttons respond to this function.  As
normal under Windows and Motif, pressing return causes the default button to
be depressed when the return key is pressed. See also <ref target="wxwindowsetfocus">wxWindow::SetFocus</ref>
which sets the keyboard focus for windows and text panel items,
and <ref target="wxpanelsetdefaultitem">wxPanel::SetDefaultItem</ref>.

Note that under Motif, calling this function immediately after
creation of a button and before the creation of other buttons
will cause misalignment of the row of buttons, since default
buttons are larger. To get around this, call <i> SetDefault</i>
after you have created a row of buttons: wxWindows will
then set the size of all buttons currently on the panel to
the same size.

</remarks><description>

This sets the button to be the default item for the panel or dialog
box.

</description></function></member>
<member class="wxButton" name="SetLabel"><function type="void" name="SetLabel"><parameters><parameter type="const wxString&amp; " name="label">The label to set.</parameter></parameters><seealso>

<ref target="wxbuttongetlabel">wxButton::GetLabel</ref>

</seealso><description>

Sets the string label for the button.





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxCSConv">
<description>
<p class="classdesc">
This class converts between any character sets and Unicode.
It has one predefined instance, <b> wxConvLocal</b>, for the
default user character set.</p>
</description>
<parents>
<classref name="wxMBConv"/>

</parents>
<includes>
<header name="wx/strconv.h"/></includes>
<seealso>

<ref target="wxmbconv">wxMBConv</ref>
<ref target="wxencodingconverter">wxEncodingConverter</ref>
<ref target="mbconvclasses">wxMBConv classes overview</ref>

</seealso>
<members>
<member class="wxCSConv" name="wxCSConv"><function type="" name="wxCSConv"><parameters><parameter type="const wxChar&#42; " name="charset"></parameter></parameters><description>

Constructor. Specify the name of the character set you want to convert
from/to.

</description></function></member>
<member class="wxCSConv" name="~wxCSConv"><function type="" name="~wxCSConv"><description>

Destructor.

</description></function></member>
<member class="wxCSConv" name="LoadNow"><function type="void" name="LoadNow"><description>

If the conversion tables needs to be loaded from disk, this method
will do so. Otherwise, they will be loaded when any of the conversion
methods are called.

</description></function></member>
<member class="wxCSConv" name="MB2WC"><function type="size_t" name="MB2WC" suffix="const"><parameters><parameter type="wchar_t&#42; " name="buf"></parameter><parameter type="const char&#42; " name="psz"></parameter><parameter type="size_t " name="n"></parameter></parameters><description>

Converts from the selected character set to Unicode. Returns the size of the destination buffer.

</description></function></member>
<member class="wxCSConv" name="WC2MB"><function type="size_t" name="WC2MB" suffix="const"><parameters><parameter type="char&#42; " name="buf"></parameter><parameter type="const wchar_t&#42; " name="psz"></parameter><parameter type="size_t " name="n"></parameter></parameters><description>

Converts from Unicode to the selected character set. Returns the size of the destination buffer.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxCalculateLayoutEvent">
<description>
<p class="classdesc">
This event is sent by <ref target="wxlayoutalgorithm">wxLayoutAlgorithm</ref> to
calculate the amount of the remaining client area that the window should
occupy.</p>
</description>
<parents>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/laywin.h"/></includes>
<events>
<event name="EVT_CALCULATE_LAYOUT(func)">Process a wxEVT_CALCULATE_LAYOUT event,
which asks the window to take a 'bite' out of a rectangle provided by the algorithm.</event></events>
<seealso>

<ref target="wxquerylayoutinfoevent">wxQueryLayoutInfoEvent</ref>,
<ref target="wxsashlayoutwindow">wxSashLayoutWindow</ref>,
<ref target="wxlayoutalgorithm">wxLayoutAlgorithm</ref>.

</seealso>
<members>
<member class="wxCalculateLayoutEvent" name="wxCalculateLayoutEvent"><function type="" name="wxCalculateLayoutEvent"><parameters><parameter type="wxWindowID " name="id" value="0"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxCalculateLayoutEvent" name="GetFlags"><function type="int" name="GetFlags" suffix="const"><description>

Returns the flags associated with this event. Not currently used.

</description></function></member>
<member class="wxCalculateLayoutEvent" name="GetRect"><function type="wxRect" name="GetRect" suffix="const"><description>

Before the event handler is entered, returns the remaining parent client area that the window
could occupy. When the event handler returns, this should contain the remaining parent client rectangle,
after the event handler has subtracted the area that its window occupies.

</description></function></member>
<member class="wxCalculateLayoutEvent" name="SetFlags"><function type="void" name="SetFlags"><parameters><parameter type="int " name="flags"></parameter></parameters><description>

Sets the flags associated with this event. Not currently used.

</description></function></member>
<member class="wxCalculateLayoutEvent" name="SetRect"><function type="void" name="SetRect"><parameters><parameter type="const wxRect&amp; " name="rect"></parameter></parameters><description>

Call this to specify the new remaining parent client area, after the space occupied by the
window has been subtracted.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxCalendarCtrl">
<description>
<p class="classdesc">
The calendar control allows the user to pick a date interactively. For this,
it displays a window containing several parts: the control to pick the month
and the year at the top (either or both of them may be disabled) and a month
area below them which shows all the days in the month. The user can move the
current selection using the keyboard and select the date (generating 
<tt> EVT_CALENDAR</tt> event) by pressing <tt> &lt;Return&gt;</tt> or double clicking it.</p><p class="classdesc">It has advanced possibilities for the customization of its display. All global
settings (such as colours and fonts used) can, of course, be changed. But
also, the display style for each day in the month can be set independently
using <ref target="wxcalendardateattr">wxCalendarDateAttr</ref> class.</p><p class="classdesc">An item without custom attributes is drawn with the default colours and
font and without border, but setting custom attributes with 
<ref target="wxcalendarctrlsetattr">SetAttr</ref> allows to modify its appearance. Just
create a custom attribute object and set it for the day you want to be
displayed specially (note that the control will take ownership of the pointer,
i.e. it will delete it itself). A day may be marked as being a holiday, even
if it is not recognized as one by <ref target="tdateholidays">wxDateTime</ref> using 
<ref target="wxcalendardateattrsetholiday">SetHoliday</ref> method.</p><p class="classdesc">As the attributes are specified for each day, they may change when the month
is changed, so you will often want to update them in 
<tt> EVT_CALENDAR_MONTH</tt> event handler.</p>
</description>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/calctrl.h"/></includes>
<windowstyles>
<style name="wxCAL_SUNDAY_FIRST">Show Sunday as the first day in the week</style><style name="wxCAL_MONDAY_FIRST">Show Monday as the first day in the week</style><style name="wxCAL_SHOW_HOLIDAYS">Highlight holidays in the calendar</style><style name="wxCAL_NO_YEAR_CHANGE">Disable the year changing</style><style name="wxCAL_NO_MONTH_CHANGE">Disable the month (and, implicitly, the year) changing</style><style name="wxCAL_SHOW_SURROUNDING_WEEKS">Show the neighbouring weeks in the previous and next months</style><style name="wxCAL_SEQUENTIAL_MONTH_SELECTION">Use alternative, more compact, style for the month and year selection controls.</style></windowstyles>
<events>
<event name="EVT_CALENDAR(id, func)">A day was double clicked in the calendar.</event><event name="EVT_CALENDAR_SEL_CHANGED(id, func)">The selected date changed.</event><event name="EVT_CALENDAR_DAY(id, func)">The selected day changed.</event><event name="EVT_CALENDAR_MONTH(id, func)">The selected month changed.</event><event name="EVT_CALENDAR_YEAR(id, func)">The selected year changed.</event><event name="EVT_CALENDAR_WEEKDAY_CLICKED(id, func)">User clicked on the week day header</event></events>
<constants>

The following are the possible return values for 
<ref target="wxcalendarctrlhittest">HitTest</ref> method:

<pre>
enum wxCalendarHitTestResult
{
    wxCAL_HITTEST_NOWHERE,      // outside of anything
    wxCAL_HITTEST_HEADER,       // on the header (weekdays)
    wxCAL_HITTEST_DAY           // on a day in the calendar
}
</pre>

</constants>
<seealso>

<ref target="samplecalendar">Calendar sample</ref><br/>
<ref target="wxcalendardateattr">wxCalendarDateAttr</ref><br/>
<ref target="wxcalendarevent">wxCalendarEvent</ref>

</seealso>
<members>
<member class="wxCalendarCtrl" name="wxCalendarCtrl"><function type="" name="wxCalendarCtrl"><description>

Default constructor, use <ref target="wxcalendarctrlcreate">Create</ref> after it.

</description></function></member>
<member class="wxCalendarCtrl" name="wxCalendarCtrl"><function type="" name="wxCalendarCtrl"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxDateTime&amp; " name="date" value="wxDefaultDateTime"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long " name="style" value="wxCAL_SHOW_HOLIDAYS"></parameter><parameter type="const wxString&amp; " name="name" value="wxCalendarNameStr"></parameter></parameters><description>

Does the same as <ref target="wxcalendarctrlcreate">Create</ref> method.

</description></function></member>
<member class="wxCalendarCtrl" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxDateTime&amp; " name="date" value="wxDefaultDateTime"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long " name="style" value="wxCAL_SHOW_HOLIDAYS"></parameter><parameter type="const wxString&amp; " name="name" value="wxCalendarNameStr"></parameter></parameters><description>

Creates the control. See <ref target="wxwindowctor">wxWindow</ref> for the meaning of
the parameters and the control overview for the possible styles.

</description></function></member>
<member class="wxCalendarCtrl" name="~wxCalendarCtrl"><function type="" name="~wxCalendarCtrl"><description>

Destroys the control.

</description></function></member>
<member class="wxCalendarCtrl" name="SetDate"><function type="void" name="SetDate"><parameters><parameter type="const wxDateTime&amp; " name="date"></parameter></parameters><description>

Sets the current date.

</description></function></member>
<member class="wxCalendarCtrl" name="GetDate"><function type="const wxDateTime&amp;" name="GetDate" suffix="const"><description>

Gets the currently selected date.

</description></function></member>
<member class="wxCalendarCtrl" name="EnableYearChange"><function type="void" name="EnableYearChange"><parameters><parameter type="bool " name="enable" value="true"></parameter></parameters><description>

This function should be used instead of changing <tt> wxCAL_NO_YEAR_CHANGE</tt>
style bit directly. It allows or disallows the user to change the year
interactively.

</description></function></member>
<member class="wxCalendarCtrl" name="EnableMonthChange"><function type="void" name="EnableMonthChange"><parameters><parameter type="bool " name="enable" value="true"></parameter></parameters><description>

This function should be used instead of changing 
<tt> wxCAL_NO_MONTH_CHANGE</tt> style bit. It allows or disallows the user to
change the month interactively. Note that if the month can not be changed, the
year can not be changed neither.

</description></function></member>
<member class="wxCalendarCtrl" name="EnableHolidayDisplay"><function type="void" name="EnableHolidayDisplay"><parameters><parameter type="bool " name="display" value="true"></parameter></parameters><description>

This function should be used instead of changing <tt> wxCAL_SHOW_HOLIDAYS</tt>
style bit directly. It enables or disables the special highlighting of the
holidays.

</description></function></member>
<member class="wxCalendarCtrl" name="SetHeaderColours"><function type="void" name="SetHeaderColours"><parameters><parameter type="const wxColour&amp; " name="colFg"></parameter><parameter type="const wxColour&amp; " name="colBg"></parameter></parameters><description>

Set the colours used for painting the weekdays at the top of the control.

</description></function></member>
<member class="wxCalendarCtrl" name="GetHeaderColourFg"><function type="const wxColour&amp;" name="GetHeaderColourFg" suffix="const"><seealso>

<ref target="wxcalendarctrlsetheadercolours">SetHeaderColours</ref>

</seealso><description>

Gets the foreground colour of the header part of the calendar window.

</description></function></member>
<member class="wxCalendarCtrl" name="GetHeaderColourBg"><function type="const wxColour&amp;" name="GetHeaderColourBg" suffix="const"><seealso>

<ref target="wxcalendarctrlsetheadercolours">SetHeaderColours</ref>

</seealso><description>

Gets the background colour of the header part of the calendar window.

</description></function></member>
<member class="wxCalendarCtrl" name="SetHighlightColours"><function type="void" name="SetHighlightColours"><parameters><parameter type="const wxColour&amp; " name="colFg"></parameter><parameter type="const wxColour&amp; " name="colBg"></parameter></parameters><description>

Set the colours to be used for highlighting the currently selected date.

</description></function></member>
<member class="wxCalendarCtrl" name="GetHighlightColourFg"><function type="const wxColour&amp;" name="GetHighlightColourFg" suffix="const"><seealso>

<ref target="wxcalendarctrlsethighlightcolours">SetHighlightColours</ref>

</seealso><description>

Gets the foreground highlight colour.

</description></function></member>
<member class="wxCalendarCtrl" name="GetHighlightColourBg"><function type="const wxColour&amp;" name="GetHighlightColourBg" suffix="const"><seealso>

<ref target="wxcalendarctrlsethighlightcolours">SetHighlightColours</ref>

</seealso><description>

Gets the background highlight colour.

</description></function></member>
<member class="wxCalendarCtrl" name="SetHolidayColours"><function type="void" name="SetHolidayColours"><parameters><parameter type="const wxColour&amp; " name="colFg"></parameter><parameter type="const wxColour&amp; " name="colBg"></parameter></parameters><description>

Sets the colours to be used for the holidays highlighting (only used if the
window style includes <tt> wxCAL_SHOW_HOLIDAYS</tt> flag).

</description></function></member>
<member class="wxCalendarCtrl" name="GetHolidayColourFg"><function type="const wxColour&amp;" name="GetHolidayColourFg" suffix="const"><seealso>

<ref target="wxcalendarctrlsetholidaycolours">SetHolidayColours</ref>

</seealso><description>

Return the foreground colour currently used for holiday highlighting.

</description></function></member>
<member class="wxCalendarCtrl" name="GetHolidayColourBg"><function type="const wxColour&amp;" name="GetHolidayColourBg" suffix="const"><seealso>

<ref target="wxcalendarctrlsetholidaycolours">SetHolidayColours</ref>

</seealso><description>

Return the background colour currently used for holiday highlighting.

</description></function></member>
<member class="wxCalendarCtrl" name="GetAttr"><function type="wxCalendarDateAttr &#42;" name="GetAttr" suffix="const"><parameters><parameter type="size_t " name="day"></parameter></parameters><description>

Returns the attribute for the given date (should be in the range $1\ldots31$).

The returned pointer may be <tt> NULL</tt>.

</description></function></member>
<member class="wxCalendarCtrl" name="SetAttr"><function type="void" name="SetAttr"><parameters><parameter type="size_t " name="day"></parameter><parameter type="wxCalendarDateAttr&#42; " name="attr"></parameter></parameters><description>

Associates the attribute with the specified date (in the range $1\ldots31$).

If the pointer is <tt> NULL</tt>, the items attribute is cleared.

</description></function></member>
<member class="wxCalendarCtrl" name="SetHoliday"><function type="void" name="SetHoliday"><parameters><parameter type="size_t " name="day"></parameter></parameters><description>

Marks the specified day as being a holiday in the current month.

</description></function></member>
<member class="wxCalendarCtrl" name="ResetAttr"><function type="void" name="ResetAttr"><parameters><parameter type="size_t " name="day"></parameter></parameters><description>

Clears any attributes associated with the given day (in the range
$1\ldots31$).

</description></function></member>
<member class="wxCalendarCtrl" name="HitTest"><function type="wxCalendarHitTestResult" name="HitTest"><parameters><parameter type="const wxPoint&amp; " name="pos"></parameter><parameter type="wxDateTime&#42; " name="date" value="NULL"></parameter><parameter type="wxDateTime::WeekDay&#42; " name="wd" value="NULL"></parameter></parameters><description>

Returns one of <tt> wxCAL_HITTEST_XXX</tt> 
<ref target="wxcalendarctrl">constants</ref> and fills either <i> date</i> or 
<i> wd</i> pointer with the corresponding value depending on the hit test code.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxCalendarDateAttr">
<description>
<p class="classdesc">
wxCalendarDateAttr is a custom attributes for a calendar date. The objects of
this class are used with <ref target="wxcalendarctrl">wxCalendarCtrl</ref>.</p>
</description>
<parents></parents>
<constants>

Here are the possible kinds of borders which may be used to decorate a date:

<pre>
enum wxCalendarDateBorder
{
    wxCAL_BORDER_NONE,          // no border (default)
    wxCAL_BORDER_SQUARE,        // a rectangular border
    wxCAL_BORDER_ROUND          // a round border
}
</pre>

</constants>
<seealso>

<ref target="wxcalendarctrl">wxCalendarCtrl</ref>

</seealso>
<members>
<member class="wxCalendarDateAttr" name="wxCalendarDateAttr"><function type="" name="wxCalendarDateAttr"><description>

</description></function>
<function type="" name="wxCalendarDateAttr"><parameters><parameter type="const wxColour&amp; " name="colText"></parameter><parameter type="const wxColour&amp; " name="colBack" value="wxNullColour"></parameter><parameter type="const wxColour&amp; " name="colBorder" value="wxNullColour"></parameter><parameter type="const wxFont&amp; " name="font" value="wxNullFont"></parameter><parameter type="wxCalendarDateBorder " name="border" value="wxCAL_BORDER_NONE"></parameter></parameters><description>

</description></function>
<function type="" name="wxCalendarDateAttr"><parameters><parameter type="wxCalendarDateBorder " name="border"></parameter><parameter type="const wxColour&amp; " name="colBorder" value="wxNullColour"></parameter></parameters><description>

The constructors.

</description></function></member>
<member class="wxCalendarDateAttr" name="SetTextColour"><function type="void" name="SetTextColour"><parameters><parameter type="const wxColour&amp; " name="colText"></parameter></parameters><description>

Sets the text (foreground) colour to use.

</description></function></member>
<member class="wxCalendarDateAttr" name="SetBackgroundColour"><function type="void" name="SetBackgroundColour"><parameters><parameter type="const wxColour&amp; " name="colBack"></parameter></parameters><description>

Sets the text background colour to use.

</description></function></member>
<member class="wxCalendarDateAttr" name="SetBorderColour"><function type="void" name="SetBorderColour"><parameters><parameter type="const wxColour&amp; " name="col"></parameter></parameters><description>

Sets the border colour to use.

</description></function></member>
<member class="wxCalendarDateAttr" name="SetFont"><function type="void" name="SetFont"><parameters><parameter type="const wxFont&amp; " name="font"></parameter></parameters><description>

Sets the font to use.

</description></function></member>
<member class="wxCalendarDateAttr" name="SetBorder"><function type="void" name="SetBorder"><parameters><parameter type="wxCalendarDateBorder " name="border"></parameter></parameters><description>

Sets the <ref target="wxcalendardateattr">border kind</ref>

</description></function></member>
<member class="wxCalendarDateAttr" name="SetHoliday"><function type="void" name="SetHoliday"><parameters><parameter type="bool " name="holiday"></parameter></parameters><description>

Display the date with this attribute as a holiday.

</description></function></member>
<member class="wxCalendarDateAttr" name="HasTextColour"><function type="bool" name="HasTextColour" suffix="const"><description>

Returns <tt> true</tt> if this item has a non default text foreground colour.

</description></function></member>
<member class="wxCalendarDateAttr" name="HasBackgroundColour"><function type="bool" name="HasBackgroundColour" suffix="const"><description>

Returns <tt> true</tt> if this attribute specifies a non default text background colour.

</description></function></member>
<member class="wxCalendarDateAttr" name="HasBorderColour"><function type="bool" name="HasBorderColour" suffix="const"><description>

Returns <tt> true</tt> if this attribute specifies a non default border colour.

</description></function></member>
<member class="wxCalendarDateAttr" name="HasFont"><function type="bool" name="HasFont" suffix="const"><description>

Returns <tt> true</tt> if this attribute specifies a non default font.

</description></function></member>
<member class="wxCalendarDateAttr" name="HasBorder"><function type="bool" name="HasBorder" suffix="const"><description>

Returns <tt> true</tt> if this attribute specifies a non default (i.e. any) border.

</description></function></member>
<member class="wxCalendarDateAttr" name="IsHoliday"><function type="bool" name="IsHoliday" suffix="const"><description>

Returns <tt> true</tt> if this attribute specifies that this item should be
displayed as a holiday.

</description></function></member>
<member class="wxCalendarDateAttr" name="GetTextColour"><function type="const wxColour&amp;" name="GetTextColour" suffix="const"><description>

Returns the text colour to use for the item with this attribute.

</description></function></member>
<member class="wxCalendarDateAttr" name="GetBackgroundColour"><function type="const wxColour&amp;" name="GetBackgroundColour" suffix="const"><description>

Returns the background colour to use for the item with this attribute.

</description></function></member>
<member class="wxCalendarDateAttr" name="GetBorderColour"><function type="const wxColour&amp;" name="GetBorderColour" suffix="const"><description>

Returns the border colour to use for the item with this attribute.

</description></function></member>
<member class="wxCalendarDateAttr" name="GetFont"><function type="const wxFont&amp;" name="GetFont" suffix="const"><description>

Returns the font to use for the item with this attribute.

</description></function></member>
<member class="wxCalendarDateAttr" name="GetBorder"><function type="wxCalendarDateBorder" name="GetBorder" suffix="const"><description>

Returns the <ref target="wxcalendardateattr">border</ref> to use for the item with this attribute.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxCalendarEvent">
<description>
<p class="classdesc">
The wxCalendarEvent class is used together with 
<ref target="wxcalendarctrl">wxCalendarCtrl</ref>.</p>
</description>
<seealso>

<ref target="wxcalendarctrl">wxCalendarCtrl</ref>

</seealso>
<members>
<member class="wxCalendarEvent" name="GetDate"><function type="const wxDateTime&amp;" name="GetDate" suffix="const"><description>

Returns the date. This function may be called for all event types except 
<tt> EVT_CALENDAR_WEEKDAY_CLICKED</tt> one for which it doesn't make sense.

</description></function></member>
<member class="wxCalendarEvent" name="GetWeekDay"><function type="wxDateTime::WeekDay" name="GetWeekDay" suffix="const"><description>

Returns the week day on which the user clicked in 
<tt> EVT_CALENDAR_WEEKDAY_CLICKED</tt> handler. It doesn't make sense to call
this function in other handlers.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxCaret">
<description>
<p class="classdesc">
A caret is a blinking cursor showing the position where the typed text will
appear. The text controls usually have a caret but wxCaret class also allows
to use a caret in other windows.</p><p class="classdesc">Currently, the caret appears as a rectangle of the given size. In the future,
it will be possible to specify a bitmap to be used for the caret shape.</p><p class="classdesc">A caret is always associated with a window and the current caret can be
retrieved using <ref target="wxwindowgetcaret">wxWindow::GetCaret</ref>. The same caret
can't be reused in two different windows.</p>
</description>
<parents></parents>
<includes>
<header name="wx/caret.h"/></includes>
<structs>

</structs>
<members>
<member class="wxCaret" name="wxCaret"><function type="" name="wxCaret"><description>

Default constructor: you must use one of Create() functions later.

</description></function>
<function type="" name="wxCaret"><parameters><parameter type="wxWindow&#42; " name="window"></parameter><parameter type="int " name="width"></parameter><parameter type="int " name="height"></parameter></parameters><description>

</description></function>
<function type="" name="wxCaret"><parameters><parameter type="wxWindowBase&#42; " name="window"></parameter><parameter type="const wxSize&amp; " name="size"></parameter></parameters><description>

Create the caret of given (in pixels) width and height and associates it
with the given window.

</description></function></member>
<member class="wxCaret" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindowBase&#42; " name="window"></parameter><parameter type="int " name="width"></parameter><parameter type="int " name="height"></parameter></parameters><description>

</description></function>
<function type="bool" name="Create"><parameters><parameter type="wxWindowBase&#42; " name="window"></parameter><parameter type="const wxSize&amp; " name="size"></parameter></parameters><description>

Create the caret of given (in pixels) width and height and associates it
with the given window (same as constructor).

</description></function></member>
<member class="wxCaret" name="GetBlinkTime"><function type="static int" name="GetBlinkTime"><description>

Returns the blink time which is measured in milliseconds and is the time elapsed
between 2 inversions of the caret (blink time of the caret is the same
for all carets, so this functions is static).

</description></function></member>
<member class="wxCaret" name="GetPosition"><function type="void" name="GetPosition" suffix="const"><parameters><parameter type="int&#42; " name="x"></parameter><parameter type="int&#42; " name="y"></parameter></parameters><description>

</description></function>
<function type="wxPoint" name="GetPosition" suffix="const"><description>

Get the caret position (in pixels).

\perlnote{In wxPerl there are two methods instead of a single overloaded
method:\par
\indented{2cm}{<table>
<tr><td><b> GetPosition()</b></td><td>Returns a Wx::Point</td></tr>
<tr><td><b> GetPositionXY()</b></td><td>Returns a 2-element list
 <tt> ( x, y )</tt></td></tr>
</table>
}}

</description></function></member>
<member class="wxCaret" name="GetSize"><function type="void" name="GetSize" suffix="const"><parameters><parameter type="int&#42; " name="width"></parameter><parameter type="int&#42; " name="height"></parameter></parameters><description>

</description></function>
<function type="wxSize" name="GetSize" suffix="const"><description>

Get the caret size.

\perlnote{In wxPerl there are two methods instead of a single overloaded
method:\par
\indented{2cm}{<table>
<tr><td><b> GetSize()</b></td><td>Returns a Wx::Size</td></tr>
<tr><td><b> GetSizeWH()</b></td><td>Returns a 2-element list
 <tt> ( width, height )</tt></td></tr>
</table>
}}

</description></function></member>
<member class="wxCaret" name="GetWindow"><function type="wxWindow&#42;" name="GetWindow" suffix="const"><description>

Get the window the caret is associated with.

</description></function></member>
<member class="wxCaret" name="Hide"><function type="void" name="Hide"><description>

Same as <ref target="wxcaretshow">wxCaret::Show(false)</ref>.

</description></function></member>
<member class="wxCaret" name="IsOk"><function type="bool" name="IsOk" suffix="const"><description>

Returns true if the caret was created successfully.

</description></function></member>
<member class="wxCaret" name="IsVisible"><function type="bool" name="IsVisible" suffix="const"><description>

Returns true if the caret is visible and false if it is permanently
hidden (if it is is blinking and not shown currently but will be after the
next blink, this method still returns true).

</description></function></member>
<member class="wxCaret" name="Move"><function type="void" name="Move"><parameters><parameter type="int " name="x"></parameter><parameter type="int " name="y"></parameter></parameters><description>

</description></function>
<function type="void" name="Move"><parameters><parameter type="const wxPoint&amp; " name="pt"></parameter></parameters><description>

Move the caret to given position (in logical coordinates).

</description></function></member>
<member class="wxCaret" name="SetBlinkTime"><function type="static void" name="SetBlinkTime"><parameters><parameter type="int " name="milliseconds"></parameter></parameters><seealso>

<ref target="wxcaretgetblinktime">GetBlinkTime</ref>

</seealso><remarks>

Under Windows, this function will change the blink time for <b> all</b> carets
permanently (until the next time it is called), even for the carets in other
applications.

</remarks><description>

Sets the blink time for all the carets.

</description></function></member>
<member class="wxCaret" name="SetSize"><function type="void" name="SetSize"><parameters><parameter type="int " name="width"></parameter><parameter type="int " name="height"></parameter></parameters><description>

</description></function>
<function type="void" name="SetSize"><parameters><parameter type="const wxSize&amp; " name="size"></parameter></parameters><description>

Changes the size of the caret.

</description></function></member>
<member class="wxCaret" name="Show"><function type="void" name="Show"><parameters><parameter type="bool " name="show" value="true"></parameter></parameters><description>

Shows or hides the caret. Notice that if the caret was hidden $N$ times, it
must be shown $N$ times as well to reappear on the screen.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxCheckBox">
<description>
<p class="classdesc">
A checkbox is a labelled box which is either on (checkmark is visible)
or off (no checkmark).</p>
</description>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/checkbox.h"/></includes>
<windowstyles>
</windowstyles>
<events>
<event name="EVT_CHECKBOX(id, func)">Process a wxEVT_COMMAND_CHECKBOX_CLICKED event,
when the checkbox is clicked.</event></events>
<seealso>

<ref target="wxradiobutton">wxRadioButton</ref><ref target="wxcommandevent">wxCommandEvent</ref>

</seealso>
<members>
<member class="wxCheckBox" name="wxCheckBox"><function type="" name="wxCheckBox"><description>

Default constructor.

</description></function>
<function type="" name="wxCheckBox"><parameters><parameter type="wxWindow&#42; " name="parent">Parent window. Must not be NULL.</parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp; " name="label">Text to be displayed next to the checkbox.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Checkbox position. If the position (-1, -1) is specified then a default position is chosen.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Checkbox size. If the default size (-1, -1) is specified then a default size is chosen.</parameter><parameter type="long" name="style" value="0">Window style. See <ref target="wxcheckbox">wxCheckBox</ref>.</parameter><parameter type="const wxValidator&amp; " name="val"></parameter><parameter type="const wxString&amp; " name="name" value="``checkBox&quot;">Window name.</parameter></parameters><seealso>

<ref target="wxcheckboxcreate">wxCheckBox::Create</ref><ref target="wxvalidator">wxValidator</ref>

</seealso><description></description></function></member>
<member class="wxCheckBox" name="~wxCheckBox"><function type="" name="~wxCheckBox"><description>

Destructor, destroying the checkbox.

</description></function></member>
<member class="wxCheckBox" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp; " name="label"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="0"></parameter><parameter type="const wxValidator&amp; " name="val"></parameter><parameter type="const wxString&amp; " name="name" value="``checkBox&quot;"></parameter></parameters><description>

Creates the checkbox for two-step construction. See <ref target="wxcheckboxconstr">wxCheckBox::wxCheckBox</ref>
for details.

</description></function></member>
<member class="wxCheckBox" name="GetValue"><function type="bool" name="GetValue" suffix="const"><returnvalue>

Returns <tt> true</tt> if it is checked, <tt> false</tt> otherwise.

</returnvalue><description>

Gets the state of the checkbox.

</description></function></member>
<member class="wxCheckBox" name="IsChecked"><function type="bool" name="IsChecked" suffix="const"><description>

This is just a maybe more readable synonym for 
<ref target="wxcheckboxgetvalue">GetValue</ref>: just as the latter, it returns 
<tt> true</tt> if the checkbox is checked and <tt> false</tt> otherwise.

</description></function></member>
<member class="wxCheckBox" name="SetValue"><function type="void" name="SetValue"><parameters><parameter type="const bool" name=" state"></parameter></parameters><description>

Sets the checkbox to the given state. This does not cause a
wxEVT_COMMAND_CHECKBOX_CLICKED event to get emitted.





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxCheckListBox">
<description>
<p class="classdesc">
A checklistbox is like a listbox, but allows items to be checked or unchecked.</p><p class="classdesc">This class is currently implemented under Windows and GTK. When using this
class under Windows wxWindows must be compiled with USE_OWNER_DRAWN set to 1.</p><p class="classdesc">Only the new functions for this class are documented; see also <ref target="wxlistbox">wxListBox</ref>.</p>
</description>
<parents>
<classref name="wxListBox"/>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/checklst.h"/></includes>
<windowstyles>
</windowstyles>
<events>
<event name="EVT_CHECKLISTBOX(id, func)">Process a wxEVT_COMMAND_CHECKLISTBOX_TOGGLED event,
when an item in the check list box is checked or unchecked.</event></events>
<seealso>

<ref target="wxlistbox">wxListBox</ref><ref target="wxchoice">wxChoice</ref><ref target="wxcombobox">wxComboBox</ref><ref target="wxlistctrl">wxListCtrl</ref>,
<ref target="wxcommandevent">wxCommandEvent</ref>

</seealso>
<members>
<member class="wxCheckListBox" name="wxCheckListBox"><function type="" name="wxCheckListBox"><description>

Default constructor.

</description></function>
<function type="" name="wxCheckListBox"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition">Window position.</parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize">Window size. If the default size (-1, -1) is specified then the window is sized
appropriately.</parameter><parameter type="int" name=" n"></parameter><parameter type="const wxString " name="choices&#91;]" value="NULL"></parameter><parameter type="long" name="style" value="0">Window style. See <ref target="wxchecklistbox">wxCheckListBox</ref>.</parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator">Window validator.</parameter><parameter type="const wxString&amp; " name="name" value="``listBox&quot;">Window name.</parameter></parameters><description>

Constructor, creating and showing a list box.





















\pythonnote{The wxCheckListBox constructor in wxPython reduces the <tt> n</tt>
and <tt> choices</tt> arguments are to a single argument, which is
a list of strings.}

\perlnote{In wxPerl there is just an array reference in place of <tt> n</tt>
and <tt> choices</tt>.}

</description></function></member>
<member class="wxCheckListBox" name="~wxCheckListBox"><function type="void" name="~wxCheckListBox"><description>

Destructor, destroying the list box.

</description></function></member>
<member class="wxCheckListBox" name="Check"><function type="void" name="Check"><parameters><parameter type="int " name="item">Index of item to check.</parameter><parameter type="bool" name="check" value="true">true if the item is to be checked, false otherwise.</parameter></parameters><description>

Checks the given item. Note that calling this method doesn't result in
wxEVT_COMMAND_CHECKLISTBOX_TOGGLE being emitted.







</description></function></member>
<member class="wxCheckListBox" name="IsChecked"><function type="bool" name="IsChecked" suffix="const"><parameters><parameter type="int" name=" item"></parameter></parameters><description>

Returns true if the given item is checked, false otherwise.






</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxChoice">
<description>
<p class="classdesc">
A choice item is used to select one of a list of strings. Unlike a
listbox, only the selection is visible until the user pulls down the
menu of choices.</p>
</description>
<parents>
<classref name="wxControlWithItems"/>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/choice.h"/></includes>
<windowstyles>
</windowstyles>
<events>
<event name="EVT_CHOICE(id, func)">Process a wxEVT_COMMAND_CHOICE_SELECTED event,
when an item on the list is selected.</event></events>
<seealso>

<ref target="wxlistbox">wxListBox</ref><ref target="wxcombobox">wxComboBox</ref>,
<ref target="wxcommandevent">wxCommandEvent</ref>

</seealso>
<members>
<member class="wxChoice" name="wxChoice"><function type="" name="wxChoice"><description>

Default constructor.

</description></function>
<function type="" name="wxChoice"><parameters><parameter type="wxWindow &#42;" name="parent">Parent window. Must not be NULL.</parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxPoint&amp; " name="pos">Window position.</parameter><parameter type="const wxSize&amp;" name=" size"></parameter><parameter type="int" name=" n"></parameter><parameter type="const wxString " name="choices&#91;]"></parameter><parameter type="long" name="style" value="0">Window style. See <ref target="wxchoice">wxChoice</ref>.</parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator">Window validator.</parameter><parameter type="const wxString&amp; " name="name" value="``choice&quot;">Window name.</parameter></parameters><seealso>

<ref target="wxchoicecreate">wxChoice::Create</ref><ref target="wxvalidator">wxValidator</ref>

\pythonnote{The wxChoice constructor in wxPython reduces the <tt> n</tt>
and <tt> choices</tt> arguments are to a single argumentwhich is
a list of strings.}

\perlnote{In wxPerl there is just an array reference in place of <tt> n</tt>
and <tt> choices</tt>.}

</seealso><description></description></function></member>
<member class="wxChoice" name="~wxChoice"><function type="" name="~wxChoice"><description>

Destructor, destroying the choice item.

</description></function></member>
<member class="wxChoice" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow &#42;" name="parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxPoint&amp; " name="pos"></parameter><parameter type="const wxSize&amp;" name=" size"></parameter><parameter type="int" name=" n"></parameter><parameter type="const wxString " name="choices&#91;]"></parameter><parameter type="long" name="style" value="0"></parameter><parameter type="const wxString&amp; " name="name" value="``choice&quot;"></parameter></parameters><description>

Creates the choice for two-step construction. See <ref target="wxchoiceconstr">wxChoice::wxChoice</ref>.

</description></function></member>
<member class="wxChoice" name="Delete"><function type="void" name="Delete"><parameters><parameter type="int " name="n">The item to delete.</parameter></parameters><description>

Deletes the item with the given index from the control.





</description></function></member>
<member class="wxChoice" name="GetColumns"><function type="int" name="GetColumns" suffix="const"><remarks>

This is implemented for Motif only and always returns 1 for the other
platforms.

</remarks><description>

Gets the number of columns in this choice item.

</description></function></member>
<member class="wxChoice" name="SetColumns"><function type="void" name="SetColumns"><parameters><parameter type="int" name="n" value="1">Number of columns.</parameter></parameters><remarks>

This is implemented for Motif only and doesn't do anything under other
platforms.

</remarks><description>

Sets the number of columns in this choice item.





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxClassInfo">
<description>
<p class="classdesc">
This class stores meta-information about classes. Instances of this class are
not generally defined directly by an application, but indirectly through use
of macros such as <b> DECLARE_DYNAMIC_CLASS</b> and <b> IMPLEMENT_DYNAMIC_CLASS</b>.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/object.h"/></includes>
<seealso>

<ref target="wxclassinfooverview">Overview</ref><ref target="wxobject">wxObject</ref>

</seealso>
<members>
<member class="wxClassInfo" name="wxClassInfo"><function type="" name="wxClassInfo"><parameters><parameter type="char&#42; " name="className"></parameter><parameter type="char&#42; " name="baseClass1"></parameter><parameter type="char&#42; " name="baseClass2"></parameter><parameter type="int" name=" size"></parameter><parameter type="wxObjectConstructorFn " name="fn"></parameter></parameters><description>

Constructs a wxClassInfo object. The supplied macros implicitly construct objects of this
class, so there is no need to create such objects explicitly in an application.

</description></function></member>
<member class="wxClassInfo" name="CreateObject"><function type="wxObject&#42;" name="CreateObject"><description>

Creates an object of the appropriate kind. Returns NULL if the class has not been declared
dynamically creatable (typically, it is an abstract class).

</description></function></member>
<member class="wxClassInfo" name="FindClass"><function type="static wxClassInfo &#42;" name="FindClass"><parameters><parameter type="char&#42; " name="name"></parameter></parameters><description>

Finds the wxClassInfo object for a class of the given string name.

</description></function></member>
<member class="wxClassInfo" name="GetBaseClassName1"><function type="char&#42;" name="GetBaseClassName1" suffix="const"><description>

Returns the name of the first base class (NULL if none).

</description></function></member>
<member class="wxClassInfo" name="GetBaseClassName2"><function type="char&#42;" name="GetBaseClassName2" suffix="const"><description>

Returns the name of the second base class (NULL if none).

</description></function></member>
<member class="wxClassInfo" name="GetClassName"><function type="char &#42;" name="GetClassName" suffix="const"><description>

Returns the string form of the class name.

</description></function></member>
<member class="wxClassInfo" name="GetSize"><function type="int" name="GetSize" suffix="const"><description>

Returns the size of the class.

</description></function></member>
<member class="wxClassInfo" name="InitializeClasses"><function type="static void" name="InitializeClasses"><description>

Initializes pointers in the wxClassInfo objects for fast execution
of IsKindOf. Called in base wxWindows library initialization.

</description></function></member>
<member class="wxClassInfo" name="IsKindOf"><function type="bool" name="IsKindOf"><parameters><parameter type="wxClassInfo&#42; " name="info"></parameter></parameters><description>

Returns true if this class is a kind of (inherits from) the given class.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxClient">
<description>
<p class="classdesc">
A wxClient object represents the client part of a client-server
DDE-like (Dynamic Data Exchange) conversation. The actual
DDE-based implementation using wxDDEClient is available on Windows
only, but a platform-independent, socket-based version of this
API is available using wxTCPClient, which has the same API.</p><p class="classdesc">To create a client which can communicate with a suitable server,
you need to derive a class from wxConnection and another from
wxClient. The custom wxConnection class will intercept
communications in a `conversation' with a server, and the custom
wxClient is required so that a user-overridden
<ref target="wxddeclientonmakeconnection">wxClient::OnMakeConnection</ref> 
member can return a wxConnection of the required class, when a
connection is made. Look at the IPC sample and the 
<ref target="ipcoverview">Interprocess communications overview</ref> for
an example of how to do this.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/ipc.h"/></includes>
<seealso>

<ref target="wxddeserver">wxServer</ref>
<ref target="wxddeconnection">wxConnection</ref><ref target="ipcoverview">Interprocess communications overview</ref>

</seealso>
<members>
<member class="wxClient" name="wxClient"><function type="" name="wxClient"><description>

Constructs a client object.

</description></function></member>
<member class="wxClient" name="MakeConnection"><function type="wxConnectionBase &#42;" name="MakeConnection"><parameters><parameter type="const wxString&amp; " name="host"></parameter><parameter type="const wxString&amp; " name="service"></parameter><parameter type="const wxString&amp; " name="topic"></parameter></parameters><description>

Tries to make a connection with a server by host (machine name
under UNIX - use 'localhost' for same machine; ignored when using
native DDE in Windows), service name and topic string. If the
server allows a connection, a wxConnection object will be
returned. The type of wxConnection returned can be altered by
overriding the 
<ref target="wxddeclientonmakeconnection">wxClient::OnMakeConnection</ref> 
member to return your own derived connection object.

Under Unix, the service name may be either an integer port
identifier in which case an Internet domain socket will be used
for the communications, or a valid file name (which shouldn't
exist and will be deleted afterwards) in which case a Unix domain
socket is created.

<b> SECURITY NOTE:</b> Using Internet domain sockets if extremely
insecure for IPC as there is absolutely no access control for
them, use Unix domain sockets whenever possible!

</description></function></member>
<member class="wxClient" name="OnMakeConnection"><function type="wxConnectionBase &#42;" name="OnMakeConnection"><description>

Called by <ref target="wxddeclientmakeconnection">wxClient::MakeConnection</ref>, by
default this simply returns a new wxConnection object. Override
this method to return a wxConnection descendant customised for the
application.

The advantage of deriving your own connection class is that it
will enable you to intercept messages initiated by the server,
such as <ref target="wxddeconnectiononadvise">wxConnection::OnAdvise</ref>. You
may also want to store application-specific data in instances of
the new class.

</description></function></member>
<member class="wxClient" name="ValidHost"><function type="bool" name="ValidHost"><parameters><parameter type="const wxString&amp; " name="host"></parameter></parameters><description>

Returns true if this is a valid host name, false otherwise. This always
returns true under MS Windows.

</description></function></member></members>
<supported>
</supported>
</class>
<class name="wxClientDC">
<description>
<p class="classdesc">
A wxClientDC must be constructed if an application wishes to paint on the
client area of a window from outside an <b> OnPaint</b> event.
This should normally be constructed as a temporary stack object; don't store
a wxClientDC object.</p><p class="classdesc">To draw on a window from within <b> OnPaint</b>, construct a <ref target="wxpaintdc">wxPaintDC</ref> object.</p><p class="classdesc">To draw on the whole window including decorations, construct a <ref target="wxwindowdc">wxWindowDC</ref> object
(Windows only).</p>
</description>
<parents>
<classref name="wxWindowDC"/>
<classref name="wxDC"/>

</parents>
<includes>
<header name="wx/dcclient.h"/></includes>
<seealso>

<ref target="wxdc">wxDC</ref><ref target="wxmemorydc">wxMemoryDC</ref><ref target="wxpaintdc">wxPaintDC</ref>,
<ref target="wxwindowdc">wxWindowDC</ref><ref target="wxscreendc">wxScreenDC</ref>

</seealso>
<members>
<member class="wxClientDC" name="wxClientDC"><function type="" name="wxClientDC"><parameters><parameter type="wxWindow&#42;" name=" window"></parameter></parameters><description>

Constructor. Pass a pointer to the window on which you wish to paint.



</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="P"/><platform name="nanox" status="P"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxClientData">
<description>
<p class="classdesc">
All classes deriving from <ref target="wxevthandler">wxEvtHandler</ref>
(such as all controls and <ref target="wxapp">wxApp</ref>)
can hold arbitrary data which is here referred to as &quot;client data&quot;.
This is useful e.g. for scripting languages which need to handle
shadow objects for most of wxWindows' classes and which store
a handle to such a shadow class as client data in that class.
This data can either be of type void - in which case the data
<i> container</i> does not take care of freeing the data again
or it is of type wxClientData or its derivates. In that case the
container (e.g. a control) will free the memory itself later.
Note that you <i> must not</i> assign both void data and data
derived from the wxClientData class to a container.</p><p class="classdesc">Some controls can hold various items and these controls can
additionally hold client data for each item. This is the case for
<ref target="wxchoice">wxChoice</ref>, <ref target="wxcombobox">wxComboBox</ref>
and <ref target="wxlistbox">wxListBox</ref>. <ref target="wxtreectrl">wxTreeCtrl</ref>
has a specialized class <ref target="wxtreeitemdata">wxTreeItemData</ref>
for each item in the tree.</p><p class="classdesc">If you want to add client data to your own classes, you may
use the mix-in class <ref target="wxclientdatacontainer">wxClientDataContainer</ref>.</p>
</description>
<includes>
<header name="wx/clntdata.h"/></includes>
<seealso>

<ref target="wxevthandler">wxEvtHandler</ref><ref target="wxtreeitemdata">wxTreeItemData</ref>,
<ref target="wxstringclientdata">wxStringClientData</ref><ref target="wxclientdatacontainer">wxClientDataContainer</ref>

</seealso>
<members>
<member class="wxClientData" name="wxClientData"><function type="" name="wxClientData"><description>

Constructor.

</description></function></member>
<member class="wxClientData" name="~wxClientData"><function type="" name="~wxClientData"><description>

Virtual destructor.
</description></function></member></members>
<supported>
</supported>
</class><class name="wxClientDataContainer">
<description>
<p class="classdesc">
This class is a mixin that provides storage and management of &quot;client
data.&quot; This data can either be of type void - in which case the data
<i> container</i> does not take care of freeing the data again
or it is of type wxClientData or its derivates. In that case the
container will free the memory itself later.
Note that you <i> must not</i> assign both void data and data
derived from the wxClientData class to a container.</p><p class="classdesc">NOTE: This functionality is currently duplicated in wxEvtHandler in
order to avoid having more than one vtable in that class heirachy.</p>
</description>
<parents></parents>
<includes>
<header name="clntdata.h"/></includes>
<structs>

</structs>
<seealso>

<ref target="wxevthandler">wxEvtHandler</ref><ref target="wxclientdata">wxClientData</ref>

</seealso>
<members>
<member class="wxClientDataContainer" name="wxClientDataContainer"><function type="" name="wxClientDataContainer"><description>


</description></function></member>
<member class="wxClientDataContainer" name="~wxClientDataContainer"><function type="" name="~wxClientDataContainer"><description>


</description></function></member>
<member class="wxClientDataContainer" name="GetClientData"><function type="void&#42;" name="GetClientData" suffix="const"><description>

Get the untyped client data.

</description></function></member>
<member class="wxClientDataContainer" name="GetClientObject"><function type="wxClientData&#42;" name="GetClientObject" suffix="const"><description>

Get a pointer to the client data object.

</description></function></member>
<member class="wxClientDataContainer" name="SetClientData"><function type="void" name="SetClientData"><parameters><parameter type="void&#42; " name="data"></parameter></parameters><description>

Set the untyped client data.

</description></function></member>
<member class="wxClientDataContainer" name="SetClientObject"><function type="void" name="SetClientObject"><parameters><parameter type="wxClientData&#42; " name="data"></parameter></parameters><description>

Set the client data object. Any previous object will be deleted.

</description></function></member></members>
<supported>
</supported>
</class><class name="wxClipboard">
<description>
<p class="classdesc">
A class for manipulating the clipboard. Note that this is not compatible with the
clipboard class from wxWindows 1.xx, which has the same name but a different implementation.</p><p class="classdesc">To use the clipboard, you call member functions of the global <b> wxTheClipboard</b> object.</p><p class="classdesc">See also the <ref target="wxdataobjectoverview">wxDataObject overview</ref> for further information.</p><p class="classdesc">Call <ref target="wxclipboardopen">wxClipboard::Open</ref> to get ownership of the clipboard. If this operation returns true, you
now own the clipboard. Call <ref target="wxclipboardsetdata">wxClipboard::SetData</ref> to put data
on the clipboard, or <ref target="wxclipboardgetdata">wxClipboard::GetData</ref> to
retrieve data from the clipboard. Call <ref target="wxclipboardclose">wxClipboard::Close</ref> to close
the clipboard and relinquish ownership. You should keep the clipboard open only momentarily.</p><p class="classdesc">For example:</p><p class="classdesc"><pre>
  // Write some text to the clipboard
  if (wxTheClipboard-&gt;Open())
  {
    // This data objects are held by the clipboard, 
    // so do not delete them in the app.
    wxTheClipboard-&gt;SetData( new wxTextDataObject(&quot;Some text&quot;) );
    wxTheClipboard-&gt;Close();
  }

  // Read some text
  if (wxTheClipboard-&gt;Open())
  {
    if (wxTheClipboard-&gt;IsSupported( wxDF_TEXT ))
    {
      wxTextDataObject data;
      wxTheClipboard-&gt;GetData( data );
      wxMessageBox( data.GetText() );
    }  
    wxTheClipboard-&gt;Close();
  }
</pre></p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/clipbrd.h"/></includes>
<seealso>

<ref target="wxdndoverview">Drag and drop overview</ref><ref target="wxdataobject">wxDataObject</ref>

</seealso>
<members>
<member class="wxClipboard" name="wxClipboard"><function type="" name="wxClipboard"><description>

Constructor.

</description></function></member>
<member class="wxClipboard" name="~wxClipboard"><function type="" name="~wxClipboard"><description>

Destructor.

</description></function></member>
<member class="wxClipboard" name="AddData"><function type="bool" name="AddData"><parameters><parameter type="wxDataObject&#42;" name=" data"></parameter></parameters><seealso>

<ref target="wxclipboardsetdata">wxClipboard::SetData</ref>

</seealso><description>

Call this function to add the data object to the clipboard. You may call
this function repeatedly after having cleared the clipboard using <ref target="wxclipboardclear">wxClipboard::Clear</ref>.

After this function has been called, the clipboard owns the data, so do not delete
the data explicitly.

</description></function></member>
<member class="wxClipboard" name="Clear"><function type="void" name="Clear"><description>

Clears the global clipboard object and the system's clipboard if possible.

</description></function></member>
<member class="wxClipboard" name="Close"><function type="void" name="Close"><description>

Call this function to close the clipboard, having opened it with <ref target="wxclipboardopen">wxClipboard::Open</ref>.

</description></function></member>
<member class="wxClipboard" name="Flush"><function type="bool" name="Flush"><description>

Flushes the clipboard: this means that the data which is currently on
clipboard will stay available even after the application exits (possibly
eating memory), otherwise the clipboard will be emptied on exit.
Returns false if the operation is unsuccesful for any reason.

</description></function></member>
<member class="wxClipboard" name="GetData"><function type="bool" name="GetData"><parameters><parameter type="wxDataObject&amp;" name=" data"></parameter></parameters><description>

Call this function to fill <i> data</i> with data on the clipboard, if available in the required
format. Returns true on success.

</description></function></member>
<member class="wxClipboard" name="IsOpened"><function type="bool" name="IsOpened" suffix="const"><description>

Returns true if the clipboard has been opened.

</description></function></member>
<member class="wxClipboard" name="IsSupported"><function type="bool" name="IsSupported"><parameters><parameter type="const wxDataFormat&amp;" name=" format"></parameter></parameters><description>

Returns true if the format of the given data object is available on the clipboard.

</description></function></member>
<member class="wxClipboard" name="Open"><function type="bool" name="Open"><description>

Call this function to open the clipboard before calling <ref target="wxclipboardsetdata">wxClipboard::SetData</ref> 
and <ref target="wxclipboardgetdata">wxClipboard::GetData</ref>.

Call <ref target="wxclipboardclose">wxClipboard::Close</ref> when you have finished with the clipboard. You
should keep the clipboard open for only a very short time.

Returns true on success. This should be tested (as in the sample shown above).

</description></function></member>
<member class="wxClipboard" name="SetData"><function type="bool" name="SetData"><parameters><parameter type="wxDataObject&#42;" name=" data"></parameter></parameters><seealso>

<ref target="wxclipboardadddata">wxClipboard::AddData</ref>

</seealso><description>

Call this function to set the data object to the clipboard. This function will
clear all previous contents in the clipboard, so calling it several times
does not make any sense.

After this function has been called, the clipboard owns the data, so do not delete
the data explicitly.

</description></function></member>
<member class="wxClipboard" name="UsePrimarySelection"><function type="void" name="UsePrimarySelection"><parameters><parameter type="bool" name="primary" value="true"></parameter></parameters><description>

On platforms supporting it (currently only GTK), selects the so called
PRIMARY SELECTION as the clipboard as opposed to the normal clipboard,
if <i> primary</i> is true.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxCloseEvent">
<description>
<p class="classdesc">
This event class contains information about window and session close events.</p><p class="classdesc">The handler function for EVT_CLOSE is called when the user has tried to close a a frame
or dialog box using the window manager (X) or system menu (Windows). It can
also be invoked by the application itself programmatically, for example by
calling the <ref target="wxwindowclose">wxWindow::Close</ref> function.</p><p class="classdesc">You should check whether the application is forcing the deletion of the window
using <ref target="wxcloseeventcanveto">wxCloseEvent::CanVeto</ref>. If this is <tt> false</tt>,
you <i> must</i> destroy the window using <ref target="wxwindowdestroy">wxWindow::Destroy</ref>.
If the return value is true, it is up to you whether you respond by destroying the window.</p><p class="classdesc">If you don't destroy the window, you should call <ref target="wxcloseeventveto">wxCloseEvent::Veto</ref> to
let the calling code know that you did not destroy the window. This allows the <ref target="wxwindowclose">wxWindow::Close</ref> function
to return <tt> true</tt> or <tt> false</tt> depending on whether the close instruction was honoured or not.</p>
</description>
<parents>
<classref name="wxEvent"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_CLOSE(func)">Process a close event, supplying the member function. This
event applies to wxFrame and wxDialog classes.</event><event name="EVT_QUERY_END_SESSION(func)">Process a query end session event, supplying the member function.
This event applies to wxApp only.</event><event name="EVT_END_SESSION(func)">Process an end session event, supplying the member function.
This event applies to wxApp only.</event></events>
<seealso>

<ref target="wxwindowclose">wxWindow::Close</ref>,
<ref target="wxapponqueryendsession">wxApp::OnQueryEndSession</ref>,
<ref target="windowdeletionoverview">Window deletion overview</ref>

</seealso>
<members>
<member class="wxCloseEvent" name="wxCloseEvent"><function type="" name="wxCloseEvent"><parameters><parameter type="WXTYPE" name="commandEventType" value="0"></parameter><parameter type="int" name="id" value="0"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxCloseEvent" name="CanVeto"><function type="bool" name="CanVeto"><description>

Returns true if you can veto a system shutdown or a window close event.
Vetoing a window close event is not possible if the calling code wishes to
force the application to exit, and so this function must be called to check this.

</description></function></member>
<member class="wxCloseEvent" name="GetLoggingOff"><function type="bool" name="GetLoggingOff" suffix="const"><description>

Returns true if the user is logging off.

</description></function></member>
<member class="wxCloseEvent" name="GetSessionEnding"><function type="bool" name="GetSessionEnding" suffix="const"><description>

Returns true if the session is ending.

</description></function></member>
<member class="wxCloseEvent" name="GetForce"><function type="bool" name="GetForce" suffix="const"><description>

Returns true if the application wishes to force the window to close.
This will shortly be obsolete, replaced by CanVeto.

</description></function></member>
<member class="wxCloseEvent" name="SetCanVeto"><function type="void" name="SetCanVeto"><parameters><parameter type="bool" name=" canVeto"></parameter></parameters><description>

Sets the 'can veto' flag.

</description></function></member>
<member class="wxCloseEvent" name="SetForce"><function type="void" name="SetForce" suffix="const"><parameters><parameter type="bool" name=" force"></parameter></parameters><description>

Sets the 'force' flag.

</description></function></member>
<member class="wxCloseEvent" name="SetLoggingOff"><function type="void" name="SetLoggingOff" suffix="const"><parameters><parameter type="bool" name=" loggingOff"></parameter></parameters><description>

Sets the 'logging off' flag.

</description></function></member>
<member class="wxCloseEvent" name="Veto"><function type="void" name="Veto"><parameters><parameter type="bool" name="veto" value="true"></parameter></parameters><description>

Call this from your event handler to veto a system shutdown or to signal
to the calling application that a window close did not happen.

You can only veto a shutdown if <ref target="wxcloseeventcanveto">wxCloseEvent::CanVeto</ref> returns
true.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxCmdLineParser">
<description>
<p class="classdesc">
wxCmdLineParser is a class for parsing command line.</p><p class="classdesc">It has the following features:</p><p class="classdesc">\begin{enumerate}\itemsep=0pt
\item distinguishes options, switches and parameters; allows option grouping
\item allows both short and long options
\item automatically generates the usage message from the command line description
\item does type checks on the options values (number, date, $\ldots$).
\end{enumerate}</p><p class="classdesc">To use it you should follow these steps:</p><p class="classdesc">\begin{enumerate}\itemsep=0pt
\item <ref target="wxcmdlineparserconstruction">construct</ref> an object of this class
giving it the command line to parse and optionally its description or use 
<tt> AddXXX()</tt> functions later
\item call <tt> Parse()</tt>
\item use <tt> Found()</tt> to retrieve the results
\end{enumerate}</p><p class="classdesc">In the documentation below the following terminology is used:</p><p class="classdesc"><table>
<tr><td>switch</td><td>This is a boolean option which can be given or not, but
which doesn't have any value. We use the word switch to distinguish such boolean
options from more generic options like those described below. For example, 
<tt> -v</tt> might be a switch meaning &quot;enable verbose mode&quot;.</td></tr>
<tr><td>option</td><td>Option for us here is something which comes with a value 0
unlike a switch. For example, <tt> -o:filename</tt> might be an option which allows
to specify the name of the output file.</td></tr>
<tr><td>parameter</td><td>This is a required program argument.</td></tr>
</table></p>
</description>
<parents></parents>
<includes>
<header name="wx/cmdline.h"/></includes>
<constants>

The structure wxCmdLineEntryDesc is used to describe the one command
line switch, option or parameter. An array of such structures should be passed
to <ref target="wxcmdlineparsersetdesc">SetDesc()</ref>. Also, the meanings of parameters
of the <tt> AddXXX()</tt> functions are the same as of the corresponding fields in
this structure:

<pre>
struct wxCmdLineEntryDesc
{
    wxCmdLineEntryType kind;
    const wxChar &#42;shortName;
    const wxChar &#42;longName;
    const wxChar &#42;description;
    wxCmdLineParamType type;
    int flags;
};
</pre>

The type of a command line entity is in the <tt> kind</tt> field and may be one of
the following constants:

<pre>
enum wxCmdLineEntryType
{
    wxCMD_LINE_SWITCH,
    wxCMD_LINE_OPTION,
    wxCMD_LINE_PARAM,
    wxCMD_LINE_NONE         // use this to terminate the list
}
</pre>

The field <tt> shortName</tt> is the usual, short, name of the switch or the option.
<tt> longName</tt> is the corresponding long name or NULL if the option has no long
name. Both of these fields are unused for the parameters. Both the short and
long option names can contain only letters, digits and the underscores.

<tt> description</tt> is used by the <ref target="wxcmdlineparserusage">Usage()</ref> method
to construct a help message explaining the syntax of the program.

The possible values of <tt> type</tt> which specifies the type of the value accepted
by an option or parameter are:

<pre>
enum wxCmdLineParamType
{
    wxCMD_LINE_VAL_STRING,  // default
    wxCMD_LINE_VAL_NUMBER,
    wxCMD_LINE_VAL_DATE,
    wxCMD_LINE_VAL_NONE
}
</pre>

Finally, the <tt> flags</tt> field is a combination of the following bit masks:

<pre>
enum
{
    wxCMD_LINE_OPTION_MANDATORY = 0x01, // this option must be given
    wxCMD_LINE_PARAM_OPTIONAL   = 0x02, // the parameter may be omitted
    wxCMD_LINE_PARAM_MULTIPLE   = 0x04, // the parameter may be repeated
    wxCMD_LINE_OPTION_HELP      = 0x08, // this option is a help request
    wxCMD_LINE_NEEDS_SEPARATOR  = 0x10, // must have sep before the value
}
</pre>

Notice that by default (i.e. if flags are just 0), options are optional (sic)
and each call to <ref target="wxcmdlineparseraddparam">AddParam()</ref> allows one more
parameter - this may be changed by giving non-default flags to it, i.e. use 
<tt> wxCMD_LINE_OPTION_MANDATORY</tt> to require that the option is given and 
<tt> wxCMD_LINE_PARAM_OPTIONAL</tt> to make a parameter optional. Also, 
<tt> wxCMD_LINE_PARAM_MULTIPLE</tt> may be specified if the programs accepts a
variable number of parameters - but it only can be given for the last parameter
in the command line description. If you use this flag, you will probably need to
use <ref target="wxcmdlineparsergetparamcount">GetParamCount</ref> to retrieve the number
of parameters effectively specified after calling 
<ref target="wxcmdlineparserparse">Parse</ref>.

The last flag <tt> wxCMD_LINE_NEEDS_SEPARATOR</tt> can be specified to require a
separator (either a colon, an equal sign or white space) between the option
name and its value. By default, no separator is required.

</constants>
<seealso>

<ref target="wxappargc">wxApp::argc</ref> and <ref target="wxappargv">wxApp::argv</ref><br/>
console sample

</seealso>
<members>
<member class="wxCmdLineParser" name=""></member>
<member class="wxCmdLineParser" name=""></member>
<member class="wxCmdLineParser" name=""></member>
<member class="wxCmdLineParser" name=""></member>
<member class="wxCmdLineParser" name="wxCmdLineParser"><function type="" name="wxCmdLineParser"><description>

Default constructor. You must use 
<ref target="wxcmdlineparsersetcmdlineargc">SetCmdLine</ref> later.

</description></function></member>
<member class="wxCmdLineParser" name="wxCmdLineParser"><function type="" name="wxCmdLineParser"><parameters><parameter type="int " name="argc"></parameter><parameter type="char&#42;&#42; " name="argv"></parameter></parameters><description>

Constructor specifies the command line to parse. This is the traditional
(Unix) command line format. The parameters <i> argc</i> and <i> argv</i> have the
same meaning as for <tt> main()</tt> function.

</description></function></member>
<member class="wxCmdLineParser" name="wxCmdLineParser"><function type="" name="wxCmdLineParser"><parameters><parameter type="const wxString&amp; " name="cmdline"></parameter></parameters><description>

Constructor specifies the command line to parse in Windows format. The parameter 
<i> cmdline</i> has the same meaning as the corresponding parameter of 
<tt> WinMain()</tt>.

</description></function></member>
<member class="wxCmdLineParser" name="wxCmdLineParser"><function type="" name="wxCmdLineParser"><parameters><parameter type="const wxCmdLineEntryDesc&#42; " name="desc"></parameter></parameters><description>

Same as <ref target="wxcmdlineparserwxcmdlineparserdef">wxCmdLineParser</ref>, but also
specifies the <ref target="wxcmdlineparsersetdesc">command line description</ref>.

</description></function></member>
<member class="wxCmdLineParser" name="wxCmdLineParser"><function type="" name="wxCmdLineParser"><parameters><parameter type="const wxCmdLineEntryDesc&#42; " name="desc"></parameter><parameter type="int " name="argc"></parameter><parameter type="char&#42;&#42; " name="argv"></parameter></parameters><description>

Same as <ref target="wxcmdlineparserwxcmdlineparserargc">wxCmdLineParser</ref>, but also
specifies the <ref target="wxcmdlineparsersetdesc">command line description</ref>.

</description></function></member>
<member class="wxCmdLineParser" name="wxCmdLineParser"><function type="" name="wxCmdLineParser"><parameters><parameter type="const wxCmdLineEntryDesc&#42; " name="desc"></parameter><parameter type="const wxString&amp; " name="cmdline"></parameter></parameters><description>

Same as <ref target="wxcmdlineparserwxcmdlineparserstr">wxCmdLineParser</ref>, but also
specifies the <ref target="wxcmdlineparsersetdesc">command line description</ref>.

</description></function></member>
<member class="wxCmdLineParser" name="ConvertStringToArgs"><function type="static wxArrayString" name="ConvertStringToArgs"><parameters><parameter type="const wxChar " name="&#42;cmdline"></parameter></parameters><description>

Breaks down the string containing the full command line in words. The words are
separated by whitespace. The quotes can be used in the input string to quote
the white space and the back slashes can be used to quote the quotes.

</description></function></member>
<member class="wxCmdLineParser" name="SetCmdLine"><function type="void" name="SetCmdLine"><parameters><parameter type="int " name="argc"></parameter><parameter type="char&#42;&#42; " name="argv"></parameter></parameters><seealso>

<ref target="wxcmdlineparserwxcmdlineparserargc">wxCmdLineParser</ref>

</seealso><description>

Set command line to parse after using one of the constructors which don't do it.

</description></function></member>
<member class="wxCmdLineParser" name="SetCmdLine"><function type="void" name="SetCmdLine"><parameters><parameter type="const wxString&amp; " name="cmdline"></parameter></parameters><seealso>

<ref target="wxcmdlineparserwxcmdlineparserstr">wxCmdLineParser</ref>

</seealso><description>

Set command line to parse after using one of the constructors which don't do it.

</description></function></member>
<member class="wxCmdLineParser" name="~wxCmdLineParser"><function type="" name="~wxCmdLineParser"><description>

Frees resources allocated by the object.

<b> NB:</b> destructor is not virtual, don't use this class polymorphically.

</description></function></member>
<member class="wxCmdLineParser" name="SetSwitchChars"><function type="void" name="SetSwitchChars"><parameters><parameter type="const wxString&amp; " name="switchChars"></parameter></parameters><description>

<i> switchChars</i> contains all characters with which an option or switch may
start. Default is <tt> &quot;-&quot;</tt> for Unix, <tt> &quot;-/&quot;</tt> for Windows.

</description></function></member>
<member class="wxCmdLineParser" name="EnableLongOptions"><function type="void" name="EnableLongOptions"><parameters><parameter type="bool " name="enable" value="true"></parameter></parameters><seealso>

<ref target="wxcmdlineparsercustomization">Customization</ref> and <ref target="wxcmdlineparserarelongoptionsenabled">AreLongOptionsEnabled</ref>

</seealso><description>

Enable or disable support for the long options.

As long options are not (yet) POSIX-compliant, this option allows to disable
them.

</description></function></member>
<member class="wxCmdLineParser" name="DisableLongOptions"><function type="void" name="DisableLongOptions"><description>

Identical to <ref target="wxcmdlineparserenablelongoptions">EnableLongOptions(false)</ref>.

</description></function></member>
<member class="wxCmdLineParser" name="AreLongOptionsEnabled"><function type="bool" name="AreLongOptionsEnabled"><seealso>

<ref target="wxcmdlineparserenablelongoptions">EnableLongOptions</ref>

</seealso><description>

Returns true if long options are enabled, otherwise false.

</description></function></member>
<member class="wxCmdLineParser" name="SetLogo"><function type="void" name="SetLogo"><parameters><parameter type="const wxString&amp; " name="logo"></parameter></parameters><description>

<i> logo</i> is some extra text which will be shown by 
<ref target="wxcmdlineparserusage">Usage</ref> method.

</description></function></member>
<member class="wxCmdLineParser" name="SetDesc"><function type="void" name="SetDesc"><parameters><parameter type="const wxCmdLineEntryDesc&#42; " name="desc"></parameter></parameters><description>

Construct the command line description

Take the command line description from the wxCMD_LINE_NONE terminated table.

Example of usage:

<pre>
static const wxCmdLineEntryDesc cmdLineDesc&#91;] =
{
    { wxCMD_LINE_SWITCH, &quot;v&quot;, &quot;verbose&quot;, &quot;be verbose&quot; },
    { wxCMD_LINE_SWITCH, &quot;q&quot;, &quot;quiet&quot;,   &quot;be quiet&quot; },

    { wxCMD_LINE_OPTION, &quot;o&quot;, &quot;output&quot;,  &quot;output file&quot; },
    { wxCMD_LINE_OPTION, &quot;i&quot;, &quot;input&quot;,   &quot;input dir&quot; },
    { wxCMD_LINE_OPTION, &quot;s&quot;, &quot;size&quot;,    &quot;output block size&quot;, wxCMD_LINE_VAL_NUMBER },
    { wxCMD_LINE_OPTION, &quot;d&quot;, &quot;date&quot;,    &quot;output file date&quot;, wxCMD_LINE_VAL_DATE },

    { wxCMD_LINE_PARAM,  NULL, NULL, &quot;input file&quot;, wxCMD_LINE_VAL_STRING, wxCMD_LINE_PARAM_MULTIPLE },

    { wxCMD_LINE_NONE }
};

wxCmdLineParser parser;

parser.SetDesc(cmdLineDesc);
</pre>

</description></function></member>
<member class="wxCmdLineParser" name="AddSwitch"><function type="void" name="AddSwitch"><parameters><parameter type="const wxString&amp; " name="name"></parameter><parameter type="const wxString&amp; " name="lng" value="wxEmptyString"></parameter><parameter type="const wxString&amp; " name="desc" value="wxEmptyString"></parameter><parameter type="int " name="flags" value="0"></parameter></parameters><description>

Add a switch <i> name</i> with an optional long name <i> lng</i> (no long name if it
is empty, which is default), description <i> desc</i> and flags <i> flags</i> to the
command line description.

</description></function></member>
<member class="wxCmdLineParser" name="AddOption"><function type="void" name="AddOption"><parameters><parameter type="const wxString&amp; " name="name"></parameter><parameter type="const wxString&amp; " name="lng" value="wxEmptyString"></parameter><parameter type="const wxString&amp; " name="desc" value="wxEmptyString"></parameter><parameter type="wxCmdLineParamType " name="type" value="wxCMD_LINE_VAL_STRING"></parameter><parameter type="int " name="flags" value="0"></parameter></parameters><description>

Add an option <i> name</i> with an optional long name <i> lng</i> (no long name if
it is empty, which is default) taking a value of the given type (string by
default) to the command line description.

</description></function></member>
<member class="wxCmdLineParser" name="AddParam"><function type="void" name="AddParam"><parameters><parameter type="const wxString&amp; " name="desc" value="wxEmptyString"></parameter><parameter type="wxCmdLineParamType " name="type" value="wxCMD_LINE_VAL_STRING"></parameter><parameter type="int " name="flags" value="0"></parameter></parameters><description>

Add a parameter of the given <i> type</i> to the command line description.

</description></function></member>
<member class="wxCmdLineParser" name="Parse"><function type="int" name="Parse"><parameters><parameter type="bool " name="giveUsage" value="true">If <tt> true</tt> (default), the usage message is given if a
syntax error was encountered while parsing the command line or if help was
requested. If <tt> false</tt>, only error messages about possible syntax errors
are given, use <ref target="wxcmdlineparserusage">Usage</ref> to show the usage message
from the caller if needed.</parameter></parameters><description>

Parse the command line, return 0 if ok, $-1$ if <tt> &quot;-h&quot;</tt> or <tt> &quot;--help&quot;</tt> 
option was encountered and the help message was given or a positive value if a
syntax error occured.





</description></function></member>
<member class="wxCmdLineParser" name="Usage"><function type="void" name="Usage"><seealso>

<ref target="wxcmdlineparsersetlogo">SetLogo</ref>

</seealso><description>

Give the standard usage message describing all program options. It will use the
options and parameters descriptions specified earlier, so the resulting message
will not be helpful to the user unless the descriptions were indeed specified.

</description></function></member>
<member class="wxCmdLineParser" name="Found"><function type="bool" name="Found" suffix="const"><parameters><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Returns true if the given switch was found, false otherwise.

</description></function></member>
<member class="wxCmdLineParser" name="Found"><function type="bool" name="Found" suffix="const"><parameters><parameter type="const wxString&amp; " name="name"></parameter><parameter type="wxString&#42; " name="value"></parameter></parameters><description>

Returns true if an option taking a string value was found and stores the
value in the provided pointer (which should not be NULL).

</description></function></member>
<member class="wxCmdLineParser" name="Found"><function type="bool" name="Found" suffix="const"><parameters><parameter type="const wxString&amp; " name="name"></parameter><parameter type="long&#42; " name="value"></parameter></parameters><description>

Returns true if an option taking an integer value was found and stores
the value in the provided pointer (which should not be NULL).

</description></function></member>
<member class="wxCmdLineParser" name="Found"><function type="bool" name="Found" suffix="const"><parameters><parameter type="const wxString&amp; " name="name"></parameter><parameter type="wxDateTime&#42; " name="value"></parameter></parameters><description>

Returns true if an option taking a date value was found and stores the
value in the provided pointer (which should not be NULL).

</description></function></member>
<member class="wxCmdLineParser" name="GetParamCount"><function type="size_t" name="GetParamCount" suffix="const"><description>

Returns the number of parameters found. This function makes sense mostly if you
had used <tt> wxCMD_LINE_PARAM_MULTIPLE</tt> flag.

</description></function></member>
<member class="wxCmdLineParser" name="GetParam"><function type="wxString" name="GetParam" suffix="const"><parameters><parameter type="size_t " name="n" value="0u"></parameter></parameters><seealso>

<ref target="wxcmdlineparsergetparamcount">GetParamCount</ref>

</seealso><description>

Returns the value of Nth parameter (as string only for now).

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxColour">
<description>
<p class="classdesc">
A colour is an object representing a combination of Red, Green, and Blue (RGB) intensity values,
and is used to determine drawing colours. See the
entry for <ref target="wxcolourdatabase">wxColourDatabase</ref> for how a pointer to a predefined,
named colour may be returned instead of creating a new colour.</p><p class="classdesc">Valid RGB values are in the range 0 to 255.</p><p class="classdesc">You can retrieve the current system colour settings with <ref target="wxsystemsettings">wxSystemSettings</ref>.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/colour.h"/></includes>
<predefs>

Objects:

<b> wxNullColour</b>

Pointers:

<b> wxBLACK<br/>
wxWHITE<br/>
wxRED<br/>
wxBLUE<br/>
wxGREEN<br/>
wxCYAN<br/>
wxLIGHT_GREY</b>

</predefs>
<seealso>

<ref target="wxcolourdatabase">wxColourDatabase</ref><ref target="wxpen">wxPen</ref><ref target="wxbrush">wxBrush</ref>,
<ref target="wxcolourdialog">wxColourDialog</ref><ref target="wxsystemsettings">wxSystemSettings</ref>

</seealso>
<members>
<member class="wxColour" name="wxColour"><function type="" name="wxColour"><description>

Default constructor.

</description></function>
<function type="" name="wxColour"><parameters><parameter type="const unsigned char" name=" red"></parameter><parameter type="const unsigned char" name=" green"></parameter><parameter type="const unsigned char" name=" blue"></parameter></parameters><description>

Constructs a colour from red, green and blue values.

</description></function>
<function type="" name="wxColour"><parameters><parameter type="const wxString&amp; " name="colourNname"></parameter></parameters><description>

Constructs a colour object using a colour name
listed in <b> wxTheColourDatabase</b>.

</description></function>
<function type="" name="wxColour"><parameters><parameter type="const wxColour&amp;" name=" colour"></parameter></parameters><seealso>

<ref target="wxcolourdatabase">wxColourDatabase</ref>

\pythonnote{Constructors supported by wxPython are:\par
\indented{2cm}{<table>
<tr><td><b> wxColour(red=0green=0blue=0)</b></td><td></td></tr>
<tr><td><b> wxNamedColour(name)</b></td><td></td></tr>
</table>}
}


</seealso><description></description></function></member>
<member class="wxColour" name="Blue"><function type="unsigned char" name="Blue" suffix="const"><description>

Returns the blue intensity.

</description></function></member>
<member class="wxColour" name="GetPixel"><function type="long" name="GetPixel" suffix="const"><description>

Returns a pixel value which is platform-dependent. On Windows, a COLORREF is returned.
On X, an allocated pixel value is returned.

-1 is returned if the pixel is invalid (on X, unallocated).

</description></function></member>
<member class="wxColour" name="Green"><function type="unsigned char" name="Green" suffix="const"><description>

Returns the green intensity.

</description></function></member>
<member class="wxColour" name="Ok"><function type="bool" name="Ok" suffix="const"><description>

Returns true if the colour object is valid (the colour has been initialised with RGB values).

</description></function></member>
<member class="wxColour" name="Red"><function type="unsigned char" name="Red" suffix="const"><description>

Returns the red intensity.

</description></function></member>
<member class="wxColour" name="Set"><function type="void" name="Set"><parameters><parameter type="const unsigned char" name=" red"></parameter><parameter type="const unsigned char" name=" green"></parameter><parameter type="const unsigned char" name=" blue"></parameter></parameters><description>

Sets the RGB intensity values.

</description></function></member>
<member class="wxColour" name="operator $=$"><function type="wxColour&amp;" name="operator $=$"><parameters><parameter type="const wxColour&amp;" name=" colour"></parameter></parameters><description>

Assignment operator, taking another colour object.

</description></function>
<function type="wxColour&amp;" name="operator $=$"><parameters><parameter type="const wxString&amp;" name=" colourName"></parameter></parameters><seealso>

<ref target="wxcolourdatabase">wxColourDatabase</ref>

</seealso><description>

Assignment operator, using a colour name to be found in the colour database.

</description></function></member>
<member class="wxColour" name="operator $==$"><function type="bool" name="operator $==$"><parameters><parameter type="const wxColour&amp;" name=" colour"></parameter></parameters><description>

Tests the equality of two colours by comparing individual red, green blue colours.

</description></function></member>
<member class="wxColour" name="operator $!=$"><function type="bool" name="operator $!=$"><parameters><parameter type="const wxColour&amp;" name=" colour"></parameter></parameters><description>

Tests the inequality of two colours by comparing individual red, green blue colours.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxColourData">
<description>
<p class="classdesc">
This class holds a variety of information related to colour dialogs.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/cmndata.h"/></includes>
<seealso>

<ref target="wxcolour">wxColour</ref><ref target="wxcolourdialog">wxColourDialog</ref><ref target="wxcolourdialogoverview">wxColourDialog overview</ref>

</seealso>
<members>
<member class="wxColourData" name="wxColourData"><function type="" name="wxColourData"><description>

Constructor. Initializes the custom colours to white, the <i> data colour</i> setting
to black, and the <i> choose full</i> setting to true.

</description></function></member>
<member class="wxColourData" name="~wxColourData"><function type="" name="~wxColourData"><description>

Destructor.

</description></function></member>
<member class="wxColourData" name="GetChooseFull"><function type="bool" name="GetChooseFull" suffix="const"><description>

Under Windows, determines whether the Windows colour dialog will display the full dialog
with custom colour selection controls. Has no meaning under other platforms.

The default value is true.

</description></function></member>
<member class="wxColourData" name="GetColour"><function type="wxColour&amp;" name="GetColour" suffix="const"><description>

Gets the current colour associated with the colour dialog.

The default colour is black.

</description></function></member>
<member class="wxColourData" name="GetCustomColour"><function type="wxColour&amp;" name="GetCustomColour" suffix="const"><parameters><parameter type="int" name=" i"></parameter></parameters><description>

Gets the <i> i</i>th custom colour associated with the colour dialog. <i> i</i> should
be an integer between 0 and 15.

The default custom colours are all white.

</description></function></member>
<member class="wxColourData" name="SetChooseFull"><function type="void" name="SetChooseFull"><parameters><parameter type="const bool " name="flag"></parameter></parameters><description>

Under Windows, tells the Windows colour dialog to display the full dialog
with custom colour selection controls. Under other platforms, has no effect.

The default value is true.

</description></function></member>
<member class="wxColourData" name="SetColour"><function type="void" name="SetColour"><parameters><parameter type="const wxColour&amp;" name=" colour"></parameter></parameters><description>

Sets the default colour for the colour dialog.

The default colour is black.

</description></function></member>
<member class="wxColourData" name="SetCustomColour"><function type="void" name="SetCustomColour"><parameters><parameter type="int" name=" i"></parameter><parameter type="const wxColour&amp;" name=" colour"></parameter></parameters><description>

Sets the <i> i</i>th custom colour for the colour dialog. <i> i</i> should
be an integer between 0 and 15.

The default custom colours are all white.

</description></function></member>
<member class="wxColourData" name="operator $=$"><function type="void" name="operator $=$"><parameters><parameter type="const wxColourData&amp;" name=" data"></parameter></parameters><description>

Assignment operator for the colour data.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxColourDatabase">
<description>
<p class="classdesc">
wxWindows maintains a database of standard RGB colours for a predefined
set of named colours (such as ``BLACK'', ``LIGHT GREY''). The
application may add to this set if desired by using <i> Append</i>.  There
is only one instance of this class: <b> wxTheColourDatabase</b>.</p>
</description>
<remarks>

The colours in the standard database are as follows:

AQUAMARINE, BLACK, BLUE, BLUE VIOLET, BROWN, CADET BLUE, CORAL,
CORNFLOWER BLUE, CYAN, DARK GREY, DARK GREEN, DARK OLIVE GREEN, DARK
ORCHID, DARK SLATE BLUE, DARK SLATE GREY DARK TURQUOISE, DIM GREY,
FIREBRICK, FOREST GREEN, GOLD, GOLDENROD, GREY, GREEN, GREEN YELLOW,
INDIAN RED, KHAKI, LIGHT BLUE, LIGHT GREY, LIGHT STEEL BLUE, LIME GREEN,
MAGENTA, MAROON, MEDIUM AQUAMARINE, MEDIUM BLUE, MEDIUM FOREST GREEN,
MEDIUM GOLDENROD, MEDIUM ORCHID, MEDIUM SEA GREEN, MEDIUM SLATE BLUE,
MEDIUM SPRING GREEN, MEDIUM TURQUOISE, MEDIUM VIOLET RED, MIDNIGHT BLUE,
NAVY, ORANGE, ORANGE RED, ORCHID, PALE GREEN, PINK, PLUM, PURPLE, RED,
SALMON, SEA GREEN, SIENNA, SKY BLUE, SLATE BLUE, SPRING GREEN, STEEL
BLUE, TAN, THISTLE, TURQUOISE, VIOLET, VIOLET RED, WHEAT, WHITE, YELLOW,
YELLOW GREEN.

</remarks>
<parents>
<classref name="wxList"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/gdicmn.h"/></includes>
<seealso>

<ref target="wxcolour">wxColour</ref>

</seealso>
<members>
<member class="wxColourDatabase" name="wxColourDatabase"><function type="" name="wxColourDatabase"><description>

Constructs the colour database.

</description></function></member>
<member class="wxColourDatabase" name="FindColour"><function type="wxColour&#42;" name="FindColour"><parameters><parameter type="const wxString&amp; " name="colourName"></parameter></parameters><description>

Finds a colour given the name. Returns NULL if not found.

</description></function></member>
<member class="wxColourDatabase" name="FindName"><function type="wxString" name="FindName" suffix="const"><parameters><parameter type="const wxColour&amp;" name=" colour"></parameter></parameters><description>

Finds a colour name given the colour. Returns NULL if not found.

</description></function></member>
<member class="wxColourDatabase" name="Initialize"><function type="void" name="Initialize"><description>

Initializes the database with a number of stock colours.  Called by wxWindows
on start-up.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxColourDialog">
<description>
<p class="classdesc">
This class represents the colour chooser dialog.</p>
</description>
<parents>
<classref name="wxDialog"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/colordlg.h"/></includes>
<seealso>

<ref target="wxcolourdialogoverview">wxColourDialog Overview</ref>,<br/>
<ref target="wxcolour">wxColour</ref>,<br/>
<ref target="wxcolourdata">wxColourData</ref>,<br/>
<ref target="wxgetcolourfromuser">wxGetColourFromUser</ref>

</seealso>
<members>
<member class="wxColourDialog" name="wxColourDialog"><function type="" name="wxColourDialog"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxColourData&#42; " name="data" value="NULL"></parameter></parameters><seealso>

<ref target="wxcolourdata">wxColourData</ref>

</seealso><description>

Constructor. Pass a parent window, and optionally a pointer to a block of colour
data, which will be copied to the colour dialog's colour data.

</description></function></member>
<member class="wxColourDialog" name="~wxColourDialog"><function type="" name="~wxColourDialog"><description>

Destructor.

</description></function></member>
<member class="wxColourDialog" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxColourData&#42; " name="data" value="NULL"></parameter></parameters><description>

Same as <ref target="wxcolourdialogwxcolourdialog">constructor</ref>.

</description></function></member>
<member class="wxColourDialog" name="GetColourData"><function type="wxColourData&amp;" name="GetColourData"><description>

Returns the <ref target="wxcolourdata">colour data</ref> associated with the colour dialog.

</description></function></member>
<member class="wxColourDialog" name="ShowModal"><function type="int" name="ShowModal"><description>

Shows the dialog, returning wxID_OK if the user pressed OK, and wxOK_CANCEL
otherwise.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxComboBox">
<description>
<p class="classdesc">
A combobox is like a combination of an edit control and a listbox. It can be
displayed as static list with editable or read-only text field; or a drop-down list with
text field; or a drop-down list without a text field.</p><p class="classdesc">A combobox permits a single selection only. Combobox items are numbered from zero.</p>
</description>
<parents>
<classref name="wxControlWithItems"/>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/combobox.h"/></includes>
<windowstyles>
<style name="wxCB_SIMPLE">Creates a combobox with a permanently displayed list. Windows only. </style><style name="wxCB_DROPDOWN">Creates a combobox with a drop-down list.</style><style name="wxCB_READONLY">Same as wxCB_DROPDOWN but only the
strings specified as the combobox choices can be selected, it is impossible to
select (even from a program) a string which is not in the choices list.</style><style name="wxCB_SORT">Sorts the entries in the list alphabetically.</style></windowstyles>
<events>
<event name="EVT_COMBOBOX(id, func)">Process a wxEVT_COMMAND_COMBOBOX_SELECTED event,
when an item on the list is selected.</event><event name="EVT_TEXT(id, func)">Process a wxEVT_COMMAND_TEXT_UPDATED event,
when the combobox text changes.</event></events>
<seealso>

<ref target="wxlistbox">wxListBox</ref><ref target="wxtextctrl">wxTextCtrl</ref><ref target="wxchoice">wxChoice</ref>,
<ref target="wxcommandevent">wxCommandEvent</ref>

</seealso>
<members>
<member class="wxComboBox" name="wxComboBox"><function type="" name="wxComboBox"><description>

Default constructor.

</description></function>
<function type="" name="wxComboBox"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp; " name="value" value="``&quot;">Initial selection string. An empty string indicates no selection.</parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition">Window position.</parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize">Window size. If the default size (-1, -1) is specified then the window is sized
appropriately.</parameter><parameter type="int" name=" n"></parameter><parameter type="const wxString " name="choices&#91;]"></parameter><parameter type="long" name="style" value="0">Window style. See <ref target="wxcombobox">wxComboBox</ref>.</parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator">Window validator.</parameter><parameter type="const wxString&amp; " name="name" value="``comboBox&quot;">Window name.</parameter></parameters><seealso>

<ref target="wxcomboboxcreate">wxComboBox::Create</ref><ref target="wxvalidator">wxValidator</ref>

\pythonnote{The wxComboBox constructor in wxPython reduces the <tt> n</tt>
and <tt> choices</tt> arguments are to a single argumentwhich is
a list of strings.}

\perlnote{In wxPerl there is just an array reference in place of <tt> n</tt>
and <tt> choices</tt>.}

</seealso><description></description></function></member>
<member class="wxComboBox" name="~wxComboBox"><function type="" name="~wxComboBox"><description>

Destructor, destroying the combobox.

</description></function></member>
<member class="wxComboBox" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp; " name="value" value="``&quot;"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize"></parameter><parameter type="int" name=" n"></parameter><parameter type="const wxString " name="choices&#91;]"></parameter><parameter type="long" name="style" value="0"></parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator"></parameter><parameter type="const wxString&amp; " name="name" value="``comboBox&quot;"></parameter></parameters><description>

Creates the combobox for two-step construction. Derived classes
should call or replace this function. See <ref target="wxcomboboxconstr">wxComboBox::wxComboBox</ref>
for further details.

</description></function></member>
<member class="wxComboBox" name="Copy"><function type="void" name="Copy"><description>

Copies the selected text to the clipboard.

</description></function></member>
<member class="wxComboBox" name="Cut"><function type="void" name="Cut"><description>

Copies the selected text to the clipboard and removes the selection.

</description></function></member>
<member class="wxComboBox" name="GetInsertionPoint"><function type="long" name="GetInsertionPoint" suffix="const"><description>

Returns the insertion point for the combobox's text field.

</description></function></member>
<member class="wxComboBox" name="GetLastPosition"><function type="long" name="GetLastPosition" suffix="const"><description>

Returns the last position in the combobox text field.

</description></function></member>
<member class="wxComboBox" name="GetValue"><function type="wxString" name="GetValue" suffix="const"><description>

Returns the current value in the combobox text field.

</description></function></member>
<member class="wxComboBox" name="Paste"><function type="void" name="Paste"><description>

Pastes text from the clipboard to the text field.

</description></function></member>
<member class="wxComboBox" name="Replace"><function type="void" name="Replace"><parameters><parameter type="long" name=" from"></parameter><parameter type="long" name=" to"></parameter><parameter type="const wxString&amp; " name="text">The text to insert.</parameter></parameters><description>

Replaces the text between two positions with the given text, in the combobox text field.









</description></function></member>
<member class="wxComboBox" name="Remove"><function type="void" name="Remove"><parameters><parameter type="long" name=" from"></parameter><parameter type="long" name=" to"></parameter></parameters><description>

Removes the text between the two positions in the combobox text field.







</description></function></member>
<member class="wxComboBox" name="SetInsertionPoint"><function type="void" name="SetInsertionPoint"><parameters><parameter type="long" name=" pos"></parameter></parameters><description>

Sets the insertion point in the combobox text field.





</description></function></member>
<member class="wxComboBox" name="SetInsertionPointEnd"><function type="void" name="SetInsertionPointEnd"><description>

Sets the insertion point at the end of the combobox text field.

</description></function></member>
<member class="wxComboBox" name="SetSelection"><function type="void" name="SetSelection"><parameters><parameter type="long" name=" from"></parameter><parameter type="long" name=" to"></parameter></parameters><description>

Selects the text between the two positions, in the combobox text field.







\pythonnote{This method is called <tt> SetMark</tt> in wxPython, <tt> SetSelection</tt>
name is kept for 
<ref target="wxcontrolwithitemssetselection">wxControlWithItems::SetSelection</ref>.}

</description></function></member>
<member class="wxComboBox" name="SetValue"><function type="void" name="SetValue"><parameters><parameter type="const wxString&amp; " name="text">The text to set.</parameter></parameters><description>

Sets the text for the combobox text field.

<b> NB:</b> For a combobox with <tt> wxCB_READONLY</tt> style the string must be in
the combobox choices list, otherwise the call to SetValue() is ignored.






</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxCommand">
<description>
<p class="classdesc">
wxCommand is a base class for modelling an application command,
which is an action usually performed by selecting a menu item, pressing
a toolbar button or any other means provided by the application to
change the data or view.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/cmdproc.h"/></includes>
<seealso>

\overview{Overview}{wxcommandoverview}

</seealso>
<members>
<member class="wxCommand" name="wxCommand"><function type="" name="wxCommand"><parameters><parameter type="bool" name="canUndo" value="false"></parameter><parameter type="const wxString&amp; " name="name" value="NULL"></parameter></parameters><description>

Constructor. wxCommand is an abstract class, so you will need to derive
a new class and call this constructor from your own constructor.

<i> canUndo</i> tells the command processor whether this command is undo-able. You
can achieve the same functionality by overriding the CanUndo member function (if for example
the criteria for undoability is context-dependent).

<i> name</i> must be supplied for the command processor to display the command name
in the application's edit menu.

</description></function></member>
<member class="wxCommand" name="~wxCommand"><function type="" name="~wxCommand"><description>

Destructor.

</description></function></member>
<member class="wxCommand" name="CanUndo"><function type="bool" name="CanUndo"><description>

Returns true if the command can be undone, false otherwise.

</description></function></member>
<member class="wxCommand" name="Do"><function type="bool" name="Do"><description>

Override this member function to execute the appropriate action when called.
Return true to indicate that the action has taken place, false otherwise.
Returning false will indicate to the command processor that the action is
not undoable and should not be added to the command history.

</description></function></member>
<member class="wxCommand" name="GetName"><function type="wxString" name="GetName"><description>

Returns the command name.

</description></function></member>
<member class="wxCommand" name="Undo"><function type="bool" name="Undo"><description>

Override this member function to un-execute a previous Do.
Return true to indicate that the action has taken place, false otherwise.
Returning false will indicate to the command processor that the action is
not redoable and no change should be made to the command history.

How you implement this command is totally application dependent, but typical
strategies include:

<ul><li> Perform an inverse operation on the last modified piece of
data in the document. When redone, a copy of data stored in command
is pasted back or some operation reapplied. This relies on the fact that
you know the ordering of Undos; the user can never Undo at an arbitrary position
in the command history.
</li>
<li> Restore the entire document state (perhaps using document transactioning).
Potentially very inefficient, but possibly easier to code if the user interface
and data are complex, and an `inverse execute' operation is hard to write.
</li></ul>

The docview sample uses the first method, to remove or restore segments
in the drawing.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxCommandEvent">
<description>
<p class="classdesc">
This event class contains information about command events, which originate from a variety of
simple controls. More complex controls, such as <ref target="wxtreectrl">wxTreeCtrl</ref>, have separate command event classes.</p>
</description>
<parents>
<classref name="wxEvent"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_COMMAND(id, event, func)">Process a command, supplying the window identifier,
command event identifier, and member function.</event><event name="EVT_COMMAND_RANGE(id1, id2, event, func)">Process a command for a range
of window identifiers, supplying the minimum and maximum window identifiers,
command event identifier, and member function.</event><event name="EVT_BUTTON(id, func)">Process a wxEVT_COMMAND_BUTTON_CLICKED command,
which is generated by a wxButton control.</event><event name="EVT_CHECKBOX(id, func)">Process a wxEVT_COMMAND_CHECKBOX_CLICKED command,
which is generated by a wxCheckBox control.</event><event name="EVT_CHOICE(id, func)">Process a wxEVT_COMMAND_CHOICE_SELECTED command,
which is generated by a wxChoice control.</event><event name="EVT_LISTBOX(id, func)">Process a wxEVT_COMMAND_LISTBOX_SELECTED command,
which is generated by a wxListBox control.</event><event name="EVT_LISTBOX_DCLICK(id, func)">Process a wxEVT_COMMAND_LISTBOX_DOUBLECLICKED command,
which is generated by a wxListBox control.</event><event name="EVT_TEXT(id, func)">Process a wxEVT_COMMAND_TEXT_UPDATED command,
which is generated by a wxTextCtrl control.</event><event name="EVT_TEXT_ENTER(id, func)">Process a wxEVT_COMMAND_TEXT_ENTER command,
which is generated by a wxTextCtrl control. Note that you must use
wxTE_PROCESS_ENTER flag when creating the control if you want it to generate
such events.</event><event name="EVT_TEXT_MAXLEN(id, func)">Process a wxEVT_COMMAND_TEXT_MAXLEN command,
which is generated by a wxTextCtrl control when the user tries to enter more
characters into it than the limit previously set with 
\helpref{SetMaxLength</event><event name="EVT_MENU(id, func)">Process a wxEVT_COMMAND_MENU_SELECTED command,
which is generated by a menu item.</event><event name="EVT_MENU_RANGE(id1, id2, func)">Process a wxEVT_COMMAND_MENU_RANGE command,
which is generated by a range of menu items.</event><event name="EVT_CONTEXT_MENU(func)">Process the event generated
when the user has requested a popup menu to appear by pressing a special
keyboard key (under Windows) or by right clicking the mouse.</event><event name="EVT_SLIDER(id, func)">Process a wxEVT_COMMAND_SLIDER_UPDATED command,
which is generated by a wxSlider control.</event><event name="EVT_RADIOBOX(id, func)">Process a wxEVT_COMMAND_RADIOBOX_SELECTED command,
which is generated by a wxRadioBox control.</event><event name="EVT_RADIOBUTTON(id, func)">Process a wxEVT_COMMAND_RADIOBUTTON_SELECTED command,
which is generated by a wxRadioButton control.</event><event name="EVT_SCROLLBAR(id, func)">Process a wxEVT_COMMAND_SCROLLBAR_UPDATED command,
which is generated by a wxScrollBar control. This is provided for compatibility only;
more specific scrollbar event macros should be used instead (see \helpref{wxScrollEvent</event><event name="EVT_COMBOBOX(id, func)">Process a wxEVT_COMMAND_COMBOBOX_SELECTED command,
which is generated by a wxComboBox control.</event><event name="EVT_TOOL(id, func)">Process a wxEVT_COMMAND_TOOL_CLICKED event
(a synonym for wxEVT_COMMAND_MENU_SELECTED). Pass the id of the tool.</event><event name="EVT_TOOL_RANGE(id1, id2, func)">Process a wxEVT_COMMAND_TOOL_CLICKED event
for a range id identifiers. Pass the ids of the tools.</event><event name="EVT_TOOL_RCLICKED(id, func)">Process a wxEVT_COMMAND_TOOL_RCLICKED event.
Pass the id of the tool.</event><event name="EVT_TOOL_RCLICKED_RANGE(id1, id2, func)">Process a wxEVT_COMMAND_TOOL_RCLICKED event
for a range of ids. Pass the ids of the tools.</event><event name="EVT_TOOL_ENTER(id, func)">Process a wxEVT_COMMAND_TOOL_ENTER event.
Pass the id of the toolbar itself. The value of wxCommandEvent::GetSelection is the tool id, or -1 if the mouse cursor has moved off a tool.</event><event name="EVT_COMMAND_LEFT_CLICK(id, func)">Process a wxEVT_COMMAND_LEFT_CLICK command,
which is generated by a control (Windows 95 and NT only).</event><event name="EVT_COMMAND_LEFT_DCLICK(id, func)">Process a wxEVT_COMMAND_LEFT_DCLICK command,
which is generated by a control (Windows 95 and NT only).</event><event name="EVT_COMMAND_RIGHT_CLICK(id, func)">Process a wxEVT_COMMAND_RIGHT_CLICK command,
which is generated by a control (Windows 95 and NT only).</event><event name="EVT_COMMAND_SET_FOCUS(id, func)">Process a wxEVT_COMMAND_SET_FOCUS command,
which is generated by a control (Windows 95 and NT only).</event><event name="EVT_COMMAND_KILL_FOCUS(id, func)">Process a wxEVT_COMMAND_KILL_FOCUS command,
which is generated by a control (Windows 95 and NT only).</event><event name="EVT_COMMAND_ENTER(id, func)">Process a wxEVT_COMMAND_ENTER command,
which is generated by a control.</event></events>
<members>
<member class="wxCommandEvent" name="m_clientData"></member>
<member class="wxCommandEvent" name="m_commandInt"></member>
<member class="wxCommandEvent" name="m_commandString"></member>
<member class="wxCommandEvent" name="m_extraLong"></member>
<member class="wxCommandEvent" name="wxCommandEvent"><function type="" name="wxCommandEvent"><parameters><parameter type="WXTYPE" name="commandEventType" value="0"></parameter><parameter type="int" name="id" value="0"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxCommandEvent" name="Checked"><function type="bool" name="Checked" suffix="const"><description>

Deprecated, use <ref target="wxcommandeventischecked">IsChecked</ref> instead.

</description></function></member>
<member class="wxCommandEvent" name="GetClientData"><function type="void&#42;" name="GetClientData"><description>

Returns client data pointer for a listbox or choice selection event
(not valid for a deselection).

</description></function></member>
<member class="wxCommandEvent" name="GetExtraLong"><function type="long" name="GetExtraLong"><description>

Returns the <b> m_extraLong</b> member.

</description></function></member>
<member class="wxCommandEvent" name="GetInt"><function type="int" name="GetInt"><description>

Returns the <b> m_commandInt</b> member.

</description></function></member>
<member class="wxCommandEvent" name="GetSelection"><function type="int" name="GetSelection"><description>

Returns item index for a listbox or choice selection event (not valid for
a deselection).

</description></function></member>
<member class="wxCommandEvent" name="GetString"><function type="wxString" name="GetString"><description>

Returns item string for a listbox or choice selection event (not valid for
a deselection).

</description></function></member>
<member class="wxCommandEvent" name="IsChecked"><function type="bool" name="IsChecked" suffix="const"><description>

This method can be used with checkbox and menu events: for the checkboxes, the
method returns <tt> true</tt> for a selection event and <tt> false</tt> for a
deselection one. For the menu events, this method indicates if the menu item
just has become checked or unchecked (and thus only makes sense for checkable
menu items).

</description></function></member>
<member class="wxCommandEvent" name="IsSelection"><function type="bool" name="IsSelection"><description>

For a listbox or choice event, returns true if it is a selection, false if it
is a deselection.

</description></function></member>
<member class="wxCommandEvent" name="SetClientData"><function type="void" name="SetClientData"><parameters><parameter type="void&#42;" name=" clientData"></parameter></parameters><description>

Sets the client data for this event.

</description></function></member>
<member class="wxCommandEvent" name="SetExtraLong"><function type="void" name="SetExtraLong"><parameters><parameter type="int" name=" extraLong"></parameter></parameters><description>

Sets the <b> m_extraLong</b> member.

</description></function></member>
<member class="wxCommandEvent" name="SetInt"><function type="void" name="SetInt"><parameters><parameter type="int" name=" intCommand"></parameter></parameters><description>

Sets the <b> m_commandInt</b> member.

</description></function></member>
<member class="wxCommandEvent" name="SetString"><function type="void" name="SetString"><parameters><parameter type="const wxString&amp;" name=" string"></parameter></parameters><description>

Sets the <b> m_commandString</b> member.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxCommandProcessor">
<description>
<p class="classdesc">
wxCommandProcessor is a class that maintains a history of wxCommands,
with undo/redo functionality built-in. Derive a new class from this
if you want different behaviour.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/cmdproc.h"/></includes>
<seealso>

<ref target="wxcommandprocessoroverview">wxCommandProcessor overview</ref><ref target="wxcommand">wxCommand</ref>

</seealso>
<members>
<member class="wxCommandProcessor" name="wxCommandProcessor"><function type="" name="wxCommandProcessor"><parameters><parameter type="int" name="maxCommands" value="-1"></parameter></parameters><description>

Constructor.

<i> maxCommands</i> may be set to a positive integer to limit the number of
commands stored to it, otherwise (and by default) the list of commands can grow
arbitrarily.

</description></function></member>
<member class="wxCommandProcessor" name="~wxCommandProcessor"><function type="" name="~wxCommandProcessor"><description>

Destructor.

</description></function></member>
<member class="wxCommandProcessor" name="CanUndo"><function type="virtual bool" name="CanUndo"><description>

Returns true if the currently-active command can be undone, false otherwise.

</description></function></member>
<member class="wxCommandProcessor" name="ClearCommands"><function type="virtual void" name="ClearCommands"><description>

Deletes all the commands in the list and sets the current command pointer to NULL.

</description></function></member>
<member class="wxCommandProcessor" name="Redo"><function type="virtual bool" name="Redo"><description>

Executes (redoes) the current command (the command that has just been undone if any).

</description></function></member>
<member class="wxCommandProcessor" name="GetCommands"><function type="wxList&amp;" name="GetCommands" suffix="const"><description>

Returns the list of commands.

</description></function></member>
<member class="wxCommandProcessor" name="GetMaxCommands"><function type="int" name="GetMaxCommands" suffix="const"><description>

Returns the maximum number of commands that the command processor stores.

</description></function></member>
<member class="wxCommandProcessor" name="GetEditMenu"><function type="wxMenu&#42;" name="GetEditMenu" suffix="const"><description>

Returns the edit menu associated with the command processor.

</description></function></member>
<member class="wxCommandProcessor" name="GetRedoAccelerator"><function type="const wxString&amp;" name="GetRedoAccelerator" suffix="const"><description>

Returns the string that will be appended to the Redo menu item.

</description></function></member>
<member class="wxCommandProcessor" name="GetRedoMenuLabel"><function type="wxString" name="GetRedoMenuLabel" suffix="const"><description>

Returns the string that will be shown for the redo menu item.

</description></function></member>
<member class="wxCommandProcessor" name="GetUndoAccelerator"><function type="const wxString&amp;" name="GetUndoAccelerator" suffix="const"><description>

Returns the string that will be appended to the Undo menu item.

</description></function></member>
<member class="wxCommandProcessor" name="GetUndoMenuLabel"><function type="wxString" name="GetUndoMenuLabel" suffix="const"><description>

Returns the string that will be shown for the undo menu item.

</description></function></member>
<member class="wxCommandProcessor" name="Initialize"><function type="virtual void" name="Initialize"><description>

Initializes the command processor, setting the current command to the
last in the list (if any), and updating the edit menu (if one has been
specified).

</description></function></member>
<member class="wxCommandProcessor" name="SetEditMenu"><function type="void" name="SetEditMenu"><parameters><parameter type="wxMenu&#42; " name="menu"></parameter></parameters><description>

Tells the command processor to update the Undo and Redo items on this
menu as appropriate. Set this to NULL if the menu is about to be
destroyed and command operations may still be performed, or the command
processor may try to access an invalid pointer.

</description></function></member>
<member class="wxCommandProcessor" name="SetMenuStrings"><function type="void" name="SetMenuStrings"><description>

Sets the menu labels according to the currently set menu and the current
command state.

</description></function></member>
<member class="wxCommandProcessor" name="SetRedoAccelerator"><function type="void" name="SetRedoAccelerator"><parameters><parameter type="const wxString&amp;" name="accel"></parameter></parameters><description>

Sets the string that will be appended to the Redo menu item.

</description></function></member>
<member class="wxCommandProcessor" name="SetUndoAccelerator"><function type="void" name="SetUndoAccelerator"><parameters><parameter type="const wxString&amp;" name="accel"></parameter></parameters><description>

Sets the string that will be appended to the Undo menu item.

</description></function></member>
<member class="wxCommandProcessor" name="Submit"><function type="virtual bool" name="Submit"><parameters><parameter type="wxCommand &#42;" name="command"></parameter><parameter type="bool" name="storeIt" value="true"></parameter></parameters><description>

Submits a new command to the command processor. The command processor
calls wxCommand::Do to execute the command; if it succeeds, the command
is stored in the history list, and the associated edit menu (if any) updated
appropriately. If it fails, the command is deleted
immediately. Once Submit has been called, the passed command should not
be deleted directly by the application.

<i> storeIt</i> indicates whether the successful command should be stored
in the history list.

</description></function></member>
<member class="wxCommandProcessor" name="Undo"><function type="virtual bool" name="Undo"><description>

Undoes the command just executed.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxCondition">
<description>
<p class="classdesc">
wxCondition variables correspond to pthread conditions or to Win32 event
objects. They may be used in a multithreaded application to wait until the
given condition becomes true which happens when the condition becomes signaled.</p><p class="classdesc">For example, if a worker thread is doing some long task and another thread has
to wait until it is finished, the latter thread will wait on the condition
object and the worker thread will signal it on exit (this example is not
perfect because in this particular case it would be much better to just 
<ref target="wxthreadwait">Wait()</ref> for the worker thread, but if there are several
worker threads it already makes much more sense).</p><p class="classdesc">Note that a call to <ref target="wxconditionsignal">Signal()</ref> may happen before the
other thread calls <ref target="wxconditionwait">Wait()</ref> and, just as with the
pthread conditions, the signal is then lost and so if you want to be sure to
get it you must use a mutex together with the condition variable.</p>
</description>
<example>

This example shows how a main thread may launch a worker thread which starts
running and then waits until the main thread signals it to continue:

<pre>
class MySignallingThread : public wxThread
{
public:
    MySignallingThread(wxMutex &#42;mutex, wxCondition &#42;condition)
    {
        m_mutex = mutex;
        m_condition = condition;

        Create();
    }

    virtual ExitCode Entry()
    {
        ... do our job ...

        // tell the other(s) thread(s) that we're about to terminate: we must
        // lock the mutex first or we might signal the condition before the
        // waiting threads start waiting on it!
        wxMutexLocker lock(m_mutex);
        m_condition.Broadcast(); // same as Signal() here -- one waiter only

        return 0;
    }

private:
    wxCondition &#42;m_condition;
    wxMutex &#42;m_mutex;
};

int main()
{
    wxMutex mutex;
    wxCondition condition(mutex);

    // the mutex should be initially locked
    mutex.Lock();

    // create and run the thread but notice that it won't be able to
    // exit (and signal its exit) before we unlock the mutex below
    MySignallingThread &#42;thread = new MySignallingThread(&amp;mutex, &amp;condition);

    thread-&gt;Run();

    // wait for the thread termination: Wait() atomically unlocks the mutex
    // which allows the thread to continue and starts waiting
    condition.Wait();

    // now we can exit
    return 0;
}
</pre>

Of course, here it would be much better to simply use a joinable thread and
call <ref target="wxthreadwait">wxThread::Wait</ref> on it, but this example does
illustrate the importance of properly locking the mutex when using
wxCondition.

</example>
<parents>


</parents>
<includes>
<header name="wx/thread.h"/></includes>
<constants>

The following return codes are returned by wxCondition member functions:

<pre>
enum wxCondError
{
    wxCOND_NO_ERROR = 0,    // successful completion
    wxCOND_INVALID,         // object hasn't been initialized successfully
    wxCOND_TIMEOUT,         // WaitTimeout() has timed out
    wxCOND_MISC_ERROR       // some other error
};
</pre>

</constants>
<seealso>

<ref target="wxthread">wxThread</ref><ref target="wxmutex">wxMutex</ref>

</seealso>
<members>
<member class="wxCondition" name="wxCondition"><function type="" name="wxCondition"><parameters><parameter type="wxMutex&amp; " name="mutex"></parameter></parameters><description>

Default and only constructor. The <i> mutex</i> must be locked by the caller
before calling <ref target="wxconditionwait">Wait</ref> function.

Use <ref target="wxconditionisok">IsOk</ref> to check if the object was successfully
intiialized.

</description></function></member>
<member class="wxCondition" name="~wxCondition"><function type="" name="~wxCondition"><description>

Destroys the wxCondition object. The destructor is not virtual so this class
should not be used polymorphically.

</description></function></member>
<member class="wxCondition" name="Broadcast"><function type="void" name="Broadcast"><seealso>

<ref target="wxconditionsignal">wxCondition::Signal</ref>

</seealso><description>

Broadcasts to all waiting threads, waking all of them up. Note that this method
may be called whether the mutex associated with this condition is locked or
not.

</description></function></member>
<member class="wxCondition" name="IsOk"><function type="bool" name="IsOk" suffix="const"><description>

Returns <tt> true</tt> if the object had been initialized successfully, <tt> false</tt> 
if an error occured.

</description></function></member>
<member class="wxCondition" name="Signal"><function type="void" name="Signal"><seealso>

<ref target="wxconditionbroadcast">wxCondition::Broadcast</ref>

</seealso><description>

Signals the object waking up at most one thread. If several threads are waiting
on the same condition, the exact thread which is woken up is undefined. If no
threads are waiting, the signal is lost and the condition would have to be
signalled again to wake up any thread which may start waiting on it later.

Note that this method may be called whether the mutex associated with this
condition is locked or not.

</description></function></member>
<member class="wxCondition" name="Wait"><function type="wxCondError" name="Wait"><seealso>

<ref target="wxconditionwaittimeout">WaitTimeout</ref>


</seealso><returnvalue>

Returns <tt> wxCOND_NO_ERROR</tt> on success, another value if an error occured.

</returnvalue><description>

Waits until the condition is signalled.

This method atomically releases the lock on the mutex associated with this
condition (this is why it must be locked prior to calling Wait) and puts the
thread to sleep until <ref target="wxconditionsignal">Signal</ref> or 
<ref target="wxconditionbroadcast">Broadcast</ref> is called.

Note that even if <ref target="wxconditionsignal">Signal</ref> had been called before
Wait without waking up any thread, the thread would still wait for another one
and so it is important to ensure that the condition will be signalled after
Wait or the thread may sleep forever.

</description></function></member>
<member class="wxCondition" name="WaitTimeout"><function type="wxCondError" name="Wait"><parameters><parameter type="unsigned long" name=" milliseconds"></parameter></parameters><returnvalue>

Returns <tt> wxCOND_NO_ERROR</tt> if the condition was signalled, 
<tt> wxCOND_TIMEOUT</tt> if the timeout elapsed ebfore this happened or another
error code from wxCondError enum.

</returnvalue><description>

Waits until the condition is signalled or the timeout has elapsed.

This method is identical to <ref target="wxconditionwait">Wait</ref> except that it
returns, with the return code of <tt> wxCOND_TIMEOUT</tt> as soon as the given
timeout expires.





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxConfigBase">
<description>
<p class="classdesc">
wxConfigBase class defines the basic interface of all config classes. It can
not be used by itself (it is an abstract base class) and you will always use one
of its derivations: wxIniConfig, wxFileConfig, wxRegConfig or any other.</p><p class="classdesc">However, usually you don't even need to know the precise nature of the class
you're working with but you would just use the wxConfigBase methods. This
allows you to write the same code regardless of whether you're working with
the registry under Win32 or text-based config files under Unix (or even
Windows 3.1 .INI files if you're really unlucky). To make writing the portable
code even easier, wxWindows provides a typedef wxConfig
which is mapped onto the native wxConfigBase implementation on the given
platform: i.e. wxRegConfig under Win32, wxIniConfig under Win16 and
wxFileConfig otherwise.</p><p class="classdesc">See <ref target="wxconfigoverview">config overview</ref> for the descriptions of all
features of this class.</p><p class="classdesc">It is highly recommended to use static functions <i> Get()</i> and/or <i> Set()</i>, 
so please have a <ref target="wxconfigstaticfunctions">look at them.</ref></p>
</description>
<example>

Here is how you would typically use this class:

<pre>
  // using wxConfig instead of writing wxFileConfig or wxRegConfig enhances
  // portability of the code
  wxConfig &#42;config = new wxConfig(&quot;MyAppName&quot;);

  wxString str;
  if ( config-&gt;Read(&quot;LastPrompt&quot;, &amp;str) ) {
    // last prompt was found in the config file/registry and its value is now
    // in str
    ...
  }
  else {
    // no last prompt...
  }

  // another example: using default values and the full path instead of just
  // key name: if the key is not found , the value 17 is returned
  long value = config-&gt;Read(&quot;/LastRun/CalculatedValues/MaxValue&quot;, 17);
  ...
  ...
  ...
  // at the end of the program we would save everything back
  config-&gt;Write(&quot;LastPrompt&quot;, str);
  config-&gt;Write(&quot;/LastRun/CalculatedValues/MaxValue&quot;, value);

  // the changes will be written back automatically
  delete config;
</pre>

This basic example, of course, doesn't show all wxConfig features, such as
enumerating, testing for existence and deleting the entries and groups of
entries in the config file, its abilities to automatically store the default
values or expand the environment variables on the fly. However, the main idea
is that using this class is easy and that it should normally do what you
expect it to.

NB: in the documentation of this class, the words &quot;config file&quot; also mean
&quot;registry hive&quot; for wxRegConfig and, generally speaking, might mean any
physical storage where a wxConfigBase-derived class stores its data.

</example>
<parents></parents>
<includes>
<header name="wx/config.h" comment="(to let wxWindows choose a wxConfig class for your platform)"/></includes>
<members>
<member class="Static functions}\label{wxconfigstaticfunctions}

These functions deal with the &quot;default&quot; config object. Although its usage is
not at all mandatory it may be convenient to use a global config object
instead of creating and deleting the local config objects each time you need
one (especially because creating a wxFileConfig object might be a time
consuming operation). In this case, you may create this global config object
in the very start of the program and {\it Set()} it as the default. Then, from
anywhere in your program, you may access it using the {\it Get()} function.
Note that you must delete this object (usually in \helpref{wxApp" name="OnExit"></member>
<member class="wxConfigBase" name=""></member>
<member class="wxConfigBase" name=""></member>
<member class="wxConfigBase" name=""></member>
<member class="wxConfigBase" name=""></member>
<member class="wxConfigBase" name=""></member>
<member class="wxConfigBase" name=""></member>
<member class="wxConfigBase" name=""></member>
<member class="wxConfigBase" name=""></member>
<member class="wxConfigBase" name=""></member>
<member class="wxConfigBase" name="wxConfigBase"><function type="" name="wxConfigBase"><parameters><parameter type="const wxString&amp; " name="appName" value="wxEmptyString">The application name. If this is empty, the class will
normally use <ref target="wxappgetappname">wxApp::GetAppName</ref> to set it. The
application name is used in the registry key on Windows, and can be used to
deduce the local filename parameter if that is missing.</parameter><parameter type="const wxString&amp; " name="vendorName" value="wxEmptyString">The vendor name. If this is empty, it is assumed that
no vendor name is wanted, if this is optional for the current config class.
The vendor name is appended to the application name for wxRegConfig.</parameter><parameter type="const wxString&amp; " name="localFilename" value="wxEmptyString">Some config classes require a local filename. If this
is not present, but required, the application name will be used instead.</parameter><parameter type="const wxString&amp; " name="globalFilename" value="wxEmptyString">Some config classes require a global filename. If
this is not present, but required, the application name will be used instead.</parameter><parameter type="long" name="style" value="0">Can be one of wxCONFIG_USE_LOCAL_FILE and
wxCONFIG_USE_GLOBAL_FILE. The style interpretation depends on the config
class and is ignored by some. For wxFileConfig, these styles determine whether
a local or global config file is created or used. If the flag is present but
the parameter is empty, the parameter will be set to a default. If the
parameter is present but the style flag not, the relevant flag will be added
to the style. For wxFileConfig you can also add wxCONFIG_USE_RELATIVE_PATH 
by logically or'ing it to either of the _FILE options to tell wxFileConfig to 
use relative instead of absolute paths.  For wxFileConfig, you can also 
add wxCONFIG_USE_NO_ESCAPE_CHARACTERS which will turn off character 
escaping for the values of entries stored in the config file: for example 
a <i> foo</i> key with some backslash characters will be stored as <tt> foo=C:$\backslash$mydir</tt> instead
of the usual storage of <tt> foo=C:$\backslash\backslash$mydir</tt>.

The wxCONFIG_USE_NO_ESCAPE_CHARACTERS style can be helpful if your config 
file must be read or written to by a non-wxWindows program (which might not 
understand the escape characters). Note, however, that if 
wxCONFIG_USE_NO_ESCAPE_CHARACTERS style is used, it is is now 
your application's responsibility to ensure that there is no newline or 
other illegal characters in a value, before writing that value to the file.</parameter><parameter type="wxMBConv&amp;" name="conv" value="wxConvUTF8">This parameter is only used by wxFileConfig when compiled
in Unicode mode. It specifies the encoding in what the configuration file
is written.</parameter></parameters><remarks>

By default, environment variable expansion is on and recording defaults is
off.

</remarks><description>

This is the default and only constructor of the wxConfigBase class, and
derived classes.
















</description></function></member>
<member class="wxConfigBase" name="~wxConfigBase"><function type="" name="~wxConfigBase"><description>

Empty but ensures that dtor of all derived classes is virtual.

</description></function></member>
<member class="wxConfigBase" name="Create"><function type="static wxConfigBase &#42;" name="Create"><description>

Create a new config object: this function will create the &quot;best&quot;
implementation of wxConfig available for the current platform, see comments
near the definition of wxCONFIG_WIN32_NATIVE for details. It returns the
created object and also sets it as the current one.

</description></function></member>
<member class="wxConfigBase" name="DontCreateOnDemand"><function type="void" name="DontCreateOnDemand"><description>

Calling this function will prevent <i> Get()</i> from automatically creating a
new config object if the current one is NULL. It might be useful to call it
near the program end to prevent new config object &quot;accidental&quot; creation.

</description></function></member>
<member class="wxConfigBase" name="DeleteAll"><function type="bool" name="DeleteAll"><description>

Delete the whole underlying object (disk file, registry key, ...). Primarly
for use by desinstallation routine.

</description></function></member>
<member class="wxConfigBase" name="DeleteEntry"><function type="bool" name="DeleteEntry"><parameters><parameter type="const wxString&amp; " name=" key"></parameter><parameter type="bool" name="bDeleteGroupIfEmpty" value="true"></parameter></parameters><description>

Deletes the specified entry and the group it belongs to if it was the last key
in it and the second parameter is true.

</description></function></member>
<member class="wxConfigBase" name="DeleteGroup"><function type="bool" name="DeleteGroup"><parameters><parameter type="const wxString&amp; " name=" key"></parameter></parameters><description>

Delete the group (with all subgroups)

</description></function></member>
<member class="wxConfigBase" name="Exists"><function type="bool" name="Exists" suffix="const"><parameters><parameter type="wxString&amp; " name="strName"></parameter></parameters><description>

returns true if either a group or an entry with a given name exists

</description></function></member>
<member class="wxConfigBase" name="Flush"><function type="bool" name="Flush"><parameters><parameter type="bool " name="bCurrentOnly" value="false"></parameter></parameters><description>

permanently writes all changes (otherwise, they're only written from object's
destructor)

</description></function></member>
<member class="wxConfigBase" name="Get"><function type="static wxConfigBase &#42;" name="Get"><parameters><parameter type="bool " name="CreateOnDemand" value="true"></parameter></parameters><description>

Get the current config object. If there is no current object and
<i> CreateOnDemand</i> is true, creates one
(using <i> Create</i>) unless DontCreateOnDemand was called previously.

</description></function></member>
<member class="wxConfigBase" name="GetAppName"><function type="wxString" name="GetAppName" suffix="const"><description>

Returns the application name.

</description></function></member>
<member class="wxConfigBase" name="GetEntryType"><function type="enum wxConfigBase::EntryType" name="GetEntryType" suffix="const"><parameters><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Returns the type of the given entry or <i> Unknown</i> if the entry doesn't
exist. This function should be used to decide which version of Read() should
be used because some of wxConfig implementations will complain about type
mismatch otherwise: e.g., an attempt to read a string value from an integer
key with wxRegConfig will fail.

The result is an element of enum EntryType:

<pre>
  enum EntryType
  {
    Unknown,
    String,
    Boolean,
    Integer,
    Float
  };
</pre>

</description></function></member>
<member class="wxConfigBase" name="GetFirstGroup"><function type="bool" name="GetFirstGroup" suffix="const"><parameters><parameter type="wxString&amp; " name="str"></parameter><parameter type="long&amp;" name=" index"></parameter></parameters><description>

Gets the first group.

\pythonnote{The wxPython version of this method returns a 3-tuple
consisting of the continue flag, the value string, and the index for
the next call.}

\perlnote{In wxPerl this method takes no arguments and returns a 3-element
list <tt> ( continue, str, index )</tt>.}

</description></function></member>
<member class="wxConfigBase" name="GetFirstEntry"><function type="bool" name="GetFirstEntry" suffix="const"><parameters><parameter type="wxString&amp; " name="str"></parameter><parameter type="long&amp;" name=" index"></parameter></parameters><description>

Gets the first entry.

\pythonnote{The wxPython version of this method returns a 3-tuple
consisting of the continue flag, the value string, and the index for
the next call.}

\perlnote{In wxPerl this method takes no arguments and returns a 3-element
list <tt> ( continue, str, index )</tt>.}

</description></function></member>
<member class="wxConfigBase" name="GetNextGroup"><function type="bool" name="GetNextGroup" suffix="const"><parameters><parameter type="wxString&amp; " name="str"></parameter><parameter type="long&amp;" name=" index"></parameter></parameters><description>

Gets the next group.

\pythonnote{The wxPython version of this method returns a 3-tuple
consisting of the continue flag, the value string, and the index for
the next call.}

\perlnote{In wxPerl this method only takes the <tt> index</tt> parameter
and returns a 3-element list <tt> ( continue, str, index )</tt>.}

</description></function></member>
<member class="wxConfigBase" name="GetNextEntry"><function type="bool" name="GetNextEntry" suffix="const"><parameters><parameter type="wxString&amp; " name="str"></parameter><parameter type="long&amp;" name=" index"></parameter></parameters><description>

Gets the next entry.

\pythonnote{The wxPython version of this method returns a 3-tuple
consisting of the continue flag, the value string, and the index for
the next call.}

\perlnote{In wxPerl this method only takes the <tt> index</tt> parameter
and returns a 3-element list <tt> ( continue, str, index )</tt>.}

</description></function></member>
<member class="wxConfigBase" name="GetNumberOfEntries"><function type="uint " name="GetNumberOfEntries" suffix="const"><parameters><parameter type="bool " name="bRecursive" value="false"></parameter></parameters><description>

</description></function></member>
<member class="wxConfigBase" name="GetNumberOfGroups"><function type="uint" name="GetNumberOfGroups" suffix="const"><parameters><parameter type="bool " name="bRecursive" value="false"></parameter></parameters><description>

Get number of entries/subgroups in the current group, with or without its
subgroups.

</description></function></member>
<member class="wxConfigBase" name="GetPath"><function type="const wxString&amp;" name="GetPath" suffix="const"><description>

Retrieve the current path (always as absolute path).

</description></function></member>
<member class="wxConfigBase" name="GetVendorName"><function type="wxString" name="GetVendorName" suffix="const"><description>

Returns the vendor name.

</description></function></member>
<member class="wxConfigBase" name="HasEntry"><function type="bool" name="HasEntry" suffix="const"><parameters><parameter type="wxString&amp; " name="strName"></parameter></parameters><description>

returns true if the entry by this name exists

</description></function></member>
<member class="wxConfigBase" name="HasGroup"><function type="bool" name="HasGroup" suffix="const"><parameters><parameter type="const wxString&amp; " name="strName"></parameter></parameters><description>

returns true if the group by this name exists

</description></function></member>
<member class="wxConfigBase" name="IsExpandingEnvVars"><function type="bool" name="IsExpandingEnvVars" suffix="const"><description>

Returns true if we are expanding environment variables in key values.

</description></function></member>
<member class="wxConfigBase" name="IsRecordingDefaults"><function type="bool" name="IsRecordingDefaults" suffix="const"><description>

Returns true if we are writing defaults back to the config file.

</description></function></member>
<member class="wxConfigBase" name="Read"><function type="bool" name="Read" suffix="const"><parameters><parameter type="const wxString&amp; " name="key"></parameter><parameter type="wxString&#42;" name=" str"></parameter></parameters><description>

Read a string from the key, returning true if the value was read. If the key
was not found, <i> str</i> is not changed.

</description></function>
<function type="bool" name="Read" suffix="const"><parameters><parameter type="const wxString&amp; " name="key"></parameter><parameter type="wxString&#42;" name=" str"></parameter><parameter type="const wxString&amp; " name="defaultVal"></parameter></parameters><description>

Read a string from the key. The default value is returned if the key was not
found.

Returns true if value was really read, false if the default was used.

</description></function>
<function type="wxString" name="Read" suffix="const"><parameters><parameter type="const wxString&amp; " name="key"></parameter><parameter type="const
wxString&amp; " name="defaultVal"></parameter></parameters><description>

Another version of <i> Read()</i>, returning the string value directly.

</description></function>
<function type="bool" name="Read" suffix="const"><parameters><parameter type="const wxString&amp; " name=" key"></parameter><parameter type="long&#42;" name=" l"></parameter></parameters><description>

Reads a long value, returning true if the value was found. If the value was
not found, <i> l</i> is not changed.

</description></function>
<function type="bool" name="Read" suffix="const"><parameters><parameter type="const wxString&amp; " name=" key"></parameter><parameter type="long&#42;" name=" l"></parameter><parameter type="long" name=" defaultVal"></parameter></parameters><description>

Reads a long value, returning true if the value was found. If the value was
not found, <i> defaultVal</i> is used instead.

</description></function>
<function type="long " name="Read" suffix="const"><parameters><parameter type="const wxString&amp; " name="key"></parameter><parameter type="long" name=" defaultVal"></parameter></parameters><description>

Reads a long value from the key and returns it. <i> defaultVal</i> is returned
if the key is not found.

NB: writing

<pre>
    conf-&gt;Read(&quot;key&quot;, 0);
</pre>

won't work because the call is ambiguous: compiler can not choose between two
<i> Read</i> functions. Instead, write:

<pre>
    conf-&gt;Read(&quot;key&quot;, 0l);
</pre>

</description></function>
<function type="bool" name="Read" suffix="const"><parameters><parameter type="const wxString&amp; " name=" key"></parameter><parameter type="double&#42;" name=" d"></parameter></parameters><description>

Reads a double value, returning true if the value was found. If the value was
not found, <i> d</i> is not changed.

</description></function>
<function type="bool" name="Read" suffix="const"><parameters><parameter type="const wxString&amp; " name=" key"></parameter><parameter type="double&#42;" name=" d"></parameter><parameter type="double" name=" defaultVal"></parameter></parameters><description>

Reads a double value, returning true if the value was found. If the value was
not found, <i> defaultVal</i> is used instead.

</description></function>
<function type="bool" name="Read" suffix="const"><parameters><parameter type="const wxString&amp; " name=" key"></parameter><parameter type="bool&#42;" name=" b"></parameter></parameters><description>

Reads a bool value, returning true if the value was found. If the value was
not found, <i> b</i> is not changed.

</description></function>
<function type="bool" name="Read" suffix="const"><parameters><parameter type="const wxString&amp; " name=" key"></parameter><parameter type="bool&#42;" name=" d"></parameter><parameter type="bool" name=" defaultVal"></parameter></parameters><description>

Reads a bool value, returning true if the value was found. If the value was
not found, <i> defaultVal</i> is used instead.

\pythonnote{In place of a single overloaded method name, wxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> Read(key, default=&quot;&quot;)</b></td><td>Returns a string.</td></tr>
<tr><td><b> ReadInt(key, default=0)</b></td><td>Returns an int.</td></tr>
<tr><td><b> ReadFloat(key, default=0.0)</b></td><td>Returns a floating point number.</td></tr>
</table>}
}

\perlnote{In place of a single overloaded method, wxPerl uses:\par
\indented{2cm}{<table>
<tr><td><b> Read(key, default=&quot;&quot;)</b></td><td>Returns a string</td></tr>
<tr><td><b> ReadInt(key, default=0)</b></td><td>Returns an integer</td></tr>
<tr><td><b> ReadFloat(key, default=0.0)</b></td><td>Returns a floating point number</td></tr>
<tr><td><b> ReadBool(key, default=0)</b></td><td>Returns a boolean</td></tr>
</table>
}}

</description></function></member>
<member class="wxConfigBase" name="RenameEntry"><function type="bool" name="RenameEntry"><parameters><parameter type="const wxString&amp; " name=" oldName"></parameter><parameter type="const wxString&amp; " name=" newName"></parameter></parameters><description>

Renames an entry in the current group. The entries names (both the old and
the new one) shouldn't contain backslashes, i.e. only simple names and not
arbitrary paths are accepted by this function.

Returns false if the <i> oldName</i> doesn't exist or if <i> newName</i> already
exists.

</description></function></member>
<member class="wxConfigBase" name="RenameGroup"><function type="bool" name="RenameGroup"><parameters><parameter type="const wxString&amp; " name=" oldName"></parameter><parameter type="const wxString&amp; " name=" newName"></parameter></parameters><description>

Renames a subgroup of the current group. The subgroup names (both the old and
the new one) shouldn't contain backslashes, i.e. only simple names and not
arbitrary paths are accepted by this function.

Returns false if the <i> oldName</i> doesn't exist or if <i> newName</i> already
exists.

</description></function></member>
<member class="wxConfigBase" name="Set"><function type="static wxConfigBase &#42;" name="Set"><parameters><parameter type="wxConfigBase &#42;" name="pConfig"></parameter></parameters><description>

Sets the config object as the current one, returns the pointer to the previous
current object (both the parameter and returned value may be NULL)

</description></function></member>
<member class="wxConfigBase" name="SetExpandEnvVars"><function type="void" name="SetExpandEnvVars "><parameters><parameter type="bool " name="bDoIt" value="true"></parameter></parameters><description>

Determine whether we wish to expand environment variables in key values.

</description></function></member>
<member class="wxConfigBase" name="SetPath"><function type="void" name="SetPath"><parameters><parameter type="const wxString&amp; " name="strPath"></parameter></parameters><description>

Set current path: if the first character is '/', it is the absolute path,
otherwise it is a relative path. '..' is supported. If the strPath doesn't
exist it is created.

</description></function></member>
<member class="wxConfigBase" name="SetRecordDefaults"><function type="void" name="SetRecordDefaults"><parameters><parameter type="bool " name="bDoIt" value="true"></parameter></parameters><description>

Sets whether defaults are recorded to the config file whenever an attempt to
read read the value which is not present in it is done.

If on (default is off) all default values for the settings used by the program
are written back to the config file. This allows the user to see what config
options may be changed and is probably useful only for wxFileConfig.

</description></function></member>
<member class="wxConfigBase" name="SetUmask"><function type="void" name="SetUmask"><parameters><parameter type="int " name="mode"></parameter></parameters><description>

<b> NB:</b> this function is not in the base wxConfigBase class but is only
implemented in wxFileConfig. Moreover, this function is Unix-specific and
doesn't do anything on other platforms.

SetUmask() allows to set the mode to be used for the config file creation.
For example, to create a config file which is not readable by other users
(useful if it stores some sensitive information, such as passwords), you
should do <tt> SetUmask(0077)</tt>.

</description></function></member>
<member class="wxConfigBase" name="Write"><function type="bool" name="Write"><parameters><parameter type="const wxString&amp; " name=" key"></parameter><parameter type="const wxString&amp; " name="
value"></parameter></parameters><description>

</description></function>
<function type="bool" name="Write"><parameters><parameter type="const wxString&amp; " name=" key"></parameter><parameter type="long" name=" value"></parameter></parameters><description>

</description></function>
<function type="bool" name="Write"><parameters><parameter type="const wxString&amp; " name=" key"></parameter><parameter type="double" name=" value"></parameter></parameters><description>

</description></function>
<function type="bool" name="Write"><parameters><parameter type="const wxString&amp; " name=" key"></parameter><parameter type="bool" name=" value"></parameter></parameters><description>

These functions write the specified value to the config file and return true
on success.

\pythonnote{In place of a single overloaded method name, wxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> Write(key, value)</b></td><td>Writes a string.</td></tr>
<tr><td><b> WriteInt(key, value)</b></td><td>Writes an int.</td></tr>
<tr><td><b> WriteFloat(key, value)</b></td><td>Writes a floating point number.</td></tr>
</table>}
}

\perlnote{In place of a single overloaded method, wxPerl uses:\par
\indented{2cm}{<table>
<tr><td><b> Write(key, value)</b></td><td>Writes a string</td></tr>
<tr><td><b> WriteInt(key, value)</b></td><td>Writes an integer</td></tr>
<tr><td><b> WriteFloat(key, value)</b></td><td>Writes a floating point number</td></tr>
<tr><td><b> WriteBool(key, value)</b></td><td>Writes a boolean</td></tr>
</table>
}}
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxConnection">
<description>
<p class="classdesc">
A wxConnection object represents the connection between a client
and a server. It is created by making a connection using a
<ref target="wxddeclient">wxClient</ref> object, or by the acceptance of a
connection by a <ref target="wxddeserver">wxServer</ref> object. The
bulk of a DDE-like (Dynamic Data Exchange) conversation is
controlled by calling members in a <b> wxConnection</b> object or
by overriding its members. The actual DDE-based implementation
using wxDDEConnection is available on Windows only, but a
platform-independent, socket-based version of this API is
available using wxTCPConnection, which has the same API.</p><p class="classdesc">An application should normally derive a new connection class from
wxConnection, in order to override the communication event
handlers to do something interesting.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/ipc.h"/></includes>
<types>

\index{wxIPCFormat}wxIPCFormat is defined as follows:

<pre>
enum wxIPCFormat
{
  wxIPC_INVALID =          0,
  wxIPC_TEXT =             1,  /&#42; CF_TEXT &#42;/
  wxIPC_BITMAP =           2,  /&#42; CF_BITMAP &#42;/
  wxIPC_METAFILE =         3,  /&#42; CF_METAFILEPICT &#42;/
  wxIPC_SYLK =             4,
  wxIPC_DIF =              5,
  wxIPC_TIFF =             6,
  wxIPC_OEMTEXT =          7,  /&#42; CF_OEMTEXT &#42;/
  wxIPC_DIB =              8,  /&#42; CF_DIB &#42;/
  wxIPC_PALETTE =          9,
  wxIPC_PENDATA =          10,
  wxIPC_RIFF =             11,
  wxIPC_WAVE =             12,
  wxIPC_UNICODETEXT =      13,
  wxIPC_ENHMETAFILE =      14,
  wxIPC_FILENAME =         15, /&#42; CF_HDROP &#42;/
  wxIPC_LOCALE =           16,
  wxIPC_PRIVATE =          20
};
</pre>

</types>
<seealso>

<ref target="wxddeclient">wxClient</ref><ref target="wxddeserver">wxServer</ref>,
<ref target="ipcoverview">Interprocess communications overview</ref>

</seealso>
<members>
<member class="wxConnection" name="wxConnection"><function type="" name="wxConnection"><description>

</description></function>
<function type="" name="wxConnection"><parameters><parameter type="char&#42; " name="buffer"></parameter><parameter type="int" name=" size"></parameter></parameters><description>

Constructs a connection object. If no user-defined connection
object is to be derived from wxConnection, then the constructor
should not be called directly, since the default connection
object will be provided on requesting (or accepting) a
connection. However, if the user defines his or her own derived
connection object, the<ref target="wxddeserveronacceptconnection">wxServer::OnAcceptConnection</ref>
and/or <ref target="wxddeclientonmakeconnection">wxClient::OnMakeConnection</ref> 
members should be replaced by functions which construct the new
connection object.

If the arguments of the wxConnection constructor are void then
the wxConnection object manages its own connection buffer,
allocating memory as needed. A programmer-supplied buffer cannot
be increased if necessary, and the program will assert if it is
not large enough. The programmer-supplied buffer is included
mainly for backwards compatibility.

</description></function></member>
<member class="wxConnection" name="Advise"><function type="bool" name="Advise"><parameters><parameter type="const wxString&amp; " name="item"></parameter><parameter type="char&#42; " name="data"></parameter><parameter type="int" name="size" value="-1"></parameter><parameter type="wxIPCFormat" name="format" value="wxCF_TEXT"></parameter></parameters><description>

Called by the server application to advise the client of a change
in the data associated with the given item. Causes the client
connection's <ref target="wxddeconnectiononadvise">wxConnection::OnAdvise</ref> member
to be called. Returns true if successful.

</description></function></member>
<member class="wxConnection" name="Execute"><function type="bool" name="Execute"><parameters><parameter type="char&#42; " name="data"></parameter><parameter type="int" name="size" value="-1"></parameter><parameter type="wxIPCFormat" name="format" value="wxCF_TEXT"></parameter></parameters><description>

Called by the client application to execute a command on the
server. Can also be used to transfer arbitrary data to the server
(similar to <ref target="wxddeconnectionpoke">wxConnection::Poke</ref> in
that respect). Causes the server connection's <ref target="wxddeconnectiononexecute">wxConnection::OnExecute</ref> 
member to be called. Returns true if successful.

</description></function></member>
<member class="wxConnection" name="Disconnect"><function type="bool" name="Disconnect"><description>

Called by the client or server application to disconnect from the
other program; it causes the <ref target="wxddeconnectionondisconnect">wxConnection::OnDisconnect</ref> 
message to be sent to the corresponding connection object in the
other program. Returns true if successful or already disconnected.
The application that calls <b> Disconnect</b> must explicitly delete
its side of the connection.

</description></function></member>
<member class="wxConnection" name="OnAdvise"><function type="virtual bool" name="OnAdvise"><parameters><parameter type="const wxString&amp; " name="topic"></parameter><parameter type="const wxString&amp; " name="item"></parameter><parameter type="char&#42; " name="data"></parameter><parameter type="int" name=" size"></parameter><parameter type="wxIPCFormat" name=" format"></parameter></parameters><description>

Message sent to the client application when the server notifies
it of a change in the data associated with the given item, using
<ref target="wxddeconnectionadvise">Advise</ref>.

</description></function></member>
<member class="wxConnection" name="OnDisconnect"><function type="virtual bool" name="OnDisconnect"><description>

Message sent to the client or server application when the other
application notifies it to end the connection. The default
behaviour is to delete the connection object and return true, so
applications should generally override <b> OnDisconnect</b>
(finally calling the inherited method as well) so that they know
the connection object is no longer available.

</description></function></member>
<member class="wxConnection" name="OnExecute"><function type="virtual bool" name="OnExecute"><parameters><parameter type="const wxString&amp; " name="topic"></parameter><parameter type="char&#42; " name="data"></parameter><parameter type="int" name=" size"></parameter><parameter type="wxIPCFormat" name=" format"></parameter></parameters><description>

Message sent to the server application when the client notifies
it to execute the given data, using <ref target="wxddeconnectionexecute">Execute</ref>.
Note that there is no item associated with this message.

</description></function></member>
<member class="wxConnection" name="OnPoke"><function type="virtual bool" name="OnPoke"><parameters><parameter type="const wxString&amp; " name="topic"></parameter><parameter type="const wxString&amp; " name="item"></parameter><parameter type="char&#42; " name="data"></parameter><parameter type="int" name=" size"></parameter><parameter type="wxIPCFormat" name=" format"></parameter></parameters><description>

Message sent to the server application when the client notifies it to
accept the given data.

</description></function></member>
<member class="wxConnection" name="OnRequest"><function type="virtual char&#42;" name="OnRequest"><parameters><parameter type="const wxString&amp; " name="topic"></parameter><parameter type="const wxString&amp; " name="item"></parameter><parameter type="int &#42;" name="size"></parameter><parameter type="wxIPCFormat" name=" format"></parameter></parameters><description>

Message sent to the server application when the client calls 
<ref target="wxddeconnectionrequest">wxConnection::Request</ref>. The
server's <ref target="wxddeconnectiononrequest">OnRequest</ref> method
should respond by returning a character string, or NULL to
indicate no data, and setting &#42;size. The character string must of
course persist after the call returns.

</description></function></member>
<member class="wxConnection" name="OnStartAdvise"><function type="virtual bool" name="OnStartAdvise"><parameters><parameter type="const wxString&amp; " name="topic"></parameter><parameter type="const wxString&amp; " name="item"></parameter></parameters><description>

Message sent to the server application by the client, when the client
wishes to start an `advise loop' for the given topic and item. The
server can refuse to participate by returning false.

</description></function></member>
<member class="wxConnection" name="OnStopAdvise"><function type="virtual bool" name="OnStopAdvise"><parameters><parameter type="const wxString&amp; " name="topic"></parameter><parameter type="const wxString&amp; " name="item"></parameter></parameters><description>

Message sent to the server application by the client, when the client
wishes to stop an `advise loop' for the given topic and item. The
server can refuse to stop the advise loop by returning false, although
this doesn't have much meaning in practice.

</description></function></member>
<member class="wxConnection" name="Poke"><function type="bool" name="Poke"><parameters><parameter type="const wxString&amp; " name="item"></parameter><parameter type="char&#42; " name="data"></parameter><parameter type="int" name="size" value="-1"></parameter><parameter type="wxIPCFormat" name="format" value="wxCF_TEXT"></parameter></parameters><description>

Called by the client application to poke data into the server.
Can be used to transfer arbitrary data to the server. Causes the
server connection's <ref target="wxddeconnectiononpoke">wxConnection::OnPoke</ref> member to
be called. If size is -1 the size is computed from the string
length of data.

Returns true if successful.

</description></function></member>
<member class="wxConnection" name="Request"><function type="char&#42;" name="Request"><parameters><parameter type="const wxString&amp; " name="item"></parameter><parameter type="int &#42;" name="size"></parameter><parameter type="wxIPCFormat" name="format" value="wxIPC_TEXT"></parameter></parameters><description>

Called by the client application to request data from the server.
Causes the server connection's <ref target="wxddeconnectiononrequest">wxConnection::OnRequest</ref> 
member to be called. Size may be NULL or a pointer to a variable
to receive the size of the requested item.

Returns a character string (actually a pointer to the
connection's buffer) if successful, NULL otherwise. This buffer
does not need to be deleted.

</description></function></member>
<member class="wxConnection" name="StartAdvise"><function type="bool" name="StartAdvise"><parameters><parameter type="const wxString&amp; " name="item"></parameter></parameters><description>

Called by the client application to ask if an advise loop can be
started with the server. Causes the server connection's 
<ref target="wxddeconnectiononstartadvise">wxConnection::OnStartAdvise</ref>
member to be called. Returns true if the server okays it, false
otherwise.

</description></function></member>
<member class="wxConnection" name="StopAdvise"><function type="bool" name="StopAdvise"><parameters><parameter type="const wxString&amp; " name="item"></parameter></parameters><description>

Called by the client application to ask if an advise loop can be
stopped. Causes the server connection's <ref target="wxddeconnectiononstopadvise">wxConnection::OnStopAdvise</ref> 
member to be called. Returns true if the server okays it, false
otherwise.

</description></function></member></members>
<supported>
</supported>
</class>
<class name="wxContextHelp">
<description>
<p class="classdesc">
This class changes the cursor to a query and puts the application into a 'context-sensitive help mode'.
When the user left-clicks on a window within the specified window, a wxEVT_HELP event is
sent to that control, and the application may respond to it by popping up some help.</p><p class="classdesc">For example:</p><p class="classdesc"><pre>
  wxContextHelp contextHelp(myWindow);
</pre></p><p class="classdesc">There are a couple of ways to invoke this behaviour implicitly:</p><p class="classdesc"><ul><li> Use the wxDIALOG_EX_CONTEXTHELP style for a dialog (Windows only). This will put a question mark
in the titlebar, and Windows will put the application into context-sensitive help mode automatically,
with further programming.
</li>
<li> Create a <ref target="wxcontexthelpbutton">wxContextHelpButton</ref>, whose predefined behaviour is to create a context help object.
Normally you will write your application so that this button is only added to a dialog for non-Windows platforms
(use wxDIALOG_EX_CONTEXTHELP on Windows).
</li></ul></p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/cshelp.h"/></includes>
<seealso>

<ref target="wxhelpevent">wxHelpEvent</ref>
<ref target="wxhelpcontroller">wxHelpController</ref>
<ref target="wxcontexthelpbutton">wxContextHelpButton</ref>

</seealso>
<members>
<member class="wxContextHelp" name="wxContextHelp"><function type="" name="wxContextHelp"><parameters><parameter type="wxWindow&#42;" name="window" value="NULL"></parameter><parameter type="bool" name="doNow" value="true"></parameter></parameters><description>

Constructs a context help object, calling <ref target="wxcontexthelpbegincontexthelp">BeginContextHelp</ref> if
<i> doNow</i> is true (the default).

If <i> window</i> is NULL, the top window is used.

</description></function></member>
<member class="wxContextHelp" name="~wxContextHelp"><function type="" name="~wxContextHelp"><description>

Destroys the context help object.

</description></function></member>
<member class="wxContextHelp" name="BeginContextHelp"><function type="bool" name="BeginContextHelp"><parameters><parameter type="wxWindow&#42;" name="window" value="NULL"></parameter></parameters><description>

Puts the application into context-sensitive help mode. <i> window</i> is the window
which will be used to catch events; if NULL, the top window will be used.

Returns true if the application was successfully put into context-sensitive help mode.
This function only returns when the event loop has finished.

</description></function></member>
<member class="wxContextHelp" name="EndContextHelp"><function type="bool" name="EndContextHelp"><description>

Ends context-sensitive help mode. Not normally called by the application.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxContextHelpButton">
<description>
<p class="classdesc">
Instances of this class may be used to add a question mark button that when pressed, puts the
application into context-help mode. It does this by creating a <ref target="wxcontexthelp">wxContextHelp</ref> object which itself
generates a wxEVT_HELP event when the user clicks on a window.</p><p class="classdesc">On Windows, you may add a question-mark icon to a dialog by use of the wxDIALOG_EX_CONTEXTHELP extra style, but
on other platforms you will have to add a button explicitly, usually next to OK, Cancel or similar buttons.</p>
</description>
<parents>
<classref name="wxBitmapButton"/>
<classref name="wxButton"/>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/cshelp.h"/></includes>
<seealso>

<ref target="wxbitmapbutton">wxBitmapButton</ref><ref target="wxcontexthelp">wxContextHelp</ref>

</seealso>
<members>
<member class="wxContextHelpButton" name="wxContextHelpButton"><function type="" name="wxContextHelpButton"><description>

Default constructor.

</description></function>
<function type="" name="wxContextHelpButton"><parameters><parameter type="wxWindow&#42; " name="parent">Parent window. Must not be NULL.</parameter><parameter type="wxWindowID " name="id" value="wxID_CONTEXT_HELP">Button identifier. Defaults to wxID_CONTEXT_HELP.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Button position.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Button size. If the default size (-1, -1) is specified then the button is sized
appropriately for the question mark bitmap.</parameter><parameter type="long " name="style" value="wxBU_AUTODRAW">Window style.</parameter></parameters><remarks>

Normally you need pass only the parent window to the constructor, and use the defaults for the remaining parameters.

</remarks><description>

Constructor, creating and showing a context help button.













</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxControl">
<description>
<p class="classdesc">
This is the base class for a control or `widget'.</p><p class="classdesc">A control is generally a small window which processes user input and/or displays one or more item
of data.</p>
</description>
<parents>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/control.h"/></includes>
<seealso>

<ref target="wxvalidator">wxValidator</ref>

</seealso>
<members>
<member class="wxControl" name="Command"><function type="void" name="Command"><parameters><parameter type="wxCommandEvent&amp; " name="event"></parameter></parameters><description>

Simulates the effect of the user issuing a command to the item. See <ref target="wxcommandevent">wxCommandEvent</ref>.

</description></function></member>
<member class="wxControl" name="GetLabel"><function type="wxString&amp;" name="GetLabel"><description>

Returns the control's text.

</description></function></member>
<member class="wxControl" name="SetLabel"><function type="void" name="SetLabel"><parameters><parameter type="const wxString&amp; " name="label"></parameter></parameters><description>

Sets the item's text.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxControlWithItems">
<description>
<p class="classdesc">
This class is an abstract base class for some wxWindows controls which contain
several items, such as <ref target="wxlistbox">wxListBox</ref> and 
<ref target="wxchecklistbox">wxCheckListBox</ref> derived from it, 
<ref target="wxchoice">wxChoice</ref> and <ref target="wxcombobox">wxComboBox</ref>.</p><p class="classdesc">It defines the methods for accessing the controls items and although each of
the derived classes implements them differently, they still all conform to the
same interface.</p><p class="classdesc">The items in a wxControlWithItems have (non empty) string labels and,
optionally, client data associated with them. Client data may be of two
different kinds: either simple untyped (<tt> void &#42;</tt>) pointers which are simply
stored by the control but not used in any way by it, or typed pointers
(<tt> wxClientData &#42;</tt>) which are owned by the control meaning that the typed
client data (and only it) will be deleted when an item is 
<ref target="wxcontrolwithitemsdelete">deleted</ref> or the entire control is 
<ref target="wxcontrolwithitemsclear">cleared</ref> (which also happens when it is
destroyed). Finally note that in the same control all items must have client
data of the same type (typed or untyped), if any. This type is determined by
the first call to <ref target="wxcontrolwithitemsappend">Append</ref> (the version with
client data pointer) or <ref target="wxcontrolwithitemssetclientdata">SetClientData</ref>.</p>
</description>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/ctrlsub.h" comment="but usually never included directly"/></includes>
<members>
<member class="wxControlWithItems" name="Append"><function type="int" name="Append"><parameters><parameter type="const wxString&amp; " name=" item"></parameter></parameters><description>

Adds the item to the end of the list box.

</description></function>
<function type="int" name="Append"><parameters><parameter type="const wxString&amp; " name=" item"></parameter><parameter type="void &#42;" name="clientData">Client data to associate with the item.</parameter></parameters><description>

</description></function>
<function type="int" name="Append"><parameters><parameter type="const wxString&amp; " name=" item"></parameter><parameter type="wxClientData &#42;" name="clientData">Client data to associate with the item.</parameter></parameters><description>

Adds the item to the end of the list box, associating the given, typed or
untyped, client data pointer with the item.

</description></function>
<function type="void" name="Append"><parameters><parameter type="const wxArrayString&amp; " name="strings"></parameter></parameters><returnvalue>

When appending a single item, the return value is the index of the newly added
item which may be different from the last one if the control is sorted (e.g.
has <tt> wxLB_SORT</tt> or <tt> wxCB_SORT</tt> style).

</returnvalue><description>

Appends several items at once to the control. Notice that calling this method
may be much faster than appending the items one by one if you need to add a lot
of items.







</description></function></member>
<member class="wxControlWithItems" name="Clear"><function type="void" name="Clear"><description>

Removes all items from the control.

<i> Clear()</i> also deletes the client data of the existing items if it is owned
by the control.

</description></function></member>
<member class="wxControlWithItems" name="Delete"><function type="void" name="Delete"><parameters><parameter type="int" name=" n"></parameter></parameters><seealso>

<ref target="wxcontrolwithitemsclear">Clear</ref>

</seealso><description>

Deletes an item from the control. The client data associated with the item
will be also deleted if it is owned by the control.

Note that it is an error (signalled by an assert failure in debug builds) to
remove an item with the index negative or greater or equal than the number of
items in the control.





</description></function></member>
<member class="wxControlWithItems" name="FindString"><function type="int" name="FindString"><parameters><parameter type="const wxString&amp; " name="string">String to find.</parameter></parameters><returnvalue>

The zero-based position of the item, or <tt> wxNOT_FOUND</tt> if the string was
not found.


</returnvalue><description>

Finds an item whose label matches the given string.





</description></function></member>
<member class="wxControlWithItems" name="GetClientData"><function type="void &#42;" name="GetClientData" suffix="const"><parameters><parameter type="int" name=" n"></parameter></parameters><returnvalue>

A pointer to the client data, or <tt> NULL</tt> if not present.


</returnvalue><description>

Returns a pointer to the client data associated with the given item (if any).
It is an error to call this function for a control which doesn't have untyped
client data at all although it is ok to call it even if the given item doesn't
have any client data associated with it (but other items do).





</description></function></member>
<member class="wxControlWithItems" name="GetClientObject"><function type="wxClientData &#42;" name="GetClientObject" suffix="const"><parameters><parameter type="int" name=" n"></parameter></parameters><returnvalue>

A pointer to the client data, or <tt> NULL</tt> if not present.


</returnvalue><description>

Returns a pointer to the client data associated with the given item (if any).
It is an error to call this function for a control which doesn't have typed
client data at all although it is ok to call it even if the given item doesn't
have any client data associated with it (but other items do).





</description></function></member>
<member class="wxControlWithItems" name="GetCount"><function type="int" name="GetCount" suffix="const"><seealso>

<ref target="wxcontrolwithitemsisempty">IsEmpty</ref>


</seealso><description>

Returns the number of items in the control.

</description></function></member>
<member class="wxControlWithItems" name="GetSelection"><function type="int" name="GetSelection" suffix="const"><seealso>

<ref target="wxcontrolwithitemssetselection">SetSelection</ref>,
<ref target="wxcontrolwithitemsgetstringselection">GetStringSelection</ref>


</seealso><remarks>

This method can be used with single selection list boxes only, you should use 
<ref target="wxlistboxgetselections">wxListBox::GetSelections</ref> for the list boxes
with <tt> wxLB_MULTIPLE</tt> style.

</remarks><returnvalue>

The position of the current selection.

</returnvalue><description>

Returns the index of the selected item or <tt> wxNOT_FOUND</tt> if no item is
selected.

</description></function></member>
<member class="wxControlWithItems" name="GetString"><function type="wxString" name="GetString" suffix="const"><parameters><parameter type="int" name=" n"></parameter></parameters><returnvalue>

The label of the item or an empty string if the position was invalid.


</returnvalue><description>

Returns the label of the item with the given index.





</description></function></member>
<member class="wxControlWithItems" name="GetStringSelection"><function type="wxString" name="GetStringSelection" suffix="const"><seealso>

<ref target="wxcontrolwithitemsgetselection">GetSelection</ref>


</seealso><description>

Returns the label of the selected item or an empty string if no item is
selected.

</description></function></member>
<member class="wxControlWithItems" name="Insert"><function type="int" name="Insert"><parameters><parameter type="const wxString&amp; " name=" item"></parameter><parameter type="int " name="pos">Position to insert item before, zero based.</parameter></parameters><description>

Inserts the item into the list before pos.
Not valid for <tt> wxLB_SORT</tt> or <tt> wxCB_SORT</tt> styles, use Append instead.

</description></function>
<function type="int" name="Insert"><parameters><parameter type="const wxString&amp; " name=" item"></parameter><parameter type="int " name="pos">Position to insert item before, zero based.</parameter><parameter type="void &#42;" name="clientData">Client data to associate with the item.</parameter></parameters><description>

</description></function>
<function type="int" name="Insert"><parameters><parameter type="const wxString&amp; " name=" item"></parameter><parameter type="int " name="pos">Position to insert item before, zero based.</parameter><parameter type="wxClientData &#42;" name="clientData">Client data to associate with the item.</parameter></parameters><returnvalue>

The return value is the index of the newly inserted item. If the insertion failed
for some reason, -1 is returned.


</returnvalue><description>

Inserts the item into the list before pos, associating the given, typed or
untyped, client data pointer with the item.
Not valid for <tt> wxLB_SORT</tt> or <tt> wxCB_SORT</tt> styles, use Append instead.









</description></function></member>
<member class="wxControlWithItems" name="IsEmpty"><function type="bool" name="IsEmpty" suffix="const"><seealso>

<ref target="wxcontrolwithitemsgetcount">GetCount</ref>


</seealso><description>

Returns <tt> true</tt> if the control is empty or <tt> false</tt> if it has some items.

</description></function></member>
<member class="wxControlWithItems" name="Number"><function type="int" name="Number" suffix="const"><description>

<b> Obsolescence note:</b> This method is obsolete and was replaced with
<ref target="wxcontrolwithitemsgetcount">GetCount</ref>, please use the new method in
the new code. This method is only available if wxWindows was compiled with 
<tt> WXWIN_COMPATIBILITY_2_2</tt> defined and will disappear completely in
future versions.


</description></function></member>
<member class="wxControlWithItems" name="SetClientData"><function type="void" name="SetClientData"><parameters><parameter type="int" name=" n"></parameter><parameter type="void &#42;" name="data">The client data to associate with the item.</parameter></parameters><description>

Associates the given untyped client data pointer with the given item. Note that
it is an error to call this function if any typed client data pointers had been
associated with the control items before.








</description></function></member>
<member class="wxControlWithItems" name="SetClientObject"><function type="void" name="SetClientObject"><parameters><parameter type="int" name=" n"></parameter><parameter type="wxClientData &#42;" name="data">The client data to associate with the item.</parameter></parameters><description>

Associates the given typed client data pointer with the given item: the 
<i> data</i> object will be deleted when the item is deleted (either explicitly
by using <ref target="wxcontrolwithitemsdelete">Deletes</ref> or implicitly when the
control itself is destroyed).

Note that it is an error to call this function if any untyped client data
pointers had been associated with the control items before.








</description></function></member>
<member class="wxControlWithItems" name="SetSelection"><function type="void" name="SetSelection"><parameters><parameter type="int" name=" n"></parameter></parameters><seealso>

<ref target="wxcontrolwithitemssetstring">SetString</ref>,
<ref target="wxcontrolwithitemssetstringselection">SetStringSelection</ref>


</seealso><description>

Sets the choice by passing the desired string position. This does not cause
any command events to get emitted.





</description></function></member>
<member class="wxControlWithItems" name="SetString"><function type="void" name="SetString"><parameters><parameter type="int" name=" n"></parameter><parameter type="const wxString&amp; " name=" string"></parameter></parameters><description>

Sets the label for the given item.








</description></function></member>
<member class="wxControlWithItems" name="SetStringSelection"><function type="void" name="SetStringSelection"><parameters><parameter type="const wxString&amp; " name=" string"></parameter></parameters><seealso>

<ref target="wxcontrolwithitemssetselection">SetSelection</ref>


</seealso><description>

Selects the item with the specified string in the control. This doesn't cause
any command events being emitted.





</description></function></member></members>
<supported>
</supported>
</class><class name="wxCountingOutputStream">
<description>
<p class="classdesc">
wxCountingOutputStream is a specialized output stream which does not write any data anyway,
instead it counts how many bytes would get written if this were a normal stream. This
can sometimes be useful or required if some data gets serialized to a stream or compressed
by using stream compression and thus the final size of the stream cannot be known other
than pretending to write the stream. One case where the resulting size would have to be
known is if the data has to be written to a piece of memory and the memory has to be
allocated before writing to it (which is probably always the case when writing to a 
memory stream).</p>
</description>
<parents>
<classref name="wxOutputStream"/>
<classref name="wxStreamBase"/>

</parents>
<includes>
<header name="wx/stream.h"/></includes>
<members>
<member class="wxCountingOutputStream" name="wxCountingOutputStream"><function type="" name="wxCountingOutputStream"><description>

Creates a wxCountingOutputStream object.

</description></function></member>
<member class="wxCountingOutputStream" name="~wxCountingOutputStream"><function type="" name="~wxCountingOutputStream"><description>

Destructor.

</description></function></member>
<member class="wxCountingOutputStream" name="GetSize"><function type="size_t" name="GetSize" suffix="const"><description>

Returns the current size of the stream.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxCriticalSection">
<description>
<p class="classdesc">
A critical section object is used for exactly the same purpose as 
<ref target="wxmutex">mutexes</ref>. The only difference is that under Windows platform
critical sections are only visible inside one process, while mutexes may be
shared between processes, so using critical sections is slightly more
efficient. The terminology is also slightly different: mutex may be locked (or
acquired) and unlocked (or released) while critical section is entered and left
by the program.</p><p class="classdesc">Finally, you should try to use 
<ref target="wxcriticalsectionlocker">wxCriticalSectionLocker</ref> class whenever
possible instead of directly using wxCriticalSection for the same reasons 
<ref target="wxmutexlocker">wxMutexLocker</ref> is preferrable to 
<ref target="wxmutex">wxMutex</ref> - please see wxMutex for an example.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/thread.h"/></includes>
<seealso>

<ref target="wxthread">wxThread</ref><ref target="wxcondition">wxCondition</ref>
<ref target="wxmutexlocker">wxMutexLocker</ref><ref target="wxcriticalsection">wxCriticalSection</ref>

</seealso>
<members>
<member class="wxCriticalSection" name="wxCriticalSection"><function type="" name="wxCriticalSection"><description>

Default constructor initializes critical section object.

</description></function></member>
<member class="wxCriticalSection" name="~wxCriticalSection"><function type="" name="~wxCriticalSection"><description>

Destructor frees the resources.

</description></function></member>
<member class="wxCriticalSection" name="Enter"><function type="void " name="Enter"><description>

Enter the critical section (same as locking a mutex). There is no error return
for this function. After entering the critical section protecting some global
data the thread running in critical section may safely use/modify it.

</description></function></member>
<member class="wxCriticalSection" name="Leave"><function type="void " name="Leave"><description>

Leave the critical section allowing other threads use the global data protected
by it. There is no error return for this function.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxCriticalSectionLocker">
<description>
<p class="classdesc">
This is a small helper class to be used with <ref target="wxcriticalsection">wxCriticalSection</ref> 
objects. A wxCriticalSectionLocker enters the critical section in the
constructor and leaves it in the destructor making it much more difficult to
forget to leave a critical section (which, in general, will lead to serious
and difficult to debug problems).</p><p class="classdesc">Example of using it:</p><p class="classdesc"><pre>
void Set Foo()
{
    // gs_critSect is some (global) critical section guarding access to the
    // object &quot;foo&quot;
    wxCriticalSectionLocker locker(gs_critSect);

    if ( ... )
    {
        // do something
        ...

        return;
    }

    // do something else
    ...

    return;
}
</pre></p><p class="classdesc">Without wxCriticalSectionLocker, you would need to remember to manually leave
the critical section before each <tt> return</tt>.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/thread.h"/></includes>
<seealso>

<ref target="wxcriticalsection">wxCriticalSection</ref>
<ref target="wxmutexlocker">wxMutexLocker</ref>

</seealso>
<members>
<member class="wxCriticalSectionLocker" name="wxCriticalSectionLocker"><function type="" name="wxCriticalSectionLocker"><parameters><parameter type="wxCriticalSection&amp; " name="criticalsection"></parameter></parameters><description>

Constructs a wxCriticalSectionLocker object associated with given
<i> criticalsection</i> and enters it.

</description></function></member>
<member class="wxCriticalSectionLocker" name="~wxCriticalSectionLocker"><function type="" name="~wxCriticalSectionLocker"><description>

Destructor leaves the critical section.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxCursor">
<description>
<p class="classdesc">
A cursor is a small bitmap usually used for denoting where the mouse
pointer is, with a picture that might indicate the interpretation of a
mouse click. As with icons, cursors in X and MS Windows are created
in a different manner. Therefore, separate cursors will be created for the
different environments.  Platform-specific methods for creating a <b>
wxCursor</b> object are catered for, and this is an occasion where
conditional compilation will probably be required (see <ref target="wxicon">wxIcon</ref> for
an example).</p><p class="classdesc">A single cursor object may be used in many windows (any subwindow type).
The wxWindows convention is to set the cursor for a window, as in X,
rather than to set it globally as in MS Windows, although a
global <ref target="wxsetcursor">::wxSetCursor</ref> is also available for MS Windows use.</p>
</description>
<parents>
<classref name="wxBitmap"/>
<classref name="wxGDIObject"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/cursor.h"/></includes>
<predefs>

Objects:

<b> wxNullCursor</b>

Pointers:

<b> wxSTANDARD_CURSOR<br/>
wxHOURGLASS_CURSOR<br/>
wxCROSS_CURSOR</b>

</predefs>
<seealso>

<ref target="wxbitmap">wxBitmap</ref><ref target="wxicon">wxIcon</ref><ref target="wxwindowsetcursor">wxWindow::SetCursor</ref>,
<ref target="wxsetcursor">::wxSetCursor</ref>

</seealso>
<members>
<member class="wxCursor" name="wxCursor"><function type="" name="wxCursor"><description>

Default constructor.

</description></function>
<function type="" name="wxCursor"><parameters><parameter type="const char" name=" bits&#91;]"></parameter><parameter type="int " name="width">Cursor width.</parameter><parameter type="int " name=" height"></parameter><parameter type="int " name="hotSpotX" value="-1">Hotspot x coordinate.</parameter><parameter type="int " name="hotSpotY" value="-1">Hotspot y coordinate.</parameter><parameter type="const char " name="maskBits&#91;]" value="NULL"></parameter></parameters><description>

Constructs a cursor by passing an array of bits (Motif and Xt only). <i> maskBits</i> is used only under Motif.

If either <i> hotSpotX</i> or <i> hotSpotY</i> is -1, the hotspot will be the centre of the cursor image (Motif only).

</description></function>
<function type="" name="wxCursor"><parameters><parameter type="const wxString&amp; " name="cursorName"></parameter><parameter type="long " name="type"></parameter><parameter type="int " name="hotSpotX" value="0">Hotspot x coordinate.</parameter><parameter type="int " name="hotSpotY" value="0">Hotspot y coordinate.</parameter></parameters><description>

Constructs a cursor by passing a string resource name or filename.

On MacOS when specifying a string resource name, first the color cursors 'crsr' and then the black/white cursors 'CURS' in the resource chain are scanned through.

<i> hotSpotX</i> and <i> hotSpotY</i> are currently only used under Windows when loading from an
icon file, to specify the cursor hotspot relative to the top left of the image.

</description></function>
<function type="" name="wxCursor"><parameters><parameter type="int" name=" cursorId"></parameter></parameters><description>

Constructs a cursor using a cursor identifier.

</description></function>
<function type="" name="wxCursor"><parameters><parameter type="const wxImage&amp;" name=" image"></parameter></parameters><description>

Constructs a cursor from a wxImage. The cursor is monochrome, colors with the RGB elements all greater
than 127 will be foreground, colors less than this background. The mask (if any) will be used as transparent.

In MSW the foreground will be white and the background black. The cursor is resized to 32x32
In GTK, the two most frequent colors will be used for foreground and background. The cursor will be displayed
at the size of the image.
On MacOS the cursor is resized to 16x16 and currently only shown as black/white (mask respected).

</description></function>
<function type="" name="wxCursor"><parameters><parameter type="const wxCursor&amp;" name=" cursor"></parameter></parameters><description>

Copy constructor. This uses reference counting so is a cheap operation.





















\pythonnote{Constructors supported by wxPython are:\par
\indented{2cm}{<table>
<tr><td><b> wxCursor(name, flags, hotSpotX=0,
hotSpotY=0)</b></td><td>Constructs a cursor from a filename</td></tr>
<tr><td><b> wxStockCursor(id)</b></td><td>Constructs a stock cursor </td></tr>
</table>}
}

\perlnote{Constructors supported by wxPerl are:\par
<ul><li>{Wx::Cursor-&gt;new( name, type, hotSpotX = 0, hotSpotY = 0 )}
</li>
<li>{Wx::Cursor-&gt;new( id )}
</li>
<li>{Wx::Cursor-&gt;new( image )}
</li>
<li>{Wx::Cursor-&gt;newData( bits, width, height, hotSpotX = -1, hotSpotY = -1, maskBits = 0 )}
</li></ul>
}

</description></function></member>
<member class="wxCursor" name="~wxCursor"><function type="" name="~wxCursor"><description>

Destroys the cursor. A cursor can be reused for more
than one window, and does not get destroyed when the window is
destroyed. wxWindows destroys all cursors on application exit, although
it is best to clean them up explicitly.

</description></function></member>
<member class="wxCursor" name="Ok"><function type="bool" name="Ok" suffix="const"><description>

Returns true if cursor data is present.

</description></function></member>
<member class="wxCursor" name="operator $=$"><function type="wxCursor&amp;" name="operator $=$"><parameters><parameter type="const wxCursor&amp; " name="cursor"></parameter></parameters><description>

Assignment operator, using reference counting. Returns a reference
to `this'.

</description></function></member>
<member class="wxCursor" name="operator $==$"><function type="bool" name="operator $==$"><parameters><parameter type="const wxCursor&amp; " name="cursor"></parameter></parameters><description>

Equality operator. Two cursors are equal if they contain pointers
to the same underlying cursor data. It does not compare each attribute,
so two independently-created cursors using the same parameters will
fail the test.

</description></function></member>
<member class="wxCursor" name="operator $!=$"><function type="bool" name="operator $!=$"><parameters><parameter type="const wxCursor&amp; " name="cursor"></parameter></parameters><description>

Inequality operator. Two cursors are not equal if they contain pointers
to different underlying cursor data. It does not compare each attribute.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="N"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxCustomDataObject">
<description>
<p class="classdesc">
wxCustomDataObject is a specialization of 
<ref target="wxdataobjectsimple">wxDataObjectSimple</ref> for some
application-specific data in arbitrary (either custom or one of the standard
ones). The only restriction is that it is supposed that this data can be
copied bitwise (i.e. with <tt> memcpy()</tt>), so it would be a bad idea to make
it contain a C++ object (though C struct is fine).</p><p class="classdesc">By default, wxCustomDataObject stores the data inside in a buffer. To put the
data into the buffer you may use either 
<ref target="wxcustomdataobjectsetdata">SetData</ref> or 
<ref target="wxcustomdataobjecttakedata">TakeData</ref> depending on whether you want
the object to make a copy of data or not.</p><p class="classdesc">If you already store the data in another place, it may be more convenient and
efficient to provide the data on-demand which is possible too if you override
the virtual functions mentioned below.</p>
</description>
<parents>
<classref name="wxDataObjectSimple"/>
<classref name="wxDataObject"/>

</parents>
<includes>
<header name="wx/dataobj.h"/></includes>
<override>

This class may be used as is, but if you don't want store the data inside the
object but provide it on demand instead, you should override 
<ref target="wxcustomdataobjectgetsize">GetSize</ref>, 
<ref target="wxcustomdataobjectgetdata">GetData</ref> and 
<ref target="wxcustomdataobjectsetdata">SetData</ref> (or may be only the first two or
only the last one if you only allow reading/writing the data)

</override>
<seealso>

<ref target="wxdataobject">wxDataObject</ref>

</seealso>
<members>
<member class="wxCustomDataObject" name="wxCustomDataObject"><function type="" name="wxCustomDataObject"><parameters><parameter type="const wxDataFormat&amp; " name="format" value="wxFormatInvalid"></parameter></parameters><description>

The constructor accepts a <i> format</i> argument which specifies the (single)
format supported by this object. If it isn't set here, 
<ref target="wxdataobjectsimplesetformat">SetFormat</ref> should be used.

</description></function></member>
<member class="wxCustomDataObject" name="~wxCustomDataObject"><function type="" name="~wxCustomDataObject"><description>

The destructor will free the data hold by the object. Notice that although it
calls a virtual <ref target="wxcustomdataobjectfree">Free()</ref> function, the base
class version will always be called (C++ doesn't allow calling virtual
functions from constructors or destructors), so if you override <tt> Free()</tt>, you
should override the destructor in your class as well (which would probably
just call the derived class' version of <tt> Free()</tt>).

</description></function></member>
<member class="wxCustomDataObject" name="Alloc"><function type="virtual void &#42;" name="Alloc"><parameters><parameter type="size_t " name="size"></parameter></parameters><description>

This function is called to allocate <i> size</i> bytes of memory from SetData().
The default version just uses the operator new.

</description></function></member>
<member class="wxCustomDataObject" name="Free"><function type="virtual void" name="Free"><description>

This function is called when the data is freed, you may override it to anything
you want (or may be nothing at all). The default version calls operator
delete$&#91;]$ on the data.

</description></function></member>
<member class="wxCustomDataObject" name="GetSize"><function type="virtual size_t" name="GetSize" suffix="const"><description>

Returns the data size in bytes.

</description></function></member>
<member class="wxCustomDataObject" name="GetData"><function type="virtual void &#42;" name="GetData" suffix="const"><description>

Returns a pointer to the data.

</description></function></member>
<member class="wxCustomDataObject" name="SetData"><function type="virtual void" name="SetData"><parameters><parameter type="size_t " name="size"></parameter><parameter type="const void " name="&#42;data"></parameter></parameters><description>

Set the data. The data object will make an internal copy.

</description></function></member>
<member class="wxCustomDataObject" name="TakeData"><function type="virtual void" name="TakeData"><parameters><parameter type="size_t " name="size"></parameter><parameter type="const void " name="&#42;data"></parameter></parameters><description>

Like <ref target="wxcustomdataobjectsetdata">SetData</ref>, but doesn't copy the data -
instead the object takes ownership of the pointer.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDC">
<description>
<p class="classdesc">
A wxDC is a <i> device context</i> onto which graphics and text can be drawn.
It is intended to represent a number of output devices in a generic way,
so a window can have a device context associated with it, and a printer also has a device context.
In this way, the same piece of code may write to a number of different devices,
if the device context is used as a parameter.</p><p class="classdesc">Derived types of wxDC have documentation for specific features
only, so refer to this section for most device context information.</p><p class="classdesc">Please note that in addition to the versions of the methods documented here,
there are also versions which accept single <tt> wxPoint</tt> parameter instead of
two <tt> wxCoord</tt> ones or <tt> wxPoint</tt> and <tt> wxSize</tt> instead of four of
them.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/dc.h"/></includes>
<seealso>

<ref target="dcoverview">Overview</ref>

</seealso>
<members>
<member class="wxDC" name="wxDC"><function type="" name="wxDC"><description>

Constructor.

</description></function></member>
<member class="wxDC" name="~wxDC"><function type="" name="~wxDC"><description>

Destructor.

</description></function></member>
<member class="wxDC" name="BeginDrawing"><function type="void" name="BeginDrawing"><description>

Allows optimization of drawing code under MS Windows. Enclose
drawing primitives between <b> BeginDrawing</b> and <b> EndDrawing</b>
calls.

Drawing to a wxDialog panel device context outside of a
system-generated OnPaint event <i> requires</i> this pair of calls to
enclose drawing code. This is because a Windows dialog box does not have
a retained device context associated with it, and selections such as pen
and brush settings would be lost if the device context were obtained and
released for each drawing operation.

</description></function></member>
<member class="wxDC" name="Blit"><function type="bool" name="Blit"><parameters><parameter type="wxCoord" name=" xdest"></parameter><parameter type="wxCoord" name=" ydest"></parameter><parameter type="wxCoord" name=" width"></parameter><parameter type="wxCoord" name=" height"></parameter><parameter type="wxDC&#42; " name="source">Source device context.</parameter><parameter type="wxCoord" name=" xsrc"></parameter><parameter type="wxCoord" name=" ysrc"></parameter><parameter type="int" name="logicalFunc" value="wxCOPY">Logical function to use: see <ref target="wxdcsetlogicalfunction">wxDC::SetLogicalFunction</ref>.</parameter><parameter type="bool " name="useMask" value="false">If true, Blit does a transparent blit using the mask that is associated with the bitmap
selected into the source device context. The Windows implementation does the following if MaskBlt cannot be used:

\begin{enumerate}
\item Creates a temporary bitmap and copies the destination area into it.
\item Copies the source area into the temporary bitmap using the specified logical function.
\item Sets the masked area in the temporary bitmap to BLACK by ANDing the
mask bitmap with the temp bitmap with the foreground colour set to WHITE
and the bg colour set to BLACK.
\item Sets the unmasked area in the destination area to BLACK by ANDing the
mask bitmap with the destination area with the foreground colour set to BLACK
and the background colour set to WHITE.
\item ORs the temporary bitmap with the destination area.
\item Deletes the temporary bitmap.
\end{enumerate}

This sequence of operations ensures that the source's transparent area need not be black,
and logical functions are supported.

<b> Note:</b> on Windows, blitting with masks can be speeded up considerably by compiling
wxWindows with the wxUSE_DC_CACHE option enabled. You can also influence whether MaskBlt
or the explicit mask blitting code above is used, by using <ref target="wxsystemoptions">wxSystemOptions</ref> and
setting the <b> no-maskblt</b> option to 1.

</parameter><parameter type="wxCoord" name="xsrcMask" value="-1">Source x position on the mask. If both xsrcMask and ysrcMask are -1, xsrc and ysrc
will be assumed for the mask source position. Currently only implemented on Windows.</parameter><parameter type="wxCoord" name="ysrcMask" value="-1">Source y position on the mask. If both xsrcMask and ysrcMask are -1, xsrc and ysrc
will be assumed for the mask source position. Currently only implemented on Windows.</parameter></parameters><seealso>

<ref target="wxmemorydc">wxMemoryDC</ref><ref target="wxbitmap">wxBitmap</ref><ref target="wxmask">wxMask</ref>

\begin{comment}
</seealso><description></description></function></member>
<member class="wxDC" name="CacheEnabled"><function type="static bool" name="CacheEnabled"><seealso>

<ref target="wxdcenablecache">wxDC::EnableCache</ref>\helpref{wxDC::ClearCache}
\end{comment}

</seealso><description></description></function></member>
<member class="wxDC" name="CalcBoundingBox"><function type="void" name="CalcBoundingBox"><parameters><parameter type="wxCoord " name="x"></parameter><parameter type="wxCoord " name="y"></parameter></parameters><seealso>

<ref target="wxdcresetboundingbox">ResetBoundingBox</ref>

</seealso><description>

Adds the specified point to the bounding box which can be retrieved with 
<ref target="wxdcminx">MinX</ref>, <ref target="wxdcmaxx">MaxX</ref> and 
<ref target="wxdcminy">MinY</ref>, <ref target="wxdcmaxy">MaxY</ref> functions.

</description></function></member>
<member class="wxDC" name="Clear"><function type="void" name="Clear"><description>

Clears the device context using the current background brush.

\begin{comment}
</description></function></member>
<member class="wxDC" name="ClearCache"><function type="static void" name="ClearCache"><seealso>

<ref target="wxdcenablecache">wxDC::EnableCache</ref>\helpref{wxDC::CacheEnabled}
\end{comment}

</seealso><description></description></function></member>
<member class="wxDC" name="CrossHair"><function type="void" name="CrossHair"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter></parameters><description>

Displays a cross hair using the current pen. This is a vertical
and horizontal line the height and width of the window, centred
on the given point.

</description></function></member>
<member class="wxDC" name="DestroyClippingRegion"><function type="void" name="DestroyClippingRegion"><description>

Destroys the current clipping region so that none of the DC is clipped.
See also <ref target="wxdcsetclippingregion">wxDC::SetClippingRegion</ref>.

</description></function></member>
<member class="wxDC" name="DeviceToLogicalX"><function type="wxCoord" name="DeviceToLogicalX"><parameters><parameter type="wxCoord" name=" x"></parameter></parameters><description>

Convert device X coordinate to logical coordinate, using the current
mapping mode.

</description></function></member>
<member class="wxDC" name="DeviceToLogicalXRel"><function type="wxCoord" name="DeviceToLogicalXRel"><parameters><parameter type="wxCoord" name=" x"></parameter></parameters><description>

Convert device X coordinate to relative logical coordinate, using the current
mapping mode but ignoring the x axis orientation.
Use this function for converting a width, for example.

</description></function></member>
<member class="wxDC" name="DeviceToLogicalY"><function type="wxCoord" name="DeviceToLogicalY"><parameters><parameter type="wxCoord" name=" y"></parameter></parameters><description>

Converts device Y coordinate to logical coordinate, using the current
mapping mode.

</description></function></member>
<member class="wxDC" name="DeviceToLogicalYRel"><function type="wxCoord" name="DeviceToLogicalYRel"><parameters><parameter type="wxCoord" name=" y"></parameter></parameters><description>

Convert device Y coordinate to relative logical coordinate, using the current
mapping mode but ignoring the y axis orientation.
Use this function for converting a height, for example.

</description></function></member>
<member class="wxDC" name="DrawArc"><function type="void" name="DrawArc"><parameters><parameter type="wxCoord" name=" x1"></parameter><parameter type="wxCoord" name=" y1"></parameter><parameter type="wxCoord" name=" x2"></parameter><parameter type="wxCoord" name=" y2"></parameter><parameter type="double" name=" xc"></parameter><parameter type="double" name=" yc"></parameter></parameters><description>

Draws an arc of a circle, centred on (<i> xc, yc</i>), with starting point (<i> x1, y1</i>)
and ending at (<i> x2, y2</i>).   The current pen is used for the outline
and the current brush for filling the shape.

The arc is drawn in an anticlockwise direction from the start point to the end point.

</description></function></member>
<member class="wxDC" name="DrawBitmap"><function type="void" name="DrawBitmap"><parameters><parameter type="const wxBitmap&amp;" name=" bitmap"></parameter><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter><parameter type="bool" name=" transparent"></parameter></parameters><description>

Draw a bitmap on the device context at the specified point. If <i> transparent</i> is true and the bitmap has
a transparency mask, the bitmap will be drawn transparently.

When drawing a mono-bitmap, the current text foreground colour will be used to draw the foreground
of the bitmap (all bits set to 1), and the current text background colour to draw the background
(all bits set to 0). See also <ref target="wxdcsettextforeground">SetTextForeground</ref>, 
<ref target="wxdcsettextbackground">SetTextBackground</ref> and <ref target="wxmemorydc">wxMemoryDC</ref>.

</description></function></member>
<member class="wxDC" name="DrawCheckMark"><function type="void" name="DrawCheckMark"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter><parameter type="wxCoord" name=" width"></parameter><parameter type="wxCoord" name=" height"></parameter></parameters><description>

</description></function>
<function type="void" name="DrawCheckMark"><parameters><parameter type="const wxRect &amp;" name="rect"></parameter></parameters><description>

Draws a check mark inside the given rectangle.

</description></function></member>
<member class="wxDC" name="DrawCircle"><function type="void" name="DrawCircle"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter><parameter type="wxCoord" name=" radius"></parameter></parameters><description>

</description></function>
<function type="void" name="DrawCircle"><parameters><parameter type="const wxPoint&amp;" name=" pt"></parameter><parameter type="wxCoord" name=" radius"></parameter></parameters><seealso>

<ref target="wxdcdrawellipse">DrawEllipse</ref>

</seealso><description>

Draws a circle with the given centre and radius.

</description></function></member>
<member class="wxDC" name="DrawEllipse"><function type="void" name="DrawEllipse"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter><parameter type="wxCoord" name=" width"></parameter><parameter type="wxCoord" name=" height"></parameter></parameters><description>

</description></function>
<function type="void" name="DrawEllipse"><parameters><parameter type="const wxPoint&amp;" name=" pt"></parameter><parameter type="const wxSize&amp;" name=" size"></parameter></parameters><description>

</description></function>
<function type="void" name="DrawEllipse"><parameters><parameter type="const wxRect&amp;" name=" rect"></parameter></parameters><seealso>

<ref target="wxdcdrawcircle">DrawCircle</ref>

</seealso><description>

Draws an ellipse contained in the rectangle specified either with the given top
left corner and the given size or directly. The current pen is used for the
outline and the current brush for filling the shape.

</description></function></member>
<member class="wxDC" name="DrawEllipticArc"><function type="void" name="DrawEllipticArc"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter><parameter type="wxCoord" name=" width"></parameter><parameter type="wxCoord" name=" height"></parameter><parameter type="double" name=" start"></parameter><parameter type="double" name=" end"></parameter></parameters><description>

Draws an arc of an ellipse. The current pen is used for drawing the arc and
the current brush is used for drawing the pie.

<i> x</i> and <i> y</i> specify the x and y coordinates of the upper-left corner of the rectangle that contains
the ellipse.

<i> width</i> and <i> height</i> specify the width and height of the rectangle that contains
the ellipse.

<i> start</i> and <i> end</i> specify the start and end of the arc relative to the three-o'clock
position from the center of the rectangle. Angles are specified
in degrees (360 is a complete circle). Positive values mean
counter-clockwise motion. If <i> start</i> is equal to <i> end</i>, a
complete ellipse will be drawn.

</description></function></member>
<member class="wxDC" name="DrawIcon"><function type="void" name="DrawIcon"><parameters><parameter type="const wxIcon&amp;" name=" icon"></parameter><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter></parameters><description>

Draw an icon on the display (does nothing if the device context is PostScript).
This can be the simplest way of drawing bitmaps on a window.

</description></function></member>
<member class="wxDC" name="DrawLine"><function type="void" name="DrawLine"><parameters><parameter type="wxCoord" name=" x1"></parameter><parameter type="wxCoord" name=" y1"></parameter><parameter type="wxCoord" name=" x2"></parameter><parameter type="wxCoord" name=" y2"></parameter></parameters><description>

Draws a line from the first point to the second. The current pen is used
for drawing the line.

</description></function></member>
<member class="wxDC" name="DrawLines"><function type="void" name="DrawLines"><parameters><parameter type="int" name=" n"></parameter><parameter type="wxPoint" name=" points&#91;]"></parameter><parameter type="wxCoord" name="xoffset" value="0"></parameter><parameter type="wxCoord" name="yoffset" value="0"></parameter></parameters><description>

</description></function>
<function type="void" name="DrawLines"><parameters><parameter type="wxList &#42;" name="points"></parameter><parameter type="wxCoord" name="xoffset" value="0"></parameter><parameter type="wxCoord" name="yoffset" value="0"></parameter></parameters><description>

Draws lines using an array of <i> points</i> of size <i> n</i>, or list of
pointers to points, adding the optional offset coordinate. The current
pen is used for drawing the lines.  The programmer is responsible for
deleting the list of points.

\pythonnote{The wxPython version of this method accepts a Python list
of wxPoint objects.}

\perlnote{The wxPerl version of this method accepts 
  as its first parameter a reference to an array
  of wxPoint objects.}

</description></function></member>
<member class="wxDC" name="DrawPolygon"><function type="void" name="DrawPolygon"><parameters><parameter type="int" name=" n"></parameter><parameter type="wxPoint" name=" points&#91;]"></parameter><parameter type="wxCoord" name="xoffset" value="0"></parameter><parameter type="wxCoord" name="yoffset" value="0"></parameter><parameter type="int " name="fill_style" value="wxODDEVEN_RULE"></parameter></parameters><description>

</description></function>
<function type="void" name="DrawPolygon"><parameters><parameter type="wxList &#42;" name="points"></parameter><parameter type="wxCoord" name="xoffset" value="0"></parameter><parameter type="wxCoord" name="yoffset" value="0"></parameter><parameter type="int " name="fill_style" value="wxODDEVEN_RULE"></parameter></parameters><description>

Draws a filled polygon using an array of <i> points</i> of size <i> n</i>,
or list of pointers to points, adding the optional offset coordinate.

The last argument specifies the fill rule: <b> wxODDEVEN_RULE</b> (the
default) or <b> wxWINDING_RULE</b>.

The current pen is used for drawing the outline, and the current brush
for filling the shape.  Using a transparent brush suppresses filling.
The programmer is responsible for deleting the list of points.

Note that wxWindows automatically closes the first and last points.

\pythonnote{The wxPython version of this method accepts a Python list
of wxPoint objects.}

\perlnote{The wxPerl version of this method accepts 
  as its first parameter a reference to an array
  of wxPoint objects.}

</description></function></member>
<member class="wxDC" name="DrawPoint"><function type="void" name="DrawPoint"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter></parameters><description>

Draws a point using the current pen.

</description></function></member>
<member class="wxDC" name="DrawRectangle"><function type="void" name="DrawRectangle"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter><parameter type="wxCoord" name=" width"></parameter><parameter type="wxCoord" name=" height"></parameter></parameters><description>

Draws a rectangle with the given top left corner, and with the given
size.  The current pen is used for the outline and the current brush
for filling the shape.

</description></function></member>
<member class="wxDC" name="DrawRotatedText"><function type="void" name="DrawRotatedText"><parameters><parameter type="const wxString&amp; " name="text"></parameter><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter><parameter type="double" name=" angle"></parameter></parameters><seealso>

<ref target="wxdcdrawtext">DrawText</ref>

</seealso><description>

Draws the text rotated by <i> angle</i> degrees.

<b> NB:</b> Under Win9x only TrueType fonts can be drawn by this function. In
particular, a font different from <tt> wxNORMAL_FONT</tt> should be used as the
latter is not a TrueType font. <tt> wxSWISS_FONT</tt> is an example of a font
which is.

</description></function></member>
<member class="wxDC" name="DrawRoundedRectangle"><function type="void" name="DrawRoundedRectangle"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter><parameter type="wxCoord" name=" width"></parameter><parameter type="wxCoord" name=" height"></parameter><parameter type="double" name="radius" value="20"></parameter></parameters><description>

Draws a rectangle with the given top left corner, and with the given
size.  The corners are quarter-circles using the given radius. The
current pen is used for the outline and the current brush for filling
the shape.

If <i> radius</i> is positive, the value is assumed to be the
radius of the rounded corner. If <i> radius</i> is negative,
the absolute value is assumed to be the <i> proportion</i> of the smallest
dimension of the rectangle. This means that the corner can be
a sensible size relative to the size of the rectangle, and also avoids
the strange effects X produces when the corners are too big for
the rectangle.

</description></function></member>
<member class="wxDC" name="DrawSpline"><function type="void" name="DrawSpline"><parameters><parameter type="wxList &#42;" name="points"></parameter></parameters><description>

Draws a spline between all given control points, using the current
pen.  Doesn't delete the wxList and contents. The spline is drawn
using a series of lines, using an algorithm taken from the X drawing
program `XFIG'.

</description></function>
<function type="void" name="DrawSpline"><parameters><parameter type="wxCoord" name=" x1"></parameter><parameter type="wxCoord" name=" y1"></parameter><parameter type="wxCoord" name=" x2"></parameter><parameter type="wxCoord" name=" y2"></parameter><parameter type="wxCoord" name=" x3"></parameter><parameter type="wxCoord" name=" y3"></parameter></parameters><description>

Draws a three-point spline using the current pen.

\pythonnote{The wxPython version of this method accepts a Python list
of wxPoint objects.}

\perlnote{The wxPerl version of this method accepts a reference to an array
  of wxPoint objects.}

</description></function></member>
<member class="wxDC" name="DrawText"><function type="void" name="DrawText"><parameters><parameter type="const wxString&amp; " name="text"></parameter><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter></parameters><description>

Draws a text string at the specified point, using the current text font,
and the current text foreground and background colours.

The coordinates refer to the top-left corner of the rectangle bounding
the string. See <ref target="wxdcgettextextent">wxDC::GetTextExtent</ref> for how
to get the dimensions of a text string, which can be used to position the
text more precisely.

<b> NB:</b> under wxGTK the current 
<ref target="wxdcgetlogicalfunction">logical function</ref> is used by this function
but it is ignored by wxMSW. Thus, you should avoid using logical functions
with this function in portable programs.

\begin{comment}
</description></function></member>
<member class="wxDC" name="EnableCache"><function type="static void" name="EnableCache"><parameters><parameter type="bool" name=" enableCache"></parameter></parameters><seealso>

<ref target="wxdccacheenabled">wxDC::CacheEnabled</ref>\helpref{wxDC::ClearCache}
\end{comment}

</seealso><description></description></function></member>
<member class="wxDC" name="EndDoc"><function type="void" name="EndDoc"><description>

Ends a document (only relevant when outputting to a printer).

</description></function></member>
<member class="wxDC" name="EndDrawing"><function type="void" name="EndDrawing"><description>

Allows optimization of drawing code under MS Windows. Enclose
drawing primitives between <b> BeginDrawing</b> and <b> EndDrawing</b>
calls.

</description></function></member>
<member class="wxDC" name="EndPage"><function type="void" name="EndPage"><description>

Ends a document page (only relevant when outputting to a printer).

</description></function></member>
<member class="wxDC" name="FloodFill"><function type="bool" name="FloodFill"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter><parameter type="const wxColour&amp;" name=" colour"></parameter><parameter type="int" name="style" value="wxFLOOD_SURFACE"></parameter></parameters><description>

Flood fills the device context starting from the given point, using
the <i> current brush colour</i>, and using a style:

<ul><li> wxFLOOD_SURFACE: the flooding occurs until a colour other than the given colour is encountered.
</li>
<li> wxFLOOD_BORDER: the area to be flooded is bounded by the given colour.
</li></ul>

Returns false if the operation failed.

<i> Note:</i> The present implementation for non-Windows platforms may fail to find
colour borders if the pixels do not match the colour exactly. However the
function will still return true.

</description></function></member>
<member class="wxDC" name="GetBackground"><function type="wxBrush&amp;" name="GetBackground"><description>

</description></function>
<function type="const wxBrush&amp;" name="GetBackground" suffix="const"><description>

Gets the brush used for painting the background (see <ref target="wxdcsetbackground">wxDC::SetBackground</ref>).

</description></function></member>
<member class="wxDC" name="GetBackgroundMode"><function type="int" name="GetBackgroundMode" suffix="const"><seealso>

<ref target="wxdcsetbackgroundmode">SetBackgroundMode</ref>

</seealso><description>

Returns the current background mode: <tt> wxSOLID</tt> or <tt> wxTRANSPARENT</tt>.

</description></function></member>
<member class="wxDC" name="GetBrush"><function type="wxBrush&amp;" name="GetBrush"><description>

</description></function>
<function type="const wxBrush&amp;" name="GetBrush" suffix="const"><description>

Gets the current brush (see <ref target="wxdcsetbrush">wxDC::SetBrush</ref>).

</description></function></member>
<member class="wxDC" name="GetCharHeight"><function type="wxCoord" name="GetCharHeight"><description>

Gets the character height of the currently set font.

</description></function></member>
<member class="wxDC" name="GetCharWidth"><function type="wxCoord" name="GetCharWidth"><description>

Gets the average character width of the currently set font.

</description></function></member>
<member class="wxDC" name="GetClippingBox"><function type="void" name="GetClippingBox"><parameters><parameter type="wxCoord" name=" &#42;x"></parameter><parameter type="wxCoord" name=" &#42;y"></parameter><parameter type="wxCoord" name=" &#42;width"></parameter><parameter type="wxCoord" name=" &#42;height"></parameter></parameters><description>

Gets the rectangle surrounding the current clipping region.

\pythonnote{No arguments are required and the four values defining the
rectangle are returned as a tuple.}

\perlnote{This method takes no arguments and returns a four element list
<tt> ( x, y, width, height )</tt>}

</description></function></member>
<member class="wxDC" name="GetFont"><function type="wxFont&amp;" name="GetFont"><description>

</description></function>
<function type="const wxFont&amp;" name="GetFont" suffix="const"><description>

Gets the current font (see <ref target="wxdcsetfont">wxDC::SetFont</ref>).

</description></function></member>
<member class="wxDC" name="GetLogicalFunction"><function type="int" name="GetLogicalFunction"><description>

Gets the current logical function (see <ref target="wxdcsetlogicalfunction">wxDC::SetLogicalFunction</ref>).

</description></function></member>
<member class="wxDC" name="GetMapMode"><function type="int" name="GetMapMode"><description>

Gets the <i> mapping mode</i> for the device context (see <ref target="wxdcsetmapmode">wxDC::SetMapMode</ref>).

</description></function></member>
<member class="wxDC" name="GetOptimization"><function type="bool" name="GetOptimization"><description>

Returns true if device context optimization is on.
See <ref target="wxsetoptimization">wxDC::SetOptimization</ref> for details.

</description></function></member>
<member class="wxDC" name="GetPen"><function type="wxPen&amp;" name="GetPen"><description>

</description></function>
<function type="const wxPen&amp;" name="GetPen" suffix="const"><description>

Gets the current pen (see <ref target="wxdcsetpen">wxDC::SetPen</ref>).

</description></function></member>
<member class="wxDC" name="GetPixel"><function type="bool" name="GetPixel"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter><parameter type="wxColour &#42;" name="colour"></parameter></parameters><description>

Sets <i> colour</i> to the colour at the specified location. Windows only; an X implementation
is being worked on. Not available for wxPostScriptDC or wxMetafileDC.

\pythonnote{For wxPython the wxColour value is returned and is not
required as a parameter.}

\perlnote{This method only takes the parameters <tt> x</tt> and <tt> y</tt> and returns
a Wx::Colour value}

</description></function></member>
<member class="wxDC" name="GetSize"><function type="void" name="GetSize"><parameters><parameter type="wxCoord &#42;" name="width"></parameter><parameter type="wxCoord &#42;" name="height"></parameter></parameters><description>

For a PostScript device context, this gets the maximum size of graphics
drawn so far on the device context.

For a Windows printer device context, this gets the horizontal and vertical
resolution. It can be used to scale graphics to fit the page when using
a Windows printer device context. For example, if <i> maxX</i> and <i> maxY</i>
represent the maximum horizontal and vertical `pixel' values used in your
application, the following code will scale the graphic to fit on the
printer page:

<pre>
  wxCoord w, h;
  dc.GetSize(&amp;w, &amp;h);
  double scaleX=(double)(maxX/w);
  double scaleY=(double)(maxY/h);
  dc.SetUserScale(min(scaleX,scaleY),min(scaleX,scaleY));
</pre>

\pythonnote{In place of a single overloaded method name, wxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> GetSize()</b></td><td>Returns a wxSize</td></tr>
<tr><td><b> GetSizeTuple()</b></td><td>Returns a 2-tuple (width, height)</td></tr>
</table>}
}

\perlnote{In place of a single overloaded method, wxPerl uses:\par
\indented{2cm}{<table>
<tr><td><b> GetSize()</b></td><td>Returns a Wx::Size</td></tr>
<tr><td><b> GetSizeWH()</b></td><td>Returns a 2-element list
  <tt> ( width, height )</tt></td></tr>
</table>
}}

</description></function></member>
<member class="wxDC" name="GetTextBackground"><function type="wxColour&amp;" name="GetTextBackground"><description>

</description></function>
<function type="const wxColour&amp;" name="GetTextBackground" suffix="const"><description>

Gets the current text background colour (see <ref target="wxdcsettextbackground">wxDC::SetTextBackground</ref>).

</description></function></member>
<member class="wxDC" name="GetTextExtent"><function type="void" name="GetTextExtent"><parameters><parameter type="const wxString&amp; " name="string"></parameter><parameter type="wxCoord &#42;" name="w"></parameter><parameter type="wxCoord &#42;" name="h"></parameter><parameter type="wxCoord &#42;" name="descent" value="NULL"></parameter><parameter type="wxCoord &#42;" name="externalLeading" value="NULL"></parameter><parameter type="wxFont &#42;" name="font" value="NULL"></parameter></parameters><description>

Gets the dimensions of the string using the currently selected font.
<i> string</i> is the text string to measure, <i> w</i> and <i> h</i> are
the total width and height respectively, <i> descent</i> is the
dimension from the baseline of the font to the bottom of the
descender, and <i> externalLeading</i> is any extra vertical space added
to the font by the font designer (usually is zero).

The optional parameter <i> font</i> specifies an alternative
to the currently selected font: but note that this does not
yet work under Windows, so you need to set a font for
the device context first.

See also <ref target="wxfont">wxFont</ref>, <ref target="wxdcsetfont">wxDC::SetFont</ref>.

\pythonnote{The following methods are implemented in wxPython:\par
\indented{2cm}{<table>
<tr><td><b> GetTextExtent(string)</b></td><td>Returns a 2-tuple, (width, height)</td></tr>
<tr><td><b> GetFullTextExtent(string, font=NULL)</b></td><td>Returns a
4-tuple, (width, height, descent, externalLeading) </td></tr>
</table>}
}

\perlnote{In wxPerl this method is implemented as 
  <b> GetTextExtent( string, font = undef )</b> returning a four element
  array <tt> ( width, height, descent, externalLeading )</tt>
}

</description></function></member>
<member class="wxDC" name="GetTextForeground"><function type="wxColour&amp;" name="GetTextForeground"><description>

</description></function>
<function type="const wxColour&amp;" name="GetTextForeground" suffix="const"><description>

Gets the current text foreground colour (see <ref target="wxdcsettextforeground">wxDC::SetTextForeground</ref>).


</description></function></member>
<member class="wxDC" name="GetUserScale"><function type="void" name="GetUserScale"><parameters><parameter type="double" name=" &#42;x"></parameter><parameter type="double" name=" &#42;y"></parameter></parameters><description>

Gets the current user scale factor (set by <ref target="wxdcsetuserscale">SetUserScale</ref>).

\perlnote{In wxPerl this method takes no arguments and return a two element
 array <tt> ( x, y )</tt>}

</description></function></member>
<member class="wxDC" name="LogicalToDeviceX"><function type="wxCoord" name="LogicalToDeviceX"><parameters><parameter type="wxCoord" name=" x"></parameter></parameters><description>

Converts logical X coordinate to device coordinate, using the current
mapping mode.

</description></function></member>
<member class="wxDC" name="LogicalToDeviceXRel"><function type="wxCoord" name="LogicalToDeviceXRel"><parameters><parameter type="wxCoord" name=" x"></parameter></parameters><description>

Converts logical X coordinate to relative device coordinate, using the current
mapping mode but ignoring the x axis orientation.
Use this for converting a width, for example.

</description></function></member>
<member class="wxDC" name="LogicalToDeviceY"><function type="wxCoord" name="LogicalToDeviceY"><parameters><parameter type="wxCoord" name=" y"></parameter></parameters><description>

Converts logical Y coordinate to device coordinate, using the current
mapping mode.

</description></function></member>
<member class="wxDC" name="LogicalToDeviceYRel"><function type="wxCoord" name="LogicalToDeviceYRel"><parameters><parameter type="wxCoord" name=" y"></parameter></parameters><description>

Converts logical Y coordinate to relative device coordinate, using the current
mapping mode but ignoring the y axis orientation.
Use this for converting a height, for example.

</description></function></member>
<member class="wxDC" name="MaxX"><function type="wxCoord" name="MaxX"><description>

Gets the maximum horizontal extent used in drawing commands so far.

</description></function></member>
<member class="wxDC" name="MaxY"><function type="wxCoord" name="MaxY"><description>

Gets the maximum vertical extent used in drawing commands so far.

</description></function></member>
<member class="wxDC" name="MinX"><function type="wxCoord" name="MinX"><description>

Gets the minimum horizontal extent used in drawing commands so far.

</description></function></member>
<member class="wxDC" name="MinY"><function type="wxCoord" name="MinY"><description>

Gets the minimum vertical extent used in drawing commands so far.

</description></function></member>
<member class="wxDC" name="Ok"><function type="bool" name="Ok"><description>

Returns true if the DC is ok to use.

</description></function></member>
<member class="wxDC" name="ResetBoundingBox"><function type="void" name="ResetBoundingBox"><seealso>

<ref target="wxdccalcboundingbox">CalcBoundingBox</ref>

</seealso><description>

Resets the bounding box: after a call to this function, the bounding box
doesn't contain anything.

</description></function></member>
<member class="wxDC" name="SetAxisOrientation"><function type="void" name="SetAxisOrientation"><parameters><parameter type="bool" name=" xLeftRight"></parameter><parameter type="bool" name=" yBottomUp"></parameter></parameters><description>

Sets the x and y axis orientation (i.e., the direction from lowest to
highest values on the axis). The default orientation is the natural
orientation, e.g. x axis from left to right and y axis from bottom up.







</description></function></member>
<member class="wxDC" name="SetDeviceOrigin"><function type="void" name="SetDeviceOrigin"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter></parameters><description>

Sets the device origin (i.e., the origin in pixels after scaling has been
applied).

This function may be useful in Windows printing
operations for placing a graphic on a page.

</description></function></member>
<member class="wxDC" name="SetBackground"><function type="void" name="SetBackground"><parameters><parameter type="const wxBrush&amp; " name="brush"></parameter></parameters><description>

Sets the current background brush for the DC.

</description></function></member>
<member class="wxDC" name="SetBackgroundMode"><function type="void" name="SetBackgroundMode"><parameters><parameter type="int" name=" mode"></parameter></parameters><description>

<i> mode</i> may be one of wxSOLID and wxTRANSPARENT. This setting determines
whether text will be drawn with a background colour or not.

</description></function></member>
<member class="wxDC" name="SetClippingRegion"><function type="void" name="SetClippingRegion"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter><parameter type="wxCoord" name=" width"></parameter><parameter type="wxCoord" name=" height"></parameter></parameters><description>

</description></function>
<function type="void" name="SetClippingRegion"><parameters><parameter type="const wxPoint&amp; " name="pt"></parameter><parameter type="const wxSize&amp; " name="sz"></parameter></parameters><description>

</description></function>
<function type="void" name="SetClippingRegion"><parameters><parameter type="const wxRect&amp;" name=" rect"></parameter></parameters><description>

</description></function>
<function type="void" name="SetClippingRegion"><parameters><parameter type="const wxRegion&amp;" name=" region"></parameter></parameters><seealso>

<ref target="wxdcdestroyclippingregion">wxDC::DestroyClippingRegion</ref><ref target="wxregion">wxRegion</ref>

</seealso><description></description></function></member>
<member class="wxDC" name="SetPalette"><function type="void" name="SetPalette"><parameters><parameter type="const wxPalette&amp; " name="palette"></parameter></parameters><description>

If this is a window DC or memory DC, assigns the given palette to the window
or bitmap associated with the DC. If the argument is wxNullPalette, the current
palette is selected out of the device context, and the original palette
restored.

See <ref target="wxpalette">wxPalette</ref> for further details.

</description></function></member>
<member class="wxDC" name="SetBrush"><function type="void" name="SetBrush"><parameters><parameter type="const wxBrush&amp; " name="brush"></parameter></parameters><description>

Sets the current brush for the DC.

If the argument is wxNullBrush, the current brush is selected out of the device
context, and the original brush restored, allowing the current brush to
be destroyed safely.

See also <ref target="wxbrush">wxBrush</ref>.

See also <ref target="wxmemorydc">wxMemoryDC</ref> for the interpretation of colours
when drawing into a monochrome bitmap.

</description></function></member>
<member class="wxDC" name="SetFont"><function type="void" name="SetFont"><parameters><parameter type="const wxFont&amp; " name="font"></parameter></parameters><description>

Sets the current font for the DC. It must be a valid font, in particular you
should not pass <tt> wxNullFont</tt> to this method.

See also <ref target="wxfont">wxFont</ref>.

</description></function></member>
<member class="wxDC" name="SetLogicalFunction"><function type="void" name="SetLogicalFunction"><parameters><parameter type="int" name=" function"></parameter></parameters><description>

Sets the current logical function for the device context.  This determines how
a source pixel (from a pen or brush colour, or source device context if
using <ref target="wxdcblit">wxDC::Blit</ref>) combines with a destination pixel in the
current device context.

The possible values
and their meaning in terms of source and destination pixel values are
as follows:

<pre>
wxAND                 src AND dst
wxAND_INVERT          (NOT src) AND dst
wxAND_REVERSE         src AND (NOT dst)
wxCLEAR               0
wxCOPY                src
wxEQUIV               (NOT src) XOR dst
wxINVERT              NOT dst
wxNAND                (NOT src) OR (NOT dst)
wxNOR                 (NOT src) AND (NOT dst)
wxNO_OP               dst
wxOR                  src OR dst
wxOR_INVERT           (NOT src) OR dst
wxOR_REVERSE          src OR (NOT dst)
wxSET                 1
wxSRC_INVERT          NOT src
wxXOR                 src XOR dst
</pre>

The default is wxCOPY, which simply draws with the current colour.
The others combine the current colour and the background using a
logical operation.  wxINVERT is commonly used for drawing rubber bands or
moving outlines, since drawing twice reverts to the original colour.

</description></function></member>
<member class="wxDC" name="SetMapMode"><function type="void" name="SetMapMode"><parameters><parameter type="int" name=" int"></parameter></parameters><description>

The <i> mapping mode</i> of the device context defines the unit of
measurement used to convert logical units to device units. Note that
in X, text drawing isn't handled consistently with the mapping mode; a
font is always specified in point size. However, setting the <i>
user scale</i> (see <ref target="wxdcsetuserscale">wxDC::SetUserScale</ref>) scales the text appropriately. In
Windows, scalable TrueType fonts are always used; in X, results depend
on availability of fonts, but usually a reasonable match is found.

Note that the coordinate origin should ideally be selectable, but for
now is always at the top left of the screen/printer.

Drawing to a Windows printer device context under UNIX
uses the current mapping mode, but mapping mode is currently ignored for
PostScript output.

The mapping mode can be one of the following:

<table>
<tr><td>wxMM_TWIPS</td><td>Each logical unit is 1/20 of a point, or 1/1440 of
  an inch.</td></tr>
<tr><td>wxMM_POINTS</td><td>Each logical unit is a point, or 1/72 of an inch.</td></tr>
<tr><td>wxMM_METRIC</td><td>Each logical unit is 1 mm.</td></tr>
<tr><td>wxMM_LOMETRIC</td><td>Each logical unit is 1/10 of a mm.</td></tr>
<tr><td>wxMM_TEXT</td><td>Each logical unit is 1 pixel.</td></tr>
</table>

</description></function></member>
<member class="wxDC" name="SetOptimization"><function type="void" name="SetOptimization"><parameters><parameter type="bool " name="optimize"></parameter></parameters><description>

If <i> optimize</i> is true (the default), this function sets optimization mode on.
This currently means that under X, the device context will not try to set a pen or brush
property if it is known to be set already. This approach can fall down
if non-wxWindows code is using the same device context or window, for example
when the window is a panel on which the windowing system draws panel items.
The wxWindows device context 'memory' will now be out of step with reality.

Setting optimization off, drawing, then setting it back on again, is a trick
that must occasionally be employed.

</description></function></member>
<member class="wxDC" name="SetPen"><function type="void" name="SetPen"><parameters><parameter type="const wxPen&amp; " name="pen"></parameter></parameters><description>

Sets the current pen for the DC.

If the argument is wxNullPen, the current pen is selected out of the device
context, and the original pen restored.

See also <ref target="wxmemorydc">wxMemoryDC</ref> for the interpretation of colours
when drawing into a monochrome bitmap.

</description></function></member>
<member class="wxDC" name="SetTextBackground"><function type="void" name="SetTextBackground"><parameters><parameter type="const wxColour&amp; " name="colour"></parameter></parameters><description>

Sets the current text background colour for the DC.

</description></function></member>
<member class="wxDC" name="SetTextForeground"><function type="void" name="SetTextForeground"><parameters><parameter type="const wxColour&amp; " name="colour"></parameter></parameters><description>

Sets the current text foreground colour for the DC.

See also <ref target="wxmemorydc">wxMemoryDC</ref> for the interpretation of colours
when drawing into a monochrome bitmap.

</description></function></member>
<member class="wxDC" name="SetUserScale"><function type="void" name="SetUserScale"><parameters><parameter type="double" name=" xScale"></parameter><parameter type="double" name=" yScale"></parameter></parameters><description>

Sets the user scaling factor, useful for applications which require
`zooming'.

</description></function></member>
<member class="wxDC" name="StartDoc"><function type="bool" name="StartDoc"><parameters><parameter type="const wxString&amp; " name="message"></parameter></parameters><description>

Starts a document (only relevant when outputting to a printer).
Message is a message to show whilst printing.

</description></function></member>
<member class="wxDC" name="StartPage"><function type="bool" name="StartPage"><description>

Starts a document page (only relevant when outputting to a printer).
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDCClipper">
<description>
<p class="classdesc">
This is a small helper class which sets the specified to its constructor
clipping region and then automatically destroys it in its destructor. Using
it ensures that unwanted clipping region is not left set on the DC.</p>
</description>
<parents></parents>
<includes>
<header name="wx/dc.h"/></includes>
<seealso>

<ref target="wxdc">wxDC</ref>

</seealso>
<members>
<member class="wxDCClipper" name="wxDCClipper"><function type="" name="wxDCClipper"><parameters><parameter type="wxDC&amp; " name="dc"></parameter><parameter type="wxCoord " name="x"></parameter><parameter type="wxCoord " name="y"></parameter><parameter type="wxCoord " name="w"></parameter><parameter type="wxCoord " name="h"></parameter></parameters><description>

</description></function>
<function type="" name="wxDCClipper"><parameters><parameter type="wxDC&amp; " name="dc"></parameter><parameter type="const wxRect&amp;" name=" rect"></parameter></parameters><description>

Constructor: sets the the clipping region for the given device context to the
specified rectangle.

</description></function></member>
<member class="wxDCClipper" name="~wxDCClipper"><function type="" name="~wxDCClipper"><description>

Destructor: destroys the clipping region set in the constructor.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDataFormat">
<description>
<p class="classdesc">
A wxDataFormat is an encapsulation of a platform-specific format handle which
is used by the system for the clipboard and drag and drop operations. The
applications are usually only interested in, for example, pasting data from the
clipboard only if the data is in a format the program understands and a data
format is something which uniquely identifies this format.</p><p class="classdesc">On the system level, a data format is usually just a number (<tt> CLIPFORMAT</tt>
under Windows or <tt> Atom</tt> under X11, for example) and the standard formats
are, indeed, just numbers which can be implicitly converted to wxDataFormat.
The standard formats are:</p><p class="classdesc"><table>
<tr><td>wxDF_INVALID</td><td>An invalid format - used as default argument for
functions taking a wxDataFormat argument sometimes</td></tr>
<tr><td>wxDF_TEXT</td><td>Text format (wxString)</td></tr>
<tr><td>wxDF_BITMAP</td><td>A bitmap (wxBitmap)</td></tr>
<tr><td>wxDF_METAFILE</td><td>A metafile (wxMetafile, Windows only)</td></tr>
<tr><td>wxDF_FILENAME</td><td>A list of filenames</td></tr>
<tr><td>wxDF_HTML</td><td>An HTML string. This is only valid when passed to wxSetClipboardData
when compiled with Visual C++ in non-Unicode mode</td></tr>
</table></p><p class="classdesc">As mentioned above, these standard formats may be passed to any function taking
wxDataFormat argument because wxDataFormat has an implicit conversion from
them (or, to be precise from the type <tt> wxDataFormat::NativeFormat</tt> which is
the type used by the underlying platform for data formats).</p><p class="classdesc">Aside the standard formats, the application may also use custom formats which
are identified by their names (strings) and not numeric identifiers. Although
internally custom format must be created (or <i> registered</i>) first, you
shouldn't care about it because it is done automatically the first time the
wxDataFormat object corresponding to a given format name is created. The only
implication of this is that you should avoid having global wxDataFormat objects
with non-default constructor because their constructors are executed before the
program has time to perform all necessary initialisations and so an attempt to
do clipboard format registration at this time will usually lead to a crash!</p>
</description>
<parents>


</parents>
 
<seealso>

<ref target="wxdndoverview">Clipboard and drag and drop overview</ref>
<ref target="samplednd">DnD sample</ref>
<ref target="wxdataobject">wxDataObject</ref>

</seealso>
<members>
<member class="wxDataFormat" name="wxDataFormat"><function type="" name="wxDataFormat"><parameters><parameter type="NativeFormat" name="format" value="wxDF_INVALID"></parameter></parameters><description>

Constructs a data format object for one of the standard data formats or an
empty data object (use <ref target="wxdataformatsettype">SetType</ref> or 
<ref target="wxdataformatsetid">SetId</ref> later in this case)

\perlnote{In wxPerl this function is named <tt> newNative</tt>.}

</description></function></member>
<member class="wxDataFormat" name="wxDataFormat"><function type="" name="wxDataFormat"><parameters><parameter type="const wxChar " name="&#42;format"></parameter></parameters><description>

Constructs a data format object for a custom format identified by its name 
<i> format</i>.

\perlnote{In wxPerl this function is named <tt> newUser</tt>.}

</description></function></member>
<member class="wxDataFormat" name="operator $==$"><function type="bool" name="operator $==$" suffix="const"><parameters><parameter type="const wxDataFormat&amp;" name=" format"></parameter></parameters><description>

Returns true if the formats are equal.

</description></function></member>
<member class="wxDataFormat" name="operator $!=$"><function type="bool" name="operator $!=$" suffix="const"><parameters><parameter type="const wxDataFormat&amp;" name=" format"></parameter></parameters><description>

Returns true if the formats are different.

</description></function></member>
<member class="wxDataFormat" name="GetId"><function type="wxString" name="GetId" suffix="const"><description>

Returns the name of a custom format (this function will fail for a standard
format).

</description></function></member>
<member class="wxDataFormat" name="GetType"><function type="NativeFormat" name="GetType" suffix="const"><description>

Returns the platform-specific number identifying the format.

</description></function></member>
<member class="wxDataFormat" name="SetId"><function type="void" name="SetId"><parameters><parameter type="const wxChar " name="&#42;format"></parameter></parameters><description>

Sets the format to be the custom format identified by the given name.

</description></function></member>
<member class="wxDataFormat" name="SetType"><function type="void" name="SetType"><parameters><parameter type="NativeFormat" name=" format"></parameter></parameters><description>

Sets the format to the given value, which should be one of wxDF_XXX constants.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDataInputStream">
<description>
<p class="classdesc">
This class provides functions that read binary data types in a
portable way. Data can be read in either big-endian or little-endian
format, little-endian being the default on all architectures.</p><p class="classdesc">If you want to read data from text files (or streams) use 
<ref target="wxtextinputstream">wxTextInputStream</ref> instead.</p><p class="classdesc">The &gt;&gt; operator is overloaded and you can use this class like a standard C++ iostream.
Note, however, that the arguments are the fixed size types wxUint32, wxInt32 etc
and on a typical 32-bit computer, none of these match to the &quot;long&quot; type (wxInt32
is defined as signed int on 32-bit architectures) so that you cannot use long. To avoid
problems (here and elsewhere), make use of the wxInt32, wxUint32, etc types.</p><p class="classdesc">For example:</p><p class="classdesc"><pre>
  wxFileInputStream input( &quot;mytext.dat&quot; );
  wxDataInputStream store( input );
  wxUint8 i1;
  float f2;
  wxString line;

  store &gt;&gt; i1;       // read a 8 bit integer.
  store &gt;&gt; i1 &gt;&gt; f2; // read a 8 bit integer followed by float.
  store &gt;&gt; line;     // read a text line
</pre></p><p class="classdesc">See also <ref target="wxdataoutputstream">wxDataOutputStream</ref>. </p>
</description>
<parents>


</parents>
<includes>
<header name="wx/datstrm.h"/></includes>
<members>
<member class="wxDataInputStream" name="wxDataInputStream"><function type="" name="wxDataInputStream"><parameters><parameter type="wxInputStream&amp;" name=" stream"></parameter></parameters><description>

</description></function>
<function type="" name="wxDataInputStream"><parameters><parameter type="wxInputStream&amp;" name=" stream"></parameter><parameter type="wxMBConv&amp;" name="conv" value="wxMBConvUTF8">Charset conversion object object used to decode strings in Unicode 
mode (see <ref target="wxdatainputstreamreadstring">wxDataInputStream::ReadString</ref>
documentation for detailed description). Note that you must not destroy
<i> conv</i> before you destroy this wxDataInputStream instance!</parameter></parameters><description>

Constructs a datastream object from an input stream. Only read methods will
be available. The second form is only available in Unicode build of wxWindows.







</description></function></member>
<member class="wxDataInputStream" name="~wxDataInputStream"><function type="" name="~wxDataInputStream"><description>

Destroys the wxDataInputStream object.

</description></function></member>
<member class="wxDataInputStream" name="BigEndianOrdered"><function type="void" name="BigEndianOrdered"><parameters><parameter type="bool" name=" be_order"></parameter></parameters><description>

If <i> be_order</i> is true, all data will be read in big-endian
order, such as written by programs on a big endian architecture 
(e.g. Sparc) or written by Java-Streams (which always use 
big-endian order).
  
</description></function></member>
<member class="wxDataInputStream" name="Read8"><function type="wxUint8" name="Read8"><description>

Reads a single byte from the stream.

</description></function></member>
<member class="wxDataInputStream" name="Read16"><function type="wxUint16" name="Read16"><description>

Reads a 16 bit unsigned integer from the stream.

</description></function></member>
<member class="wxDataInputStream" name="Read32"><function type="wxUint32" name="Read32"><description>

Reads a 32 bit unsigned integer from the stream.

</description></function></member>
<member class="wxDataInputStream" name="Read64"><function type="wxUint64" name="Read64"><description>

Reads a 64 bit unsigned integer from the stream.

</description></function></member>
<member class="wxDataInputStream" name="ReadDouble"><function type="double" name="ReadDouble"><description>

Reads a double (IEEE encoded) from the stream.

</description></function></member>
<member class="wxDataInputStream" name="ReadString"><function type="wxString" name="ReadString"><description>

Reads a string from a stream. Actually, this function first reads a long 
integer specifying the length of the string (without the last null character) 
and then reads the string.

In Unicode build of wxWindows, the fuction first reads multibyte (char&#42;)
string from the stream and then converts it to Unicode using the <i> conv</i>
object passed to constructor and returns the result as wxString. You are
responsible for using the same convertor as when writing the stream.

See also <ref target="wxdataoutputstreamwritestring">wxDataOutputStream::WriteString</ref>.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDataObject">
<description>
<p class="classdesc">
A wxDataObject represents data that can be copied to or from the clipboard, or
dragged and dropped. The important thing about wxDataObject is that this is a
'smart' piece of data unlike usual 'dumb' data containers such as memory
buffers or files. Being 'smart' here means that the data object itself should
know what data formats it supports and how to render itself in each of
supported formats.</p><p class="classdesc">A supported format, incidentally, is exactly the format in which the data can
be requested from a data object or from which the data object may be set. In
the general case, an object may support different formats on 'input' and
'output', i.e. it may be able to render itself in a given format but not be
created from data on this format or vice versa. wxDataObject defines an
enumeration type</p><p class="classdesc"><pre>
enum Direction
{
    Get  = 0x01,    // format is supported by GetDataHere()
    Set  = 0x02     // format is supported by SetData()
};
</pre></p><p class="classdesc">which allows to distinguish between them. See 
<ref target="wxdataformat">wxDataFormat</ref> documentation for more about formats.</p><p class="classdesc">Not surprisingly, being 'smart' comes at a price of added complexity. This is
reasonable for the situations when you really need to support multiple formats,
but may be annoying if you only want to do something simple like cut and paste
text.</p><p class="classdesc">To provide a solution for both cases, wxWindows has two predefined classes
which derive from wxDataObject: <ref target="wxdataobjectsimple">wxDataObjectSimple</ref> and 
<ref target="wxdataobjectcomposite">wxDataObjectComposite</ref>. 
<ref target="wxdataobjectsimple">wxDataObjectSimple</ref> is
the simplest wxDataObject possible and only holds data in a single format (such
as HTML or text) and <ref target="wxdataobjectcomposite">wxDataObjectComposite</ref> is
the simplest way to implement wxDataObject which does support multiple formats
because it achievs this by simply holding several wxDataObjectSimple objects.</p><p class="classdesc">So, you have several solutions when you need a wxDataObject class (and you need
one as soon as you want to transfer data via the clipboard or drag and drop):</p><p class="classdesc"><table>
<tr><td><b> 1. Use one of the built-in classes</b></td><td>You may use wxTextDataObject,
wxBitmapDataObject or wxFileDataObject in the simplest cases when you only need
to support one format and your data is either text, bitmap or list of files.</td></tr>
<tr><td><b> 2. Use wxDataObjectSimple</b></td><td>Deriving from wxDataObjectSimple is the simplest
solution for custom data - you will only support one format and so probably
won't be able to communicate with other programs, but data transfer will work
in your program (or between different copies of it).</td></tr>
<tr><td><b> 3. Use wxDataObjectComposite</b></td><td>This is a simple but powerful
solution which allows you to support any number of formats (either
standard or custom if you combine it with the previous solution).</td></tr>
<tr><td><b> 4. Use wxDataObject directly</b></td><td>This is the solution for
maximal flexibility and efficiency, but it is also is the most difficult to
implement.</td></tr>
</table></p><p class="classdesc">Please note that the easiest way to use drag and drop and the clipboard with
multiple formats is by using wxDataObjectComposite, but it is not the most
efficient one as each wxDataObjectSimple would contain the whole data in its
respective formats. Now imagine that you want to paste 200 pages of text in
your proprietary format, as well as Word, RTF, HTML, Unicode and plain text to
the clipboard and even today's computers are in trouble. For this case, you
will have to derive from wxDataObject directly and make it enumerate its
formats and provide the data in the requested format on demand.</p><p class="classdesc">Note that neither the GTK data transfer mechanisms for the clipboard and
drag and drop, nor the OLE data transfer copy any data until another application
actually requests the data. This is in contrast to the 'feel' offered to the
user of a program who would normally think that the data resides in the
clipboard after having pressed 'Copy' - in reality it is only declared to be
available.</p><p class="classdesc">There are several predefined data object classes derived from
wxDataObjectSimple: <ref target="wxfiledataobject">wxFileDataObject</ref>, 
<ref target="wxtextdataobject">wxTextDataObject</ref> and 
<ref target="wxbitmapdataobject">wxBitmapDataObject</ref> which can be used without
change.</p><p class="classdesc">You may also derive your own data object classes from 
<ref target="wxcustomdataobject">wxCustomDataObject</ref> for user-defined types. The
format of user-defined data is given as mime-type string literal, such as
&quot;application/word&quot; or &quot;image/png&quot;. These strings are used as they are under
Unix (so far only GTK) to identify a format and are translated into their
Windows equivalent under Win32 (using the OLE IDataObject for data exchange to
and from the clipboard and for drag and drop). Note that the format string
translation under Windows is not yet finished.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/dataobj.h"/></includes>
<override>

Each class derived directly from wxDataObject must override and implement all
of its functions which are pure virtual in the base class.

The data objects which only render their data or only set it (i.e. work in
only one direction), should return 0 from 
<ref target="wxdataobjectgetformatcount">GetFormatCount</ref>.

</override>
<seealso>

<ref target="wxdndoverview">Clipboard and drag and drop overview</ref>
<ref target="samplednd">DnD sample</ref>
<ref target="wxfiledataobject">wxFileDataObject</ref>
<ref target="wxtextdataobject">wxTextDataObject</ref>
<ref target="wxbitmapdataobject">wxBitmapDataObject</ref>
<ref target="wxcustomdataobject">wxCustomDataObject</ref>
<ref target="wxdroptarget">wxDropTarget</ref>
<ref target="wxdropsource">wxDropSource</ref>
<ref target="wxtextdroptarget">wxTextDropTarget</ref>
<ref target="wxfiledroptarget">wxFileDropTarget</ref>

</seealso>
<members>
<member class="wxDataObject" name="wxDataObject"><function type="" name="wxDataObject"><description>

Constructor.

</description></function></member>
<member class="wxDataObject" name="~wxDataObject"><function type="" name="~wxDataObject"><description>

Destructor.

</description></function></member>
<member class="wxDataObject" name="GetAllFormats"><function type="virtual void" name="GetAllFormats" suffix="const"><parameters><parameter type="wxDataFormat &#42;" name="formats"></parameter><parameter type="Direction" name="dir" value="Get"></parameter></parameters><description>

Copy all supported formats in the given direction to the array pointed to by 
<i> formats</i>. There is enough space for GetFormatCount(dir) formats in it.

\perlnote{In wxPerl this method only takes the <tt> dir</tt> parameter. 
In scalar context it returns the first format,
in list context it returns a list containing all the supported formats.}

</description></function></member>
<member class="wxDataObject" name="GetDataHere"><function type="virtual bool" name="GetDataHere" suffix="const"><parameters><parameter type="const wxDataFormat&amp;" name=" format"></parameter><parameter type="void " name="&#42;buf"></parameter></parameters><description>

The method will write the data of the format <i> format</i> in the buffer <i>
buf</i> and return true on success, false on failure.

</description></function></member>
<member class="wxDataObject" name="GetDataSize"><function type="virtual size_t" name="GetDataSize" suffix="const"><parameters><parameter type="const wxDataFormat&amp;" name=" format"></parameter></parameters><description>

Returns the data size of the given format <i> format</i>.

</description></function></member>
<member class="wxDataObject" name="GetFormatCount"><function type="virtual size_t" name="GetFormatCount" suffix="const"><parameters><parameter type="Direction" name="dir" value="Get"></parameter></parameters><description>

Returns the number of available formats for rendering or setting the data.

</description></function></member>
<member class="wxDataObject" name="GetPreferredFormat"><function type="virtual wxDataFormat" name="GetPreferredFormat" suffix="const"><parameters><parameter type="Direction" name="dir" value="Get"></parameter></parameters><description>

Returns the preferred format for either rendering the data (if <i> dir</i> is <tt> Get</tt>,
its default value) or for setting it. Usually this will be the
native format of the wxDataObject.

</description></function></member>
<member class="wxDataObject" name="SetData"><function type="virtual bool" name="SetData"><parameters><parameter type="const wxDataFormat&amp;" name=" format"></parameter><parameter type="size_t" name=" len"></parameter><parameter type="const void " name="&#42;buf"></parameter></parameters><description>

Set the data in the format <i> format</i> of the length <i> len</i> provided in the
buffer <i> buf</i>.

Returns true on success, false on failure.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="N"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDataObjectComposite">
<description>
<p class="classdesc">
wxDataObjectComposite is the simplest 
<ref target="wxdataobject">wxDataObject</ref> derivation which may be sued to support
multiple formats. It contains several 
<ref target="wxdataobjectsimple">wxDataObjectSimple</ref> objects and supports any
format supported by at least one of them. Only one of these data objects is
<i> preferred</i> (the first one if not explicitly changed by using the second
parameter of <ref target="wxdataobjectcompositeadd">Add</ref>) and its format determines
the preferred format of the composite data object as well.</p><p class="classdesc">See <ref target="wxdataobject">wxDataObject</ref> documentation for the reasons why you
might prefer to use wxDataObject directly instead of wxDataObjectComposite for
efficiency reasons.</p>
</description>
<parents>
<classref name="wxDataObject"/>

</parents>
<includes>
<header name="wx/dataobj.h"/></includes>
<seealso>

<ref target="wxdndoverview">Clipboard and drag and drop overview</ref>
<ref target="wxdataobject">wxDataObject</ref>
<ref target="wxdataobjectsimple">wxDataObjectSimple</ref>
<ref target="wxfiledataobject">wxFileDataObject</ref>
<ref target="wxtextdataobject">wxTextDataObject</ref>
<ref target="wxbitmapdataobject">wxBitmapDataObject</ref>

</seealso>
<members>
<member class="wxDataObjectComposite" name="wxDataObjectComposite"><function type="" name="wxDataObjectComposite"><description>

The default constructor.

</description></function></member>
<member class="wxDataObjectComposite" name="Add"><function type="void" name="Add"><parameters><parameter type="wxDataObjectSimple " name="&#42;dataObject"></parameter><parameter type="bool " name="preferred" value="false"></parameter></parameters><description>

Adds the <i> dataObject</i> to the list of supported objects and it becomes the
preferred object if <i> preferred</i> is true.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class>
<class name="wxDataObjectSimple">
<description>
<p class="classdesc">
This is the simplest possible implementation of the 
<ref target="wxdataobject">wxDataObject</ref> class. The data object of (a class derived
from) this class only supports one format, so the number of virtual functions
to be implemented is reduced.</p><p class="classdesc">Notice that this is still an abstract base class and cannot be used but should
be derived from.</p>
</description>

<parents>
<classref name="wxDataObject"/>

</parents>
<includes>
<header name="wx/dataobj.h"/></includes>
<override>

The objects supporting rendering the data must override 
<ref target="wxdataobjectsimplegetdatasize">GetDataSize</ref> and 
<ref target="wxdataobjectsimplegetdatahere">GetDataHere</ref> while the objects which
may be set must override <ref target="wxdataobjectsimplesetdata">SetData</ref>. Of
course, the objects supporting both operations must override all three
methods.

</override>
<seealso>

<ref target="wxdndoverview">Clipboard and drag and drop overview</ref>
<ref target="samplednd">DnD sample</ref>
<ref target="wxfiledataobject">wxFileDataObject</ref>
<ref target="wxtextdataobject">wxTextDataObject</ref>
<ref target="wxbitmapdataobject">wxBitmapDataObject</ref>

</seealso>
<members>
<member class="wxDataObjectSimple" name="wxDataObjectSimple"><function type="" name="wxDataObjectSimple"><parameters><parameter type="const wxDataFormat&amp;" name="format" value="wxFormatInvalid"></parameter></parameters><description>

Constructor accepts the supported format (none by default) which may also be
set later with <ref target="wxdataobjectsimplesetformat">SetFormat</ref>.

</description></function></member>
<member class="wxDataObjectSimple" name="GetFormat"><function type="const wxDataFormat&amp;" name="GetFormat" suffix="const"><description>

Returns the (one and only one) format supported by this object. It is supposed
that the format is supported in both directions.

</description></function></member>
<member class="wxDataObjectSimple" name="SetFormat"><function type="void" name="SetFormat"><parameters><parameter type="const wxDataFormat&amp;" name=" format"></parameter></parameters><description>

Sets the supported format.

</description></function></member>
<member class="wxDataObjectSimple" name="GetDataSize"><function type="virtual size_t" name="GetDataSize" suffix="const"><description>

Gets the size of our data. Must be implemented in the derived class if the
object supports rendering its data.

</description></function></member>
<member class="wxDataObjectSimple" name="GetDataHere"><function type="virtual bool" name="GetDataHere" suffix="const"><parameters><parameter type="void " name="&#42;buf"></parameter></parameters><description>

Copy the data to the buffer, return true on success. Must be implemented in the
derived class if the object supports rendering its data.

\pythonnote{When implementing this method in wxPython, no additional
parameters are required and the data should be returned from the
method as a string.}

</description></function></member>
<member class="wxDataObjectSimple" name="SetData"><function type="virtual bool" name="SetData"><parameters><parameter type="size_t " name="len"></parameter><parameter type="const void " name="&#42;buf"></parameter></parameters><description>

Copy the data from the buffer, return true on success. Must be implemented in
the derived class if the object supports setting its data.

\pythonnote{When implementing this method in wxPython, the data comes
as a single string parameter rather than the two shown here.}

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="N"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDataOutputStream">
<description>
<p class="classdesc">
This class provides functions that write binary data types in a
portable way. Data can be written in either big-endian or little-endian
format, little-endian being the default on all architectures.</p><p class="classdesc">If you want to write data to text files (or streams) use 
<ref target="wxtextoutputstream">wxTextOutputStream</ref> instead.</p><p class="classdesc">The &lt;&lt; operator is overloaded and you can use this class like a standard 
C++ iostream. See <ref target="wxdatainputstream">wxDataInputStream</ref> for its 
usage and caveats.</p><p class="classdesc">See also <ref target="wxdatainputstream">wxDataInputStream</ref>. </p>
</description>
<parents>


</parents>
<members>
<member class="wxDataOutputStream" name="wxDataOutputStream"><function type="" name="wxDataOutputStream"><parameters><parameter type="wxOutputStream&amp;" name=" stream"></parameter></parameters><description>

</description></function>
<function type="" name="wxDataOutputStream"><parameters><parameter type="wxOutputStream&amp;" name=" stream"></parameter><parameter type="wxMBConv&amp;" name="conv" value="wxMBConvUTF8">Charset conversion object object used to encoding Unicode 
strings before writing them to the stream
in Unicode mode (see <ref target="wxdataoutputstreamwritestring">wxDataOutputStream::WriteString</ref>
documentation for detailed description). Note that you must not destroy
<i> conv</i> before you destroy this wxDataOutputStream instance! It is
recommended to use default value (UTF-8).</parameter></parameters><description>

Constructs a datastream object from an output stream. Only write methods will
be available. The second form is only available in Unicode build of wxWindows.







</description></function></member>
<member class="wxDataOutputStream" name="~wxDataOutputStream"><function type="" name="~wxDataOutputStream"><description>

Destroys the wxDataOutputStream object.

</description></function></member>
<member class="wxDataOutputStream" name="BigEndianOrdered"><function type="void" name="BigEndianOrdered"><parameters><parameter type="bool" name=" be_order"></parameter></parameters><description>

If <i> be_order</i> is true, all data will be written in big-endian
order, e.g. for reading on a Sparc or from Java-Streams (which
always use big-endian order), otherwise data will be written in
little-endian order.
 
</description></function></member>
<member class="wxDataOutputStream" name="Write8"><function type="void" name="Write8"><parameters></parameters><description>

Writes the single byte <i> i8</i> to the stream.

</description></function></member>
<member class="wxDataOutputStream" name="Write16"><function type="void" name="Write16"><parameters></parameters><description>

Writes the 16 bit unsigned integer <i> i16</i> to the stream.

</description></function></member>
<member class="wxDataOutputStream" name="Write32"><function type="void" name="Write32"><parameters></parameters><description>

Writes the 32 bit unsigned integer <i> i32</i> to the stream.

</description></function></member>
<member class="wxDataOutputStream" name="Write64"><function type="void" name="Write64"><parameters></parameters><description>

Writes the 64 bit unsigned integer <i> i64</i> to the stream.

</description></function></member>
<member class="wxDataOutputStream" name="WriteDouble"><function type="void" name="WriteDouble"><parameters></parameters><description>

Writes the double <i> f</i> to the stream using the IEEE format.

</description></function></member>
<member class="wxDataOutputStream" name="WriteString"><function type="void" name="WriteString"><parameters></parameters><description>

Writes <i> string</i> to the stream. Actually, this method writes the size of
the string before writing <i> string</i> itself.

In ANSI build of wxWindows, the string is written to the stream in exactly
same way it is represented in memory. In Unicode build, however, the string
is first converted to multibyte representation with <i> conv</i> object passed
to stream's constructor (consequently, ANSI application can read data 
written by Unicode application, as long as they agree on encoding) and this
representation is written to the stream. UTF-8 is used by default.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDateSpan">
<description>
<p class="classdesc">
This class is a &quot;logical time span&quot; and is useful for implementing program
logic for such things as &quot;add one month to the date&quot; which, in general,
doesn't mean to add $60&#42;60&#42;24&#42;31$ seconds to it, but to take the same date
the next month (to understand that this is indeed different consider adding
one month to Feb, 15 -- we want to get Mar, 15, of course).</p><p class="classdesc">When adding a month to the date, all lesser components (days, hours, ...)
won't be changed unless the resulting date would be invalid: for example,
Jan 31 + 1 month will be Feb 28, not (non existing) Feb 31.</p><p class="classdesc">Because of this feature, adding and subtracting back again the same
wxDateSpan will <b> not</b>, in general give back the original date: Feb 28 - 1
month will be Jan 28, not Jan 31!</p><p class="classdesc">wxDateSpan objects can be either positive or negative. They may be
multiplied by scalars which multiply all deltas by the scalar: i.e.
$2&#42;(1 \hbox{ month and } 1 \hbox{ day})$ is 2 months and 2 days. They can
be added together and with <ref target="wxdatetime">wxDateTime</ref> or 
<ref target="wxtimespan">wxTimeSpan</ref>, but the type of result is different for each
case.</p><p class="classdesc">Beware about weeks: if you specify both weeks and days, the total number of
days added will be $7&#42;\hbox{weeks} + \hbox{days}$! See also GetTotalDays()
function.</p><p class="classdesc">Equality operators are defined for wxDateSpans. Two datespans are equal if
and only if they both give the same target date when added to <b> every</b>
source date. Thus wxDateSpan::Months(1) is not equal to wxDateSpan::Days(30),
because they don't give the same date when added to 1 Feb. But
wxDateSpan::Days(14) is equal to wxDateSpan::Weeks(2)</p><p class="classdesc">Finally, notice that for adding hours, minutes and so on you don't need this
class at all: <ref target="wxtimespan">wxTimeSpan</ref> will do the job because there
are no subtleties associated with those (we don't support leap seconds).</p>
</description>
<parents></parents>
<includes>
<header name="wx/datetime.h"/></includes>
<seealso>

<ref target="wxdatetimeoverview">Date classes overview</ref>,
<ref target="wxdatetime">wxDateTime</ref>


</seealso>
<members>
<member class="wxDateSpan" name="wxDateSpan"><function type="" name="wxDateSpan"><parameters><parameter type="int " name="years" value="0"></parameter><parameter type="int " name="months" value="0"></parameter><parameter type="int " name="weeks" value="0"></parameter><parameter type="int " name="days" value="0"></parameter></parameters><description>

Constructs the date span object for the given number of years, months, weeks
and days. Note that the weeks and days add together if both are given.

</description></function></member>
<member class="wxDateSpan" name="Add"><function type="wxDateSpan" name="Add" suffix="const"><parameters><parameter type="const wxDateSpan&amp; " name="other"></parameter></parameters><description>

</description></function>
<function type="wxDateSpan&amp;" name="Add"><parameters><parameter type="const wxDateSpan&amp; " name="other"></parameter></parameters><description>

</description></function>
<function type="wxDateSpan&amp;" name="operator$+=$"><parameters><parameter type="const wxDateSpan&amp; " name="other"></parameter></parameters><description>

Returns the sum of two date spans. The first version returns a new object, the
second and third ones modify this object in place.

</description></function></member>
<member class="wxDateSpan" name="Day"><function type="static wxDateSpan" name="Day"><seealso>

<ref target="wxdatespandays">Days</ref>

</seealso><description>

Returns a date span object corresponding to one day.

</description></function></member>
<member class="wxDateSpan" name="Days"><function type="static wxDateSpan" name="Days"><parameters><parameter type="int " name="days"></parameter></parameters><seealso>

<ref target="wxdatespanday">Day</ref>

</seealso><description>

Returns a date span object corresponding to the given number of days.

</description></function></member>
<member class="wxDateSpan" name="GetDays"><function type="int" name="GetDays" suffix="const"><seealso>

<ref target="wxdatespangettotaldays">GetTotalDays</ref>

</seealso><description>

Returns the number of days (only, that it not counting the weeks component!)
in this date span.

</description></function></member>
<member class="wxDateSpan" name="GetMonths"><function type="int" name="GetMonths" suffix="const"><description>

Returns the number of the months (not counting the years) in this date span.

</description></function></member>
<member class="wxDateSpan" name="GetTotalDays"><function type="int" name="GetTotalDays" suffix="const"><seealso>

<ref target="wxdatespangetweeks">GetWeeks</ref><ref target="wxdatespangetdays">GetDays</ref>

</seealso><description></description></function></member>
<member class="wxDateSpan" name="GetWeeks"><function type="int" name="GetWeeks" suffix="const"><seealso>

<ref target="wxdatespangettotaldays">GetTotalDays</ref>

</seealso><description>

Returns the number of weeks in this date span.

</description></function></member>
<member class="wxDateSpan" name="GetYears"><function type="int" name="GetYears" suffix="const"><description>

Returns the number of years in this date span.

</description></function></member>
<member class="wxDateSpan" name="Month"><function type="static wxDateSpan" name="Month"><seealso>

<ref target="wxdatespanmonths">Months</ref>

</seealso><description>

Returns a date span object corresponding to one month.

</description></function></member>
<member class="wxDateSpan" name="Months"><function type="static wxDateSpan" name="Months"><parameters><parameter type="int " name="mon"></parameter></parameters><seealso>

<ref target="wxdatespanmonth">Month</ref>

</seealso><description>

Returns a date span object corresponding to the given number of months.

</description></function></member>
<member class="wxDateSpan" name="Multiply"><function type="wxDateSpan" name="Multiply" suffix="const"><parameters><parameter type="int " name="factor"></parameter></parameters><description>

</description></function>
<function type="wxDateSpan&amp;" name="Multiply"><parameters><parameter type="int " name="factor"></parameter></parameters><description>

</description></function>
<function type="wxDateSpan&amp;" name="operator$&#42;=$"><parameters><parameter type="int " name="factor"></parameter></parameters><description>

Returns the product of the date span by the specified <i> factor</i>. The
product is computed by multiplying each of the components by the factor.

The first version returns a new object, the second and third ones modify this
object in place.

</description></function></member>
<member class="wxDateSpan" name="Negate"><function type="wxDateSpan" name="Negate" suffix="const"><seealso>

<ref target="wxdatespanneg">Neg</ref>

</seealso><description>

Returns the date span with the opposite sign.

</description></function></member>
<member class="wxDateSpan" name="Neg"><function type="wxDateSpan&amp;" name="Neg"><description>

</description></function>
<function type="wxDateSpan&amp;" name="operator$-$"><seealso>

<ref target="wxdatespannegate">Negate</ref>

</seealso><description>

Changes the sign of this date span.

</description></function></member>
<member class="wxDateSpan" name="SetDays"><function type="wxDateSpan&amp;" name="SetDays"><parameters><parameter type="int " name="n"></parameter></parameters><description>

Sets the number of days (without modifying any other components) in this date
span.

</description></function></member>
<member class="wxDateSpan" name="SetYears"><function type="wxDateSpan&amp;" name="SetYears"><parameters><parameter type="int " name="n"></parameter></parameters><description>

Sets the number of years (without modifying any other components) in this date
span.

</description></function></member>
<member class="wxDateSpan" name="SetMonths"><function type="wxDateSpan&amp;" name="SetMonths"><parameters><parameter type="int " name="n"></parameter></parameters><description>

Sets the number of months (without modifying any other components) in this
date span.

</description></function></member>
<member class="wxDateSpan" name="SetWeeks"><function type="wxDateSpan&amp;" name="SetWeeks"><parameters><parameter type="int " name="n"></parameter></parameters><description>

Sets the number of weeks (without modifying any other components) in this date
span.

</description></function></member>
<member class="wxDateSpan" name="Subtract"><function type="wxDateSpan" name="Subtract" suffix="const"><parameters><parameter type="const wxDateSpan&amp; " name="other"></parameter></parameters><description>

</description></function>
<function type="wxDateSpan&amp;" name="Subtract"><parameters><parameter type="const wxDateSpan&amp; " name="other"></parameter></parameters><description>

</description></function>
<function type="wxDateSpan&amp;" name="operator$+=$"><parameters><parameter type="const wxDateSpan&amp; " name="other"></parameter></parameters><description>

Returns the difference of two date spans. The first version returns a new
object, the second and third ones modify this object in place.

</description></function></member>
<member class="wxDateSpan" name="Week"><function type="static wxDateSpan" name="Week"><seealso>

<ref target="wxdatespanweeks">Weeks</ref>

</seealso><description>

Returns a date span object corresponding to one week.

</description></function></member>
<member class="wxDateSpan" name="Weeks"><function type="static wxDateSpan" name="Weeks"><parameters><parameter type="int " name="weeks"></parameter></parameters><seealso>

<ref target="wxdatespanweek">Week</ref>

</seealso><description>

Returns a date span object corresponding to the given number of weeks.

</description></function></member>
<member class="wxDateSpan" name="Year"><function type="static wxDateSpan" name="Year"><seealso>

<ref target="wxdatespanyears">Years</ref>

</seealso><description>

Returns a date span object corresponding to one year.

</description></function></member>
<member class="wxDateSpan" name="Years"><function type="static wxDateSpan" name="Years"><parameters><parameter type="int " name="years"></parameter></parameters><seealso>

<ref target="wxdatespanyear">Year</ref>

</seealso><description>

Returns a date span object corresponding to the given number of years.

</description></function></member>
<member class="wxDateSpan" name="operator$==$"><function type="bool" name="operator$==$" suffix="const"><parameters><parameter type="wxDateSpan&amp;" name=" other"></parameter></parameters><description>

Returns <tt> true</tt> if this date span is equal to the other one. Two date spans
are considered equal if and only if they have the same number of years and
months and the same total number of days (counting both days and weeks).

</description></function></member>
<member class="wxDateSpan" name="operator$!=$"><function type="bool" name="operator$!=$" suffix="const"><parameters><parameter type="wxDateSpan&amp;" name=" other"></parameter></parameters><seealso>

<ref target="wxdatespanoperatorequal">operator==</ref>
</seealso><description>

Returns <tt> true</tt> if this date span is different from the other one.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDateTime">
<description>
<p class="classdesc">
wxDateTime class represents an absolute moment in the time.</p>
</description>
<parents></parents>
<includes>
<header name="wx/datetime.h"/></includes>
<constants>

Global constant <tt> wxDefaultDateTime</tt> and synonym for it <tt> wxInvalidDateTime</tt> are defined. This constant will be different from any valid
wxDateTime object.

All the following constants are defined inside wxDateTime class (i.e., to refer to
them you should prepend their names with <tt> wxDateTime::</tt>).

Time zone symbolic names:

<pre>
    enum TZ
    {
        // the time in the current time zone
        Local,

        // zones from GMT (= Greenwhich Mean Time): they're guaranteed to be
        // consequent numbers, so writing something like `GMT0 + offset' is
        // safe if abs(offset) &lt;= 12

        // underscore stands for minus
        GMT_12, GMT_11, GMT_10, GMT_9, GMT_8, GMT_7,
        GMT_6, GMT_5, GMT_4, GMT_3, GMT_2, GMT_1,
        GMT0,
        GMT1, GMT2, GMT3, GMT4, GMT5, GMT6,
        GMT7, GMT8, GMT9, GMT10, GMT11, GMT12,
        // Note that GMT12 and GMT_12 are not the same: there is a difference
        // of exactly one day between them

        // some symbolic names for TZ

        // Europe
        WET = GMT0,                         // Western Europe Time
        WEST = GMT1,                        // Western Europe Summer Time
        CET = GMT1,                         // Central Europe Time
        CEST = GMT2,                        // Central Europe Summer Time
        EET = GMT2,                         // Eastern Europe Time
        EEST = GMT3,                        // Eastern Europe Summer Time
        MSK = GMT3,                         // Moscow Time
        MSD = GMT4,                         // Moscow Summer Time

        // US and Canada
        AST = GMT_4,                        // Atlantic Standard Time
        ADT = GMT_3,                        // Atlantic Daylight Time
        EST = GMT_5,                        // Eastern Standard Time
        EDT = GMT_4,                        // Eastern Daylight Saving Time
        CST = GMT_6,                        // Central Standard Time
        CDT = GMT_5,                        // Central Daylight Saving Time
        MST = GMT_7,                        // Mountain Standard Time
        MDT = GMT_6,                        // Mountain Daylight Saving Time
        PST = GMT_8,                        // Pacific Standard Time
        PDT = GMT_7,                        // Pacific Daylight Saving Time
        HST = GMT_10,                       // Hawaiian Standard Time
        AKST = GMT_9,                       // Alaska Standard Time
        AKDT = GMT_8,                       // Alaska Daylight Saving Time

        // Australia

        A_WST = GMT8,                       // Western Standard Time
        A_CST = GMT12 + 1,                  // Central Standard Time (+9.5)
        A_EST = GMT10,                      // Eastern Standard Time
        A_ESST = GMT11,                     // Eastern Summer Time

        // Universal Coordinated Time = the new and politically correct name
        // for GMT
        UTC = GMT0
    };
</pre>

Month names: Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec and
Inv_Month for an invalid.month value are the values of <tt> wxDateTime::Month</tt>
enum.

Likewise, Sun, Mon, Tue, Wed, Thu, Fri, Sat, and Inv_WeekDay are the values in
<tt> wxDateTime::WeekDay</tt> enum.

Finally, Inv_Year is defined to be an invalid value for year parameter.

<ref target="wxdatetimegetmonthname">GetMonthName()</ref> and
<ref target="wxdatetimegetweekdayname">GetWeekDayName</ref> functions use the followign
flags:

<pre>
    enum NameFlags
    {
        Name_Full = 0x01,       // return full name
        Name_Abbr = 0x02        // return abbreviated name
    };
</pre>

Several functions accept an extra parameter specifying the calendar to use
(although most of them only support now the Gregorian calendar). This
parameters is one of the following values:

<pre>
    enum Calendar
    {
        Gregorian,  // calendar currently in use in Western countries
        Julian      // calendar in use since -45 until the 1582 (or later)
    };
</pre>

Date calculations often depend on the country and wxDateTime allows to set the
country whose conventions should be used using 
<ref target="wxdatetimesetcountry">SetCountry</ref>. It takes one of the following
values as parameter:

<pre>
    enum Country
    {
        Country_Unknown, // no special information for this country
        Country_Default, // set the default country with SetCountry() method
                         // or use the default country with any other

        Country_WesternEurope_Start,
        Country_EEC = Country_WesternEurope_Start,
        France,
        Germany,
        UK,
        Country_WesternEurope_End = UK,

        Russia,

        USA
    };
</pre>

Different parts of the world use different conventions for the week start.
In some countries, the week starts on Sunday, while in others -- on Monday.
The ISO standard doesn't address this issue, so we support both conventions in
the functions whose result depends on it (<ref target="wxdatetimegetweekofyear">GetWeekOfYear</ref> and 
<ref target="wxdatetimegetweekofmonth">GetWeekOfMonth</ref>).

The desired behvaiour may be specified by giving one of the following
constants as argument to these functions:

<pre>
    enum WeekFlags
    {
        Default_First,   // Sunday_First for US, Monday_First for the rest
        Monday_First,    // week starts with a Monday
        Sunday_First     // week starts with a Sunday
    };
</pre>

</constants>
<types>

The type <tt> wxDateTime_t</tt> is typedefed as <tt> unsigned short</tt> and is used
to contain the number of years, hours, minutes, seconds and milliseconds.

</types>
<seealso>

<ref target="wxdatetimeoverview">Date classes overview</ref>,
<ref target="wxtimespan">wxTimeSpan</ref>,
<ref target="wxdatespan">wxDateSpan</ref>,
<ref target="wxcalendarctrl">wxCalendarCtrl</ref>

</seealso>
<members>
<member class="" name=""></member>
<member class="" name=""></member>
<member class="" name=""></member>
<member class="" name=""></member>
<member class="" name=""></member>
<member class="" name=""></member>
<member class="" name=""></member>
<member class="" name=""></member>
<member class="" name=""></member>
<member class="wxDateTime" name="ConvertYearToBC"><function type="static int" name="ConvertYearToBC"><parameters><parameter type="int " name="year"></parameter></parameters><description>

Converts the year in absolute notation (i.e. a number which can be negative,
positive or zero) to the year in BC/AD notation. For the positive years,
nothing is done, but the year 0 is year 1 BC and so for other years there is a
difference of 1.

This function should be used like this:

<pre>
    wxDateTime dt(...);
    int y = dt.GetYear();
    printf(&quot;The year is </pre>

</description></function></member>
<member class="wxDateTime" name="GetAmPmStrings"><function type="static void" name="GetAmPmStrings"><parameters><parameter type="wxString &#42;" name="am"></parameter><parameter type="wxString &#42;" name="pm"></parameter></parameters><description>

Returns the translations of the strings <tt> AM</tt> and <tt> PM</tt> used for time
formatting for the current locale. Either of the pointers may be <tt> NULL</tt> if
the corresponding value is not needed.

</description></function></member>
<member class="wxDateTime" name="GetBeginDST"><function type="static wxDateTime" name="GetBeginDST"><parameters><parameter type="int " name="year" value="Inv_Year"></parameter><parameter type="Country " name="country" value="Country_Default"></parameter></parameters><seealso>

<ref target="wxdatetimegetenddst">GetEndDST</ref>

</seealso><description>

Get the beginning of DST for the given country in the given year (current one
by default). This function suffers from limitations described in
<ref target="tdatedst">DST overview</ref>.

</description></function></member>
<member class="wxDateTime" name="GetCountry"><function type="static Country" name="GetCountry"><seealso>

<ref target="wxdatetimesetcountry">SetCountry</ref>

</seealso><description>

Returns the current default country. The default country is used for DST
calculations, for example.

</description></function></member>
<member class="wxDateTime" name="GetCurrentYear"><function type="static int" name="GetCurrentYear"><parameters><parameter type="Calendar " name="cal" value="Gregorian"></parameter></parameters><description>

Get the current year in given calendar (only Gregorian is currently supported).

</description></function></member>
<member class="wxDateTime" name="GetCurrentMonth"><function type="static Month" name="GetCurrentMonth"><parameters><parameter type="Calendar " name="cal" value="Gregorian"></parameter></parameters><description>

Get the current month in given calendar (only Gregorian is currently supported).

</description></function></member>
<member class="wxDateTime" name="GetCentury"><function type="static int" name="GetCentury"><parameters><parameter type="int " name="year" value="Inv_Year"></parameter></parameters><description>

Get the current century, i.e. first two digits of the year, in given calendar
(only Gregorian is currently supported).

</description></function></member>
<member class="wxDateTime" name="GetEndDST"><function type="static wxDateTime" name="GetEndDST"><parameters><parameter type="int " name="year" value="Inv_Year"></parameter><parameter type="Country " name="country" value="Country_Default"></parameter></parameters><seealso>

<ref target="wxdatetimegetbegindst">GetBeginDST</ref>

</seealso><description>

Returns the end of DST for the given country in the given year (current one by
default).

</description></function></member>
<member class="wxDateTime" name="GetMonthName"><function type="static wxString" name="GetMonthName"><parameters><parameter type="Month " name="month"></parameter><parameter type="NameFlags " name="flags" value="Name_Full"></parameter></parameters><seealso>

<ref target="wxdatetimegetweekdayname">GetWeekDayName</ref>

</seealso><description>

Gets the full (default) or abbreviated (specify <tt> Name_Abbr</tt> name of the
given month.

</description></function></member>
<member class="wxDateTime" name="GetNumberOfDays"><function type="static wxDateTime_t" name="GetNumberOfDays"><parameters><parameter type="int " name="year"></parameter><parameter type="Calendar " name="cal" value="Gregorian"></parameter></parameters><description>

</description></function>
<function type="static wxDateTime_t" name="GetNumberOfDays"><parameters><parameter type="Month " name="month"></parameter><parameter type="int " name="year" value="Inv_Year"></parameter><parameter type="Calendar " name="cal" value="Gregorian"></parameter></parameters><description>

Returns the number of days in the given year or in the given month of the
year.

The only supported value for <i> cal</i> parameter is currently <tt> Gregorian</tt>.

\pythonnote{These two methods are named <tt> GetNumberOfDaysInYear</tt>
and <tt> GetNumberOfDaysInMonth</tt> in wxPython.}

</description></function></member>
<member class="wxDateTime" name="GetWeekDayName"><function type="static wxString" name="GetWeekDayName"><parameters><parameter type="WeekDay " name="weekday"></parameter><parameter type="NameFlags " name="flags" value="Name_Full"></parameter></parameters><seealso>

<ref target="wxdatetimegetmonthname">GetMonthName</ref>

</seealso><description>

Gets the full (default) or abbreviated (specify <tt> Name_Abbr</tt> name of the
given week day.

</description></function></member>
<member class="wxDateTime" name="IsLeapYear"><function type="static bool" name="IsLeapYear"><parameters><parameter type="int " name="year" value="Inv_Year"></parameter><parameter type="Calendar " name="cal" value="Gregorian"></parameter></parameters><description>

Returns <tt> true</tt> if the <i> year</i> is a leap one in the specified calendar.

This functions supports Gregorian and Julian calendars.

</description></function></member>
<member class="wxDateTime" name="IsWestEuropeanCountry"><function type="static bool" name="IsWestEuropeanCountry"><parameters><parameter type="Country " name="country" value="Country_Default"></parameter></parameters><description>

This function returns <tt> true</tt> if the specified (or default) country is one
of Western European ones. It is used internally by wxDateTime to determine the
DST convention and date and time formatting rules.

</description></function></member>
<member class="wxDateTime" name="IsDSTApplicable"><function type="static bool" name="IsDSTApplicable"><parameters><parameter type="int " name="year" value="Inv_Year"></parameter><parameter type="Country " name="country" value="Country_Default"></parameter></parameters><description>

Returns <tt> true</tt> if DST was used n the given year (the current one by
default) in the given country.

</description></function></member>
<member class="wxDateTime" name="Now"><function type="static wxDateTime" name="Now"><seealso>

<ref target="wxdatetimetoday">Today</ref>

</seealso><description>

Returns the object corresponding to the current time.

Example:

<pre>
    wxDateTime now = wxDateTime::Now();
    printf(&quot;Current time in Paris:\t</pre>

Note that this function is accurate up to second: 
<ref target="wxdatetimeunow">wxDateTime::UNow</ref> should be used for better precision
(but it is less efficient and might not be available on all platforms).

</description></function></member>
<member class="wxDateTime" name="SetCountry"><function type="static void" name="SetCountry"><parameters><parameter type="Country " name="country"></parameter></parameters><seealso>

<ref target="wxdatetimegetcountry">GetCountry</ref>

</seealso><description>

Sets the country to use by default. This setting influences the DST
calculations, date formatting and other things.

The possible values for <i> country</i> parameter are enumerated in
<ref target="wxdatetime">wxDateTime constants section</ref>.

</description></function></member>
<member class="wxDateTime" name="Today"><function type="static wxDateTime" name="Today"><seealso>

<ref target="wxdatetimenow">Now</ref>

</seealso><description>

Returns the object corresponding to the midnight of the current day (i.e. the
same as <ref target="wxdatetimenow">Now()</ref>, but the time part is set to 0).

</description></function></member>
<member class="wxDateTime" name="UNow"><function type="static wxDateTime" name="UNow"><seealso>

<ref target="wxdatetimenow">Now</ref>


</seealso><description>

Returns the object corresponding to the current time including the
milliseconds if a function to get time with such precision is available on the
current platform (supported under most Unices and Win32).

</description></function></member>
<member class="wxDateTime" name="wxDateTime"><function type="" name="wxDateTime"><description>

Default constructor. Use one of <tt> Set()</tt> functions to initialize the object
later.

</description></function></member>
<member class="wxDateTime" name="wxDateTime"><function type="wxDateTime&amp;" name="wxDateTime"><parameters><parameter type="time_t " name="timet"></parameter></parameters><description>

Same as <ref target="wxdatetimewxdatetimetimet">Set</ref>.

\pythonnote{This constructor is named <tt> wxDateTimeFromTimeT</tt> in wxPython.}

</description></function></member>
<member class="wxDateTime" name="wxDateTime"><function type="wxDateTime&amp;" name="wxDateTime"><parameters><parameter type="const struct tm&amp; " name="tm"></parameter></parameters><description>

Same as <ref target="wxdatetimewxdatetimetm">Set</ref>

\pythonnote{Unsupported.}

</description></function></member>
<member class="wxDateTime" name="wxDateTime"><function type="wxDateTime&amp;" name="wxDateTime"><parameters><parameter type="double " name="jdn"></parameter></parameters><description>

Same as <ref target="wxdatetimewxdatetimejdn">Set</ref>

\pythonnote{This constructor is named <tt> wxDateTimeFromJDN</tt> in wxPython.}

</description></function></member>
<member class="wxDateTime" name="wxDateTime"><function type="wxDateTime&amp;" name="wxDateTime"><parameters><parameter type="wxDateTime_t " name="hour"></parameter><parameter type="wxDateTime_t " name="minute" value="0"></parameter><parameter type="wxDateTime_t " name="second" value="0"></parameter><parameter type="wxDateTime_t " name="millisec" value="0"></parameter></parameters><description>

Same as <ref target="wxdatetimewxdatetimetime">Set</ref>

\pythonnote{This constructor is named <tt> wxDateTimeFromHMS</tt> in wxPython.}

</description></function></member>
<member class="wxDateTime" name="wxDateTime"><function type="wxDateTime&amp;" name="wxDateTime"><parameters><parameter type="wxDateTime_t " name="day"></parameter><parameter type="Month " name="month" value="Inv_Month"></parameter><parameter type="int" name=" Inv_Year"></parameter><parameter type="wxDateTime_t " name="hour" value="0"></parameter><parameter type="wxDateTime_t " name="minute" value="0"></parameter><parameter type="wxDateTime_t " name="second" value="0"></parameter><parameter type="wxDateTime_t " name="millisec" value="0"></parameter></parameters><description>

Same as <ref target="wxdatetimesetdate">Set</ref>

\pythonnote{This constructor is named <tt> wxDateTimeFromDMY</tt> in wxPython.}

</description></function></member>
<member class="wxDateTime" name="SetToCurrent"><function type="wxDateTime&amp;" name="SetToCurrent"><description>

Sets the date and time of to the current values. Same as assigning the result
of <ref target="wxdatetimenow">Now()</ref> to this object.

</description></function></member>
<member class="wxDateTime" name="Set"><function type="wxDateTime&amp;" name="Set"><parameters><parameter type="time_t " name="timet"></parameter></parameters><description>

Constructs the object from <i> timet</i> value holding the number of seconds
since Jan 1, 1970.

\pythonnote{This method is named <tt> SetTimeT</tt> in wxPython.}

</description></function></member>
<member class="wxDateTime" name="Set"><function type="wxDateTime&amp;" name="Set"><parameters><parameter type="const struct tm&amp; " name="tm"></parameter></parameters><description>

Sets the date and time from the broken down representation in the standard
<tt> tm</tt> structure.

\pythonnote{Unsupported.}

</description></function></member>
<member class="wxDateTime" name="Set"><function type="wxDateTime&amp;" name="Set"><parameters><parameter type="double " name="jdn"></parameter></parameters><description>

Sets the date from the so-called <i> Julian Day Number</i>.

By definition, the Julian Day Number, usually abbreviated as JDN, of a
particular instant is the fractional number of days since 12 hours Universal
Coordinated Time (Greenwich mean noon) on January 1 of the year -4712 in the
Julian proleptic calendar.

\pythonnote{This method is named <tt> SetJDN</tt> in wxPython.}

</description></function></member>
<member class="wxDateTime" name="Set"><function type="wxDateTime&amp;" name="Set"><parameters><parameter type="wxDateTime_t " name="hour"></parameter><parameter type="wxDateTime_t " name="minute" value="0"></parameter><parameter type="wxDateTime_t " name="second" value="0"></parameter><parameter type="wxDateTime_t " name="millisec" value="0"></parameter></parameters><description>

Sets the date to be equal to <ref target="wxdatetimetoday">Today</ref> and the time
from supplied parameters.

\pythonnote{This method is named <tt> SetHMS</tt> in wxPython.}

</description></function></member>
<member class="wxDateTime" name="Set"><function type="wxDateTime&amp;" name="Set"><parameters><parameter type="wxDateTime_t " name="day"></parameter><parameter type="Month " name="month" value="Inv_Month"></parameter><parameter type="int " name="year" value="Inv_Year"></parameter><parameter type="wxDateTime_t " name="hour" value="0"></parameter><parameter type="wxDateTime_t " name="minute" value="0"></parameter><parameter type="wxDateTime_t " name="second" value="0"></parameter><parameter type="wxDateTime_t " name="millisec" value="0"></parameter></parameters><description>

Sets the date and time from the parameters.

</description></function></member>
<member class="wxDateTime" name="ResetTime"><function type="wxDateTime&amp;" name="ResetTime"><description>

Reset time to midnight (00:00:00) without changing the date.

</description></function></member>
<member class="wxDateTime" name="SetYear"><function type="wxDateTime&amp;" name="SetYear"><parameters><parameter type="int " name="year"></parameter></parameters><description>

Sets the year without changing other date components.

</description></function></member>
<member class="wxDateTime" name="SetMonth"><function type="wxDateTime&amp;" name="SetMonth"><parameters><parameter type="Month " name="month"></parameter></parameters><description>

Sets the month without changing other date components.

</description></function></member>
<member class="wxDateTime" name="SetDay"><function type="wxDateTime&amp;" name="SetDay"><parameters><parameter type="wxDateTime_t " name="day"></parameter></parameters><description>

Sets the day without changing other date components.

</description></function></member>
<member class="wxDateTime" name="SetHour"><function type="wxDateTime&amp;" name="SetHour"><parameters><parameter type="wxDateTime_t " name="hour"></parameter></parameters><description>

Sets the hour without changing other date components.

</description></function></member>
<member class="wxDateTime" name="SetMinute"><function type="wxDateTime&amp;" name="SetMinute"><parameters><parameter type="wxDateTime_t " name="minute"></parameter></parameters><description>

Sets the minute without changing other date components.

</description></function></member>
<member class="wxDateTime" name="SetSecond"><function type="wxDateTime&amp;" name="SetSecond"><parameters><parameter type="wxDateTime_t " name="second"></parameter></parameters><description>

Sets the second without changing other date components.

</description></function></member>
<member class="wxDateTime" name="SetMillisecond"><function type="wxDateTime&amp;" name="SetMillisecond"><parameters><parameter type="wxDateTime_t " name="millisecond"></parameter></parameters><description>

Sets the millisecond without changing other date components.

</description></function></member>
<member class="wxDateTime" name="operator$=$"><function type="wxDateTime&amp;" name="operator"><parameters><parameter type="time_t " name="timet"></parameter></parameters><description>

Same as <ref target="wxdatetimesettimet">Set</ref>.

</description></function></member>
<member class="wxDateTime" name="operator$=$"><function type="wxDateTime&amp;" name="operator"><parameters><parameter type="const struct tm&amp; " name="tm"></parameter></parameters><description>

Same as <ref target="wxdatetimesettm">Set</ref>.


</description></function></member>
<member class="wxDateTime" name="IsValid"><function type="bool" name="IsValid" suffix="const"><description>

Returns <tt> true</tt> if the object represents a valid time moment.

</description></function></member>
<member class="wxDateTime" name="GetTm"><function type="Tm" name="GetTm" suffix="const"><parameters><parameter type="const TimeZone&amp; " name="tz" value="Local"></parameter></parameters><description>

Returns broken down representation of the date and time.

</description></function></member>
<member class="wxDateTime" name="GetTicks"><function type="time_t" name="GetTicks" suffix="const"><description>

Returns the number of seconds since Jan 1, 1970. An assert failure will occur
if the date is not in the range covered by <tt> time_t</tt> type.

</description></function></member>
<member class="wxDateTime" name="GetYear"><function type="int" name="GetYear" suffix="const"><parameters><parameter type="const TimeZone&amp; " name="tz" value="Local"></parameter></parameters><description>

Returns the year in the given timezone (local one by default).

</description></function></member>
<member class="wxDateTime" name="GetMonth"><function type="Month" name="GetMonth" suffix="const"><parameters><parameter type="const TimeZone&amp; " name="tz" value="Local"></parameter></parameters><description>

Returns the month in the given timezone (local one by default).

</description></function></member>
<member class="wxDateTime" name="GetDay"><function type="wxDateTime_t" name="GetDay" suffix="const"><parameters><parameter type="const TimeZone&amp; " name="tz" value="Local"></parameter></parameters><description>

Returns the day in the given timezone (local one by default).

</description></function></member>
<member class="wxDateTime" name="GetWeekDay"><function type="WeekDay" name="GetWeekDay" suffix="const"><parameters><parameter type="const TimeZone&amp; " name="tz" value="Local"></parameter></parameters><description>

Returns the week day in the given timezone (local one by default).

</description></function></member>
<member class="wxDateTime" name="GetHour"><function type="wxDateTime_t" name="GetHour" suffix="const"><parameters><parameter type="const TimeZone&amp; " name="tz" value="Local"></parameter></parameters><description>

Returns the hour in the given timezone (local one by default).

</description></function></member>
<member class="wxDateTime" name="GetMinute"><function type="wxDateTime_t" name="GetMinute" suffix="const"><parameters><parameter type="const TimeZone&amp; " name="tz" value="Local"></parameter></parameters><description>

Returns the minute in the given timezone (local one by default).

</description></function></member>
<member class="wxDateTime" name="GetSecond"><function type="wxDateTime_t" name="GetSecond" suffix="const"><parameters><parameter type="const TimeZone&amp; " name="tz" value="Local"></parameter></parameters><description>

Returns the seconds in the given timezone (local one by default).

</description></function></member>
<member class="wxDateTime" name="GetMillisecond"><function type="wxDateTime_t" name="GetMillisecond" suffix="const"><parameters><parameter type="const TimeZone&amp; " name="tz" value="Local"></parameter></parameters><description>

Returns the milliseconds in the given timezone (local one by default).

</description></function></member>
<member class="wxDateTime" name="GetDayOfYear"><function type="wxDateTime_t" name="GetDayOfYear" suffix="const"><parameters><parameter type="const TimeZone&amp; " name="tz" value="Local"></parameter></parameters><description>

Returns the day of the year (in $1\ldots366$ range) in the given timezone
(local one by default).

</description></function></member>
<member class="wxDateTime" name="GetWeekOfYear"><function type="wxDateTime_t" name="GetWeekOfYear" suffix="const"><parameters><parameter type="WeekFlags " name="flags" value="Monday_First"></parameter><parameter type="const TimeZone&amp; " name="tz" value="Local"></parameter></parameters><description>

Returns the number of the week of the year this date is in. The first week of
the year is, according to international standards, the one containing Jan 4.
The week number is in $1\ldots53$ range (52 for non leap years).

The function depends on the <ref target="wxdatetime">week start</ref> convention
specified by the <i> flags</i> argument.

</description></function></member>
<member class="wxDateTime" name="GetWeekOfMonth"><function type="wxDateTime_t" name="GetWeekOfMonth" suffix="const"><parameters><parameter type="WeekFlags " name="flags" value="Monday_First"></parameter><parameter type="const TimeZone&amp; " name="tz" value="Local"></parameter></parameters><description>

Returns the ordinal number of the week in the month (in $1\ldots5$  range).

As <ref target="wxdatetimegetweekofyear">GetWeekOfYear</ref>, this function supports
both conventions for the week start. See the description of these
<ref target="wxdatetime">week start</ref> conventions.

</description></function></member>
<member class="wxDateTime" name="IsWorkDay"><function type="bool" name="IsWorkDay" suffix="const"><parameters><parameter type="Country " name="country" value="Country_Default"></parameter></parameters><description>

Returns <tt> true</tt> is this day is not a holiday in the given country.

</description></function></member>
<member class="wxDateTime" name="IsGregorianDate"><function type="bool" name="IsGregorianDate" suffix="const"><parameters><parameter type="GregorianAdoption " name="country" value="Gr_Standard"></parameter></parameters><description>

Returns <tt> true</tt> if the given date os later than the date of adoption of the
Gregorian calendar in the given country (and hence the Gregorian calendar
calculations make sense for it).


</description></function></member>
<member class="wxDateTime" name="SetFromDOS"><function type="wxDateTime&amp;" name="Set"><parameters><parameter type="unsigned long " name="ddt"></parameter></parameters><description>

Sets the date from the date and time in 
<a href="DOS">http://developer.novell.com/ndk/doc/smscomp/index.html?page=/ndk/doc/smscomp/sms_docs/data/hc2vlu5i.html</a> 
format.

</description></function></member>
<member class="wxDateTime" name="GetAsDOS"><function type="unsigned long" name="GetAsDOS" suffix="const"><description>

Returns the date and time in 
<a href="DOS">http://developer.novell.com/ndk/doc/smscomp/index.html?page=/ndk/doc/smscomp/sms_docs/data/hc2vlu5i.html</a> 
format.


</description></function></member>
<member class="wxDateTime" name="IsEqualTo"><function type="bool" name="IsEqualTo" suffix="const"><parameters><parameter type="const wxDateTime&amp; " name="datetime"></parameter></parameters><description>

Returns <tt> true</tt> if the two dates are strictly identical.

</description></function></member>
<member class="wxDateTime" name="IsEarlierThan"><function type="bool" name="IsEarlierThan" suffix="const"><parameters><parameter type="const wxDateTime&amp; " name="datetime"></parameter></parameters><description>

Returns <tt> true</tt> if this date precedes the given one.

</description></function></member>
<member class="wxDateTime" name="IsLaterThan"><function type="bool" name="IsLaterThan" suffix="const"><parameters><parameter type="const wxDateTime&amp; " name="datetime"></parameter></parameters><description>

Returns <tt> true</tt> if this date is later than the given one.

</description></function></member>
<member class="wxDateTime" name="IsStrictlyBetween"><function type="bool" name="IsStrictlyBetween" suffix="const"><parameters><parameter type="const wxDateTime&amp; " name="t1"></parameter><parameter type="const wxDateTime&amp; " name="t2"></parameter></parameters><seealso>

<ref target="wxdatetimeisbetween">IsBetween</ref>

</seealso><description>

Returns <tt> true</tt> if this date lies strictly between the two others,

</description></function></member>
<member class="wxDateTime" name="IsBetween"><function type="bool" name="IsBetween" suffix="const"><parameters><parameter type="const wxDateTime&amp; " name="t1"></parameter><parameter type="const wxDateTime&amp; " name="t2"></parameter></parameters><seealso>

<ref target="wxdatetimeisstrictlybetween">IsStrictlyBetween</ref>

</seealso><description>

Returns <tt> true</tt> if <ref target="wxdatetimeisstrictlybetween">IsStrictlyBetween</ref>
is <tt> true</tt> or if the date is equal to one of the limit values.

</description></function></member>
<member class="wxDateTime" name="IsSameDate"><function type="bool" name="IsSameDate" suffix="const"><parameters><parameter type="const wxDateTime&amp; " name="dt"></parameter></parameters><description>

Returns <tt> true</tt> if the date is the same without comparing the time parts.

</description></function></member>
<member class="wxDateTime" name="IsSameTime"><function type="bool" name="IsSameTime" suffix="const"><parameters><parameter type="const wxDateTime&amp; " name="dt"></parameter></parameters><description>

Returns <tt> true</tt> if the time is the same (although dates may differ).

</description></function></member>
<member class="wxDateTime" name="IsEqualUpTo"><function type="bool" name="IsEqualUpTo" suffix="const"><parameters><parameter type="const wxDateTime&amp; " name="dt"></parameter><parameter type="const wxTimeSpan&amp; " name="ts"></parameter></parameters><description>

Returns <tt> true</tt> if the date is equal to another one up to the given time
interval, i.e. if the absolute difference between the two dates is less than
this interval.


</description></function></member>
<member class="wxDateTime" name="Add"><function type="wxDateTime" name="Add" suffix="const"><parameters><parameter type="const wxTimeSpan&amp; " name="diff"></parameter></parameters><description>

</description></function>
<function type="wxDateTime&amp;" name="Add"><parameters><parameter type="const wxTimeSpan&amp; " name="diff"></parameter></parameters><description>

</description></function>
<function type="wxDateTime&amp;" name="operator$+=$"><parameters><parameter type="const wxTimeSpan&amp; " name="diff"></parameter></parameters><description>

Adds the given time span to this object.

\pythonnote{This method is named <tt> AddTS</tt> in wxPython.}


</description></function></member>
<member class="wxDateTime" name="Add"><function type="wxDateTime" name="Add" suffix="const"><parameters><parameter type="const wxDateSpan&amp; " name="diff"></parameter></parameters><description>

</description></function>
<function type="wxDateTime&amp;" name="Add"><parameters><parameter type="const wxDateSpan&amp; " name="diff"></parameter></parameters><description>

</description></function>
<function type="wxDateTime&amp;" name="operator$+=$"><parameters><parameter type="const wxDateSpan&amp; " name="diff"></parameter></parameters><description>

Adds the given date span to this object.

\pythonnote{This method is named <tt> AddDS</tt> in wxPython.}


</description></function></member>
<member class="wxDateTime" name="Subtract"><function type="wxDateTime" name="Subtract" suffix="const"><parameters><parameter type="const wxTimeSpan&amp; " name="diff"></parameter></parameters><description>

</description></function>
<function type="wxDateTime&amp;" name="Subtract"><parameters><parameter type="const wxTimeSpan&amp; " name="diff"></parameter></parameters><description>

</description></function>
<function type="wxDateTime&amp;" name="operator$-=$"><parameters><parameter type="const wxTimeSpan&amp; " name="diff"></parameter></parameters><description>

Subtracts the given time span from this object.

\pythonnote{This method is named <tt> SubtractTS</tt> in wxPython.}


</description></function></member>
<member class="wxDateTime" name="Subtract"><function type="wxDateTime" name="Subtract" suffix="const"><parameters><parameter type="const wxDateSpan&amp; " name="diff"></parameter></parameters><description>

</description></function>
<function type="wxDateTime&amp;" name="Subtract"><parameters><parameter type="const wxDateSpan&amp; " name="diff"></parameter></parameters><description>

</description></function>
<function type="wxDateTime&amp;" name="operator$-=$"><parameters><parameter type="const wxDateSpan&amp; " name="diff"></parameter></parameters><description>

Subtracts the given date span from this object.

\pythonnote{This method is named <tt> SubtractDS</tt> in wxPython.}


</description></function></member>
<member class="wxDateTime" name="Subtract"><function type="wxTimeSpan" name="Subtract" suffix="const"><parameters><parameter type="const wxDateTime&amp; " name="dt"></parameter></parameters><description>

Subtracts another date from this one and returns the difference between them
as wxTimeSpan.


</description></function></member>
<member class="wxDateTime" name="ParseRfc822Date"><function type="const wxChar &#42;" name="ParseRfc822Date"><parameters><parameter type="const wxChar&#42; " name="date"></parameter></parameters><description>

Parses the string <i> date</i> looking for a date formatted according to the RFC
822 in it. The exact description of this format may, of course, be found in
the RFC (section 5), but, briefly, this is the format used in the headers of
Internet email messages and one of the most common strings expressing date in
this format may be something like <tt> &quot;Sat, 18 Dec 1999 00:48:30 +0100&quot;</tt>.

Returns <tt> NULL</tt> if the conversion failed, otherwise return the pointer to
the character immediately following the part of the string which could be
parsed. If the entire string contains only the date in RFC 822 format,
the returned pointer will be pointing to a <tt> NUL</tt> character.

This function is intentionally strict, it will return an error for any string
which is not RFC 822 compliant. If you need to parse date formatted in more
free ways, you should use <ref target="wxdatetimeparsedatetime">ParseDateTime</ref> or
<ref target="wxdatetimeparsedate">ParseDate</ref> instead.

</description></function></member>
<member class="wxDateTime" name="ParseFormat"><function type="ParseFormat" name="\param{const wxChar &#42;"><parameters></parameters><description>, \param{const wxChar &#42;}{format = &quot;\
This function parses the string <i> date</i> according to the given
<i> format</i>. The system <tt> strptime(3)</tt> function is used whenever available,
but even if it is not, this function is still implemented (although support
for locale-dependent format specificators such as <tt> &quot;\{\tt &quot;\weekday names in the current locale on all platforms, however.

Please the description of ANSI C function {\tt strftime(3)</tt> for the syntax of
the format string.

The <i> dateDef</i> parameter is used to fill in the fields which could not be
determined from the format string. For example, if the format is <tt> &quot;\(the day of the month), the month and the year are taken from <i> dateDef</i>.
If it is not specified, \helpref{Today</tt>{wxdatetimetoday} is used as the
default date.

Returns <tt> NULL</tt> if the conversion failed, otherwise return the pointer to
the character which stopped the scan.

</description></function></member>
<member class="wxDateTime" name="ParseDateTime"><function type="const wxChar &#42;" name="ParseDateTime"><parameters><parameter type="const wxChar &#42;" name="datetime"></parameter></parameters><description>

Parses the string <i> datetime</i> containing the date and time in free format.
This function tries as hard as it can to interpret the given string as date
and time. Unlike <ref target="wxdatetimeparserfc822date">ParseRfc822Date</ref>, it
will accept anything that may be accepted and will only reject strings which
can not be parsed in any way at all.

Returns <tt> NULL</tt> if the conversion failed, otherwise return the pointer to
the character which stopped the scan.

</description></function></member>
<member class="wxDateTime" name="ParseDate"><function type="const wxChar &#42;" name="ParseDate"><parameters><parameter type="const wxChar &#42;" name="date"></parameter></parameters><description>

This function is like <ref target="wxdatetimeparsedatetime">ParseDateTime</ref>, but it
only allows the date to be specified. It is thus less flexible then 
<ref target="wxdatetimeparsedatetime">ParseDateTime</ref>, but also has less chances to
misinterpret the user input.

Returns <tt> NULL</tt> if the conversion failed, otherwise return the pointer to
the character which stopped the scan.

</description></function></member>
<member class="wxDateTime" name="ParseTime"><function type="const wxChar &#42;" name="ParseTime"><parameters><parameter type="const wxChar &#42;" name="time"></parameter></parameters><description>

This functions is like <ref target="wxdatetimeparsedatetime">ParseDateTime</ref>, but
only allows the time to be specified in the input string.

Returns <tt> NULL</tt> if the conversion failed, otherwise return the pointer to
the character which stopped the scan.

</description></function></member>
<member class="wxDateTime" name="Format"><function type="" name="" suffix="const"><parameters></parameters><description></description></function></member>
<member class="wxDateTime" name="FormatDate"><function type="wxString " name="FormatDate" suffix="const"><description>

Identical to calling <ref target="wxdatetimeformat">Format()</ref> with {\tt &quot;\argument (which means `preferred date representation for the current locale').

</description></function></member>
<member class="wxDateTime" name="FormatTime"><function type="wxString " name="FormatTime" suffix="const"><description>

Identical to calling <ref target="wxdatetimeformat">Format()</ref> with {\tt &quot;\argument (which means `preferred time representation for the current locale').

</description></function></member>
<member class="wxDateTime" name="FormatISODate"><function type="wxString " name="FormatISODate" suffix="const"><description>

This function returns the date representation in the ISO 8601 format
(YYYY-MM-DD).

</description></function></member>
<member class="wxDateTime" name="FormatISOTime"><function type="wxString " name="FormatISOTime" suffix="const"><description>

This function returns the time representation in the ISO 8601 format
(HH:MM:SS).


</description></function></member>
<member class="wxDateTime" name="SetToWeekDayInSameWeek"><function type="wxDateTime&amp;" name="SetToWeekDayInSameWeek"><parameters><parameter type="WeekDay " name="weekday"></parameter><parameter type="WeekFlags" name="flags" value="Monday_First"></parameter></parameters><description>

Adjusts the date so that it will still lie in the same week as before, but its
week day will be the given one.

Returns the reference to the modified object itself.

</description></function></member>
<member class="wxDateTime" name="GetWeekDayInSameWeek"><function type="wxDateTime" name="GetWeekDayInSameWeek" suffix="const"><parameters><parameter type="WeekDay " name="weekday"></parameter><parameter type="WeekFlags" name="flags" value="Monday_First"></parameter></parameters><description>

Returns the copy of this object to which 
<ref target="wxdatetimesettoweekdayinsameweek">SetToWeekDayInSameWeek</ref> was
applied.

</description></function></member>
<member class="wxDateTime" name="SetToNextWeekDay"><function type="wxDateTime&amp;" name="SetToNextWeekDay"><parameters><parameter type="WeekDay " name="weekday"></parameter></parameters><description>

Sets the date so that it will be the first <i> weekday</i> following the current
date.

Returns the reference to the modified object itself.

</description></function></member>
<member class="wxDateTime" name="GetNextWeekDay"><function type="wxDateTime" name="GetNextWeekDay" suffix="const"><parameters><parameter type="WeekDay " name="weekday"></parameter></parameters><description>

Returns the copy of this object to which
<ref target="wxdatetimesettonextweekday">SetToNextWeekDay</ref> was applied.

</description></function></member>
<member class="wxDateTime" name="SetToPrevWeekDay"><function type="wxDateTime&amp;" name="SetToPrevWeekDay"><parameters><parameter type="WeekDay " name="weekday"></parameter></parameters><description>

Sets the date so that it will be the last <i> weekday</i> before the current
date.

Returns the reference to the modified object itself.

</description></function></member>
<member class="wxDateTime" name="GetPrevWeekDay"><function type="wxDateTime" name="GetPrevWeekDay" suffix="const"><parameters><parameter type="WeekDay " name="weekday"></parameter></parameters><description>

Returns the copy of this object to which
<ref target="wxdatetimesettoprevweekday">SetToPrevWeekDay</ref> was applied.

</description></function></member>
<member class="wxDateTime" name="SetToWeekDay"><function type="bool" name="SetToWeekDay"><parameters><parameter type="WeekDay " name="weekday"></parameter><parameter type="int " name="n" value="1"></parameter><parameter type="Month " name="month" value="Inv_Month"></parameter><parameter type="int " name="year" value="Inv_Year"></parameter></parameters><description>

Sets the date to the <i> n</i>-th <i> weekday</i> in the given month of the given
year (the current month and year are used by default). The parameter <i> n</i>
may be either positive (counting from the beginning of the month) or negative
(counting from the end of it).

For example, <tt> SetToWeekDay(2, wxDateTime::Wed)</tt> will set the date to the
second Wednesday in the current month and
<tt> SetToWeekDay(-1, wxDateTime::Sun)</tt> -- to the last Sunday in it.

Returns <tt> true</tt> if the date was modified successfully, <tt> false</tt>
otherwise meaning that the specified date doesn't exist.

</description></function></member>
<member class="wxDateTime" name="GetWeekDay"><function type="wxDateTime" name="GetWeekDay" suffix="const"><parameters><parameter type="WeekDay " name="weekday"></parameter><parameter type="int " name="n" value="1"></parameter><parameter type="Month " name="month" value="Inv_Month"></parameter><parameter type="int " name="year" value="Inv_Year"></parameter></parameters><description>

Returns the copy of this object to which
<ref target="wxdatetimesettoweekday">SetToWeekDay</ref> was applied.

</description></function></member>
<member class="wxDateTime" name="SetToLastWeekDay"><function type="bool" name="SetToLastWeekDay"><parameters><parameter type="WeekDay " name="weekday"></parameter><parameter type="Month " name="month" value="Inv_Month"></parameter><parameter type="int " name="year" value="Inv_Year"></parameter></parameters><description>

The effect of calling this function is the same as of calling
<tt> SetToWeekDay(-1, weekday, month, year)</tt>. The date will be set to the last
<i> weekday</i> in the given month and year (the current ones by default).

Always returns <tt> true</tt>.

</description></function></member>
<member class="wxDateTime" name="GetLastWeekDay"><function type="wxDateTime" name="GetLastWeekDay"><parameters><parameter type="WeekDay " name="weekday"></parameter><parameter type="Month " name="month" value="Inv_Month"></parameter><parameter type="int " name="year" value="Inv_Year"></parameter></parameters><description>

Returns the copy of this object to which
<ref target="wxdatetimesettolastweekday">SetToLastWeekDay</ref> was applied.

</description></function></member>
<member class="wxDateTime" name="SetToTheWeek"><function type="bool" name="SetToTheWeek"><parameters><parameter type="wxDateTime_t " name="numWeek"></parameter><parameter type="WeekDay " name="weekday" value="Mon"></parameter><parameter type="WeekFlags" name="flags" value="Monday_First"></parameter></parameters><description>

Set the date to the given <i> weekday</i> in the week with given number
<i> numWeek</i>. The number should be in range $1\ldots53$ and <tt> false</tt> will
be returned if the specified date doesn't exist. <tt> true</tt> is returned if the
date was changed successfully.

</description></function></member>
<member class="wxDateTime" name="GetWeek"><function type="wxDateTime" name="GetWeek" suffix="const"><parameters><parameter type="wxDateTime_t " name="numWeek"></parameter><parameter type="WeekDay " name="weekday" value="Mon"></parameter><parameter type="WeekFlags" name="flags" value="Monday_First"></parameter></parameters><description>

Returns the copy of this object to which
<ref target="wxdatetimesettotheweek">SetToTheWeek</ref> was applied.

</description></function></member>
<member class="wxDateTime" name="SetToLastMonthDay"><function type="wxDateTime&amp;" name="SetToLastMonthDay"><parameters><parameter type="Month " name="month" value="Inv_Month"></parameter><parameter type="int " name="year" value="Inv_Year"></parameter></parameters><description>

Sets the date to the last day in the specified month (the current one by
default).

Returns the reference to the modified object itself.

</description></function></member>
<member class="wxDateTime" name="GetLastMonthDay"><function type="wxDateTime" name="GetLastMonthDay" suffix="const"><parameters><parameter type="Month " name="month" value="Inv_Month"></parameter><parameter type="int " name="year" value="Inv_Year"></parameter></parameters><description>

Returns the copy of this object to which
<ref target="wxdatetimesettolastmonthday">SetToLastMonthDay</ref> was applied.

</description></function></member>
<member class="wxDateTime" name="SetToYearDay"><function type="wxDateTime&amp;" name="SetToYearDay"><parameters><parameter type="wxDateTime_t " name="yday"></parameter></parameters><description>

Sets the date to the day number <i> yday</i> in the same year (i.e., unlike the
other functions, this one does not use the current year). The day number
should be in the range $1\ldots366$ for the leap years and $1\ldots365$ for
the other ones.

Returns the reference to the modified object itself.

</description></function></member>
<member class="wxDateTime" name="GetYearDay"><function type="wxDateTime" name="GetYearDay" suffix="const"><parameters><parameter type="wxDateTime_t " name="yday"></parameter></parameters><description>

Returns the copy of this object to which
<ref target="wxdatetimesettoyearday">SetToYearDay</ref> was applied.


</description></function></member>
<member class="wxDateTime" name="GetJulianDayNumber"><function type="double" name="GetJulianDayNumber" suffix="const"><seealso>

<ref target="wxdatetimegetmodifiedjuliandaynumber">GetModifiedJulianDayNumber</ref>

</seealso><description>

Returns the <ref target="wxdatetimesetjdn">JDN</ref> corresponding to this date. Beware
of rounding errors!

</description></function></member>
<member class="wxDateTime" name="GetJDN"><function type="double" name="GetJDN" suffix="const"><description>

Synonym for <ref target="wxdatetimegetjuliandaynumber">GetJulianDayNumber</ref>.

</description></function></member>
<member class="wxDateTime" name="GetModifiedJulianDayNumber"><function type="double" name="GetModifiedJulianDayNumber" suffix="const"><description>

Returns the <i> Modified Julian Day Number</i> (MJD) which is, by definition,
equal to $JDN - 2400000.5$. The MJDs are simpler to work with as the integral
MJDs correspond to midnights of the dates in the Gregorian calendar and not th
noons like JDN. The MJD 0 is Nov 17, 1858.

</description></function></member>
<member class="wxDateTime" name="GetMJD"><function type="double" name="GetMJD" suffix="const"><description>

Synonym for <ref target="wxdatetimegetmodifiedjuliandaynumber">GetModifiedJulianDayNumber</ref>.

</description></function></member>
<member class="wxDateTime" name="GetRataDie"><function type="double" name="GetRataDie" suffix="const"><description>

Return the <i> Rata Die number</i> of this date.

By definition, the Rata Die number is a date specified as the number of days
relative to a base date of December 31 of the year 0. Thus January 1 of the
year 1 is Rata Die day 1.


</description></function></member>
<member class="wxDateTime" name="ToTimezone"><function type="wxDateTime" name="ToTimezone" suffix="const"><parameters><parameter type="const TimeZone&amp; " name="tz"></parameter><parameter type="bool " name="noDST" value="false"></parameter></parameters><description>

Transform the date to the given time zone. If <i> noDST</i> is <tt> true</tt>, no
DST adjustments will be made.

Returns the date in the new time zone.

</description></function></member>
<member class="wxDateTime" name="MakeTimezone"><function type="wxDateTime&amp;" name="MakeTimezone"><parameters><parameter type="const TimeZone&amp; " name="tz"></parameter><parameter type="bool " name="noDST" value="false"></parameter></parameters><description>

Modifies the object in place to represent the date in another time zone. If
<i> noDST</i> is <tt> true</tt>, no DST adjustments will be made.

</description></function></member>
<member class="wxDateTime" name="ToGMT"><function type="wxDateTime" name="ToGMT" suffix="const"><parameters><parameter type="bool " name="noDST" value="false"></parameter></parameters><description>

This is the same as calling <ref target="wxdatetimetotimezone">ToTimezone</ref> with
the argument <tt> GMT0</tt>.

</description></function></member>
<member class="wxDateTime" name="MakeGMT"><function type="wxDateTime&amp;" name="MakeGMT"><parameters><parameter type="bool " name="noDST" value="false"></parameter></parameters><description>

This is the same as calling <ref target="wxdatetimemaketimezone">MakeTimezone</ref> with
the argument <tt> GMT0</tt>.

</description></function></member>
<member class="wxDateTime" name="IsDST"><function type="int" name="IsDST" suffix="const"><parameters><parameter type="Country " name="country" value="Country_Default"></parameter></parameters><seealso>

<ref target="wxdatetimegetbegindst">GetBeginDST</ref> and
<ref target="wxdatetimegetenddst">GetEndDST</ref>
</seealso><description>

Returns <tt> true</tt> if the DST is applied for this date in the given country.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDateTimeHolidayAuthority">
<members>
</members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDateTimeWorkDays">
<members>
</members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDebugContext">
<description>
<p class="classdesc">
A class for performing various debugging and memory tracing
operations. Full functionality (such as printing out objects
currently allocated) is only present in a debugging build of wxWindows,
i.e. if the __WXDEBUG__ symbol is defined. wxDebugContext
and related functions and macros can be compiled out by setting
wxUSE_DEBUG_CONTEXT to 0 is setup.h</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/memory.h"/></includes>
<seealso>

\overview{Overview}{wxdebugcontextoverview}

</seealso>
<members>
<member class="wxDebugContext" name="Check"><function type="int" name="Check"><returnvalue>

Returns the number of errors,
so a value of zero represents success. Returns -1 if an error
was detected that prevents further checking.

</returnvalue><description>

Checks the memory blocks for errors, starting from the currently set
checkpoint.

</description></function></member>
<member class="wxDebugContext" name="Dump"><function type="bool" name="Dump"><returnvalue>

true if the function succeeded, false otherwise.

</returnvalue><description>

Performs a memory dump from the currently set checkpoint, writing to the
current debug stream. Calls the <b> Dump</b> member function for each wxObject
derived instance.

</description></function></member>
<member class="wxDebugContext" name="GetCheckPrevious"><function type="bool" name="GetCheckPrevious"><seealso>

<ref target="wxdebugcontextsetcheckprevious">wxDebugContext::SetCheckPrevious</ref>

</seealso><description>

Returns true if the memory allocator checks all previous memory blocks for errors.
By default, this is false since it slows down execution considerably.

</description></function></member>
<member class="wxDebugContext" name="GetDebugMode"><function type="bool" name="GetDebugMode"><seealso>

<ref target="wxdebugcontextsetdebugmode">wxDebugContext::SetDebugMode</ref>

</seealso><description>

Returns true if debug mode is on. If debug mode is on, the wxObject new and delete
operators store or use information about memory allocation. Otherwise,
a straight malloc and free will be performed by these operators.

</description></function></member>
<member class="wxDebugContext" name="GetLevel"><function type="int" name="GetLevel"><seealso>

<ref target="wxdebugcontextsetlevel">wxDebugContext::SetLevel</ref>

</seealso><description>

Gets the debug level (default 1). The debug level is used by the wxTraceLevel function and
the WXTRACELEVEL macro to specify how detailed the trace information is; setting
a different level will only have an effect if trace statements in the application
specify a value other than one.

This is obsolete, replaced by <ref target="wxlog">wxLog</ref> functionality.

</description></function></member>
<member class="wxDebugContext" name="GetStream"><function type="ostream&amp;" name="GetStream"><seealso>

<ref target="wxdebugcontextsetstream">wxDebugContext::SetStream</ref>

</seealso><description>

Returns the output stream associated with the debug context.

This is obsolete, replaced by <ref target="wxlog">wxLog</ref> functionality.

</description></function></member>
<member class="wxDebugContext" name="GetStreamBuf"><function type="streambuf&#42;" name="GetStreamBuf"><description>

Returns a pointer to the output stream buffer associated with the debug context.
There may not necessarily be a stream buffer if the stream has been set
by the user.

This is obsolete, replaced by <ref target="wxlog">wxLog</ref> functionality.

</description></function></member>
<member class="wxDebugContext" name="HasStream"><function type="bool" name="HasStream"><seealso>

<ref target="wxdebugcontextsetstream">wxDebugContext::SetStream</ref><ref target="wxdebugcontextgetstream">wxDebugContext::GetStream</ref>

</seealso><description></description></function></member>
<member class="wxDebugContext" name="PrintClasses"><function type="bool" name="PrintClasses"><seealso>

<ref target="wxdebugcontextprintstatistics">wxDebugContext::PrintStatistics</ref>

</seealso><description>

Prints a list of the classes declared in this application, giving derivation
and whether instances of this class can be dynamically created.

</description></function></member>
<member class="wxDebugContext" name="PrintStatistics"><function type="bool" name="PrintStatistics"><parameters><parameter type="bool" name="detailed" value="true">If true, the function will also print how many
objects of each class have been allocated, and the space taken by
these class instances.</parameter></parameters><seealso>

<ref target="wxdebugcontextprintstatistics">wxDebugContext::PrintStatistics</ref>

</seealso><description>

Performs a statistics analysis from the currently set checkpoint, writing
to the current debug stream. The number of object and non-object
allocations is printed, together with the total size.





</description></function></member>
<member class="wxDebugContext" name="SetCheckpoint"><function type="void" name="SetCheckpoint"><parameters><parameter type="bool" name="all" value="false">If true, the checkpoint is reset to include all
memory allocations since the program started.</parameter></parameters><description>

Sets the current checkpoint: Dump and PrintStatistics operations will
be performed from this point on. This allows you to ignore allocations
that have been performed up to this point.





</description></function></member>
<member class="wxDebugContext" name="SetCheckPrevious"><function type="void" name="SetCheckPrevious"><parameters><parameter type="bool" name=" check"></parameter></parameters><seealso>

<ref target="wxdebugcontextgetcheckprevious">wxDebugContext::GetCheckPrevious</ref>

</seealso><description>

Tells the memory allocator to check all previous memory blocks for errors.
By default, this is false since it slows down execution considerably.

</description></function></member>
<member class="wxDebugContext" name="SetDebugMode"><function type="void" name="SetDebugMode"><parameters><parameter type="bool" name=" debug"></parameter></parameters><seealso>

<ref target="wxdebugcontextgetdebugmode">wxDebugContext::GetDebugMode</ref>

</seealso><description>

Sets the debug mode on or off. If debug mode is on, the wxObject new and delete
operators store or use information about memory allocation. Otherwise,
a straight malloc and free will be performed by these operators.

By default, debug mode is on if __WXDEBUG__ is defined. If the application
uses this function, it should make sure that all object memory allocated
is deallocated with the same value of debug mode. Otherwise, the
delete operator might try to look for memory information that does not
exist.

</description></function></member>
<member class="wxDebugContext" name="SetFile"><function type="bool" name="SetFile"><parameters><parameter type="const wxString&amp; " name="filename"></parameter></parameters><description>

Sets the current debug file and creates a stream. This will delete any existing
stream and stream buffer. By default, the debug context stream
outputs to the debugger (Windows) or standard error (other platforms).

</description></function></member>
<member class="wxDebugContext" name="SetLevel"><function type="void" name="SetLevel"><parameters><parameter type="int" name=" level"></parameter></parameters><seealso>

<ref target="wxdebugcontextgetlevel">wxDebugContext::GetLevel</ref>

</seealso><description>

Sets the debug level (default 1). The debug level is used by the wxTraceLevel function and
the WXTRACELEVEL macro to specify how detailed the trace information is; setting
a different level will only have an effect if trace statements in the application
specify a value other than one.

This is obsolete, replaced by <ref target="wxlog">wxLog</ref> functionality.

</description></function></member>
<member class="wxDebugContext" name="SetStandardError"><function type="bool" name="SetStandardError"><description>

Sets the debugging stream to be the debugger (Windows) or standard error (other platforms).
This is the default setting. The existing stream will be flushed and deleted.

This is obsolete, replaced by <ref target="wxlog">wxLog</ref> functionality.

</description></function></member>
<member class="wxDebugContext" name="SetStream"><function type="void" name="SetStream"><parameters><parameter type="ostream&#42; " name="stream">Stream to associate with the debug context. Do not set this to NULL.</parameter><parameter type="streambuf&#42; " name="streamBuf" value="NULL">Stream buffer to associate with the debug context.</parameter></parameters><seealso>

<ref target="wxdebugcontextgetstream">wxDebugContext::GetStream</ref><ref target="wxdebugcontexthasstream">wxDebugContext::HasStream</ref>
</seealso><description></description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDebugStreamBuf">
<description>
<p class="classdesc">
This class allows you to treat debugging output in a similar
(stream-based) fashion on different platforms. Under
Windows, an ostream constructed with this buffer outputs
to the debugger, or other program that intercepts debugging
output. On other platforms, the output goes to standard error (cerr).</p><p class="classdesc">This is soon to be obsolete, replaced by <ref target="wxlog">wxLog</ref> functionality.</p>
</description>
<example>

<pre>
  wxDebugStreamBuf streamBuf;
  ostream stream(&amp;streamBuf);

  stream &lt;&lt; &quot;Hello world!&quot; &lt;&lt; endl;
</pre>

</example>
<parents>
<classref name="streambuf"/>

</parents>
<includes>
<header name="wx/memory.h"/></includes>
<members>
</members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDialUpEvent">
<description>
<p class="classdesc">
This is the event class for the dialup events sent by 
<ref target="wxdialupmanager">wxDialUpManager</ref>.</p>
</description>
<parents>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/dialup.h"/></includes>
<members>
<member class="wxDialUpEvent" name="wxDialUpEvent"><function type="" name="wxDialUpEvent"><parameters><parameter type="bool " name="isConnected"></parameter><parameter type="bool " name="isOwnEvent"></parameter></parameters><description>

Constructor is only used by <ref target="wxdialupmanager">wxDialUpManager</ref>.

</description></function></member>
<member class="wxDialUpEvent" name="IsConnectedEvent"><function type="bool" name="IsConnectedEvent" suffix="const"><description>

Is this a <tt> CONNECTED</tt> or <tt> DISCONNECTED</tt> event? In other words, does it
notify about transition from offline to online state or vice versa?

</description></function></member>
<member class="wxDialUpEvent" name="IsOwnEvent"><function type="bool" name="IsOwnEvent" suffix="const"><description>

Does this event come from wxDialUpManager::Dial() or from some extrenal
process (i.e. does it result from our own attempt to establish the
connection)?

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="N"/></supported>
</class><class name="wxDialUpManager">
<description>
<p class="classdesc">
This class encapsulates functions dealing with verifying the connection status
of the workstation (connected to the Internet via a direct connection,
connected through a modem or not connected at all) and to establish this
connection if possible/required (i.e. in the case of the modem).</p><p class="classdesc">The program may also wish to be notified about the change in the connection
status (for example, to perform some action when the user connects to the
network the next time or, on the contrary, to stop receiving data from the net
when the user hangs up the modem). For this, you need to use one of the event
macros described below.</p><p class="classdesc">This class is different from other wxWindows classes in that there is at most
one instance of this class in the program accessed via 
<ref target="wxdialupmanagercreate">wxDialUpManager::Create()</ref> and you can't
create the objects of this class directly.</p>
</description>
<parents></parents>
<includes>
<header name="wx/dialup.h"/></includes>
<events>
<event name="EVT_DIALUP_CONNECTED(func)">A connection with the network was established.</event><event name="EVT_DIALUP_DISCONNECTED(func)">The connection with the network was lost.</event></events>
<seealso>

<ref target="sampledialup">dialup sample</ref><br/>
<ref target="wxdialupevent">wxDialUpEvent</ref>

</seealso>
<members>
<member class="wxDialUpManager" name="Create"><function type="wxDialUpManager&#42;" name="Create"><description>

This function should create and return the object of the platform-specific
class derived from wxDialUpManager. You should delete the pointer when you are
done with it.

</description></function></member>
<member class="wxDialUpManager" name="IsOk"><function type="bool" name="IsOk" suffix="const"><description>

Returns <tt> true</tt> if the dialup manager was initialized correctly. If this
function returns <tt> false</tt>, no other functions will work neither, so it is a
good idea to call this function and check its result before calling any other
wxDialUpManager methods

</description></function></member>
<member class="wxDialUpManager" name="~wxDialUpManager"><function type="" name="~wxDialUpManager"><description>

Destructor.

</description></function></member>
<member class="wxDialUpManager" name="GetISPNames"><function type="size_t" name="GetISPNames" suffix="const"><parameters><parameter type="wxArrayString&amp; " name="names"></parameter></parameters><description>

This function is only implemented under Windows.

Fills the array with the names of all possible values for the first
parameter to <ref target="wxdialupmanagerdial">Dial()</ref> on this machine and returns
their number (may be 0).

</description></function></member>
<member class="wxDialUpManager" name="Dial"><function type="bool" name="Dial"><parameters><parameter type="const wxString&amp; " name="nameOfISP" value="wxEmptyString"></parameter><parameter type="const wxString&amp; " name="username" value="wxEmptyString"></parameter><parameter type="const wxString&amp; " name="password" value="wxEmptyString"></parameter><parameter type="bool " name="async" value="true"></parameter></parameters><description>

Dial the given ISP, use <i> username</i> and <i> password</i> to authenticate.

The parameters are only used under Windows currently, for Unix you should use 
<ref target="wxdialupmanagersetconnectcommand">SetConnectCommand</ref> to customize this
functions behaviour.

If no <i> nameOfISP</i> is given, the function will select the default one
(proposing the user to choose among all connections defined on this machine)
and if no username and/or password are given, the function will try to do
without them, but will ask the user if really needed.

If <i> async</i> parameter is <tt> false</tt>, the function waits until the end of dialing
and returns <tt> true</tt> upon successful completion.

If <i> async</i> is <tt> true</tt>, the function only initiates the connection and
returns immediately - the result is reported via events (an event is sent
anyhow, but if dialing failed it will be a DISCONNECTED one).

</description></function></member>
<member class="wxDialUpManager" name="IsDialing"><function type="bool" name="IsDialing" suffix="const"><seealso>

<ref target="wxdialupmanagerdial">Dial</ref>

</seealso><description>

Returns true if (async) dialing is in progress.

</description></function></member>
<member class="wxDialUpManager" name="CancelDialing"><function type="bool" name="CancelDialing"><seealso>

<ref target="wxdialupmanagerisdialing">IsDialing</ref>

</seealso><description>

Cancel dialing the number initiated with <ref target="wxdialupmanagerdial">Dial</ref> 
with async parameter equal to <tt> true</tt>.

Note that this won't result in DISCONNECTED event being sent.

</description></function></member>
<member class="wxDialUpManager" name="HangUp"><function type="bool" name="HangUp"><description>

Hang up the currently active dial up connection.

</description></function></member>
<member class="wxDialUpManager" name="IsAlwaysOnline"><function type="bool" name="IsAlwaysOnline" suffix="const"><description>

Returns <tt> true</tt> if the computer has a permanent network connection (i.e. is
on a LAN) and so there is no need to use Dial() function to go online.

<b> NB:</b> this functions tries to guess the result and it is not always
guaranteed to be correct, so it is better to ask user for
confirmation or give him a possibility to override it.

</description></function></member>
<member class="wxDialUpManager" name="IsOnline"><function type="bool" name="IsOnline" suffix="const"><description>

Returns <tt> true</tt> if the computer is connected to the network: under Windows,
this just means that a RAS connection exists, under Unix we check that
the &quot;well-known host&quot; (as specified by 
<ref target="wxdialupmanagersetwellknownhost">SetWellKnownHost</ref>) is reachable.

</description></function></member>
<member class="wxDialUpManager" name="SetOnlineStatus"><function type="void" name="SetOnlineStatus"><parameters><parameter type="bool " name="isOnline" value="true"></parameter></parameters><seealso>

<ref target="wxdialupmanagerisonline">IsOnline</ref>

</seealso><description>

Sometimes the built-in logic for determining the online status may fail,
so, in general, the user should be allowed to override it. This function
allows to forcefully set the online status - whatever our internal
algorithm may think about it.

</description></function></member>
<member class="wxDialUpManager" name="EnableAutoCheckOnlineStatus"><function type="bool" name="EnableAutoCheckOnlineStatus"><parameters><parameter type="size_t " name="nSeconds" value="60"></parameter></parameters><description>

Enable automatic checks for the connection status and sending of 
<tt> wxEVT_DIALUP_CONNECTED/wxEVT_DIALUP_DISCONNECTED</tt> events. The interval
parameter is only for Unix where we do the check manually and specifies how
often should we repeat the check (each minute by default). Under Windows, the
notification about the change of connection status is sent by the system and so
we don't do any polling and this parameter is ignored.

Returns <tt> false</tt> if couldn't set up automatic check for online status.

</description></function></member>
<member class="wxDialUpManager" name="DisableAutoCheckOnlineStatus"><function type="void" name="DisableAutoCheckOnlineStatus"><description>

Disable automatic check for connection status change - notice that the
<tt> wxEVT_DIALUP_XXX</tt> events won't be sent any more neither.

</description></function></member>
<member class="wxDialUpManager" name="SetWellKnownHost"><function type="void" name="SetWellKnownHost"><parameters><parameter type="const wxString&amp; " name="hostname"></parameter><parameter type="int " name="portno" value="80"></parameter></parameters><description>

This method is for Unix only.

Under Unix, the value of well-known host is used to check whether we're
connected to the internet. It is unused under Windows, but this function
is always safe to call. The default value is <tt> www.yahoo.com:80</tt>.

</description></function></member>
<member class="wxDialUpManager" name="SetConnectCommand"><function type="" name="SetConnectCommand"><parameters><parameter type="const wxString&amp; " name="commandDial" value="wxT(&quot;/usr/bin/pon&quot;)"></parameter><parameter type="const wxString&amp; " name="commandHangup" value="wxT(&quot;/usr/bin/poff&quot;)"></parameter></parameters><seealso>

<ref target="wxdialupmanagerdial">Dial</ref>

</seealso><description>

This method is for Unix only.

Sets the commands to start up the network and to hang up again.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="N"/></supported>
</class><class name="wxDialog">
<description>
<p class="classdesc">
A dialog box is a window with a title bar and sometimes a system menu, which
can be moved around the screen. It can contain controls and other windows and
is usually used to allow the user to make some choice or to answer a question.</p>
</description>
<remarks>

There are two kinds of dialog -- <i> modal</i>\ and <i> modeless</i>. A modal dialog
blocks program flow and user input on other windows until it is dismissed,
whereas a modeless dialog behaves more like a frame in that program flow
continues, and input on other windows is still possible. To show a modal dialog
you should use <ref target="wxdialogshowmodal">ShowModal</ref> method while to show
dialog modelessly you simply use <ref target="wxdialogshow">Show</ref>, just as with the
frames.

Note that the modal dialogs are one of the very few examples of
wxWindow-derived objects which may be created on the stack and not on the heap.
In other words, although this code snippet
<pre>
    void AskUser()
    {
        MyAskDialog &#42;dlg = new MyAskDialog(...);
        if ( dlg-&gt;ShowModal() == wxID_OK )
            ...
        //else: dialog was cancelled or some another button pressed

        dlg-&gt;Destroy();
    }
</pre>
works, you can also achieve the same result by using a simpler code fragment
below:
<pre>
    void AskUser()
    {
        MyAskDialog dlg(...);
        if ( dlg.ShowModal() == wxID_OK )
            ...

        // no need to call Destroy() here
    }
</pre>

An application can define an <ref target="wxcloseevent">wxCloseEvent</ref> handler for
the dialog to respond to system close events.

</remarks>
<parents>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/dialog.h"/></includes>
<windowstyles>
<style name="wxCAPTION">Puts a caption on the dialog box.</style><style name="wxDEFAULT_DIALOG_STYLE">Equivalent to a combination of wxCAPTION, wxCLOSE_BOX and wxSYSTEM_MENU (the last one is not used under Unix)</style><style name="wxRESIZE_BORDER">Display a resizeable frame around the window.</style><style name="wxSYSTEM_MENU">Display a system menu.</style><style name="wxCLOSE_BOX">Displays a close box on the frame.</style><style name="wxTHICK_FRAME">Display a thick frame around the window.</style><style name="wxSTAY_ON_TOP">The dialog stays on top of all other windows (Windows only).</style><style name="wxNO_3D">Under Windows, specifies that the child controls
should not have 3D borders unless specified in the control.</style><style name="wxDIALOG_NO_PARENT">By default, the dialogs created
with {\tt NULL</style><style name="wxDIALOG_EX_CONTEXTHELP">Under Windows, puts a query button on the
caption. When pressed, Windows will go into a context-sensitive help mode and wxWindows will send
a wxEVT_HELP event if the user clicked on an application window. {\it Note</style></windowstyles>
<seealso>

<ref target="wxdialogoverview">wxDialog overview</ref><ref target="wxframe">wxFrame</ref>,
<ref target="validatoroverview">Validator overview</ref>

</seealso>
<members>
<member class="wxDialog" name="wxDialog"><function type="" name="wxDialog"><description>

Default constructor.

</description></function>
<function type="" name="wxDialog"><parameters><parameter type="wxWindow&#42; " name="parent">Can be NULL, a frame or another dialog box.</parameter><parameter type="wxWindowID " name="id">An identifier for the dialog. A value of -1 is taken to mean a default.</parameter><parameter type="const wxString&amp; " name="title">The title of the dialog.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">The dialog position. A value of (-1, -1) indicates a default position, chosen by
either the windowing system or wxWindows, depending on platform.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">The dialog size. A value of (-1, -1) indicates a default size, chosen by
either the windowing system or wxWindows, depending on platform.</parameter><parameter type="long" name="style" value="wxDEFAULT_DIALOG_STYLE">The window style. See <ref target="wxdialog">wxDialog</ref>.</parameter><parameter type="const wxString&amp; " name="name" value="``dialogBox&quot;">Used to associate a name with the window,
allowing the application user to set Motif resource values for
individual dialog boxes.</parameter></parameters><seealso>

<ref target="wxdialogcreate">wxDialog::Create</ref>

</seealso><description>

Constructor.

















</description></function></member>
<member class="wxDialog" name="~wxDialog"><function type="" name="~wxDialog"><description>

Destructor. Deletes any child windows before deleting the physical window.

</description></function></member>
<member class="wxDialog" name="Centre"><function type="void" name="Centre"><parameters><parameter type="int" name="direction" value="wxBOTH">May be <tt> wxHORIZONTAL</tt>, <tt> wxVERTICAL</tt> or <tt> wxBOTH</tt>.</parameter></parameters><description>

Centres the dialog box on the display.





</description></function></member>
<member class="wxDialog" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxString&amp; " name="title"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="wxDEFAULT_DIALOG_STYLE"></parameter><parameter type="const wxString&amp; " name="name" value="``dialogBox&quot;"></parameter></parameters><description>

Used for two-step dialog box construction. See <ref target="wxdialogconstr">wxDialog::wxDialog</ref>
for details.

</description></function></member>
<member class="wxDialog" name="EndModal"><function type="void" name="EndModal"><parameters><parameter type="int " name="retCode">The value that should be returned by <b> ShowModal</b>.</parameter></parameters><seealso>

<ref target="wxdialogshowmodal">wxDialog::ShowModal</ref>,
<ref target="wxdialoggetreturncode">wxDialog::GetReturnCode</ref>,
<ref target="wxdialogsetreturncode">wxDialog::SetReturnCode</ref>

</seealso><description>

Ends a modal dialog, passing a value to be returned from the <ref target="wxdialogshowmodal">wxDialog::ShowModal</ref>
invocation.





</description></function></member>
<member class="wxDialog" name="GetReturnCode"><function type="int" name="GetReturnCode"><seealso>

<ref target="wxdialogsetreturncode">wxDialog::SetReturnCode</ref><ref target="wxdialogshowmodal">wxDialog::ShowModal</ref>,
<ref target="wxdialogendmodal">wxDialog::EndModal</ref>

</seealso><description></description></function></member>
<member class="wxDialog" name="GetTitle"><function type="wxString" name="GetTitle" suffix="const"><description>

Returns the title of the dialog box.

</description></function></member>
<member class="wxDialog" name="Iconize"><function type="void" name="Iconize"><parameters><parameter type="const bool" name=" iconize"></parameter></parameters><remarks>

Note that in Windows, iconization has no effect since dialog boxes cannot be
iconized. However, applications may need to explicitly restore dialog
boxes under Motif which have user-iconizable frames, and under Windows
calling <tt> Iconize(false)</tt> will bring the window to the front, as does
<tt> Show(true)</tt>.

</remarks><description>

Iconizes or restores the dialog. Windows only.





</description></function></member>
<member class="wxDialog" name="IsIconized"><function type="bool" name="IsIconized" suffix="const"><remarks>

Always returns false under Windows since dialogs cannot be iconized.

</remarks><description>

Returns true if the dialog box is iconized. Windows only.

</description></function></member>
<member class="wxDialog" name="IsModal"><function type="bool" name="IsModal" suffix="const"><description>

Returns true if the dialog box is modal, false otherwise.

</description></function></member>
<member class="wxDialog" name="OnCharHook"><function type="void" name="OnCharHook"><parameters><parameter type="wxKeyEvent&amp;" name=" event"></parameter></parameters><remarks>

wxDialog implements this handler to fake a cancel command if the escape key has been
pressed. This will dismiss the dialog.

</remarks><description>

This member is called to allow the window to intercept keyboard events
before they are processed by child windows.


</description></function></member>
<member class="wxDialog" name="OnApply"><function type="void" name="OnApply"><parameters><parameter type="wxCommandEvent&amp; " name="event"></parameter></parameters><seealso>

<ref target="wxdialogonok">wxDialog::OnOK</ref><ref target="wxdialogoncancel">wxDialog::OnCancel</ref>

</seealso><description></description></function></member>
<member class="wxDialog" name="OnCancel"><function type="void" name="OnCancel"><parameters><parameter type="wxCommandEvent&amp; " name="event"></parameter></parameters><seealso>

<ref target="wxdialogonok">wxDialog::OnOK</ref><ref target="wxdialogonapply">wxDialog::OnApply</ref>

</seealso><description></description></function></member>
<member class="wxDialog" name="OnOK"><function type="void" name="OnOK"><parameters><parameter type="wxCommandEvent&amp; " name="event"></parameter></parameters><seealso>

<ref target="wxdialogoncancel">wxDialog::OnCancel</ref><ref target="wxdialogonapply">wxDialog::OnApply</ref>

</seealso><description></description></function></member>
<member class="wxDialog" name="OnSysColourChanged"><function type="void" name="OnSysColourChanged"><parameters><parameter type="wxSysColourChangedEvent&amp; " name="event">The colour change event.</parameter></parameters><seealso>

<ref target="wxsyscolourchangedevent">wxSysColourChangedEvent</ref>

</seealso><remarks>

Changes the dialog's colour to conform to the current settings (Windows only).
Add an event table entry for your dialog class if you wish the behaviour
to be different (such as keeping a user-defined
background colour). If you do override this function, call wxEvent::Skip to
propagate the notification to child windows and controls.

</remarks><description>

The default handler for wxEVT_SYS_COLOUR_CHANGED.





</description></function></member>
<member class="wxDialog" name="SetIcon"><function type="void" name="SetIcon"><parameters><parameter type="const wxIcon&amp; " name="icon">The icon to associate with this dialog.</parameter></parameters><description>

Sets the icon for this dialog.





See also <ref target="wxicon">wxIcon</ref>.

</description></function></member>
<member class="wxDialog" name="SetIcons"><function type="void" name="SetIcons"><parameters><parameter type="const wxIconBundle&amp; " name="icons">The icons to associate with this dialog.</parameter></parameters><description>

Sets the icons for this dialog.





See also <ref target="wxiconbundle">wxIconBundle</ref>.

</description></function></member>
<member class="wxDialog" name="SetModal"><function type="void" name="SetModal"><parameters><parameter type="const bool" name=" flag"></parameter></parameters><description>

<b> NB:</b> This function is deprecated and doesn't work for all ports, just use 
<ref target="wxdialogshowmodal">ShowModal</ref> to show a modal dialog instead.

Allows the programmer to specify whether the dialog box is modal (wxDialog::Show blocks control
until the dialog is hidden) or modeless (control returns immediately).





</description></function></member>
<member class="wxDialog" name="SetReturnCode"><function type="void" name="SetReturnCode"><parameters><parameter type="int " name="retCode">The integer return code, usually a control identifier.</parameter></parameters><seealso>

<ref target="wxdialoggetreturncode">wxDialog::GetReturnCode</ref><ref target="wxdialogshowmodal">wxDialog::ShowModal</ref>,
<ref target="wxdialogendmodal">wxDialog::EndModal</ref>

</seealso><description></description></function></member>
<member class="wxDialog" name="SetTitle"><function type="void" name="SetTitle"><parameters><parameter type="const wxString&amp; " name=" title"></parameter></parameters><description>

Sets the title of the dialog box.





</description></function></member>
<member class="wxDialog" name="Show"><function type="bool" name="Show"><parameters><parameter type="const bool" name=" show"></parameter></parameters><remarks>

The preferred way of dismissing a modal dialog is to use <ref target="wxdialogendmodal">wxDialog::EndModal</ref>.

</remarks><description>

Hides or shows the dialog.





</description></function></member>
<member class="wxDialog" name="ShowModal"><function type="int" name="ShowModal"><seealso>

<ref target="wxdialogendmodal">wxDialog::EndModal</ref>,
<ref target="wxdialoggetreturncode">wxDialog:GetReturnCode</ref>,
<ref target="wxdialogsetreturncode">wxDialog::SetReturnCode</ref>

</seealso><returnvalue>

The return value is the value set with <ref target="wxdialogsetreturncode">wxDialog::SetReturnCode</ref>.

</returnvalue><description>

Shows a modal dialog. Program flow does not return until the dialog has been dismissed with
<ref target="wxdialogendmodal">wxDialog::EndModal</ref>.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDir">
<description>
<p class="classdesc">
wxDir is a portable equivalent of Unix {open/read/close}dir functions which
allow enumerating of the files in a directory. wxDir allows enumerate files as
well as directories.</p><p class="classdesc">wxDir also provides a flexible way to enumerate files recursively using 
<ref target="wxdirtraverse">Traverse</ref> or a simpler 
<ref target="wxdirgetallfiles">GetAllFiles</ref> function.</p><p class="classdesc">Example of use:</p><p class="classdesc"><pre>
    wxDir dir(wxGetCwd());

    if ( !dir.IsOpened() )
    {
        // deal with the error here - wxDir would already log an error message
        // explaining the exact reason of the failure
        return;
    }

    puts(&quot;Enumerating object files in current directory:&quot;);

    wxString filename;

    bool cont = dir.GetFirst(&amp;filename, filespec, flags);
    while ( cont )
    {
        printf(&quot;
        cont = dir.GetNext(&amp;filename);
    }
</pre></p>
</description>
<parents></parents>
<includes>
<header name="wx/dir.h"/></includes>
<constants>

These flags define what kind of filename is included in the list of files
enumerated by GetFirst/GetNext.

<pre>
enum
{
    wxDIR_FILES     = 0x0001,       // include files
    wxDIR_DIRS      = 0x0002,       // include directories
    wxDIR_HIDDEN    = 0x0004,       // include hidden files
    wxDIR_DOTDOT    = 0x0008,       // include '.' and '..'

    // by default, enumerate everything except '.' and '..'
    wxDIR_DEFAULT   = wxDIR_FILES | wxDIR_DIRS | wxDIR_HIDDEN
}
</pre>

</constants>
<members>
<member class="wxDir" name="wxDir"><function type="" name="wxDir"><description>

Default constructor, use <ref target="wxdiropen">Open()</ref> afterwards.

</description></function>
<function type="" name="wxDir"><parameters><parameter type="const wxString&amp; " name="dir"></parameter></parameters><description>

Opens the directory for enumeration, use <ref target="wxdirisopened">IsOpened()</ref> 
to test for errors.


</description></function></member>
<member class="wxDir" name="~wxDir"><function type="" name="~wxDir"><description>

Destructor cleans up the associated resources. It is not virtual and so this
class is not meant to be used polymorphically.


</description></function></member>
<member class="wxDir" name="Exists"><function type="static bool" name="Exists"><parameters><parameter type="const wxString&amp; " name="dir"></parameter></parameters><description>

Test for existence of a directory with the given name


</description></function></member>
<member class="wxDir" name="GetAllFiles"><function type="static size_t" name="GetAllFiles"><parameters><parameter type="const wxString&amp; " name="dirname"></parameter><parameter type="wxArrayString &#42;" name="files"></parameter><parameter type="const wxString&amp; " name="filespec" value="wxEmptyString"></parameter><parameter type="int " name="flags" value="wxDIR_DEFAULT"></parameter></parameters><description>

The function appends the names of all the files under directory <i> dirname</i> 
to the array <i> files</i> (note that its old contents is preserved). Only files
matching the <i> filespec</i> are taken, with empty spec matching all the files.

The <i> flags</i> parameter should always include <tt> wxDIR_FILES</tt> or the array
would be unchanged and should include <tt> wxDIR_DIRS</tt> flag to recurse into
subdirectories (both flags are included in the value by default).

See also: <ref target="wxdirtraverse">Traverse</ref>


</description></function></member>
<member class="wxDir" name="GetFirst"><function type="bool" name="GetFirst" suffix="const"><parameters><parameter type="wxString&#42; " name="filename"></parameter><parameter type="const wxString&amp; " name="filespec" value="wxEmptyString"></parameter><parameter type="int " name="flags" value="wxDIR_DEFAULT"></parameter></parameters><description>

Start enumerating all files matching <i> filespec</i> (or all files if it is
empty) and flags, return true on success.


</description></function></member>
<member class="wxDir" name="GetName"><function type="wxString" name="GetName" suffix="const"><description>

Returns the name of the directory itself. The returned string does not have the
trailing path separator (slash or backslash).


</description></function></member>
<member class="wxDir" name="GetNext"><function type="bool" name="GetNext" suffix="const"><parameters><parameter type="wxString&#42; " name="filename"></parameter></parameters><description>

Continue enumerating files satisfying the criteria specified by the last call
to <ref target="wxdirgetfirst">GetFirst</ref>.


</description></function></member>
<member class="wxDir" name="HasFiles"><function type="bool" name="HasFiles"><parameters><parameter type="const wxString&amp; " name="filespec" value="wxEmptyString"></parameter></parameters><description>

Returns <tt> true</tt> if the directory contains any files matching the given 
<i> filespec</i>. If <i> filespec</i> is empty, look for any files at all. In any
case, even hidden files are taken into account.


</description></function></member>
<member class="wxDir" name="HasSubDirs"><function type="bool" name="HasSubDirs"><parameters><parameter type="const wxString&amp; " name="dirspec" value="wxEmptyString"></parameter></parameters><description>

Returns <tt> true</tt> if the directory contains any subdirectories (if a non
empty <i> filespec</i> is given, only check for directories matching it).
The hidden subdirectories are taken into account as well.


</description></function></member>
<member class="wxDir" name="IsOpened"><function type="bool" name="IsOpened" suffix="const"><description>

Returns true if the directory was successfully opened by a previous call to 
<ref target="wxdiropen">Open</ref>.


</description></function></member>
<member class="wxDir" name="Open"><function type="bool" name="Open"><parameters><parameter type="const wxString&amp; " name="dir"></parameter></parameters><description>

Open the directory for enumerating, returns true on success or false if an
error occurred.


</description></function></member>
<member class="wxDir" name="Traverse"><function type="size_t" name="Traverse"><parameters><parameter type="wxDirTraverser&amp; " name="sink"></parameter><parameter type="const wxString&amp; " name="filespec" value="wxEmptyString"></parameter><parameter type="int " name="flags" value="wxDIR_DEFAULT"></parameter></parameters><description>

Enumerate all files and directories under the given directory recursively
calling the element of the provided <ref target="wxdirtraverser">wxDirTraverser</ref> 
object for each of them.

More precisely, the function will really recurse into subdirectories if 
<i> flags</i> contains <tt> wxDIR_DIRS</tt> flag. It will ignore the files (but
still possibly recurse into subdirectories) if <tt> wxDIR_FILES</tt> flag is
given.

For each found directory, <ref target="wxdirtraverserondir">sink.OnDir()</ref> is called
and <ref target="wxdirtraverseronfile">sink.OnFile()</ref> is called for every file.
Depending on the return value, the enumeration may continue or stop.

The function returns the total number of files found or <tt> (size_t)-1</tt> on
error.

See also: <ref target="wxdirgetallfiles">GetAllFiles</ref>

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDirDialog">
<description>
<p class="classdesc">
This class represents the directory chooser dialog.</p>
</description>
<parents>
<classref name="wxDialog"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/dirdlg.h" comment="&lt;wx/generic/dirdlgg.h&gt;"/></includes>
<windowstyles>
</windowstyles>
<seealso>

<ref target="wxdirdialogoverview">wxDirDialog overview</ref><ref target="wxfiledialog">wxFileDialog</ref>

</seealso>
<members>
<member class="wxDirDialog" name="wxDirDialog"><function type="" name="wxDirDialog"><parameters><parameter type="wxWindow&#42; " name="parent">Parent window.</parameter><parameter type="const wxString&amp; " name="message" value="&quot;Choose">Message to show on the dialog.</parameter><parameter type="const wxString&amp; " name="defaultPath" value="&quot;&quot;">The default path, or the empty string.</parameter><parameter type="long " name="style" value="0">A dialog style, currently unused.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Dialog position. Ignored under Windows.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Dialog size. Ignored under Windows.</parameter><parameter type="const wxString&amp; " name="name" value="&quot;wxDirCtrl&quot;">The dialog name, not used.</parameter></parameters><description>

Constructor. Use <ref target="wxdirdialogshowmodal">wxDirDialog::ShowModal</ref> to show
the dialog.

















</description></function></member>
<member class="wxDirDialog" name="~wxDirDialog"><function type="" name="~wxDirDialog"><description>

Destructor.

</description></function></member>
<member class="wxDirDialog" name="GetPath"><function type="wxString" name="GetPath" suffix="const"><description>

Returns the default or user-selected path.

</description></function></member>
<member class="wxDirDialog" name="GetMessage"><function type="wxString" name="GetMessage" suffix="const"><description>

Returns the message that will be displayed on the dialog.

</description></function></member>
<member class="wxDirDialog" name="GetStyle"><function type="long" name="GetStyle" suffix="const"><description>

Returns the dialog style.

</description></function></member>
<member class="wxDirDialog" name="SetMessage"><function type="void" name="SetMessage"><parameters><parameter type="const wxString&amp; " name="message"></parameter></parameters><description>

Sets the message that will be displayed on the dialog.

</description></function></member>
<member class="wxDirDialog" name="SetPath"><function type="void" name="SetPath"><parameters><parameter type="const wxString&amp; " name="path"></parameter></parameters><description>

Sets the default path.

</description></function></member>
<member class="wxDirDialog" name="SetStyle"><function type="void" name="SetStyle"><parameters><parameter type="long " name="style"></parameter></parameters><description>

Sets the dialog style. This is currently unused.

</description></function></member>
<member class="wxDirDialog" name="ShowModal"><function type="int" name="ShowModal"><description>

Shows the dialog, returning wxID_OK if the user pressed OK, and wxOK_CANCEL
otherwise.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDirTraverser">
<description>
<p class="classdesc">
wxDirTraverser is an abstract interface which must be implemented by objects
passed to <ref target="wxdirtraverse">Traverse</ref> function.</p><p class="classdesc">Example of use (this works almost like <ref target="wxdirgetallfiles">GetAllFiles</ref>):</p><p class="classdesc"><pre>
    class wxDirTraverserSimple : public wxDirTraverser
    {
    public:
        wxDirTraverserSimple(wxArrayString&amp; files) : m_files(files) { }

        virtual wxDirTraverseResult OnFile(const wxString&amp; filename)
        {
            m_files.Add(filename);
            return wxDIR_CONTINUE;
        }

        virtual wxDirTraverseResult OnDir(const wxString&amp; WXUNUSED(dirname))
        {
            return wxDIR_CONTINUE;
        }

    private:
        wxArrayString&amp; m_files;
    };

    // get the names of all files in the array
    wxArrayString files;
    wxDirTraverserSimple traverser(files);

    wxDir dir(dirname);
    dir.Traverse(traverser);
</pre></p>
</description>
<parents></parents>
<includes>
<header name="wx/dir.h"/></includes>
<constants>

The elements of <tt> wxDirTraverseResult</tt> are the possible return values of the
callback functions:

<pre>
enum wxDirTraverseResult
{
    wxDIR_IGNORE = -1,      // ignore this directory but continue with others
    wxDIR_STOP,             // stop traversing
    wxDIR_CONTINUE          // continue into this directory
};
</pre>

</constants>
<members>
<member class="wxDirTraverser" name="OnDir"><function type="virtual wxDirTraverseResult" name="OnDir"><parameters><parameter type="const wxString&amp; " name="dirname"></parameter></parameters><description>

This function is called for each directory. It may return <tt> wxSIR_STOP</tt> 
to abort traversing completely, <tt> wxDIR_IGNORE</tt> to skip this directory but
continue with others or <tt> wxDIR_CONTINUE</tt> to enumerate all files and
subdirectories in this directory.

This is a pure virtual function and must be implemented in the derived class.

</description></function></member>
<member class="wxDirTraverser" name="OnFile"><function type="virtual wxDirTraverseResult" name="OnFile"><parameters><parameter type="const wxString&amp; " name="filename"></parameter></parameters><description>

This function is called for each file. It may return <tt> wxDIR_STOP</tt> to abort
traversing (for example, if the file being searched is found) or 
<tt> wxDIR_CONTINUE</tt> to proceed.

This is a pure virtual function and must be implemented in the derived class.

</description></function></member>
<member class="wxOpenErrorTraverser" name="OnOpenError"><function type="virtual wxOpenErrorTraverseResult" name="OnOpenError"><parameters><parameter type="const wxString&amp; " name="openerrorname"></parameter></parameters><description>

This function is called for each directory which we failed to open for
enumerating. It may return <tt> wxSIR_STOP</tt> to abort traversing completely,
<tt> wxDIR_IGNORE</tt> to skip this directory but continue with others or 
<tt> wxDIR_CONTINUE</tt> to retry opening this directory once again.

The base class version always returns <tt> wxDIR_IGNORE</tt>.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDllLoader">
<description>
<p class="classdesc">
wxDllLoader is a class providing an interface similar to Unix's <tt>
dlopen()</tt>. It is used by the wxLibrary framework and manages the actual
loading of shared libraries and the resolving of symbols in them. There are no
instances of this class, it simply serves as a namespace for its static member
functions.</p><p class="classdesc">Please note that class <ref target="wxdynamiclibrary">wxDynamicLibrary</ref> provides 
alternative, friendlier interface to wxDllLoader.</p><p class="classdesc">The terms <i> DLL</i> and <i> shared library/object</i> will both be used in the
documentation to refer to the same thing: a <tt> .dll</tt> file under Windows or 
<tt> .so</tt> or <tt> .sl</tt> one under Unix.</p><p class="classdesc">Example of using this class to dynamically load the <tt> strlen()</tt> function:</p><p class="classdesc"><pre>
#if defined(__WXMSW__)
    static const wxChar &#42;LIB_NAME = _T(&quot;kernel32&quot;);
    static const wxChar &#42;FUNC_NAME = _T(&quot;lstrlenA&quot;);
#elif defined(__UNIX__)
    static const wxChar &#42;LIB_NAME = _T(&quot;/lib/libc-2.0.7.so&quot;);
    static const wxChar &#42;FUNC_NAME = _T(&quot;strlen&quot;);
#endif

    wxDllType dllHandle = wxDllLoader::LoadLibrary(LIB_NAME);
    if ( !dllHandle )
    {
        ... error ...
    }
    else
    {
        typedef int (&#42;strlenType)(char &#42;);
        strlenType pfnStrlen = (strlenType)wxDllLoader::GetSymbol(dllHandle, FUNC_NAME);
        if ( !pfnStrlen )
        {
            ... error ...
        }
        else
        {
            if ( pfnStrlen(&quot;foo&quot;) != 3 )
            {
                ... error ...
            }
            else
            {
                ... ok! ...
            }
        }

        wxDllLoader::UnloadLibrary(dllHandle);
    }
</pre></p>
</description>
<parents></parents>
<includes>
<header name="wx/dynlib.h"/></includes>
<structs>

This header defines a platform-dependent <tt> wxDllType</tt> typedef which stores
a handle to a loaded DLLs on the given platform.

</structs>
<members>
<member class="wxDllLoader" name="GetDllExt"><function type="static wxString" name="GetDllExt"><description>

Returns the string containing the usual extension for shared libraries for the
given systems (including the leading dot if not empty).

For example, this function will return <tt> &quot;.dll&quot;</tt> under Windows or (usually) 
<tt> &quot;.so&quot;</tt> under Unix.

</description></function></member>
<member class="wxDllLoader" name="GetProgramHandle"><function type="wxDllType" name="GetProgramHandle"><description>

This function returns a valid handle for the main program itself. Notice that
the <tt> NULL</tt> return value is valid for some systems (i.e. doesn't mean that
the function failed).

<b> NB:</b> This function is Unix specific. It will always fail under Windows
or OS/2.

</description></function></member>
<member class="wxDllLoader" name="GetSymbol"><function type="void &#42;" name="GetSymbol"><parameters><parameter type="wxDllType " name="dllHandle">Valid handle previously returned by 
<ref target="wxdllloaderloadlibrary">LoadLibrary</ref></parameter><parameter type="const wxString&amp; " name="name">Name of the symbol.</parameter></parameters><description>

This function resolves a symbol in a loaded DLL, such as a variable or
function name.

Returned value will be <tt> NULL</tt> if the symbol was not found in the DLL or if
an error occured.







</description></function></member>
<member class="wxDllLoader" name="LoadLibrary"><function type="wxDllType" name="LoadLibrary"><parameters><parameter type="const wxString &amp; " name="libname">Name of the shared object to load.</parameter><parameter type="bool&#42; " name="success" value="NULL">May point to a bool variable which will be set to true or
false; may also be <tt> NULL</tt>.</parameter></parameters><description>

This function loads a shared library into memory, with <i> libname</i> being the
name of the library: it may be either the full name including path and
(platform-dependent) extension, just the basename (no path and no extension)
or a basename with extension. In the last two cases, the library will be
searched in all standard locations.

Returns a handle to the loaded DLL. Use <i> success</i> parameter to test if it
is valid. If the handle is valid, the library must be unloaded later with 
<ref target="wxdllloaderunloadlibrary">UnloadLibrary</ref>.







</description></function></member>
<member class="wxDllLoader" name="UnloadLibrary"><function type="void" name="UnloadLibrary"><parameters><parameter type="wxDllType " name="dllhandle"></parameter></parameters><description>

This function unloads the shared library. The handle <i> dllhandle</i> must have
been returned by <ref target="wxdllloaderloadlibrary">LoadLibrary</ref> previously.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="N"/></supported>
</class><class name="wxDocChildFrame">
<description>
<p class="classdesc">
The wxDocChildFrame class provides a default frame for displaying documents
on separate windows. This class can only be used for SDI (not MDI) child frames.</p><p class="classdesc">The class is part of the document/view framework supported by wxWindows,
and cooperates with the <ref target="wxview">wxView</ref>, <ref target="wxdocument">wxDocument</ref>,
<ref target="wxdocmanager">wxDocManager</ref> and <ref target="wxdoctemplate">wxDocTemplate</ref> classes.</p><p class="classdesc">See the example application in <tt> samples/docview</tt>.</p>
</description>
<parents>
<classref name="wxFrame"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/docview.h"/></includes>
<members>
<member class="wxDocChildFrame" name="m_childDocument"></member>
<member class="wxDocChildFrame" name="m_childView"></member>
<member class="wxDocChildFrame" name="wxDocChildFrame"><function type="" name="wxDocChildFrame"><parameters><parameter type="wxDocument&#42; " name="doc"></parameter><parameter type="wxView&#42; " name="view"></parameter><parameter type="wxFrame&#42; " name="parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp; " name="title"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="wxDEFAULT_FRAME_STYLE"></parameter><parameter type="const wxString&amp; " name="name" value="``frame&quot;"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxDocChildFrame" name="~wxDocChildFrame"><function type="" name="~wxDocChildFrame"><description>

Destructor.

</description></function></member>
<member class="wxDocChildFrame" name="GetDocument"><function type="wxDocument&#42;" name="GetDocument" suffix="const"><description>

Returns the document associated with this frame.

</description></function></member>
<member class="wxDocChildFrame" name="GetView"><function type="wxView&#42;" name="GetView" suffix="const"><description>

Returns the view associated with this frame.

</description></function></member>
<member class="wxDocChildFrame" name="OnActivate"><function type="void" name="OnActivate"><parameters><parameter type="wxActivateEvent" name=" event"></parameter></parameters><description>

Sets the currently active view to be the frame's view. You may need
to override (but still call) this function in order to set the keyboard
focus for your subwindow.

</description></function></member>
<member class="wxDocChildFrame" name="OnCloseWindow"><function type="void" name="OnCloseWindow"><parameters><parameter type="wxCloseEvent&amp;" name=" event"></parameter></parameters><description>

Closes and deletes the current view and document.

</description></function></member>
<member class="wxDocChildFrame" name="SetDocument"><function type="void" name="SetDocument"><parameters><parameter type="wxDocument &#42;" name="doc"></parameter></parameters><description>

Sets the document for this frame.

</description></function></member>
<member class="wxDocChildFrame" name="SetView"><function type="void" name="SetView"><parameters><parameter type="wxView &#42;" name="view"></parameter></parameters><description>

Sets the view for this frame.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDocMDIChildFrame">
<description>
<p class="classdesc">
The wxDocMDIChildFrame class provides a default frame for displaying documents
on separate windows. This class can only be used for MDI child frames.</p><p class="classdesc">The class is part of the document/view framework supported by wxWindows,
and cooperates with the <ref target="wxview">wxView</ref>, <ref target="wxdocument">wxDocument</ref>,
<ref target="wxdocmanager">wxDocManager</ref> and <ref target="wxdoctemplate">wxDocTemplate</ref> classes.</p><p class="classdesc">See the example application in <tt> samples/docview</tt>.</p>
</description>
<parents>
<classref name="wxMDIChildFrame"/>
<classref name="wxFrame"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/docmdi.h"/></includes>
<members>
<member class="wxDocMDIChildFrame" name="m_childDocument"></member>
<member class="wxDocMDIChildFrame" name="m_childView"></member>
<member class="wxDocMDIChildFrame" name="wxDocMDIChildFrame"><function type="" name="wxDocMDIChildFrame"><parameters><parameter type="wxDocument&#42; " name="doc"></parameter><parameter type="wxView&#42; " name="view"></parameter><parameter type="wxFrame&#42; " name="parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp; " name="title"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="wxDEFAULT_FRAME_STYLE"></parameter><parameter type="const wxString&amp; " name="name" value="``frame&quot;"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxDocMDIChildFrame" name="~wxDocMDIChildFrame"><function type="" name="~wxDocMDIChildFrame"><description>

Destructor.

</description></function></member>
<member class="wxDocMDIChildFrame" name="GetDocument"><function type="wxDocument&#42;" name="GetDocument" suffix="const"><description>

Returns the document associated with this frame.

</description></function></member>
<member class="wxDocMDIChildFrame" name="GetView"><function type="wxView&#42;" name="GetView" suffix="const"><description>

Returns the view associated with this frame.

</description></function></member>
<member class="wxDocMDIChildFrame" name="OnActivate"><function type="void" name="OnActivate"><parameters><parameter type="wxActivateEvent" name=" event"></parameter></parameters><description>

Sets the currently active view to be the frame's view. You may need
to override (but still call) this function in order to set the keyboard
focus for your subwindow.

</description></function></member>
<member class="wxDocMDIChildFrame" name="OnCloseWindow"><function type="void" name="OnCloseWindow"><parameters><parameter type="wxCloseEvent&amp;" name=" event"></parameter></parameters><description>

Closes and deletes the current view and document.

</description></function></member>
<member class="wxDocMDIChildFrame" name="SetDocument"><function type="void" name="SetDocument"><parameters><parameter type="wxDocument &#42;" name="doc"></parameter></parameters><description>

Sets the document for this frame.

</description></function></member>
<member class="wxDocMDIChildFrame" name="SetView"><function type="void" name="SetView"><parameters><parameter type="wxView &#42;" name="view"></parameter></parameters><description>

Sets the view for this frame.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="N"/></supported>
</class><class name="wxDocMDIParentFrame">
<description>
<p class="classdesc">
The wxDocMDIParentFrame class provides a default top-level frame for
applications using the document/view framework. This class can only be used for MDI parent frames.</p><p class="classdesc">It cooperates with the <ref target="wxview">wxView</ref>, <ref target="wxdocument">wxDocument</ref>,
<ref target="wxdocmanager">wxDocManager</ref> and <ref target="wxdoctemplate">wxDocTemplates</ref> classes.</p><p class="classdesc">See the example application in <tt> samples/docview</tt>.</p>
</description>
<parents>
<classref name="wxMDIParentFrame"/>
<classref name="wxFrame"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/docmdi.h"/></includes>
<seealso>

<ref target="docviewoverview">Document/view overview</ref><ref target="wxmdiparentframe">wxMDIParentFrame</ref>

</seealso>
<members>
<member class="wxDocMDIParentFrame" name="wxDocMDIParentFrame"><function type="" name="wxDocParentFrame"><parameters><parameter type="wxDocManager&#42;" name=" manager"></parameter><parameter type="wxFrame &#42;" name="parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp; " name="title"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="wxDEFAULT_FRAME_STYLE"></parameter><parameter type="const wxString&amp; " name="name" value="&quot;frame&quot;"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxDocMDIParentFrame" name="~wxDocMDIParentFrame"><function type="" name="~wxDocMDIParentFrame"><description>

Destructor.

</description></function></member>
<member class="wxDocMDIParentFrame" name="OnCloseWindow"><function type="void" name="OnCloseWindow"><parameters><parameter type="wxCloseEvent&amp;" name=" event"></parameter></parameters><description>

Deletes all views and documents. If no user input cancelled the
operation, the frame will be destroyed and the application will exit.

Since understanding how document/view clean-up takes place can be difficult,
the implementation of this function is shown below.

<pre>
void wxDocParentFrame::OnCloseWindow(wxCloseEvent&amp; event)
{
  if (m_docManager-&gt;Clear(!event.CanVeto()))
  {
    this-&gt;Destroy();
  }
  else
    event.Veto();
}
</pre>

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="N"/></supported>
</class><class name="wxDocManager">
<description>
<p class="classdesc">
The wxDocManager class is part of the document/view framework supported by wxWindows,
and cooperates with the <ref target="wxview">wxView</ref>, <ref target="wxdocument">wxDocument</ref>
and <ref target="wxdoctemplate">wxDocTemplate</ref> classes.</p>
</description>
<parents>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/docview.h"/></includes>
<seealso>

<ref target="wxdocmanageroverview">wxDocManager overview</ref><ref target="wxdocument">wxDocument</ref>,
<ref target="wxview">wxView</ref><ref target="wxdoctemplate">wxDocTemplate</ref><ref target="wxfilehistory">wxFileHistory</ref>

</seealso>
<members>
<member class="wxDocManager" name="m_currentView"></member>
<member class="wxDocManager" name="m_defaultDocumentNameCounter"></member>
<member class="wxDocManager" name="m_fileHistory"></member>
<member class="wxDocManager" name="m_maxDocsOpen"></member>
<member class="wxDocManager" name="m_docs"></member>
<member class="wxDocManager" name="m_flags"></member>
<member class="wxDocManager" name="m_lastDirectory"></member>
<member class="wxDocManager" name="m_templates"></member>
<member class="wxDocManager" name="wxDocManager"><function type="void" name="wxDocManager"><parameters><parameter type="long" name="flags" value="wxDEFAULT_DOCMAN_FLAGS"></parameter><parameter type="bool" name="initialize" value="true"></parameter></parameters><description>

Constructor. Create a document manager instance dynamically near the start of your application
before doing any document or view operations.

<i> flags</i> is currently unused.

If <i> initialize</i> is true, the <ref target="wxdocmanagerinitialize">Initialize</ref> function will be called
to create a default history list object. If you derive from wxDocManager, you may wish to call the
base constructor with false, and then call Initialize in your own constructor, to allow
your own Initialize or OnCreateFileHistory functions to be called.

</description></function></member>
<member class="wxDocManager" name="~wxDocManager"><function type="void" name="~wxDocManager"><description>

Destructor.

</description></function></member>
<member class="wxDocManager" name="ActivateView"><function type="void" name="ActivateView"><parameters><parameter type="wxView&#42; " name="doc"></parameter><parameter type="bool" name=" activate"></parameter><parameter type="bool" name=" deleting"></parameter></parameters><description>

Sets the current view.

</description></function></member>
<member class="wxDocManager" name="AddDocument"><function type="void" name="AddDocument"><parameters><parameter type="wxDocument &#42;" name="doc"></parameter></parameters><description>

Adds the document to the list of documents.

</description></function></member>
<member class="wxDocManager" name="AddFileToHistory"><function type="void" name="AddFileToHistory"><parameters><parameter type="const wxString&amp; " name="filename"></parameter></parameters><description>

Adds a file to the file history list, if we have a pointer to an appropriate file menu.

</description></function></member>
<member class="wxDocManager" name="AssociateTemplate"><function type="void" name="AssociateTemplate"><parameters><parameter type="wxDocTemplate &#42;" name="temp"></parameter></parameters><description>

Adds the template to the document manager's template list.

</description></function></member>
<member class="wxDocManager" name="CloseDocuments"><function type="bool" name="CloseDocuments"><parameters><parameter type="bool " name="force" value="true"></parameter></parameters><description>

Closes all currently opened documents.

</description></function></member>
<member class="wxDocManager" name="CreateDocument"><function type="wxDocument&#42;" name="CreateDocument"><parameters><parameter type="const wxString&amp; " name="path"></parameter><parameter type="long" name=" flags"></parameter></parameters><description>

Creates a new document in a manner determined by the <i> flags</i> parameter, which can be:

<ul><li> wxDOC_NEW Creates a fresh document.
</li>
<li> wxDOC_SILENT Silently loads the given document file.
</li></ul>

If wxDOC_NEW is present, a new document will be created and returned, possibly after
asking the user for a template to use if there is more than one document template.
If wxDOC_SILENT is present, a new document will be created and the given file loaded
into it. If neither of these flags is present, the user will be presented with
a file selector for the file to load, and the template to use will be determined by the
extension (Windows) or by popping up a template choice list (other platforms).

If the maximum number of documents has been reached, this function
will delete the oldest currently loaded document before creating a new one.

</description></function></member>
<member class="wxDocManager" name="CreateView"><function type="wxView&#42;" name="CreateView"><parameters><parameter type="wxDocument&#42;" name="doc"></parameter><parameter type="long" name=" flags"></parameter></parameters><description>

Creates a new view for the given document. If more than one view is allowed for the
document (by virtue of multiple templates mentioning the same document type), a choice
of view is presented to the user.

</description></function></member>
<member class="wxDocManager" name="DisassociateTemplate"><function type="void" name="DisassociateTemplate"><parameters><parameter type="wxDocTemplate &#42;" name="temp"></parameter></parameters><description>

Removes the template from the list of templates.

</description></function></member>
<member class="wxDocManager" name="FileHistoryAddFilesToMenu"><function type="void" name="FileHistoryAddFilesToMenu"><description>

Appends the files in the history list, to all menus managed by the file history object.

</description></function>
<function type="void" name="FileHistoryAddFilesToMenu"><parameters><parameter type="wxMenu&#42;" name=" menu"></parameter></parameters><description>

Appends the files in the history list, to the given menu only.

</description></function></member>
<member class="wxDocManager" name="FileHistoryLoad"><function type="void" name="FileHistoryLoad"><parameters><parameter type="wxConfigBase&amp; " name="config"></parameter></parameters><seealso>

<ref target="wxconfigbase">wxConfig</ref>

</seealso><description>

Loads the file history from a config object.

</description></function></member>
<member class="wxDocManager" name="FileHistoryRemoveMenu"><function type="void" name="FileHistoryRemoveMenu"><parameters><parameter type="wxMenu&#42;" name=" menu"></parameter></parameters><description>

Removes the given menu from the list of menus managed by the file history object.

</description></function></member>
<member class="wxDocManager" name="FileHistorySave"><function type="void" name="FileHistorySave"><parameters><parameter type="wxConfigBase&amp; " name="resourceFile"></parameter></parameters><seealso>

<ref target="wxconfigbase">wxConfig</ref>

</seealso><description>

Saves the file history into a config object. This must be called
explicitly by the application.

</description></function></member>
<member class="wxDocManager" name="FileHistoryUseMenu"><function type="void" name="FileHistoryUseMenu"><parameters><parameter type="wxMenu&#42;" name=" menu"></parameter></parameters><description>

Use this menu for appending recently-visited document filenames, for convenient
access. Calling this function with a valid menu pointer enables the history
list functionality.

Note that you can add multiple menus using this function, to be managed by the
file history object.

</description></function></member>
<member class="wxDocManager" name="FindTemplateForPath"><function type="wxDocTemplate &#42;" name="FindTemplateForPath"><parameters><parameter type="const wxString&amp; " name="path"></parameter></parameters><description>

Given a path, try to find template that matches the extension. This is only
an approximate method of finding a template for creating a document.

</description></function></member>
<member class="wxDocManager" name="GetCurrentDocument"><function type="wxDocument &#42;" name="GetCurrentDocument"><description>

Returns the document associated with the currently active view (if any).

</description></function></member>
<member class="wxDocManager" name="GetCurrentView"><function type="wxView &#42;" name="GetCurrentView"><description>

Returns the currently active view 

</description></function></member>
<member class="wxDocManager" name="GetDocuments"><function type="wxList&amp;" name="GetDocuments"><description>

Returns a reference to the list of documents.

</description></function></member>
<member class="wxDocManager" name="GetFileHistory"><function type="wxFileHistory &#42;" name="GetFileHistory"><description>

Returns a pointer to file history.

</description></function></member>
<member class="wxDocManager" name="GetLastDirectory"><function type="wxString" name="GetLastDirectory" suffix="const"><description>

Returns the directory last selected by the user when opening a file. Initially empty.

</description></function></member>
<member class="wxDocManager" name="GetMaxDocsOpen"><function type="int" name="GetMaxDocsOpen"><description>

Returns the number of documents that can be open simultaneously.

</description></function></member>
<member class="wxDocManager" name="GetHistoryFilesCount"><function type="size_t" name="GetHistoryFilesCount"><description>

Returns the number of files currently stored in the file history.

</description></function></member>
<member class="wxDocManager" name="Initialize"><function type="bool" name="Initialize"><description>

Initializes data; currently just calls OnCreateFileHistory. Some data cannot
always be initialized in the constructor because the programmer must be given
the opportunity to override functionality. If OnCreateFileHistory was called
from the constructor, an overridden virtual OnCreateFileHistory would not be
called due to C++'s `interesting' constructor semantics. In fact Initialize
<i> is</i> called from the wxDocManager constructor, but this can be
vetoed by passing false to the second argument, allowing the derived class's
constructor to call Initialize, possibly calling a different OnCreateFileHistory
from the default.

The bottom line: if you're not deriving from Initialize, forget it and
construct wxDocManager with no arguments.

</description></function></member>
<member class="wxDocManager" name="MakeDefaultName"><function type="bool" name="MakeDefaultName"><parameters><parameter type="const wxString&amp; " name="buf"></parameter></parameters><description>

Copies a suitable default name into <i> buf</i>. This is implemented by
appending an integer counter to the string <b> unnamed</b> and incrementing
the counter.

</description></function></member>
<member class="wxDocManager" name="OnCreateFileHistory"><function type="wxFileHistory &#42;" name="OnCreateFileHistory"><description>

A hook to allow a derived class to create a different type of file history. Called
from <ref target="wxdocmanagerinitialize">Initialize</ref>.

</description></function></member>
<member class="wxDocManager" name="OnFileClose"><function type="void" name="OnFileClose"><description>

Closes and deletes the currently active document.

</description></function></member>
<member class="wxDocManager" name="OnFileCloseAll"><function type="void" name="OnFileCloseAll"><description>

Closes and deletes all the currently opened documents.

</description></function></member>
<member class="wxDocManager" name="OnFileNew"><function type="void" name="OnFileNew"><description>

Creates a document from a list of templates (if more than one template).

</description></function></member>
<member class="wxDocManager" name="OnFileOpen"><function type="void" name="OnFileOpen"><description>

Creates a new document and reads in the selected file.

</description></function></member>
<member class="wxDocManager" name="OnFileSave"><function type="void" name="OnFileSave"><description>

Saves the current document by calling wxDocument::Save for the current document.

</description></function></member>
<member class="wxDocManager" name="OnFileSaveAs"><function type="void" name="OnFileSaveAs"><description>

Calls wxDocument::SaveAs for the current document.

</description></function></member>
<member class="wxDocManager" name="OnMenuCommand"><function type="void" name="OnMenuCommand"><parameters><parameter type="int" name=" cmd"></parameter></parameters><description>

Processes menu commands routed from child or parent frames. This deals
with the following predefined menu item identifiers:

<ul><li> wxID_OPEN Creates a new document and opens a file into it.
</li>
<li> wxID_CLOSE Closes the current document.
</li>
<li> wxID_CLOSE_ALL Closes all documents.
</li>
<li> wxID_NEW Creates a new document.
</li>
<li> wxID_SAVE Saves the document.
</li>
<li> wxID_SAVE_AS Saves the document into a specified filename.
</li></ul>

Unrecognized commands are routed to the currently active wxView's OnMenuCommand.

</description></function></member>
<member class="wxDocManager" name="RemoveDocument"><function type="void" name="RemoveDocument"><parameters><parameter type="wxDocument &#42;" name="doc"></parameter></parameters><description>

Removes the document from the list of documents.

</description></function></member>
<member class="wxDocManager" name="SelectDocumentPath"><function type="wxDocTemplate &#42;" name="SelectDocumentPath"><parameters><parameter type="wxDocTemplate &#42;&#42;" name="templates"></parameter><parameter type="int" name=" noTemplates"></parameter><parameter type="const wxString&amp; " name="path"></parameter><parameter type="const wxString&amp; " name="bufSize"></parameter><parameter type="long" name=" flags"></parameter><parameter type="bool" name=" save"></parameter></parameters><description>

Under Windows, pops up a file selector with a list of filters corresponding to document templates.
The wxDocTemplate corresponding to the selected file's extension is returned.

On other platforms, if there is more than one document template a choice list is popped up,
followed by a file selector.

This function is used in wxDocManager::CreateDocument.

\perlnote{In wxPerl <tt> templates</tt> is a reference to a list of templates.
If you override this method in your document manager it must return
two values, eg:\par
  (doctemplate, path) = My::DocManager-&gt;SelectDocumentPath( ... );
}

</description></function></member>
<member class="wxDocManager" name="SelectDocumentType"><function type="wxDocTemplate &#42;" name="SelectDocumentType"><parameters><parameter type="wxDocTemplate &#42;&#42;" name="templates">Pointer to an array of templates from which to choose a desired template.</parameter><parameter type="int" name=" noTemplates"></parameter><parameter type="bool" name="sort" value="false">If more than one template is passed in in <i> templates</i>, 
then this parameter indicates whether the list of templates that the user 
will have to choose from is sorted or not when shown the choice box dialog.  
Default is false.</parameter></parameters><description>

Returns a document template by asking the user (if there is more than one template).
This function is used in wxDocManager::CreateDocument.







\perlnote{In wxPerl <tt> templates</tt> is a reference to a list of templates.}

</description></function></member>
<member class="wxDocManager" name="SelectViewType"><function type="wxDocTemplate &#42;" name="SelectViewType"><parameters><parameter type="wxDocTemplate &#42;&#42;" name="templates">Pointer to an array of templates from which to choose a desired template.</parameter><parameter type="int" name=" noTemplates"></parameter><parameter type="bool" name="sort" value="false">If more than one template is passed in in <i> templates</i>, 
then this parameter indicates whether the list of templates that the user 
will have to choose from is sorted or not when shown the choice box dialog.  
Default is false.</parameter></parameters><description>

Returns a document template by asking the user (if there is more than one template),
displaying a list of valid views. This function is used in wxDocManager::CreateView.
The dialog normally will not appear because the array of templates only contains
those relevant to the document in question, and often there will only be one such.







\perlnote{In wxPerl <tt> templates</tt> is a reference to a list of templates.}

</description></function></member>
<member class="wxDocManager" name="SetLastDirectory"><function type="void" name="SetLastDirectory"><parameters><parameter type="const wxString&amp;" name=" dir"></parameter></parameters><description>

Sets the directory to be displayed to the user when opening a file. Initially this is empty.

</description></function></member>
<member class="wxDocManager" name="SetMaxDocsOpen"><function type="void" name="SetMaxDocsOpen"><parameters><parameter type="int" name=" n"></parameter></parameters><description>

Sets the maximum number of documents that can be open at a time. By default, this
is 10,000. If you set it to 1, existing documents will be saved and deleted
when the user tries to open or create a new one (similar to the behaviour
of Windows Write, for example). Allowing multiple documents gives behaviour
more akin to MS Word and other Multiple Document Interface applications.



</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDocParentFrame">
<description>
<p class="classdesc">
The wxDocParentFrame class provides a default top-level frame for
applications using the document/view framework. This class can only be used for SDI (not MDI) parent frames.</p><p class="classdesc">It cooperates with the <ref target="wxview">wxView</ref>, <ref target="wxdocument">wxDocument</ref>,
<ref target="wxdocmanager">wxDocManager</ref> and <ref target="wxdoctemplate">wxDocTemplates</ref> classes.</p><p class="classdesc">See the example application in <tt> samples/docview</tt>.</p>
</description>
<parents>
<classref name="wxFrame"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/docview.h"/></includes>
<seealso>

<ref target="docviewoverview">Document/view overview</ref><ref target="wxframe">wxFrame</ref>

</seealso>
<members>
<member class="wxDocParentFrame" name="wxDocParentFrame"><function type="" name="wxDocParentFrame"><parameters><parameter type="wxDocManager&#42;" name=" manager"></parameter><parameter type="wxFrame &#42;" name="parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp; " name="title"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="wxDEFAULT_FRAME_STYLE"></parameter><parameter type="const wxString&amp; " name="name" value="&quot;frame&quot;"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxDocParentFrame" name="~wxDocParentFrame"><function type="" name="~wxDocParentFrame"><description>

Destructor.

</description></function></member>
<member class="wxDocParentFrame" name="OnCloseWindow"><function type="void" name="OnCloseWindow"><parameters><parameter type="wxCloseEvent&amp;" name=" event"></parameter></parameters><description>

Deletes all views and documents. If no user input cancelled the
operation, the frame will be destroyed and the application will exit.

Since understanding how document/view clean-up takes place can be difficult,
the implementation of this function is shown below.

<pre>
void wxDocParentFrame::OnCloseWindow(wxCloseEvent&amp; event)
{
  if (m_docManager-&gt;Clear(!event.CanVeto()))
  {
    this-&gt;Destroy();
  }
  else
    event.Veto();
}
</pre>

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDocTemplate">
<description>
<p class="classdesc">
The wxDocTemplate class is used to model the relationship between a
document class and a view class.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/docview.h"/></includes>
<seealso>

<ref target="wxdoctemplateoverview">wxDocTemplate overview</ref><ref target="wxdocument">wxDocument</ref><ref target="wxview">wxView</ref>

</seealso>
<members>
<member class="wxDocTemplate" name="m_defaultExt"></member>
<member class="wxDocTemplate" name="m_description"></member>
<member class="wxDocTemplate" name="m_directory"></member>
<member class="wxDocTemplate" name="m_docClassInfo"></member>
<member class="wxDocTemplate" name="m_docTypeName"></member>
<member class="wxDocTemplate" name="m_documentManager"></member>
<member class="wxDocTemplate" name="m_fileFilter"></member>
<member class="wxDocTemplate" name="m_flags"></member>
<member class="wxDocTemplate" name="m_viewClassInfo"></member>
<member class="wxDocTemplate" name="m_viewTypeName"></member>
<member class="wxDocTemplate" name="wxDocTemplate"><function type="" name="wxDocTemplate"><parameters><parameter type="wxDocManager&#42; " name="manager"></parameter><parameter type="const wxString&amp; " name="descr"></parameter><parameter type="const wxString&amp; " name="filter"></parameter><parameter type="const wxString&amp; " name="dir"></parameter><parameter type="const wxString&amp; " name="ext"></parameter><parameter type="const wxString&amp; " name="docTypeName"></parameter><parameter type="const wxString&amp; " name="viewTypeName"></parameter><parameter type="wxClassInfo&#42; " name="docClassInfo" value="NULL"></parameter><parameter type="wxClassInfo&#42; " name="viewClassInfo" value="NULL"></parameter><parameter type="long" name="flags" value="wxDEFAULT_TEMPLATE_FLAGS"></parameter></parameters><description>

Constructor. Create instances dynamically near the start of your application after creating
a wxDocManager instance, and before doing any document or view operations.

<i> manager</i> is the document manager object which manages this template.

<i> descr</i> is a short description of what the template is for. This string will be displayed in the
file filter list of Windows file selectors.

<i> filter</i> is an appropriate file filter such as <tt> &#42;.txt</tt>.

<i> dir</i> is the default directory to use for file selectors.

<i> ext</i> is the default file extension (such as txt).

<i> docTypeName</i> is a name that should be unique for a given type of document, used for
gathering a list of views relevant to a particular document.

<i> viewTypeName</i> is a name that should be unique for a given view.

<i> docClassInfo</i> is a pointer to the run-time document class information as returned
by the CLASSINFO macro, e.g. CLASSINFO(MyDocumentClass). If this is not supplied,
you will need to derive a new wxDocTemplate class and override the CreateDocument
member to return a new document instance on demand.

<i> viewClassInfo</i> is a pointer to the run-time view class information as returned
by the CLASSINFO macro, e.g. CLASSINFO(MyViewClass). If this is not supplied,
you will need to derive a new wxDocTemplate class and override the CreateView
member to return a new view instance on demand.

<i> flags</i> is a bit list of the following:

<ul><li> wxTEMPLATE_VISIBLE The template may be displayed to the user in dialogs.
</li>
<li> wxTEMPLATE_INVISIBLE The template may not be displayed to the user in dialogs.
</li>
<li> wxDEFAULT_TEMPLATE_FLAGS Defined as wxTEMPLATE_VISIBLE.
</li></ul>

\perlnote{In wxPerl <tt> docClassInfo</tt> and <tt> viewClassInfo</tt> can be
either <tt> Wx::ClassInfo</tt> objects or strings which contain the name
of the perl packages which are to be used as <tt> Wx::Document</tt> and
<tt> Wx::View</tt> classes (they must have a constructor named <tt>
new</tt>):\par
\indented{2cm}{<table>
<tr><td><b> Wx::DocTemplate-&gt;new( docmgr, descr, filter, dir,
ext, docTypeName, viewTypeName, docClassInfo, viewClassInfo, flags
)</b></td><td> will construct document and view objects from the class information</td></tr>
<tr><td><b> Wx::DocTemplate-&gt;new( docmgr, descr, filter, dir,
ext, docTypeName, viewTypeName, docClassName, viewClassName, flags
)</b></td><td> will construct document and view objects from perl packages</td></tr>
<tr><td><b> Wx::DocTemplate-&gt;new( docmgr, descr, filter, dir,
ext, docTypeName, viewTypeName )</b></td><td>
<tt> Wx::DocTemplate::CreateDocument()</tt> and
<tt> Wx::DocTemplate::CreateView()</tt> must be overridden</td></tr>
</table>}}

</description></function></member>
<member class="wxDocTemplate" name="~wxDocTemplate"><function type="void" name="~wxDocTemplate"><description>

Destructor.

</description></function></member>
<member class="wxDocTemplate" name="CreateDocument"><function type="wxDocument &#42;" name="CreateDocument"><parameters><parameter type="const wxString&amp; " name="path"></parameter><parameter type="long" name="flags" value="0"></parameter></parameters><description>

Creates a new instance of the associated document class. If you have not supplied
a wxClassInfo parameter to the template constructor, you will need to override this
function to return an appropriate document instance.

</description></function></member>
<member class="wxDocTemplate" name="CreateView"><function type="wxView &#42;" name="CreateView"><parameters><parameter type="wxDocument &#42;" name="doc"></parameter><parameter type="long" name="flags" value="0"></parameter></parameters><description>

Creates a new instance of the associated view class. If you have not supplied
a wxClassInfo parameter to the template constructor, you will need to override this
function to return an appropriate view instance.

</description></function></member>
<member class="wxDocTemplate" name="GetDefaultExtension"><function type="wxString" name="GetDefaultExtension"><description>

Returns the default file extension for the document data, as passed to the document template constructor.

</description></function></member>
<member class="wxDocTemplate" name="GetDescription"><function type="wxString" name="GetDescription"><description>

Returns the text description of this template, as passed to the document template constructor.

</description></function></member>
<member class="wxDocTemplate" name="GetDirectory"><function type="wxString" name="GetDirectory"><description>

Returns the default directory, as passed to the document template constructor.

</description></function></member>
<member class="wxDocTemplate" name="GetDocumentManager"><function type="wxDocManager &#42;" name="GetDocumentManager"><description>

Returns a pointer to the document manager instance for which this template was created.

</description></function></member>
<member class="wxDocTemplate" name="GetDocumentName"><function type="wxString" name="GetDocumentName"><description>

Returns the document type name, as passed to the document template constructor.

</description></function></member>
<member class="wxDocTemplate" name="GetFileFilter"><function type="wxString" name="GetFileFilter"><description>

Returns the file filter, as passed to the document template constructor.

</description></function></member>
<member class="wxDocTemplate" name="GetFlags"><function type="long" name="GetFlags"><description>

Returns the flags, as passed to the document template constructor.

</description></function></member>
<member class="wxDocTemplate" name="GetViewName"><function type="wxString" name="GetViewName"><description>

Returns the view type name, as passed to the document template constructor.

</description></function></member>
<member class="wxDocTemplate" name="IsVisible"><function type="bool" name="IsVisible"><description>

Returns true if the document template can be shown in user dialogs, false otherwise.

</description></function></member>
<member class="wxDocTemplate" name="SetDefaultExtension"><function type="void" name="SetDefaultExtension"><parameters><parameter type="const wxString&amp; " name="ext"></parameter></parameters><description>

Sets the default file extension.

</description></function></member>
<member class="wxDocTemplate" name="SetDescription"><function type="void" name="SetDescription"><parameters><parameter type="const wxString&amp; " name="descr"></parameter></parameters><description>

Sets the template description.

</description></function></member>
<member class="wxDocTemplate" name="SetDirectory"><function type="void" name="SetDirectory"><parameters><parameter type="const wxString&amp; " name="dir"></parameter></parameters><description>

Sets the default directory.

</description></function></member>
<member class="wxDocTemplate" name="SetDocumentManager"><function type="void" name="SetDocumentManager"><parameters><parameter type="wxDocManager &#42;" name="manager"></parameter></parameters><description>

Sets the pointer to the document manager instance for which this template was created.
Should not be called by the application.

</description></function></member>
<member class="wxDocTemplate" name="SetFileFilter"><function type="void" name="SetFileFilter"><parameters><parameter type="const wxString&amp; " name="filter"></parameter></parameters><description>

Sets the file filter.

</description></function></member>
<member class="wxDocTemplate" name="SetFlags"><function type="void" name="SetFlags"><parameters><parameter type="long " name="flags"></parameter></parameters><description>

Sets the internal document template flags (see the constructor description for more details).

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDocument">
<description>
<p class="classdesc">
The document class can be used to model an application's file-based
data. It is part of the document/view framework supported by wxWindows,
and cooperates with the <ref target="wxview">wxView</ref>, <ref target="wxdoctemplate">wxDocTemplate</ref>
and <ref target="wxdocmanager">wxDocManager</ref> classes.</p>
</description>
<parents>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/docview.h"/></includes>
<seealso>

<ref target="wxdocumentoverview">wxDocument overview</ref><ref target="wxview">wxView</ref>,
<ref target="wxdoctemplate">wxDocTemplate</ref><ref target="wxdocmanager">wxDocManager</ref>

</seealso>
<members>
<member class="wxDocument" name="m_commandProcessor"></member>
<member class="wxDocument" name="m_documentFile"></member>
<member class="wxDocument" name="m_documentModified"></member>
<member class="wxDocument" name="m_documentTemplate"></member>
<member class="wxDocument" name="m_documentTitle"></member>
<member class="wxDocument" name="m_documentTypeName"></member>
<member class="wxDocument" name="m_documentViews"></member>
<member class="wxDocument" name="wxDocument"><function type="" name="wxDocument"><description>

Constructor. Define your own default constructor to initialize application-specific
data.

</description></function></member>
<member class="wxDocument" name="~wxDocument"><function type="" name="~wxDocument"><description>

Destructor. Removes itself from the document manager.

</description></function></member>
<member class="wxDocument" name="AddView"><function type="virtual bool" name="AddView"><parameters><parameter type="wxView &#42;" name="view"></parameter></parameters><description>

If the view is not already in the list of views, adds the view and calls OnChangedViewList.

</description></function></member>
<member class="wxDocument" name="Close"><function type="virtual bool" name="Close"><description>

Closes the document, by calling OnSaveModified and then (if this returned true) OnCloseDocument.
This does not normally delete the document object: use DeleteAllViews to do this implicitly.

</description></function></member>
<member class="wxDocument" name="DeleteAllViews"><function type="virtual bool" name="DeleteAllViews"><description>

Calls wxView::Close and deletes each view. Deleting the final view will implicitly
delete the document itself, because the wxView destructor calls RemoveView. This
in turns calls wxDocument::OnChangedViewList, whose default implemention is to
save and delete the document if no views exist.

</description></function></member>
<member class="wxDocument" name="GetCommandProcessor"><function type="wxCommandProcessor&#42;" name="GetCommandProcessor" suffix="const"><description>

Returns a pointer to the command processor associated with this document.

See <ref target="wxcommandprocessor">wxCommandProcessor</ref>.

</description></function></member>
<member class="wxDocument" name="GetDocumentTemplate"><function type="wxDocTemplate&#42;" name="GetDocumentTemplate" suffix="const"><description>

Gets a pointer to the template that created the document.

</description></function></member>
<member class="wxDocument" name="GetDocumentManager"><function type="wxDocManager&#42;" name="GetDocumentManager" suffix="const"><description>

Gets a pointer to the associated document manager.

</description></function></member>
<member class="wxDocument" name="GetDocumentName"><function type="wxString" name="GetDocumentName" suffix="const"><description>

Gets the document type name for this document. See the comment for <ref target="documenttypename">documentTypeName</ref>.

</description></function></member>
<member class="wxDocument" name="GetDocumentWindow"><function type="wxWindow&#42;" name="GetDocumentWindow" suffix="const"><description>

Intended to return a suitable window for using as a parent for document-related
dialog boxes. By default, uses the frame associated with the first view.

</description></function></member>
<member class="wxDocument" name="GetFilename"><function type="wxString" name="GetFilename" suffix="const"><description>

Gets the filename associated with this document, or &quot;&quot; if none is
associated.

</description></function></member>
<member class="wxDocument" name="GetFirstView"><function type="wxView &#42;" name="GetFirstView" suffix="const"><description>

A convenience function to get the first view for a document, because
in many cases a document will only have a single view.

See also: <ref target="wxdocumentgetviews">GetViews</ref>

</description></function></member>
<member class="wxDocument" name="GetPrintableName"><function type="virtual void" name="GetPrintableName" suffix="const"><parameters><parameter type="wxString&amp; " name="name"></parameter></parameters><description>

Copies a suitable document name into the supplied <i> name</i> buffer. The default
function uses the title, or if there is no title, uses the filename; or if no
filename, the string <b> unnamed</b>. 

</description></function></member>
<member class="wxDocument" name="GetTitle"><function type="wxString" name="GetTitle" suffix="const"><description>

Gets the title for this document. The document title is used for an associated
frame (if any), and is usually constructed by the framework from
the filename.

</description></function></member>
<member class="wxDocument" name="GetViews"><function type="wxList &amp;" name="GetViews" suffix="const"><description>

Returns the list whose elements are the views on the document.

See also: <ref target="wxdocumentgetfirstview">GetFirstView</ref>

</description></function></member>
<member class="wxDocument" name="IsModified"><function type="virtual bool" name="IsModified" suffix="const"><description>

Returns true if the document has been modified since the last save, false otherwise.
You may need to override this if your document view maintains its own
record of being modified (for example if using wxTextWindow to view and edit the document).

See also <ref target="wxdocumentmodify">Modify</ref>.

</description></function></member>
<member class="wxDocument" name="LoadObject"><function type="virtual istream&amp;" name="LoadObject"><parameters><parameter type="istream&amp; " name="stream"></parameter></parameters><description>

</description></function>
<function type="virtual wxInputStream&amp;" name="LoadObject"><parameters><parameter type="wxInputStream&amp; " name="stream"></parameter></parameters><description>

Override this function and call it from your own LoadObject before
streaming your own data. LoadObject is called by the framework
automatically when the document contents need to be loaded.

Note that only one of these forms exists, depending on how wxWindows
was configured.

</description></function></member>
<member class="wxDocument" name="Modify"><function type="virtual void" name="Modify"><parameters><parameter type="bool" name=" modify"></parameter></parameters><description>

Call with true to mark the document as modified since the last save, false otherwise.
You may need to override this if your document view maintains its own
record of being modified (for example if using wxTextWindow to view and edit the document).

See also <ref target="wxdocumentismodified">IsModified</ref>.

</description></function></member>
<member class="wxDocument" name="OnChangedViewList"><function type="virtual void" name="OnChangedViewList"><description>

Called when a view is added to or deleted from this document. The default
implementation saves and deletes the document if no views exist (the last
one has just been removed).

</description></function></member>
<member class="wxDocument" name="OnCloseDocument"><function type="virtual bool" name="OnCloseDocument"><description>

The default implementation calls DeleteContents (an empty implementation)
sets the modified flag to false. Override this to
supply additional behaviour when the document is closed with Close.

</description></function></member>
<member class="wxDocument" name="OnCreate"><function type="virtual bool" name="OnCreate"><parameters><parameter type="const wxString&amp; " name="path"></parameter><parameter type="long" name=" flags"></parameter></parameters><description>

Called just after the document object is created to give it a chance
to initialize itself. The default implementation uses the
template associated with the document to create an initial view.
If this function returns false, the document is deleted.

</description></function></member>
<member class="wxDocument" name="OnCreateCommandProcessor"><function type="virtual wxCommandProcessor&#42;" name="OnCreateCommandProcessor"><description>

Override this function if you want a different (or no) command processor
to be created when the document is created. By default, it returns
an instance of wxCommandProcessor.

See <ref target="wxcommandprocessor">wxCommandProcessor</ref>.

</description></function></member>
<member class="wxDocument" name="OnNewDocument"><function type="virtual bool" name="OnNewDocument"><description>

The default implementation calls OnSaveModified and DeleteContents, makes a default title for the
document, and notifies the views that the filename (in fact, the title) has changed.

</description></function></member>
<member class="wxDocument" name="OnOpenDocument"><function type="virtual bool" name="OnOpenDocument"><parameters><parameter type="const wxString&amp; " name="filename"></parameter></parameters><description>

Constructs an input file stream for the given filename (which must not be empty),
and calls LoadObject. If LoadObject returns true, the document is set to
unmodified; otherwise, an error message box is displayed. The document's
views are notified that the filename has changed, to give windows an opportunity
to update their titles. All of the document's views are then updated.

</description></function></member>
<member class="wxDocument" name="OnSaveDocument"><function type="virtual bool" name="OnSaveDocument"><parameters><parameter type="const wxString&amp; " name="filename"></parameter></parameters><description>

Constructs an output file stream for the given filename (which must not be empty),
and calls SaveObject. If SaveObject returns true, the document is set to
unmodified; otherwise, an error message box is displayed.

</description></function></member>
<member class="wxDocument" name="OnSaveModified"><function type="virtual bool" name="OnSaveModified"><description>

If the document has been modified, prompts the user to ask if the changes should
be changed. If the user replies Yes, the Save function is called. If No, the
document is marked as unmodified and the function succeeds. If Cancel, the
function fails.

</description></function></member>
<member class="wxDocument" name="RemoveView"><function type="virtual bool" name="RemoveView"><parameters><parameter type="wxView&#42; " name="view"></parameter></parameters><description>

Removes the view from the document's list of views, and calls OnChangedViewList.

</description></function></member>
<member class="wxDocument" name="Save"><function type="virtual bool" name="Save"><description>

Saves the document by calling OnSaveDocument if there is an associated filename,
or SaveAs if there is no filename.

</description></function></member>
<member class="wxDocument" name="SaveAs"><function type="virtual bool" name="SaveAs"><description>

Prompts the user for a file to save to, and then calls OnSaveDocument.

</description></function></member>
<member class="wxDocument" name="SaveObject"><function type="virtual ostream&amp;" name="SaveObject"><parameters><parameter type="ostream&amp; " name="stream"></parameter></parameters><description>

</description></function>
<function type="virtual wxOutputStream&amp;" name="SaveObject"><parameters><parameter type="wxOutputStream&amp; " name="stream"></parameter></parameters><description>

Override this function and call it from your own SaveObject before
streaming your own data. SaveObject is called by the framework
automatically when the document contents need to be saved.

Note that only one of these forms exists, depending on how wxWindows
was configured.

</description></function></member>
<member class="wxDocument" name="SetCommandProcessor"><function type="virtual void" name="SetCommandProcessor"><parameters><parameter type="wxCommandProcessor &#42;" name="processor"></parameter></parameters><description>

Sets the command processor to be used for this document. The document will then be responsible
for its deletion. Normally you should not call this; override OnCreateCommandProcessor
instead.

See <ref target="wxcommandprocessor">wxCommandProcessor</ref>.

</description></function></member>
<member class="wxDocument" name="SetDocumentName"><function type="void" name="SetDocumentName"><parameters><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Sets the document type name for this document. See the comment for <ref target="documenttypename">documentTypeName</ref>.

</description></function></member>
<member class="wxDocument" name="SetDocumentTemplate"><function type="void" name="SetDocumentTemplate"><parameters><parameter type="wxDocTemplate&#42; " name="templ"></parameter></parameters><description>

Sets the pointer to the template that created the document. Should only be called by the
framework.

</description></function></member>
<member class="wxDocument" name="SetFilename"><function type="void" name="SetFilename"><parameters><parameter type="const wxString&amp; " name="filename"></parameter><parameter type="bool" name="notifyViews" value="false"></parameter></parameters><description>

Sets the filename for this document. Usually called by the framework.

If <i> notifyViews</i> is true, wxView::OnChangeFilename is called for all views.

</description></function></member>
<member class="wxDocument" name="SetTitle"><function type="void" name="SetTitle"><parameters><parameter type="const wxString&amp; " name="title"></parameter></parameters><description>

Sets the title for this document. The document title is used for an associated
frame (if any), and is usually constructed by the framework from
the filename.

</description></function></member>
<member class="wxDocument" name="UpdateAllViews"><function type="void" name="UpdateAllViews"><parameters><parameter type="wxView&#42; " name="sender" value="NULL"></parameter><parameter type="wxObject&#42;" name="hint" value="NULL"></parameter></parameters><description>

Updates all views. If <i> sender</i> is non-NULL, does not update this view.

<i> hint</i> represents optional information to allow a view to optimize its update.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDragImage">
<description>
<p class="classdesc">
This class is used when you wish to drag an object on the screen,
and a simple cursor is not enough.</p><p class="classdesc">On Windows, the WIN32 API is used to do achieve smooth dragging. On other platforms,
wxGenericDragImage is used. Applications may also prefer to use
wxGenericDragImage on Windows, too.</p>
<p class="classdesc">To use this class, when you wish to start dragging an image, create a wxDragImage
object and store it somewhere you can access it as the drag progresses.
Call BeginDrag to start, and EndDrag to stop the drag. To move the image,
initially call Show and then Move. If you wish to update the screen contents
during the drag (for example, highlight an item as in the dragimag sample), first call Hide,
update the screen, call Move, and then call Show.</p><p class="classdesc">You can drag within one window, or you can use full-screen dragging
either across the whole screen, or just restricted to one area
of the screen to save resources. If you want the user to drag between
two windows, then you will need to use full-screen dragging.</p><p class="classdesc">If you wish to draw the image yourself, use wxGenericDragImage and
override <ref target="wxdragimagedodrawimage">wxDragImage::DoDrawImage</ref> and 
<ref target="wxdragimagegetimagerect">wxDragImage::GetImageRect</ref>.</p><p class="classdesc">Please see <tt> samples/dragimag</tt> for an example.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/dragimag.h" comment="&lt;wx/generic/dragimgg.h&gt;"/></includes>
<members>
<member class="wxDragImage" name="wxDragImage"><function type="" name="wxDragImage"><description>

Default constructor.

</description></function>
<function type="" name="wxDragImage"><parameters><parameter type="const wxBitmap&amp; " name="image">Icon or bitmap to be used as the drag image. The bitmap can
have a mask.</parameter><parameter type="const wxCursor&amp; " name="cursor" value="wxNullCursor">Optional cursor to combine with the image.</parameter><parameter type="const wxPoint&amp; " name="cursorHotspot" value="wxPoint(0,"></parameter></parameters><description>

Constructs a drag image from a bitmap and optional cursor.

</description></function>
<function type="" name="wxDragImage"><parameters><parameter type="const wxIcon&amp; " name="image">Icon or bitmap to be used as the drag image. The bitmap can
have a mask.</parameter><parameter type="const wxCursor&amp; " name="cursor" value="wxNullCursor">Optional cursor to combine with the image.</parameter><parameter type="const wxPoint&amp; " name="cursorHotspot" value="wxPoint(0,"></parameter></parameters><description>

Constructs a drag image from an icon and optional cursor.

\pythonnote{This constructor is called wxDragIcon in wxPython.}

</description></function>
<function type="" name="wxDragImage"><parameters><parameter type="const wxString&amp; " name="text">Text used to construct a drag image.</parameter><parameter type="const wxCursor&amp; " name="cursor" value="wxNullCursor">Optional cursor to combine with the image.</parameter><parameter type="const wxPoint&amp; " name="cursorHotspot" value="wxPoint(0,"></parameter></parameters><description>

Constructs a drag image from a text string and optional cursor.

\pythonnote{This constructor is called wxDragString in wxPython.}

</description></function>
<function type="" name="wxDragImage"><parameters><parameter type="const wxTreeCtrl&amp; " name="treeCtrl">Tree control for constructing a tree drag image.</parameter><parameter type="wxTreeItemId&amp; " name="id">Tree or list control item id.</parameter></parameters><description>

Constructs a drag image from the text in the given tree control item, and optional cursor.

\pythonnote{This constructor is called wxDragTreeItem in wxPython.}

</description></function>
<function type="" name="wxDragImage"><parameters><parameter type="const wxListCtrl&amp; " name="treeCtrl">Tree control for constructing a tree drag image.</parameter><parameter type="long " name="id">Tree or list control item id.</parameter></parameters><description>

Constructs a drag image from the text in the given tree control item, and optional cursor.

\pythonnote{This constructor is called wxDragListItem in wxPython.}

</description></function>
<function type="" name="wxDragImage"><parameters><parameter type="const wxCursor&amp; " name="cursor" value="wxNullCursor">Optional cursor to combine with the image.</parameter><parameter type="const wxPoint&amp; " name="cursorHotspot" value="wxPoint(0,"></parameter></parameters><description>

Constructs a drag image an optional cursor. This constructor is only available for
wxGenericDragImage, and can be used when the application
supplies <ref target="wxdragimagedodrawimage">wxDragImage::DoDrawImage</ref> and <ref target="wxdragimagegetimagerect">wxDragImage::GetImageRect</ref>.

















</description></function></member>
<member class="wxDragImage" name="BeginDrag"><function type="bool" name="BeginDrag"><parameters><parameter type="const wxPoint&amp; " name="hotspot">The location of the drag position relative to the upper-left corner
of the image.</parameter><parameter type="wxWindow&#42; " name="window">The window that captures the mouse, and within which the dragging
is limited unless <i> fullScreen</i> is true.</parameter><parameter type="bool" name="fullScreen" value="false">If true, specifies that the drag will be visible over the full
screen, or over as much of the screen as is specified by <i> rect</i>. Note that the mouse will
still be captured in <i> window</i>.</parameter><parameter type="wxRect&#42;" name="rect" value="NULL">If non-NULL, specifies the rectangle (in screen coordinates) that
bounds the dragging operation. Specifying this can make the operation more efficient
by cutting down on the area under consideration, and it can also make a visual difference
since the drag is clipped to this area.</parameter></parameters><description>

Start dragging the image, in a window or full screen.

</description></function>
<function type="bool" name="BeginDrag"><parameters><parameter type="const wxPoint&amp; " name="hotspot">The location of the drag position relative to the upper-left corner
of the image.</parameter><parameter type="wxWindow&#42; " name="window">The window that captures the mouse, and within which the dragging
is limited unless <i> fullScreen</i> is true.</parameter><parameter type="wxWindow&#42;" name=" boundingWindow"></parameter></parameters><description>

Start dragging the image, using the first window to capture the mouse and the second
to specify the bounding area. This form is equivalent to using the first form,
but more convenient than working out the bounding rectangle explicitly.

You need to then call <ref target="wxdragimageshow">wxDragImage::Show</ref> 
and <ref target="wxdragimagemove">wxDragImage::Move</ref> to show the image on the screen.

Call <ref target="wxdragimageenddrag">wxDragImage::EndDrag</ref> when the drag has finished.

Note that this call automatically calls CaptureMouse.













</description></function></member>
<member class="wxDragImage" name="DoDrawImage"><function type="virtual bool" name="DoDrawImage"><parameters><parameter type="wxDC&amp;" name=" dc"></parameter><parameter type="const wxPoint&amp;" name=" pos"></parameter></parameters><description>

Draws the image on the device context with top-left corner at the given position.

This function is only available with wxGenericDragImage, to allow applications to
draw their own image instead of using an actual bitmap. If you override this function,
you must also override <ref target="wxdragimagegetimagerect">wxDragImage::GetImageRect</ref>.

</description></function></member>
<member class="wxDragImage" name="EndDrag"><function type="bool" name="EndDrag"><description>

Call this when the drag has finished.

Note that this call automatically calls ReleaseMouse.

</description></function></member>
<member class="wxDragImage" name="GetImageRect"><function type="virtual wxRect" name="GetImageRect" suffix="const"><parameters><parameter type="const wxPoint&amp;" name=" pos"></parameter></parameters><description>

Returns the rectangle enclosing the image, assuming that the image is drawn with its
top-left corner at the given point.

This function is available in wxGenericDragImage only, and may be overridden (together with 
<ref target="wxdragimagedodrawimage">wxDragImage::DoDrawImage</ref>) to provide a virtual drawing capability.

</description></function></member>
<member class="wxDragImage" name="Hide"><function type="bool" name="Hide"><description>

Hides the image. You may wish to call this before updating the window
contents (perhaps highlighting an item). Then call <ref target="wxdragimagemove">wxDragImage::Move</ref> 
and <ref target="wxdragimageshow">wxDragImage::Show</ref>.

</description></function></member>
<member class="wxDragImage" name="Move"><function type="bool" name="Move"><parameters><parameter type="const wxPoint&amp; " name="pt"></parameter></parameters><description>

Call this to move the image to a new position. The image will only be shown if 
<ref target="wxdragimageshow">wxDragImage::Show</ref> has been called previously (for example
at the start of the drag).

<i> pt</i> is the position in client coordinates (relative to the window specified in BeginDrag).

You can move the image either when the image is hidden or shown, but in general dragging
will be smoother if you move the image when it is shown.

</description></function></member>
<member class="wxDragImage" name="Show"><function type="bool" name="Show"><description>

Shows the image. Call this at least once when dragging.

</description></function></member>
<member class="wxDragImage" name="UpdateBackingFromWindow"><function type="bool" name="UpdateBackingFromWindow" suffix="const"><parameters><parameter type="wxDC&amp;" name=" windowDC"></parameter><parameter type="wxMemoryDC&amp;" name=" destDC"></parameter><parameter type="const wxRect&amp;" name=" sourceRect"></parameter><parameter type="const wxRect&amp;" name=" destRect"></parameter></parameters><description>

Override this if you wish to draw the window contents to the backing bitmap
yourself. This can be desirable if you wish to avoid flicker by not having to
redraw the updated window itself just before dragging, which can cause a flicker just
as the drag starts. Instead, paint the drag image's backing bitmap to show the appropriate
graphic <i> minus the objects to be dragged</i>, and leave the window itself to be updated
by the drag image. This can provide eerily smooth, flicker-free drag behaviour.

The default implementation copies the window contents to the backing bitmap. A new
implementation will normally copy information from another source, such as from its
own backing bitmap if it has one, or directly from internal data structures.

This function is available in wxGenericDragImage only.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDropFilesEvent">
<description>
<p class="classdesc">
This class is used for drop files events, that is, when files have been dropped
onto the window. This functionality is currently only available under Windows.
The window must have previously been enabled for dropping by calling 
<ref target="wxwindowdragacceptfiles">wxWindow::DragAcceptFiles</ref>.</p><p class="classdesc">Important note: this is a separate implementation to the more general
drag and drop implementation documented <ref target="wxdndoverview">here</ref>. It uses the
older, Windows message-based approach of dropping files.</p>
</description>
<parents>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_DROP_FILES(func)">Process a wxEVT_DROP_FILES event.</event></events>
<seealso>

<ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxDropFilesEvent" name="wxDropFilesEvent"><function type="" name="wxDropFilesEvent"><parameters><parameter type="WXTYPE " name="id" value="0"></parameter><parameter type="int " name="noFiles" value="0"></parameter><parameter type="wxString&#42; " name="files" value="NULL"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxDropFilesEvent" name="m_files"></member>
<member class="wxDropFilesEvent" name="m_noFiles"></member>
<member class="wxDropFilesEvent" name="m_pos"></member>
<member class="wxDropFilesEvent" name="GetFiles"><function type="wxString&#42;" name="GetFiles" suffix="const"><description>

Returns an array of filenames.

</description></function></member>
<member class="wxDropFilesEvent" name="GetNumberOfFiles"><function type="int" name="GetNumberOfFiles" suffix="const"><description>

Returns the number of files dropped.

</description></function></member>
<member class="wxDropFilesEvent" name="GetPosition"><function type="wxPoint" name="GetPosition" suffix="const"><description>

Returns the position at which the files were dropped.

Returns an array of filenames.


</description></function></member></members>
<supported>
<platform name="gtk" status="N"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="N"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDropSource">
<description>
<p class="classdesc">
This class represents a source for a drag and drop operation.</p><p class="classdesc">See <ref target="wxdndoverview">Drag and drop overview</ref> and <ref target="wxdataobjectoverview">wxDataObject overview</ref> 
for more information.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/dnd.h"/></includes>
<types>

\index{wxDragResult}wxDragResult is defined as follows:

<pre>
enum wxDragResult
{
    wxDragError,    // error prevented the d&amp;d operation from completing
    wxDragNone,     // drag target didn't accept the data
    wxDragCopy,     // the data was successfully copied
    wxDragMove,     // the data was successfully moved
    wxDragCancel    // the operation was cancelled by user (not an error)
};
</pre>

</types>
<seealso>

<ref target="wxdroptarget">wxDropTarget</ref>
<ref target="wxtextdroptarget">wxTextDropTarget</ref><ref target="wxfiledroptarget">wxFileDropTarget</ref>

</seealso>
<members>
<member class="wxDropSource" name="wxDropSource"><function type="" name="wxDropSource"><parameters><parameter type="wxWindow&#42;" name="win" value="NULL">The window which initiates the drag and drop operation.</parameter><parameter type="const wxIconOrCursor&amp; " name="iconCopy" value="wxNullIconOrCursor">The icon or cursor used for feedback for copy operation.</parameter><parameter type="const wxIconOrCursor&amp; " name="iconCopy" value="wxNullIconOrCursor">The icon or cursor used for feedback for copy operation.</parameter><parameter type="const wxIconOrCursor&amp; " name="iconNone" value="wxNullIconOrCursor">The icon or cursor used for feedback when operation can't be done.</parameter></parameters><description>

</description></function>
<function type="" name="wxDropSource"><parameters><parameter type="wxDataObject&amp;" name=" data"></parameter><parameter type="wxWindow&#42;" name="win" value="NULL">The window which initiates the drag and drop operation.</parameter><parameter type="const wxIconOrCursor&amp; " name="iconCopy" value="wxNullIconOrCursor">The icon or cursor used for feedback for copy operation.</parameter><parameter type="const wxIconOrCursor&amp; " name="iconCopy" value="wxNullIconOrCursor">The icon or cursor used for feedback for copy operation.</parameter><parameter type="const wxIconOrCursor&amp; " name="iconNone" value="wxNullIconOrCursor">The icon or cursor used for feedback when operation can't be done.</parameter></parameters><description>

The constructors for wxDataObject.

If you use the constructor without <i> data</i> parameter you must call 
<ref target="wxdropsourcesetdata">SetData</ref> later.

Note that the exact type of <i> iconCopy</i> and subsequent parameters differs
between wxMSW and wxGTK: these are cursors under Windows but icons for GTK.
You should use the macro <ref target="wxdropicon">wxDROP_ICON</ref> in portable
programs instead of directly using either of these types.











<i> win</i> is the window which initiates the drag and drop operation.

</description></function></member>
<member class="wxDropSource" name="~wxDropSource"><function type="virtual " name="~wxDropSource"><description>

</description></function></member>
<member class="wxDropSource" name="SetData"><function type="void" name="SetData"><parameters><parameter type="wxDataObject&amp;" name=" data"></parameter></parameters><description>

Sets the data <ref target="wxdataobject">wxDataObject</ref> associated with the 
drop source. This will not delete any previously associated data.

</description></function></member>
<member class="wxDropSource" name="DoDragDrop"><function type="virtual wxDragResult" name="DoDragDrop"><parameters><parameter type="int " name="flags" value="wxDrag_CopyOnly">If <tt> wxDrag_AllowMove</tt> is included in the flags, data may
be moved and not only copied (default). If <tt> wxDrag_DefaultMove</tt> is
specified (which includes the previous flag), this is even the default
operation</parameter></parameters><returnvalue>

Returns the operation requested by the user, may be <tt> wxDragCopy</tt>, <tt>
wxDragMove</tt>, <tt> wxDragCancel</tt> or <tt> wxDragNone</tt> if an error occured.

</returnvalue><description>

Do it (call this in response to a mouse button press, for example). This starts
the drag-and-drop operation which will terminate when the user releases the
mouse.



.

</description></function></member>
<member class="wxDropSource" name="GiveFeedback"><function type="virtual bool" name="GiveFeedback"><parameters><parameter type="wxDragResult " name="effect">The effect to implement. One of wxDragCopy, wxDragMove and wxDragNone. </parameter><parameter type="bool " name="scrolling">true if the window is scrolling. MSW only. </parameter></parameters><returnvalue>

Return false if you want default feedback, or true if you implement your own
feedback. The return values is ignored under GTK.

</returnvalue><description>

Overridable: you may give some custom UI feedback during the drag and drop operation
in this function. It is called on each mouse move, so your implementation must not be too
slow.







</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDropTarget">
<description>
<p class="classdesc">
This class represents a target for a drag and drop operation. A <ref target="wxdataobject">wxDataObject</ref>
can be associated with it and by default, this object will be filled with the data from the
drag source, if the data formats supported by the data object match the drag source data 
format.</p><p class="classdesc">There are various virtual handler functions defined in this class which may be overridden
to give visual feedback or react in a more fine-tuned way, e.g. by not accepting data on
the whole window area, but only a small portion of it. The normal sequence of calls is
<ref target="wxdroptargetonenter">OnEnter</ref>, possibly many times <ref target="wxdroptargetondragover">OnDragOver</ref>,
<ref target="wxdroptargetondrop">OnDrop</ref> and finally <ref target="wxdroptargetondata">OnData</ref>.</p><p class="classdesc">See <ref target="wxdndoverview">Drag and drop overview</ref> and <ref target="wxdataobjectoverview">wxDataObject overview</ref>
for more information.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/dnd.h"/></includes>
<types>

\index{wxDragResult}wxDragResult is defined as follows:

<pre>
enum wxDragResult
{
    wxDragError,    // error prevented the d&amp;d operation from completing
    wxDragNone,     // drag target didn't accept the data
    wxDragCopy,     // the data was successfully copied
    wxDragMove,     // the data was successfully moved
    wxDragCancel    // the operation was cancelled by user (not an error)
};
</pre>

</types>
<seealso>

<ref target="wxdropsource">wxDropSource</ref>
<ref target="wxtextdroptarget">wxTextDropTarget</ref><ref target="wxfiledroptarget">wxFileDropTarget</ref>,
<ref target="wxdataformat">wxDataFormat</ref><ref target="wxdataobject">wxDataObject</ref>

</seealso>
<members>
<member class="wxDropTarget" name="wxDropTarget"><function type="" name="wxDropTarget"><parameters><parameter type="wxDataObject&#42;" name="data" value="NULL"></parameter></parameters><description>

Constructor. <i> data</i> is the data to be associated with the drop target.

</description></function></member>
<member class="wxDropTarget" name="~wxDropTarget"><function type="" name="~wxDropTarget"><description>

Destructor. Deletes the associated data object, if any.

</description></function></member>
<member class="wxDropTarget" name="GetData"><function type="virtual void" name="GetData"><description>

This method may only be called from within <ref target="wxdroptargetondata">OnData</ref>.
By default, this method copies the data from the drop source to the 
<ref target="wxdataobject">wxDataObject</ref> associated with this drop target,
calling its <ref target="wxdataobjectsetdata">wxDataObject::SetData</ref> method.

</description></function></member>
<member class="wxDropTarget" name="OnData"><function type="virtual wxDragResult" name="OnData"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter><parameter type="wxDragResult" name=" def"></parameter></parameters><description>

Called after <ref target="wxdroptargetondrop">OnDrop</ref> returns true. By default this
will usually <ref target="wxdroptargetgetdata">GetData</ref> and will return the suggested
default value <i> def</i>.

</description></function></member>
<member class="wxDropTarget" name="OnDrop"><function type="virtual bool" name="OnDrop"><parameters><parameter type="wxCoord " name="x">The x coordinate of the mouse.</parameter><parameter type="wxCoord " name="y">The y coordinate of the mouse.</parameter></parameters><returnvalue>

Return true to accept the data, false to veto the operation.

</returnvalue><description>

Called when the user drops a data object on the target. Return false to veto the operation.







</description></function></member>
<member class="wxDropTarget" name="OnEnter"><function type="virtual wxDragResult" name="OnEnter"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter><parameter type="wxDragResult" name=" def"></parameter></parameters><returnvalue>

Returns the desired operation or <tt> wxDragNone</tt>. This is used for optical feedback
from the side of the drop source, typically in form of changing the icon.

</returnvalue><description>

Called when the mouse enters the drop target. By default, this calls <ref target="wxdroptargetondragover">OnDragOver</ref>.









</description></function></member>
<member class="wxDropTarget" name="OnDragOver"><function type="virtual wxDragResult" name="OnDragOver"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter><parameter type="wxDragResult" name=" def"></parameter></parameters><returnvalue>

Returns the desired operation or <tt> wxDragNone</tt>. This is used for optical feedback
from the side of the drop source, typically in form of changing the icon.

</returnvalue><description>

Called when the mouse is being dragged over the drop target. By default, 
this calls functions return the suggested return value <i> def</i>.









</description></function></member>
<member class="wxDropTarget" name="OnLeave"><function type="virtual void" name="OnLeave"><description>

Called when the mouse leaves the drop target.

</description></function></member>
<member class="wxDropTarget" name="SetDataObject"><function type="void" name="SetDataObject"><parameters><parameter type="wxDataObject&#42;" name=" data"></parameter></parameters><description>

Sets the data <ref target="wxdataobject">wxDataObject</ref> associated with the 
drop target and deletes any previously associated data object.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxDynamicLibrary">
<description>
<p class="classdesc">
wxDynamicLibrary is a class representing dynamically loadable library
(Windows DLL, shared library under Unix etc.). It is implemented as a wrapper
to <ref target="wxdllloader">wxDllLoader</ref>.</p>
</description>
<members>
<member class="wxDynamicLibrary" name="wxDynamicLibrary"><function type="" name="wxDynamicLibrary"><description>

</description></function>
<function type="" name="wxDynamicLibrary"><parameters><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Constructor. Second form calls <ref target="wxdynamiclibraryload">Load</ref>.

</description></function></member>
<member class="wxDynamicLibrary" name="Detach"><function type="wxDllType" name="Detach"><description>

Detaches this object from its library handle, i.e. the object will not unload
the library any longer in its destructor but it is now the callers
responsability to do this.

</description></function></member>
<member class="wxDynamicLibrary" name="IsLoaded"><function type="bool" name="IsLoaded" suffix="const"><description>

Returns true if the library was successfully loaded, false otherwise.

</description></function></member>
<member class="wxDynamicLibrary" name="Load"><function type="bool" name="Load"><parameters><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Loads DLL into memory.

Returns true if the library was successfully loaded, false otherwise.

</description></function></member>
<member class="wxDynamicLibrary" name="Unload"><function type="void" name="Unload"><description>

Unloads the library from memory.

</description></function></member>
<member class="wxDynamicLibrary" name="GetSymbol"><function type="void&#42;" name="GetSymbol" suffix="const"><parameters><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Returns pointer to symbol <i> name</i> in the library or NULL if the library
contains no such symbol.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxEncodingConverter">
<description>
<p class="classdesc">
This class is capable of converting strings between two
8-bit encodings/charsets. It can also convert from/to Unicode (but only
if you compiled wxWindows with wxUSE_WCHAR_T set to 1). Only limited subset
of encodings in supported by wxEncodingConverter:
<tt> wxFONTENCODING_ISO8859_1..15</tt>, <tt> wxFONTENCODING_CP1250..1257</tt> and 
<tt> wxFONTENCODING_KOI8</tt>.</p>
</description>
<note>

Please use <ref target="mbconvclasses">wxMBConv classes</ref> instead
if possible. <ref target="wxcsconv">wxCSConv</ref> has much better support for various
encodings than wxEncodingConverter. wxEncodingConverter is useful only
if you rely on <tt> wxCONVERT_SUBSTITUTE</tt> mode of operation (see 
<ref target="wxencodingconverterinit">Init</ref>).

</note>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/encconv.h"/></includes>
<seealso>

<ref target="wxfontmapper">wxFontMapper</ref>
<ref target="wxmbconv">wxMBConv</ref>
<ref target="nonenglishoverview">Writing non-English applications</ref>


</seealso>
<members>
<member class="wxEncodingConverter" name="wxEncodingConverter"><function type="" name="wxEncodingConverter"><description>

Constructor.

</description></function></member>
<member class="wxEncodingConverter" name="Init"><function type="bool" name="Init"><parameters><parameter type="wxFontEncoding " name="input_enc"></parameter><parameter type="wxFontEncoding " name="output_enc"></parameter><parameter type="int " name="method" value="wxCONVERT_STRICT"></parameter></parameters><returnvalue> 

false if given conversion is impossible, true otherwise
(conversion may be impossible either if you try to convert
to Unicode with non-Unicode build of wxWindows or if input
or output encoding is not supported.)

</returnvalue><description>

Initialize conversion. Both output or input encoding may
be wxFONTENCODING_UNICODE, but only if wxUSE_ENCODING is set to 1.
All subsequent calls to <ref target="wxencodingconverterconvert">Convert()</ref> 
will interpret its argument
as a string in <i> input_enc</i> encoding and will output string in 
<i> output_enc</i> encoding.
You must call this method before calling Convert. You may call 
it more than once in order to switch to another conversion.
<i> Method</i> affects behaviour of Convert() in case input character
cannot be converted because it does not exist in output encoding:

<table>
<tr><td><b> wxCONVERT_STRICT</b></td><td>follow behaviour of GNU Recode -
just copy unconvertible  characters to output and don't change them 
(its integer value will stay the same)</td></tr>
<tr><td><b> wxCONVERT_SUBSTITUTE</b></td><td>try some (lossy) substitutions 
- e.g. replace unconvertible latin capitals with acute by ordinary
capitals, replace en-dash or em-dash by '-' etc.</td></tr>
</table>

Both modes guarantee that output string will have same length
as input string.

</description></function></member>
<member class="wxEncodingConverter" name="Convert"><function type="void" name="Convert"><parameters><parameter type="const char&#42; " name="input"></parameter><parameter type="char&#42; " name="output"></parameter></parameters><description>

</description></function>
<function type="void" name="Convert"><parameters><parameter type="const wchar_t&#42; " name="input"></parameter><parameter type="wchar_t&#42; " name="output"></parameter></parameters><description>

</description></function>
<function type="void" name="Convert"><parameters><parameter type="const char&#42; " name="input"></parameter><parameter type="wchar_t&#42; " name="output"></parameter></parameters><description>

</description></function>
<function type="void" name="Convert"><parameters><parameter type="const wchar_t&#42; " name="input"></parameter><parameter type="char&#42; " name="output"></parameter></parameters><description>

Convert input string according to settings passed to
<ref target="wxencodingconverterinit">Init</ref> and writes the result to <i> output</i>.

</description></function>
<function type="void" name="Convert"><parameters><parameter type="char&#42; " name="str"></parameter></parameters><description>

</description></function>
<function type="void" name="Convert"><parameters><parameter type="wchar_t&#42; " name="str"></parameter></parameters><description>

Convert input string according to settings passed to
<ref target="wxencodingconverterinit">Init</ref> in-place, i.e. write the result to the
same memory area.

</description></function>
<function type="wxString" name="Convert"><parameters><parameter type="const wxString&amp; " name="input"></parameter></parameters><note>

You must call <ref target="wxencodingconverterinit">Init</ref> before using this method!

<tt> wchar_t</tt> versions of the method are not available if wxWindows was compiled
with <tt> wxUSE_WCHAR_T</tt> set to 0.

</note><description>

Convert wxString and return new wxString object.

</description></function></member>
<member class="wxEncodingConverter" name="GetPlatformEquivalents"><function type="static wxFontEncodingArray" name="GetPlatformEquivalents"><parameters><parameter type="wxFontEncoding " name="enc"></parameter><parameter type="int " name="platform" value="wxPLATFORM_CURRENT"></parameter></parameters><note>

<ul><li> Note that argument <i> enc</i> itself may be present in the returned array,
so that you can, as a side-effect, detect whether the
encoding is native for this platform or not.
</li>
<li> <ref target="wxencodingconverterconvert">Convert</ref> is not limited to 
converting between equivalent encodings, it can convert between two arbitrary
encodings.
</li>
<li> If <i> enc</i> is present in the returned array, then it is <b> always</b> the first
item of it.
</li>
<li> Please note that the returned array may contain no items at all.
</li></ul>

</note><description>

Return equivalents for given font that are used
under given platform. Supported platforms:

<ul><li> wxPLATFORM_UNIX
</li>
<li> wxPLATFORM_WINDOWS
</li>
<li> wxPLATFORM_OS2
</li>
<li> wxPLATFORM_MAC
</li>
<li> wxPLATFORM_CURRENT
</li></ul>

wxPLATFORM_CURRENT means the platform this binary was compiled for.

Examples:

<pre>
current platform   enc          returned value
----------------------------------------------
unix            CP1250             {ISO8859_2}
unix         ISO8859_2             {ISO8859_2}
windows      ISO8859_2                {CP1250}
unix            CP1252  {ISO8859_1,ISO8859_15}
</pre>

Equivalence is defined in terms of convertibility:
two encodings are equivalent if you can convert text between
then without losing information (it may - and will - happen
that you lose special chars like quotation marks or em-dashes
but you shouldn't lose any diacritics and language-specific
characters when converting between equivalent encodings).

Remember that this function does <b> NOT</b> check for presence of
fonts in system. It only tells you what are most suitable
encodings. (It usually returns only one encoding.)

</description></function></member>
<member class="wxEncodingConverter" name="GetAllEquivalents"><function type="static wxFontEncodingArray" name="GetAllEquivalents"><parameters><parameter type="wxFontEncoding " name="enc"></parameter></parameters><description>

Similar to 
<ref target="wxencodingconvertergetplatformequivalents">GetPlatformEquivalents</ref>, 
but this one will return ALL 
equivalent encodings, regardless of the platform, and including itself.

This platform's encodings are before others in the array. And again, if <i> enc</i> is in the array,
it is the very first item in it.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxEraseEvent">
<description>
<p class="classdesc">
An erase event is sent when a window's background needs to be repainted.</p><p class="classdesc">On some platforms, such as GTK+, this event is simulated (simply generated just before the
paint event) and may cause flicker. It is therefore recommended that
you set the text background colour explicitly in order to prevent flicker.
The default background colour under GTK+ is grey.</p><p class="classdesc">To intercept this event, use the EVT_ERASE_BACKGROUND macro in an event table definition.</p><p class="classdesc">You must call wxEraseEvent::GetDC and use the returned device context if it is non-NULL.
If it is NULL, create your own temporary wxClientDC object. </p>
</description>
<remarks>

Use the <b> m_DC</b> device context to draw into, don't create wxPaintDC in 
the event handler.

</remarks>
<parents>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_ERASE_BACKGROUND(func)">Process a wxEVT_ERASE_BACKGROUND event.</event></events>
<seealso>

<ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxEraseEvent" name="wxEraseEvent"><function type="" name="wxEraseEvent"><parameters><parameter type="int " name="id" value="0"></parameter><parameter type="wxDC&#42; " name="dc" value="NULL"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxEraseEvent" name="m_dc"></member>
<member class="wxEraseEvent" name="GetDC"><function type="wxDC&#42;" name="GetDC" suffix="const"><description>

Returns the device context to draw into.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxEvent">
<description>
<p class="classdesc">
An event is a structure holding information about an event passed to a
callback or member function. <b> wxEvent</b> used to be a multipurpose
event object, and is an abstract base class for other event classes (see below).</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<seealso>

<ref target="wxcommandevent">wxCommandEvent</ref>,
<ref target="wxmouseevent">wxMouseEvent</ref>

</seealso>
<members>
<member class="wxEvent" name="wxEvent"><function type="" name="wxEvent"><parameters><parameter type="int " name="id" value="0"></parameter><parameter type="wxEventType " name="eventType" value="wxEVT_NULL"></parameter></parameters><description>

Constructor. Should not need to be used directly by an application.

</description></function></member>
<member class="wxEvent" name="m_eventObject"></member>
<member class="wxEvent" name="m_eventType"></member>
<member class="wxEvent" name="m_id"></member>
<member class="wxEvent" name="m_skipped"></member>
<member class="wxEvent" name="m_timeStamp"></member>
<member class="wxEvent" name="Clone"><function type="virtual wxEvent&#42;" name="Clone" suffix="const"><description>

Returns a copy of the event.

Any event that is posted to the wxWindows event system for later action (via
<ref target="wxevthandleraddpendingevent">wxEvtHandler::AddPendingEvent</ref> or
<ref target="wxpostevent">wxPostEvent</ref>) must implement this method. All wxWindows
events fully implement this method, but any derived events implemented by the
user should also implement this method just in case they (or some event
derived from them) are ever posted.

All wxWindows events implement a copy constructor, so the easiest way of
implementing the Clone function is to implement a copy constructor for
a new event (call it MyEvent) and then define the Clone function like this:
<pre>
    wxEvent &#42;Clone(void) const { return new MyEvent(&#42;this); }
</pre>

</description></function></member>
<member class="wxEvent" name="GetEventObject"><function type="wxObject&#42;" name="GetEventObject"><description>

Returns the object associated with the
event, if any.

</description></function></member>
<member class="wxEvent" name="GetEventType"><function type="WXTYPE" name="GetEventType"><description>

Returns the identifier of the given event type,
such as wxEVENT_TYPE_BUTTON_COMMAND.

</description></function></member>
<member class="wxEvent" name="GetId"><function type="int" name="GetId"><description>

Returns the identifier associated with this event, such as a button command id.

</description></function></member>
<member class="wxEvent" name="GetSkipped"><function type="bool" name="GetSkipped"><description>

Returns true if the event handler should be skipped, false otherwise.

</description></function></member>
<member class="wxEvent" name="GetTimestamp"><function type="long" name="GetTimestamp"><description>

Gets the timestamp for the event.

</description></function></member>
<member class="wxEvent" name="SetEventObject"><function type="void" name="SetEventObject"><parameters><parameter type="wxObject&#42; " name="object"></parameter></parameters><description>

Sets the originating object.

</description></function></member>
<member class="wxEvent" name="SetEventType"><function type="void" name="SetEventType"><parameters><parameter type="WXTYPE " name="typ"></parameter></parameters><description>

Sets the event type.

</description></function></member>
<member class="wxEvent" name="SetId"><function type="void" name="SetId"><parameters><parameter type="int" name=" id"></parameter></parameters><description>

Sets the identifier associated with this event, such as a button command id.

</description></function></member>
<member class="wxEvent" name="SetTimestamp"><function type="void" name="SetTimestamp"><parameters><parameter type="long " name="timeStamp"></parameter></parameters><description>

Sets the timestamp for the event.

Sets the originating object.

</description></function></member>
<member class="wxEvent" name="Skip"><function type="void" name="Skip"><parameters><parameter type="bool" name="skip" value="true"></parameter></parameters><description>

Called by an event handler to tell the event system that the
event handler should be skipped, and the next valid handler used
instead.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxEvtHandler">
<description>
<p class="classdesc">
A class that can handle events from the windowing system.
wxWindow (and therefore all window classes) are derived from
this class.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<seealso>

\overview{Event handling overview}{eventhandlingoverview}

</seealso>
<members>
<member class="wxEvtHandler" name="wxEvtHandler"><function type="" name="wxEvtHandler"><description>

Constructor.

</description></function></member>
<member class="wxEvtHandler" name="~wxEvtHandler"><function type="" name="~wxEvtHandler"><description>

Destructor. If the handler is part of a chain, the destructor will
unlink itself and restore the previous and next handlers so that they point to
each other.

</description></function></member>
<member class="wxEvtHandler" name="AddPendingEvent"><function type="virtual void" name="AddPendingEvent"><parameters><parameter type="wxEvent&amp; " name="event">Event to add to process queue.</parameter></parameters><remarks>

The difference between sending an event (using the
<ref target="wxevthandlerprocessevent">ProcessEvent</ref> method) and posting it is
that in the first case the event is processed before the function returns,
while in the second case, the function returns immediately and the event will
be processed sometime later (usually during the next event loop iteration).

A copy of <i> event</i> is made by the function, so the original can be deleted
as soon as function returns (it is common that the original is created on the
stack).  This requires that the <ref target="wxeventclone">wxEvent::Clone</ref> method
be implemented by <i> event</i> so that it can be duplicated and stored until
it gets processed.

This is also the method to call for inter-thread communication---it will
post events safely between different threads which means that this method is
thread-safe by using critical sections where needed.  In a multi-threaded
program, you often need to inform the main GUI thread about the status of
other working threads and such notification should be done using this method.

This method automatically wakes up idle handling if the underlying window 
system is currently idle and thus would not send any idle events. (Waking
up idle handling is done calling <ref target="wxwakeupidle">::wxWakeUpIdle</ref>.)

</remarks><description>

This function posts an event to be processed later.





</description></function></member>
<member class="wxEvtHandler" name="Connect"><function type="void" name="Connect"><parameters><parameter type="int" name=" id"></parameter><parameter type="wxEventType " name="eventType">The event type to be associated with this event handler.</parameter><parameter type="wxObjectEventFunction" name=" function"></parameter><parameter type="wxObject&#42;" name="userData" value="NULL">Data to be associated with the event table entry.</parameter></parameters><description>

</description></function>
<function type="void" name="Connect"><parameters><parameter type="int" name=" id"></parameter><parameter type="int" name=" lastId"></parameter><parameter type="wxEventType " name="eventType">The event type to be associated with this event handler.</parameter><parameter type="wxObjectEventFunction" name=" function"></parameter><parameter type="wxObject&#42;" name="userData" value="NULL">Data to be associated with the event table entry.</parameter></parameters><example>

<pre>
  frame-&gt;Connect( wxID_EXIT,
    wxEVT_COMMAND_MENU_SELECTED,
    (wxObjectEventFunction) (wxEventFunction) (wxCommandEventFunction) MyFrame::OnQuit );
</pre>

</example><description>

Connects the given function dynamically with the event handler, id and event type. This
is an alternative to the use of static event tables. See the 'dynamic' sample for usage.













</description></function></member>
<member class="wxEvtHandler" name="Disconnect"><function type="bool" name="Disconnect"><parameters><parameter type="int" name=" id"></parameter><parameter type="wxEventType " name="eventType" value="wxEVT_NULL">The event type associated with this event handler.</parameter><parameter type="wxObjectEventFunction" name="function" value="NULL">The event handler function.</parameter><parameter type="wxObject&#42;" name="userData" value="NULL">Data associated with the event table entry.</parameter></parameters><description>

</description></function>
<function type="bool" name="Disconnect"><parameters><parameter type="int" name=" id"></parameter><parameter type="int" name="lastId" value="-1">The second part of the identifier range associated with the event handler function.</parameter><parameter type="wxEventType " name="eventType" value="wxEVT_NULL">The event type associated with this event handler.</parameter><parameter type="wxObjectEventFunction" name="function" value="NULL">The event handler function.</parameter><parameter type="wxObject&#42;" name="userData" value="NULL">Data associated with the event table entry.</parameter></parameters><description>

Disconnects the given function dynamically from the event handler, using the specified
parameters as search criteria and returning true if a matching function has been
found and removed. This method can only disconnect functions which have been added
using the <ref target="wxevthandlerconnect">wxEvtHandler::Connect</ref> method. There is no way
to disconnect functions connected using the (static) event tables.













</description></function></member>
<member class="wxEvtHandler" name="GetClientData"><function type="void&#42; " name="GetClientData"><seealso>

<ref target="wxevthandlersetclientdata">wxEvtHandler::SetClientData</ref>

</seealso><remarks>

Normally, any extra data the programmer wishes to associate with the object
should be made available by deriving a new class with new data members.

</remarks><description>

Gets user-supplied client data.

</description></function></member>
<member class="wxEvtHandler" name="GetClientObject"><function type="wxClientData&#42;" name="GetClientObject" suffix="const"><seealso>

<ref target="wxevthandlersetclientobject">wxEvtHandler::SetClientObject</ref>,
<ref target="wxclientdata">wxClientData</ref>

</seealso><description>

Get a pointer to the user-supplied client data object.

</description></function></member>
<member class="wxEvtHandler" name="GetEvtHandlerEnabled"><function type="bool" name="GetEvtHandlerEnabled"><seealso>

<ref target="wxevthandlersetevthandlerenabled">wxEvtHandler::SetEvtHandlerEnabled</ref>

</seealso><description>

Returns true if the event handler is enabled, false otherwise.

</description></function></member>
<member class="wxEvtHandler" name="GetNextHandler"><function type="wxEvtHandler&#42;" name="GetNextHandler"><seealso>

<ref target="wxevthandlersetnexthandler">wxEvtHandler::SetNextHandler</ref>,
<ref target="wxevthandlergetprevioushandler">wxEvtHandler::GetPreviousHandler</ref>,
<ref target="wxevthandlersetprevioushandler">wxEvtHandler::SetPreviousHandler</ref>,
<ref target="wxwindowpusheventhandler">wxWindow::PushEventHandler</ref>,
<ref target="wxwindowpopeventhandler">wxWindow::PopEventHandler</ref>

</seealso><description>

Gets the pointer to the next handler in the chain.

</description></function></member>
<member class="wxEvtHandler" name="GetPreviousHandler"><function type="wxEvtHandler&#42;" name="GetPreviousHandler"><seealso>

<ref target="wxevthandlersetprevioushandler">wxEvtHandler::SetPreviousHandler</ref>,
<ref target="wxevthandlergetnexthandler">wxEvtHandler::GetNextHandler</ref>,
<ref target="wxevthandlersetnexthandler">wxEvtHandler::SetNextHandler</ref>,
<ref target="wxwindowpusheventhandler">wxWindow::PushEventHandler</ref>,
<ref target="wxwindowpopeventhandler">wxWindow::PopEventHandler</ref>

</seealso><description>

Gets the pointer to the previous handler in the chain.

</description></function></member>
<member class="wxEvtHandler" name="ProcessEvent"><function type="virtual bool" name="ProcessEvent"><parameters><parameter type="wxEvent&amp; " name="event">Event to process.</parameter></parameters><seealso>

<ref target="wxevthandlersearcheventtable">wxEvtHandler::SearchEventTable</ref>

</seealso><remarks>

Normally, your application would not call this function: it is called in the wxWindows
implementation to dispatch incoming user interface events to the framework (and application).

However, you might need to call it if implementing new functionality (such as a new control) where
you define new event types, as opposed to allowing the user to override virtual functions.

An instance where you might actually override the <b> ProcessEvent</b> function is where you want
to direct event processing to event handlers not normally noticed by wxWindows. For example,
in the document/view architecture, documents and views are potential event handlers.
When an event reaches a frame, <b> ProcessEvent</b> will need to be called on the associated
document and view in case event handler functions are associated with these objects.
The property classes library (wxProperty) also overrides <b> ProcessEvent</b> for similar reasons.

The normal order of event table searching is as follows:

\begin{enumerate}\itemsep=0pt
\item If the object is disabled (via a call to <ref target="wxevthandlersetevthandlerenabled">wxEvtHandler::SetEvtHandlerEnabled</ref>)
the function skips to step (6).
\item If the object is a wxWindow, <b> ProcessEvent</b> is recursively called on the window's
<ref target="wxvalidator">wxValidator</ref>. If this returns true, the function exits.
\item <b> SearchEventTable</b> is called for this event handler. If this fails, the base
class table is tried, and so on until no more tables exist or an appropriate function was found,
in which case the function exits.
\item The search is applied down the entire chain of event handlers (usually the chain has a length
of one). If this succeeds, the function exits.
\item If the object is a wxWindow and the event is a wxCommandEvent, <b> ProcessEvent</b> is
recursively applied to the parent window's event handler. If this returns true, the function exits.
\item Finally, <b> ProcessEvent</b> is called on the wxApp object.
\end{enumerate}

</remarks><returnvalue>

true if a suitable event handler function was found and executed, and the function did not
call <ref target="wxeventskip">wxEvent::Skip</ref>.

</returnvalue><description>

Processes an event, searching event tables and calling zero or more suitable event handler function(s).





</description></function></member>
<member class="wxEvtHandler" name="SearchEventTable"><function type="bool" name="SearchEventTable"><parameters><parameter type="wxEventTable&amp; " name="table">Event table to be searched.</parameter><parameter type="wxEvent&amp; " name="event">Event to be matched against an event table entry.</parameter></parameters><seealso>

<ref target="wxevthandlerprocessevent">wxEvtHandler::ProcessEvent</ref>

</seealso><remarks>

This function looks through the object's event table and tries to find an entry
that will match the event.

An entry will match if:

\begin{enumerate}\itemsep=0pt
\item The event type matches, and
\item the identifier or identifier range matches, or the event table entry's identifier is zero.
\end{enumerate}

If a suitable function is called but calls <ref target="wxeventskip">wxEvent::Skip</ref>, this function will
fail, and searching will continue.

</remarks><returnvalue>

true if a suitable event handler function was found and executed, and the function did not
call <ref target="wxeventskip">wxEvent::Skip</ref>.

</returnvalue><description>

Searches the event table, executing an event handler function if an appropriate one
is found.







</description></function></member>
<member class="wxEvtHandler" name="SetClientData"><function type="void" name="SetClientData"><parameters><parameter type="void&#42; " name="data">Data to be associated with the event handler.</parameter></parameters><seealso>

<ref target="wxevthandlergetclientdata">wxEvtHandler::GetClientData</ref>

</seealso><remarks>

Normally, any extra data the programmer wishes to associate with 
the object should be made available by deriving a new class
with new data members. You must not call this method and
<ref target="wxevthandlersetclientobject">SetClientObject</ref> on the
same class - only one of them.

</remarks><description>

Sets user-supplied client data.





</description></function></member>
<member class="wxEvtHandler" name="SetClientObject"><function type="void" name="SetClientObject"><parameters><parameter type="wxClientData&#42; " name="data"></parameter></parameters><seealso>

<ref target="wxevthandlergetclientobject">wxEvtHandler::GetClientObject</ref>,
<ref target="wxclientdata">wxClientData</ref>

</seealso><description>

Set the client data object. Any previous object will be deleted.

</description></function></member>
<member class="wxEvtHandler" name="SetEvtHandlerEnabled"><function type="void" name="SetEvtHandlerEnabled"><parameters><parameter type="bool " name="enabled">true if the event handler is to be enabled, false if it is to be disabled.</parameter></parameters><seealso>

<ref target="wxevthandlergetevthandlerenabled">wxEvtHandler::GetEvtHandlerEnabled</ref>

</seealso><remarks>

You can use this function to avoid having to remove the event handler from the chain, for example
when implementing a dialog editor and changing from edit to test mode.

</remarks><description>

Enables or disables the event handler.





</description></function></member>
<member class="wxEvtHandler" name="SetNextHandler"><function type="void" name="SetNextHandler"><parameters><parameter type="wxEvtHandler&#42; " name="handler">Event handler to be set as the next handler.</parameter></parameters><seealso>

<ref target="wxevthandlergetnexthandler">wxEvtHandler::GetNextHandler</ref>,
<ref target="wxevthandlersetprevioushandler">wxEvtHandler::SetPreviousHandler</ref>,
<ref target="wxevthandlergetprevioushandler">wxEvtHandler::GetPreviousHandler</ref>,
<ref target="wxwindowpusheventhandler">wxWindow::PushEventHandler</ref>,
<ref target="wxwindowpopeventhandler">wxWindow::PopEventHandler</ref>

</seealso><description>

Sets the pointer to the next handler.





</description></function></member>
<member class="wxEvtHandler" name="SetPreviousHandler"><function type="void" name="SetPreviousHandler"><parameters><parameter type="wxEvtHandler&#42; " name="handler">Event handler to be set as the previous handler.</parameter></parameters><seealso>

<ref target="wxevthandlergetprevioushandler">wxEvtHandler::GetPreviousHandler</ref>,
<ref target="wxevthandlersetnexthandler">wxEvtHandler::SetNextHandler</ref>,
<ref target="wxevthandlergetnexthandler">wxEvtHandler::GetNextHandler</ref>,
<ref target="wxwindowpusheventhandler">wxWindow::PushEventHandler</ref>,
<ref target="wxwindowpopeventhandler">wxWindow::PopEventHandler</ref>


</seealso><description>

Sets the pointer to the previous handler.





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxExpr">
<description>
<p class="classdesc">
The <b> wxExpr</b> class is the building brick of expressions similar to Prolog
clauses, or objects. It can represent an expression of type long integer, float, string, word,
or list, and lists can be nested.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/wxexpr.h"/></includes>
<seealso>

<ref target="exproverview">wxExpr overview</ref><ref target="wxexprdatabase">wxExprDatabase</ref>

</seealso>
<members>
<member class="wxExpr" name="wxExpr"><function type="" name="wxExpr"><parameters><parameter type="const wxString&amp;" name="functor"></parameter></parameters><description>

Construct a new clause with this form, supplying the functor name. A clause is an object
that will appear in the data file, with a list of attribute/value pairs.

</description></function>
<function type="" name="wxExpr"><parameters><parameter type="wxExprType" name=" type"></parameter><parameter type="const wxString&amp;" name="wordOrString" value="``&quot;"></parameter></parameters><description>

Construct a new empty list, or a word (will be output with no quotes), or a string, depending on the
value of <i> type</i>.

<i> type</i> can be <b> wxExprList</b>, <b> wxExprWord</b>, or <b> wxExprString</b>. If <i> type</i> is wxExprList,
the value of <i> wordOrString</i> will be ignored.

</description></function>
<function type="" name="wxExpr"><parameters><parameter type="long" name=" value"></parameter></parameters><description>

Construct an integer expression.

</description></function>
<function type="" name="wxExpr"><parameters><parameter type="float" name=" value"></parameter></parameters><description>

Construct a floating point expression.

</description></function>
<function type="" name="wxExpr"><parameters><parameter type="wxList&#42; " name="value"></parameter></parameters><description>

Construct a list expression. The list's nodes' data should
themselves be <b> wxExpr</b>s.

wxExpr no longer uses the <b> wxList</b> internally,
so this constructor turns the list into its internal
format (assuming a non-nested list) and then deletes the supplied
list.

</description></function></member>
<member class="wxExpr" name="~wxExpr"><function type="" name="~wxExpr"><description>

Destructor.

</description></function></member>
<member class="wxExpr" name="AddAttributeValue"><function type="void" name="AddAttributeValue"><parameters><parameter type="const wxString&amp;" name=" attribute"></parameter><parameter type="float " name="value"></parameter></parameters><description>

Adds an attribute and floating point value pair to the clause.

</description></function>
<function type="void" name="AddAttributeValue"><parameters><parameter type="const wxString&amp;" name=" attribute"></parameter><parameter type="long " name="value"></parameter></parameters><description>

Adds an attribute and long integer value pair to the clause.

</description></function>
<function type="void" name="AddAttributeValue"><parameters><parameter type="const wxString&amp;" name=" attribute"></parameter><parameter type="wxList&#42; " name="value"></parameter></parameters><description>

Adds an attribute and list value pair to the clause, converting the list into
internal form and then deleting <b> value</b>. Note that the list should not contain
nested lists (except if in internal <b> wxExpr</b> form.)

</description></function>
<function type="void" name="AddAttributeValue"><parameters><parameter type="const wxString&amp;" name=" attribute"></parameter><parameter type="wxExpr&#42; " name="value"></parameter></parameters><description>

Adds an attribute and wxExpr value pair to the clause. Do not delete
<i> value</i> once this function has been called.

</description></function></member>
<member class="wxExpr" name="AddAttributeValueString"><function type="void" name="AddAttributeValueString"><parameters><parameter type="const wxString&amp;" name=" attribute"></parameter><parameter type="const wxString&amp;" name=" value"></parameter></parameters><description>

Adds an attribute and string value pair to the clause.

</description></function></member>
<member class="wxExpr" name="AddAttributeValueStringList"><function type="void" name="AddAttributeValueStringList"><parameters><parameter type="const wxString&amp;" name=" attribute"></parameter><parameter type="wxList&#42; " name="value"></parameter></parameters><description>

Adds an attribute and string list value pair to the clause.

Note that the list passed to this function is a list of strings, NOT a list
of <b> wxExpr</b>s; it gets turned into a list of <b> wxExpr</b>s
automatically. This is a convenience function, since lists of strings
are often manipulated in C++.

</description></function></member>
<member class="wxExpr" name="AddAttributeValueWord"><function type="void" name="AddAttributeValueWord"><parameters><parameter type="const wxString&amp;" name=" attribute"></parameter><parameter type="const wxString&amp;" name=" value"></parameter></parameters><description>

Adds an attribute and word value pair to the clause.

</description></function></member>
<member class="wxExpr" name="Append"><function type="void" name="Append"><parameters><parameter type="wxExpr&#42;" name=" value"></parameter></parameters><description>

Append the <b> value</b> to the end of the list. `this' must be a list.

</description></function></member>
<member class="wxExpr" name="Arg"><function type="wxExpr&#42; " name="Arg" suffix="const"><parameters><parameter type="wxExprType" name=" type"></parameter><parameter type="int" name=" n"></parameter></parameters><description>

Get nth arg of the given clause (starting from 1). NULL is returned if
the expression is not a clause, or <i> n</i> is invalid, or the given type
does not match the actual type. See also <ref target="wxexprnth">wxExpr::Nth</ref>.

</description></function></member>
<member class="wxExpr" name="Insert"><function type="void" name="Insert"><parameters><parameter type="wxExpr&#42; " name="value"></parameter></parameters><description>

Insert the <b> value</b> at the start of the list. `this' must be a list.

</description></function></member>
<member class="wxExpr" name="GetAttributeValue"><function type="bool" name="GetAttributeValue" suffix="const"><parameters><parameter type="const wxString&amp;" name=" attribute"></parameter><parameter type="wxString&amp;" name=" value"></parameter></parameters><description>

Retrieve a string (or word) value.

</description></function>
<function type="bool" name="GetAttributeValue" suffix="const"><parameters><parameter type="const wxString&amp;" name=" attribute"></parameter><parameter type="float&amp; " name="value"></parameter></parameters><description>

Retrieve a floating point value.

</description></function>
<function type="bool" name="GetAttributeValue" suffix="const"><parameters><parameter type="const wxString&amp;" name=" attribute"></parameter><parameter type="int&amp; " name="value"></parameter></parameters><description>

Retrieve an integer value.

</description></function>
<function type="bool" name="GetAttributeValue" suffix="const"><parameters><parameter type="const wxString&amp;" name=" attribute"></parameter><parameter type="long&amp; " name="value"></parameter></parameters><description>

Retrieve a long integer value.

</description></function>
<function type="bool" name="GetAttributeValue" suffix="const"><parameters><parameter type="const wxString&amp;" name=" attribute"></parameter><parameter type="wxExpr&#42;&#42;" name=" value"></parameter></parameters><description>

Retrieve a wxExpr pointer.

</description></function></member>
<member class="wxExpr" name="GetAttributeValueStringList"><function type="void" name="GetAttributeValueStringList" suffix="const"><parameters><parameter type="const wxString&amp;" name="attribute"></parameter><parameter type="wxList&#42; " name="value"></parameter></parameters><description>

Use this on clauses ONLY. See above for comments on this style of
attribute value retrieval. This function expects to receive a pointer to
a new list (created by the calling application); it will append strings
to the list if the attribute is present in the clause.

</description></function></member>
<member class="wxExpr" name="AttributeValue"><function type="wxExpr&#42;" name="AttributeValue" suffix="const"><parameters><parameter type="const wxString&amp;" name=" word"></parameter></parameters><description>

Use this on clauses ONLY. Searches the clause for an attribute
matching <i> word</i>, and returns the value associated with it.

</description></function></member>
<member class="wxExpr" name="Copy"><function type="wxExpr&#42;" name="Copy" suffix="const"><description>

Recursively copies the expression, allocating new storage space.

</description></function></member>
<member class="wxExpr" name="DeleteAttributeValue"><function type="void" name="DeleteAttributeValue"><parameters><parameter type="const wxString&amp;" name=" attribute"></parameter></parameters><description>

Use this on clauses only. Deletes the attribute and its value (if any) from the
clause.

</description></function></member>
<member class="wxExpr" name="Functor"><function type="wxString" name="Functor" suffix="const"><description>

Use this on clauses only. Returns the clause's functor (object name).

</description></function></member>
<member class="wxExpr" name="GetClientData"><function type="wxObject&#42;" name="GetClientData" suffix="const"><description>

Retrieve arbitrary data stored with this clause. This can be useful when
reading in data for storing a pointer to the C++ object, so when another
clause makes a reference to this clause, its C++ object can be retrieved.
See <ref target="wxexprsetclientdata">wxExpr::SetClientData</ref>.

</description></function></member>
<member class="wxExpr" name="GetFirst"><function type="wxExpr&#42;" name="GetFirst" suffix="const"><description>

If this is a list expression (or clause), gets the first element in the list.

See also <ref target="wxexprgetlast">wxExpr::GetLast</ref>, <ref target="wxexprgetnext">wxExpr::GetNext</ref>, <ref target="wxexprnth">wxExpr::Nth</ref>.

</description></function></member>
<member class="wxExpr" name="GetLast"><function type="wxExpr&#42;" name="GetLast" suffix="const"><description>

If this is a list expression (or clause), gets the last element in the list.

See also <ref target="wxexprgetfirst">wxExpr::GetFirst</ref>, <ref target="wxexprgetnext">wxExpr::GetNext</ref>, <ref target="wxexprnth">wxExpr::Nth</ref>.

</description></function></member>
<member class="wxExpr" name="GetNext"><function type="wxExpr&#42;" name="GetNext" suffix="const"><description>

If this is a node in a list (any wxExpr may be a node in a list), gets the
next element in the list.

See also <ref target="wxexprgetfirst">wxExpr::GetFirst</ref>, <ref target="wxexprgetlast">wxExpr::GetLast</ref>, <ref target="wxexprnth">wxExpr::Nth</ref>.

</description></function></member>
<member class="wxExpr" name="IntegerValue"><function type="long" name="IntegerValue" suffix="const"><description>

Returns the integer value of the expression.

</description></function></member>
<member class="wxExpr" name="Nth"><function type="wxExpr&#42;" name="Nth" suffix="const"><parameters><parameter type="int" name=" n"></parameter></parameters><description>

Get nth arg of the given list expression (starting from 0). NULL is returned if
the expression is not a list expression, or <i> n</i> is invalid. See also <ref target="wxexprarg">wxExpr::Arg</ref>.

Normally, you would use attribute-value pairs to add and retrieve data
from objects (clauses) in a data file. However, if the data gets complex,
you may need to store attribute values as lists, and pick them apart
yourself.

</description></function></member>
<member class="wxExpr" name="RealValue"><function type="float" name="RealValue" suffix="const"><description>

Returns the floating point value of the expression.

</description></function></member>
<member class="wxExpr" name="SetClientData"><function type="void" name="SetClientData"><parameters><parameter type="wxObject &#42;" name="data"></parameter></parameters><description>

Associate arbitrary data with this clause. This can be useful when
reading in data for storing a pointer to the C++ object, so when another
clause makes a reference to this clause, its C++ object can be retrieved.
See <ref target="wxexprgetclientdata">wxExpr::GetClientData</ref>.

</description></function></member>
<member class="wxExpr" name="StringValue"><function type="wxString" name="StringValue" suffix="const"><description>

Returns the string value of the expression.

</description></function></member>
<member class="wxExpr" name="Type"><function type="wxExprType" name="Type" suffix="const"><description>

Returns the type of the expression. <b> wxExprType</b> is defined as follows:

<pre>
typedef enum {
    wxExprNull,
    wxExprInteger,
    wxExprReal,
    wxExprWord,
    wxExprString,
    wxExprList
} wxExprType;
</pre>

</description></function></member>
<member class="wxExpr" name="WordValue"><function type="wxString" name="WordValue" suffix="const"><description>

Returns the word value of the expression.

</description></function></member>
<member class="wxExpr" name="WriteClause"><function type="void" name="WriteClause"><parameters><parameter type="FILE &#42;" name=" stream"></parameter></parameters><description>

Writes the clause to the given stream in Prolog format. Not normally needed, since
the whole <b> wxExprDatabase</b> will usually be written at once. The format is:
functor, open parenthesis, list of comma-separated expressions, close parenthesis,
full stop.

</description></function></member>
<member class="wxExpr" name="WriteExpr"><function type="void" name="WriteExpr"><parameters><parameter type="FILE &#42;" name=" stream"></parameter></parameters><description>

Writes the expression (not clause) to the given stream in Prolog
format. Not normally needed, since the whole <b> wxExprDatabase</b> will
usually be written at once. Lists are written in square bracketed,
comma-delimited format.

</description></function></member>
<member class="wxExpr" name=""></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxExprDatabase">
<description>
<p class="classdesc">
The <b> wxExprDatabase</b> class represents a database, or list,
of Prolog-like expressions.  Instances of this class are used for reading,
writing and creating data files.</p>
</description>
<parents>
<classref name="wxList"/>
<classref name="wxObject"/>

</parents>
<seealso>

<ref target="exproverview">wxExpr overview</ref><ref target="wxexpr">wxExpr</ref>

</seealso>
<members>
<member class="wxExprDatabase" name="wxExprDatabase"><function type="void" name="wxExprDatabase"><parameters><parameter type="proioErrorHandler" name="handler" value="0"></parameter></parameters><description>

Construct a new, unhashed database, with an optional error handler. The
error handler must be a function returning a bool and taking an integer and a string
argument. When an error occurs when reading or writing a database, this function is
called. The error is given as the first argument (currently one of WXEXPR_ERROR_GENERAL,
WXEXPR_ERROR_SYNTAX) and an error message is given as the second argument. If false
is returned by the error handler, processing of the wxExpr operation stops.

Another way of handling errors is simply to call <ref target="wxexprdatabasegeterrorcount">wxExprDatabase::GetErrorCount</ref> after
the operation, to check whether errors have occurred, instead of installing an error handler.
If the error count is more than zero, <ref target="wxexprdatabasewrite">wxExprDatabase::Write</ref> and
<ref target="wxexprdatabaseread">wxExprDatabase::Read</ref> will return false to
the application.

For example:

<pre>
bool myErrorHandler(int err, chat &#42;msg)
{
  if (err == WXEXPR_ERROR_SYNTAX)
  {
    wxMessageBox(msg, &quot;Syntax error&quot;);
  }
  return false;
}

wxExprDatabase database(myErrorHandler);
</pre>

</description></function>
<function type="" name="wxExprDatabase"><parameters><parameter type="wxExprType" name=" type"></parameter><parameter type="const wxString&amp;" name="attribute"></parameter><parameter type="int" name="size" value="500"></parameter><parameter type="proioErrorHandler" name="handler" value="0"></parameter></parameters><description>

Construct a new database hashed on a combination of the clause functor and
a named attribute (often an integer identification).

See above for an explanation of the error handler.

</description></function></member>
<member class="wxExprDatabase" name="~wxExprDatabase"><function type="" name="~wxExprDatabase"><description>

Delete the database and contents.

</description></function></member>
<member class="wxExprDatabase" name="Append"><function type="void" name="Append"><parameters><parameter type="wxExpr&#42; " name="clause"></parameter></parameters><description>

Append a clause to the end of the database. If the database is hashing,
the functor and a user-specified attribute will be hashed upon, giving the
option of random access in addition to linear traversal of the database.

</description></function></member>
<member class="wxExprDatabase" name="BeginFind"><function type="void" name="BeginFind"><description>

Reset the current position to the start of the database. Subsequent
<ref target="wxexprdatabasefindclause">wxExprDatabase::FindClause</ref> calls will move the pointer.

</description></function></member>
<member class="wxExprDatabase" name="ClearDatabase"><function type="void" name="ClearDatabase"><description>

Clears the contents of the database.

</description></function></member>
<member class="wxExprDatabase" name="FindClause"><function type="wxExpr&#42; " name="FindClause"><parameters><parameter type="long" name=" id"></parameter></parameters><description>

Find a clause based on the special ``id'' attribute.

</description></function>
<function type="wxExpr&#42; " name="FindClause"><parameters><parameter type="const wxString&amp;" name=" attribute"></parameter><parameter type="const wxString&amp;" name=" value"></parameter></parameters><description>

Find a clause which has the given attribute set to the given string or word value.

</description></function>
<function type="wxExpr&#42;" name="FindClause"><parameters><parameter type="const wxString&amp;" name=" attribute"></parameter><parameter type="long" name=" value"></parameter></parameters><description>

Find a clause which has the given attribute set to the given integer value.

</description></function>
<function type="wxExpr&#42;" name="FindClause"><parameters><parameter type="const wxString&amp;" name=" attribute"></parameter><parameter type="float" name=" value"></parameter></parameters><description>

Find a clause which has the given attribute set to the given floating point value.

</description></function></member>
<member class="wxExprDatabase" name="FindClauseByFunctor"><function type="wxExpr&#42;" name="FindClauseByFunctor"><parameters><parameter type="const wxString&amp;" name=" functor"></parameter></parameters><description>

Find the next clause with the specified functor.

</description></function></member>
<member class="wxExprDatabase" name="GetErrorCount"><function type="int" name="GetErrorCount" suffix="const"><description>

Returns the number of errors encountered during the last read or write operation.

</description></function></member>
<member class="wxExprDatabase" name="HashFind"><function type="wxExpr&#42;" name="HashFind" suffix="const"><parameters><parameter type="const wxString&amp;" name=" functor"></parameter><parameter type="long" name=" value"></parameter></parameters><description>

Finds the clause with the given functor and with the attribute specified
in the database constructor having the given integer value.

For example,

<pre>
// Hash on a combination of functor and integer &quot;id&quot; attribute when reading in
wxExprDatabase db(wxExprInteger, &quot;id&quot;);

// Read it in
db.ReadProlog(&quot;data&quot;);

// Retrieve a clause with specified functor and id
wxExpr &#42;clause = db.HashFind(&quot;node&quot;, 24);
</pre>

This would retrieve a clause which is written: <tt> node(id = 24, ..., )</tt>.

</description></function>
<function type="wxExpr&#42;" name="HashFind"><parameters><parameter type="const wxString&amp;" name=" functor"></parameter><parameter type="const wxString&amp;" name=" value"></parameter></parameters><description>

Finds the clause with the given functor and with the attribute specified
in the database constructor having the given string value.

</description></function></member>
<member class="wxExprDatabase" name="Read"><function type="bool" name="Read"><parameters><parameter type="const wxString&amp;" name=" filename"></parameter></parameters><description>

Reads in the given file, returning true if successful.

</description></function></member>
<member class="wxExprDatabase" name="ReadFromString"><function type="bool" name="ReadFromString"><parameters><parameter type="const wxString&amp;" name=" buffer"></parameter></parameters><description>

Reads a Prolog database from the given string buffer, returning true if
successful.

</description></function></member>
<member class="wxExprDatabase" name="Write"><function type="bool" name="Write"><parameters><parameter type="FILE &#42;" name="stream"></parameter></parameters><description>

</description></function>
<function type="bool" name="Write"><parameters><parameter type="const wxString&amp;" name=" filename"></parameter></parameters><description>

Writes the database as a Prolog-format file.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFFile">
<description>
<p class="classdesc">
wxFFile implements buffered file I/O. This is a very small class designed to
minimize the overhead of using it - in fact, there is hardly any overhead at
all, but using it brings you automatic error checking and hides differences
between platforms and compilers. It wraps inside it a <tt> FILE &#42;</tt> handle used
by standard C IO library (also known as <tt> stdio</tt>).</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/ffile.h" comment="\twocolwidtha{7cm}"/></includes>
<members>
<member class="wxFFile" name="wxFFile"><function type="" name="wxFFile"><description>

Default constructor.

</description></function>
<function type="" name="wxFFile"><parameters><parameter type="const char&#42;" name=" filename"></parameter><parameter type="const char&#42;" name="mode" value="&quot;r&quot;">The mode in which to open the file using standard C strings.
Note that you should use <tt> &quot;b&quot;</tt> flag if you use binary files under Windows
or the results might be unexpected due to automatic newline conversion done
for the text files.</parameter></parameters><description>

Opens a file with the given mode. As there is no way to return whether the
operation was successful or not from the constructor you should test the
return value of <ref target="wxffileisopened">IsOpened</ref> to check that it didn't
fail.

</description></function>
<function type="" name="wxFFile"><parameters><parameter type="FILE&#42;" name=" fp"></parameter></parameters><description>

Opens a file with the given file pointer, which has already been opened.









</description></function></member>
<member class="wxFFile" name="~wxFFile"><function type="" name="~wxFFile"><description>

Destructor will close the file.

NB: it is not virtual so you should <i> not</i> derive from wxFFile!

</description></function></member>
<member class="wxFFile" name="Attach"><function type="void" name="Attach"><parameters><parameter type="FILE&#42;" name=" fp"></parameter></parameters><description>

Attaches an existing file pointer to the wxFFile object.

The descriptor should be already opened and it will be closed by wxFFile
object.

</description></function></member>
<member class="wxFFile" name="Close"><function type="bool" name="Close"><description>

Closes the file and returns true on success.

</description></function></member>
<member class="wxFFile" name="Detach"><function type="void" name="Detach"><description>

Get back a file pointer from wxFFile object - the caller is responsible for closing the file if this
descriptor is opened. <ref target="wxffileisopened">IsOpened()</ref> will return false after call to Detach().

</description></function></member>
<member class="wxFFile" name="fp"><function type="FILE &#42;" name="fp" suffix="const"><description>

Returns the file pointer associated with the file.

</description></function></member>
<member class="wxFFile" name="Eof"><function type="bool" name="Eof" suffix="const"><description>

Returns true if the an attempt has been made to read <i> past</i>
the end of the file. 

Note that the behaviour of the file descriptor based class
<ref target="wxfile">wxFile</ref> is different as <ref target="wxfileeof">wxFile::Eof</ref>
will return true here as soon as the last byte of the file has been
read.

</description></function></member>
<member class="wxFFile" name="Flush"><function type="bool" name="Flush"><description>

Flushes the file and returns true on success.

</description></function></member>
<member class="wxFFile" name="IsOpened"><function type="bool" name="IsOpened" suffix="const"><description>

Returns true if the file has been opened.

</description></function></member>
<member class="wxFFile" name="Length"><function type="size_t" name="Length" suffix="const"><description>

Returns the length of the file.

</description></function></member>
<member class="wxFFile" name="Open"><function type="bool" name="Open"><parameters><parameter type="const char&#42;" name=" filename"></parameter><parameter type="const char&#42;" name="mode" value="&quot;r&quot;">The mode in which to open the file.</parameter></parameters><description>

Opens the file, returning true if successful.







</description></function></member>
<member class="wxFFile" name="Read"><function type="size_t" name="Read"><parameters><parameter type="void&#42;" name=" buffer"></parameter><parameter type="off_t" name=" count"></parameter></parameters><returnvalue>

The number of bytes read.

</returnvalue><description>

Reads the specified number of bytes into a buffer, returning the actual number read.







</description></function></member>
<member class="wxFFile" name="Seek"><function type="bool" name="Seek"><parameters><parameter type="long " name="ofs">Offset to seek to.</parameter><parameter type="wxSeekMode " name="mode" value="wxFromStart">One of <b> wxFromStart</b>, <b> wxFromEnd</b>, <b> wxFromCurrent</b>.</parameter></parameters><description>

Seeks to the specified position and returns true on success.







</description></function></member>
<member class="wxFFile" name="SeekEnd"><function type="bool" name="SeekEnd"><parameters><parameter type="long " name="ofs" value="0">Number of bytes before the end of the file.</parameter></parameters><description>

Moves the file pointer to the specified number of bytes before the end of the file
and returns true on success.





</description></function></member>
<member class="wxFFile" name="Tell"><function type="size_t" name="Tell" suffix="const"><description>

Returns the current position.

</description></function></member>
<member class="wxFFile" name="Write"><function type="size_t" name="Write"><parameters><parameter type="const void&#42;" name=" buffer"></parameter><parameter type="size_t" name=" count"></parameter></parameters><returnvalue>

Number of bytes written.

</returnvalue><description>

Writes the specified number of bytes from a buffer.







</description></function></member>
<member class="wxFFile" name="Write"><function type="bool" name="Write"><parameters><parameter type="const wxString&amp; " name="s"></parameter><parameter type="wxMBConv&amp;" name="conv" value="wxConvUTF8"></parameter></parameters><description>

Writes the contents of the string to the file, returns true on success.

The second argument is only meaningful in Unicode build of wxWindows when
<i> conv</i> is used to convert <i> s</i> to multibyte representation.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFFileInputStream">
<description>
<p class="classdesc">
This class represents data read in from a file. There are actually
two such groups of classes: this one is based on <ref target="wxffile">wxFFile</ref> 
whereas <ref target="wxfileinputstream">wxFileInputStream</ref> is based in
the <ref target="wxfile">wxFile</ref> class.</p><p class="classdesc">Note that <ref target="wxfile">wxFile</ref> and <ref target="wxffile">wxFFile</ref> differ
in one aspect, namely when to report that the end of the file has been
reached. This is documented in <ref target="wxfileeof">wxFile::Eof</ref> and 
<ref target="wxffileeof">wxFFile::Eof</ref> and the behaviour of the stream
classes reflects this difference, i.e. wxFileInputStream will report
wxSTREAM_EOF after having read the last byte whereas wxFFileInputStream
will report wxSTREAM_EOF after trying to read <i> past</i> the last byte.</p>
</description>
<parents>
<classref name="wxInputStream"/>

</parents>
<includes>
<header name="wx/wfstream.h"/></includes>
<seealso>

<ref target="wxbufferedinputstream">wxBufferedInputStream</ref><ref target="wxffileoutputstream">wxFFileOutputStream</ref><ref target="wxfileoutputstream">wxFileOutputStream</ref>

</seealso>
<members>
<member class="wxFFileInputStream" name="wxFFileInputStream"><function type="" name="wxFFileInputStream"><parameters><parameter type="const wxString&amp;" name=" ifileName"></parameter></parameters><description>

Opens the specified file using its <i> ifilename</i> name in read-only mode.

</description></function>
<function type="" name="wxFFileInputStream"><parameters><parameter type="wxFFile&amp;" name=" file"></parameter></parameters><description>

Initializes a file stream in read-only mode using the file I/O object <i> file</i>.

</description></function>
<function type="" name="wxFFileInputStream"><parameters><parameter type="FILE &#42;" name=" fp"></parameter></parameters><description>

Initializes a file stream in read-only mode using the specified file pointer <i> fp</i>.

</description></function></member>
<member class="wxFFileInputStream" name="~wxFFileInputStream"><function type="" name="~wxFFileInputStream"><description>

Destructor.

</description></function></member>
<member class="wxFFileInputStream" name="Ok"><function type="bool" name="Ok" suffix="const"><description>

Returns true if the stream is initialized and ready.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFFileOutputStream">
<description>
<p class="classdesc">
This class represents data written to a file. There are actually
two such groups of classes: this one is based on <ref target="wxffile">wxFFile</ref> 
whereas <ref target="wxffileinputstream">wxFileInputStream</ref> is based in
the <ref target="wxfile">wxFile</ref> class.</p><p class="classdesc">Note that <ref target="wxfile">wxFile</ref> and <ref target="wxffile">wxFFile</ref> differ
in one aspect, namely when to report that the end of the file has been
reached. This is documented in <ref target="wxfileeof">wxFile::Eof</ref> and 
<ref target="wxffileeof">wxFFile::Eof</ref> and the behaviour of the stream
classes reflects this difference, i.e. wxFileInputStream will report
wxSTREAM_EOF after having read the last byte whereas wxFFileInputStream
will report wxSTREAM_EOF after trying to read <i> past</i> the last byte.</p>
</description>
<parents>
<classref name="wxOutputStream"/>

</parents>
<includes>
<header name="wx/wfstream.h"/></includes>
<seealso>

<ref target="wxbufferedoutputstream">wxBufferedOutputStream</ref><ref target="wxffileinputstream">wxFFileInputStream</ref><ref target="wxfileinputstream">wxFileInputStream</ref>

</seealso>
<members>
<member class="wxFFileOutputStream" name="wxFFileOutputStream"><function type="" name="wxFFileOutputStream"><parameters><parameter type="const wxString&amp;" name=" ofileName"></parameter></parameters><description>

Creates a new file with <i> ofilename</i> name and initializes the stream in
write-only mode. 

</description></function>
<function type="" name="wxFFileOutputStream"><parameters><parameter type="wxFFile&amp;" name=" file"></parameter></parameters><description>

Initializes a file stream in write-only mode using the file I/O object <i> file</i>.

</description></function>
<function type="" name="wxFFileOutputStream"><parameters><parameter type="FILE &#42;" name=" fp"></parameter></parameters><description>

Initializes a file stream in write-only mode using the file descriptor <i> fp</i>.

</description></function></member>
<member class="wxFFileOutputStream" name="~wxFFileOutputStream"><function type="" name="~wxFFileOutputStream"><description>

Destructor.

</description></function></member>
<member class="wxFFileOutputStream" name="Ok"><function type="bool" name="Ok" suffix="const"><description>

Returns true if the stream is initialized and ready.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFFileStream">
<description>

</description>
<parents>
<classref name="wxFFileOutputStream"/><classref name="wxFFileInputStream"/>

</parents>
<includes>
<header name="wx/wfstream.h"/></includes>
<seealso>

<ref target="wxstreambuffer">wxStreamBuffer</ref>

</seealso>
<members>
<member class="wxFFileStream" name="wxFFileStream"><function type="" name="wxFFileStream"><parameters><parameter type="const wxString&amp;" name=" iofileName"></parameter></parameters><description>

Initializes a new file stream in read-write mode using the specified 
<i> iofilename</i> name.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFSFile">
<description>
<p class="classdesc">
This class represents a single file opened by <ref target="wxfilesystem">wxFileSystem</ref>.
It provides more information than wxWindow's input stream 
(stream, filename, mime type, anchor).</p><p class="classdesc"><b> Note:</b> Any pointer returned by a method of wxFSFile is valid
only as long as the wxFSFile object exists. For example a call to GetStream()
doesn't <i> create</i> the stream but only returns the pointer to it. In
other words after 10 calls to GetStream() you will obtain ten identical
pointers.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/filesys.h"/></includes>
<seealso>

<ref target="wxfilesystemhandler">wxFileSystemHandler</ref>
<ref target="wxfilesystem">wxFileSystem</ref>
<ref target="fs">Overview</ref>

</seealso>
<members>
<member class="wxFSFile" name="wxFSFile"><function type="" name="wxFSFile"><parameters><parameter type="wxInputStream " name="&#42;stream"></parameter><parameter type="const wxString&amp; " name="loc"></parameter><parameter type="const wxString&amp; " name="mimetype">MIME type of this file. Mime type is either extension-based or HTTP Content-Type</parameter><parameter type="const wxString&amp; " name="anchor">Anchor. See <ref target="wxfsfilegetanchor">GetAnchor()</ref> for details.</parameter></parameters><note>

It is seldom used by the application programmer but you will need it if
you are writing your own virtual FS. For example you may need something
similar to wxMemoryInputStream, but because wxMemoryInputStream
doesn't free the memory when destroyed and thus passing a memory stream
pointer into wxFSFile constructor would lead to memory leaks, you
can write your own class derived from wxFSFile:

<pre>
class wxMyFSFile : public wxFSFile
{
    private:
        void &#42;m_Mem;
    public:
        wxMyFSFile(.....)
	~wxMyFSFile() {free(m_Mem);}
	    // of course dtor is virtual ;-)
};
</pre>

</note><description>

Constructor. You probably won't use it. See Notes for details.











If you are not sure of the meaning of these params, see the description of the GetXXXX()
functions.

</description></function></member>
<member class="wxFSFile" name="GetAnchor"><function type="const wxString&amp;" name="GetAnchor" suffix="const"><description>

Returns anchor (if present). The term of <b> anchor</b> can be easily
explained using few examples:

<pre>
index.htm#anchor                      /&#42; 'anchor' is anchor &#42;/
index/wx001.htm                       /&#42; NO anchor here!    &#42;/
archive/main.zip#zip:index.htm#global /&#42; 'global'           &#42;/
archive/main.zip#zip:index.htm        /&#42; NO anchor here!    &#42;/
</pre>

Usually an anchor is presented only if the MIME type is 'text/html'.
But it may have some meaning with other files;
for example myanim.avi\#200 may refer to position in animation
or reality.wrl\#MyView may refer to a predefined view in VRML.

</description></function></member>
<member class="wxFSFile" name="GetLocation"><function type="const wxString&amp;" name="GetLocation" suffix="const"><description>

Returns full location of the file, including path and protocol. 
Examples : 

<pre>
http://www.wxwindows.org
http://www.ms.mff.cuni.cz/~vsla8348/wxhtml/archive.zip#zip:info.txt
file:/home/vasek/index.htm
relative-file.htm
</pre>

</description></function></member>
<member class="wxFSFile" name="GetMimeType"><function type="const wxString&amp;" name="GetMimeType" suffix="const"><description>

Returns the MIME type of the content of this file. It is either
extension-based (see wxMimeTypesManager) or extracted from
HTTP protocol Content-Type header.

</description></function></member>
<member class="wxFSFile" name="GetModificationTime"><function type="wxDateTime" name="GetModificationTime" suffix="const"><description>

Returns time when this file was modified.

</description></function></member>
<member class="wxFSFile" name="GetStream"><function type="wxInputStream&#42;" name="GetStream" suffix="const"><description>

Returns pointer to the stream. You can use the returned
stream to directly access data. You may suppose
that the stream provide Seek and GetSize functionality
(even in the case of the HTTP protocol which doesn't provide
this by default. wxHtml uses local cache to work around
this and to speed up the connection).

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFTP">
<description>
<p class="classdesc">
wxFTP can be used to establish a connection to an FTP server and perform all the
usual operations. Please consult the RFC 959 for more details about the FTP
protocol.</p><p class="classdesc">To use a commands which doesn't involve file transfer (i.e. directory oriented
commands) you just need to call a corresponding member function or use the
generic <ref target="wxftpsendcommand">SendCommand</ref> method. However to actually
transfer files you just get or give a stream to or from this class and the
actual data are read or written using the usual stream methods.</p><p class="classdesc">Example of using wxFTP for file downloading:</p><p class="classdesc"><pre>
    wxFTP ftp;

    // if you don't use these lines anonymous login will be used
    ftp.SetUser(&quot;user&quot;);
    ftp.SetPassword(&quot;password&quot;);

    if ( !ftp.Connect(&quot;ftp.wxwindows.org&quot;) )
    {
        wxLogError(&quot;Couldn't connect&quot;);
        return;
    }

    ftp.ChDir(&quot;/pub&quot;);
    wxInputStream &#42;in = ftp.GetInputStream(&quot;wxWindows-4.2.0.tar.gz&quot;);
    if ( !in )
    {
        wxLogError(&quot;Coudln't get file&quot;);
    }
    else
    {
        size_t size = in-&gt;StreamSize();
        char &#42;data = new char&#91;size];
        if ( !in-&gt;Read(data, size) )
        {
            wxLogError(&quot;Read error&quot;);
        }
        else
        {
            // file data is in the buffer
            ...
        }

        delete &#91;] data;
        delete in;
    }
</pre></p><p class="classdesc">To upload a file you would do (assuming the connection to the server was opened
successfully):</p><p class="classdesc"><pre>
        wxOutputStream &#42;out = ftp.GetOutputStream(&quot;filename&quot;);
        if ( out )
        {
            out-&gt;Write(...); // your data
            delete out;
        }
</pre></p>
</description>
<parents>
<classref name="wxProtocol"/>

</parents>
<includes>
<header name="wx/protocol/ftp.h"/></includes>
<constants>

wxFTP defines constants corresponding to the two supported transfer modes:

<pre>
enum TransferMode
{
    ASCII,
    BINARY
};
</pre>

</constants>
<seealso>

<ref target="wxsocketbase">wxSocketBase</ref>


</seealso>
<members>
<member class="wxFTP" name="wxFTP"><function type="" name="wxFTP"><description>

Default constructor.

</description></function></member>
<member class="wxFTP" name="~wxFTP"><function type="" name="~wxFTP"><description>

Destructor will close the connection if connected.

</description></function></member>
<member class="wxFTP" name="Abort"><function type="bool" name="Abort"><description>

Aborts the download currently in process, returns <tt> true</tt> if ok, <tt> false</tt> 
if an error occured.

</description></function></member>
<member class="wxFTP" name="CheckCommand"><function type="bool" name="CheckCommand"><parameters><parameter type="const wxString&amp;" name=" command"></parameter><parameter type="char " name="ret"></parameter></parameters><returnvalue>

true if the command has been sent successfully, else false.

</returnvalue><description>

Send the specified <i> command</i> to the FTP server. <i> ret</i> specifies
the expected result.

</description></function></member>
<member class="wxFTP" name="SendCommand"><function type="char" name="SendCommand"><parameters><parameter type="const wxString&amp;" name=" command"></parameter></parameters><description>

Send the specified <i> command</i> to the FTP server and return the first
character of the return code.

</description></function></member>
<member class="wxFTP" name="GetLastResult"><function type="const wxString&amp;" name="GetLastResult"><description>

Returns the last command result, i.e. the full server reply for the last
command.


</description></function></member>
<member class="wxFTP" name="ChDir"><function type="bool" name="ChDir"><parameters><parameter type="const wxString&amp;" name=" dir"></parameter></parameters><description>

Change the current FTP working directory.
Returns true if successful.

</description></function></member>
<member class="wxFTP" name="MkDir"><function type="bool" name="MkDir"><parameters><parameter type="const wxString&amp;" name=" dir"></parameter></parameters><description>

Create the specified directory in the current FTP working directory.
Returns true if successful.

</description></function></member>
<member class="wxFTP" name="RmDir"><function type="bool" name="RmDir"><parameters><parameter type="const wxString&amp;" name=" dir"></parameter></parameters><description>

Remove the specified directory from the current FTP working directory.
Returns true if successful.

</description></function></member>
<member class="wxFTP" name="Pwd"><function type="wxString" name="Pwd"><description>

Returns the current FTP working directory.


</description></function></member>
<member class="wxFTP" name="Rename"><function type="bool" name="Rename"><parameters><parameter type="const wxString&amp;" name=" src"></parameter><parameter type="const wxString&amp;" name=" dst"></parameter></parameters><description>

Rename the specified <i> src</i> element to <i> dst</i>. Returns true if successful.


</description></function></member>
<member class="wxFTP" name="RmFile"><function type="bool" name="RmFile"><parameters><parameter type="const wxString&amp;" name=" path"></parameter></parameters><description>

Delete the file specified by <i> path</i>. Returns true if successful.


</description></function></member>
<member class="wxFTP" name="SetAscii"><function type="bool" name="SetAscii"><description>

Sets the transfer mode to ASCII. It will be used for the next transfer.

</description></function></member>
<member class="wxFTP" name="SetBinary"><function type="bool" name="SetBinary"><description>

Sets the transfer mode to binary (IMAGE). It will be used for the next transfer.

</description></function></member>
<member class="wxFTP" name="SetTransferMode"><function type="bool" name="SetTransferMode"><parameters><parameter type="TransferMode " name="mode"></parameter></parameters><description>

Sets the transfer mode to the specified one. It will be used for the next
transfer.

If this function is never called, binary transfer mode is used by default.


</description></function></member>
<member class="wxFTP" name="SetUser"><function type="void" name="SetUser"><parameters><parameter type="const wxString&amp;" name=" user"></parameter></parameters><description>

Sets the user name to be sent to the FTP server to be allowed to log in.

\wxheading{Default value}

The default value of the user name is &quot;anonymous&quot;.

\wxheading{Remark}

This parameter can be included in a URL if you want to use the URL manager.
For example, you can use: &quot;ftp://a_user:a_password@a.host:service/a_directory/a_file&quot;
to specify a user and a password.

</description></function></member>
<member class="wxFTP" name="SetPassword"><function type="void" name="SetPassword"><parameters><parameter type="const wxString&amp;" name=" passwd"></parameter></parameters><description>

Sets the password to be sent to the FTP server to be allowed to log in.

\wxheading{Default value}

The default value of the user name is your email address. For example, it could
be &quot;username@userhost.domain&quot;. This password is built by getting the current
user name and the host name of the local machine from the system.

\wxheading{Remark}

This parameter can be included in a URL if you want to use the URL manager.
For example, you can use: &quot;ftp://a_user:a_password@a.host:service/a_directory/a_file&quot;
to specify a user and a password.


</description></function></member>
<member class="wxFTP" name="FileExists"><function type="bool" name="FileExists"><parameters><parameter type="const wxString&amp;" name=" filename"></parameter></parameters><description>

Returns <tt> true</tt> if the given remote file exists, <tt> false</tt> otherwise.

</description></function></member>
<member class="wxFTP" name="GetFileSize"><function type="int" name="GetFileSize"><parameters><parameter type="const wxString&amp;" name=" filename"></parameter></parameters><description>

Returns the file size in bytes or $-1$ if the file doesn't exist or the size
couldn't be determined. Notice that this size can be approximative size only
and shouldn't be used for allocating the buffer in which the remote file is
copied, for example.

</description></function></member>
<member class="wxFTP" name="GetDirList"><function type="bool" name="GetDirList"><parameters><parameter type="wxArrayString&amp; " name="files"></parameter><parameter type="const wxString&amp;" name="wildcard" value="&quot;&quot;"></parameter></parameters><seealso>

<ref target="wxftpgetfileslist">GetFilesList</ref>

</seealso><description>

The GetList function is quite low-level. It returns the list of the files in
the current directory. The list can be filtered using the <i> wildcard</i> string.
If <i> wildcard</i> is empty (default), it will return all files in directory.

The form of the list can change from one peer system to another. For example,
for a UNIX peer system, it will look like this:

<pre>
-r--r--r--   1 guilhem  lavaux      12738 Jan 16 20:17 cmndata.cpp
-r--r--r--   1 guilhem  lavaux      10866 Jan 24 16:41 config.cpp
-rw-rw-rw-   1 guilhem  lavaux      29967 Dec 21 19:17 cwlex_yy.c
-rw-rw-rw-   1 guilhem  lavaux      14342 Jan 22 19:51 cwy_tab.c
-r--r--r--   1 guilhem  lavaux      13890 Jan 29 19:18 date.cpp
-r--r--r--   1 guilhem  lavaux       3989 Feb  8 19:18 datstrm.cpp
</pre>

But on Windows system, it will look like this:

<pre>
winamp~1 exe    520196 02-25-1999  19:28  winamp204.exe
        1 file(s)           520 196 bytes
</pre>

Return value: true if the file list was successfully retrieved, false
otherwise.

</description></function></member>
<member class="wxFTP" name="GetFilesList"><function type="bool" name="GetFilesList"><parameters><parameter type="wxArrayString&amp; " name="files"></parameter><parameter type="const wxString&amp;" name="wildcard" value="&quot;&quot;"></parameter></parameters><description>

This function returns the computer-parsable list of the files in the current
directory (optionally only of the files matching the <i> wildcard</i>, all files
by default). This list always has the same format and contains one full
(including the directory path) file name per line.

Return value: true if the file list was successfully retrieved, false
otherwise.


</description></function></member>
<member class="wxFTP" name="GetOutputStream"><function type="wxOutputStream &#42;" name="GetOutputStream"><parameters><parameter type="const wxString&amp;" name=" file"></parameter></parameters><seealso>

<ref target="wxoutputstream">wxOutputStream</ref>


</seealso><returnvalue>

An initialized write-only stream.

</returnvalue><description>

Initializes an output stream to the specified <i> file</i>. The returned
stream has all but the seek functionality of wxStreams. When the user finishes
writing data, he has to delete the stream to close it.

</description></function></member>
<member class="wxFTP" name="GetInputStream"><function type="wxInputStream &#42;" name="GetInputStream"><parameters><parameter type="const wxString&amp;" name=" path"></parameter></parameters><seealso>

<ref target="wxinputstream">wxInputStream</ref>

</seealso><returnvalue>

Returns NULL if an error occurred (it could be a network failure or the fact
that the file doesn't exist).

Returns the initialized stream. You will have to delete it yourself when you
don't need it anymore. The destructor closes the DATA stream connection but
will leave the COMMAND stream connection opened. It means that you can still
send new commands without reconnecting.

\wxheading{Example of a standalone connection (without wxURL)}

<pre>
  wxFTP ftp;
  wxInputStream &#42;in_stream;
  char &#42;data;

  ftp.Connect(&quot;a.host.domain&quot;);
  ftp.ChDir(&quot;a_directory&quot;);
  in_stream = ftp.GetInputStream(&quot;a_file_to_get&quot;);

  data = new char&#91;in_stream-&gt;StreamSize()];

  in_stream-&gt;Read(data, in_stream-&gt;StreamSize());
  if (in_stream-&gt;LastError() != wxStream_NOERROR) {
    // Do something.
  }

  delete in_stream; /&#42; Close the DATA connection &#42;/

  ftp.Close(); /&#42; Close the COMMAND connection &#42;/
</pre>

</returnvalue><description>

Creates a new input stream on the the specified path. You can use all but the seek
functionality of wxStream. Seek isn't available on all streams. For example,
http or ftp streams do not deal with it. Other functions like Tell
are not available for this sort of stream, at present.
You will be notified when the EOF is reached by an error.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFile">
<description>
<p class="classdesc">
A wxFile performs raw file I/O. This is a very small class designed to
minimize the overhead of using it - in fact, there is hardly any overhead at
all, but using it brings you automatic error checking and hides differences
between platforms and compilers. wxFile also automatically closes the file in
its destructor making it unnecessary to worry about forgetting to do it.
wxFile is a wrapper around <tt> file descriptor.</tt> - see also 
<ref target="wxffile">wxFFile</ref> for a wrapper around <tt> FILE</tt> structure.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/file.h"/></includes>
<constants>

wx/file.h defines the following constants:

<pre>
#define wxS_IRUSR 00400
#define wxS_IWUSR 00200
#define wxS_IXUSR 00100

#define wxS_IRGRP 00040
#define wxS_IWGRP 00020
#define wxS_IXGRP 00010

#define wxS_IROTH 00004
#define wxS_IWOTH 00002
#define wxS_IXOTH 00001

// default mode for the new files: corresponds to umask 022
#define wxS_DEFAULT  (wxS_IRUSR | wxS_IWUSR | wxS_IRGRP | wxS_IWGRP | wxS_IROTH | wxS_IWOTH)
</pre>

These constants define the file access rights and are used with 
<ref target="wxfilecreate">wxFile::Create</ref> and <ref target="wxfileopen">wxFile::Open</ref>.

The <i> OpenMode</i> enumeration defines the different modes for opening a file,
it is defined inside wxFile class so its members should be specified with <i> wxFile::</i> scope
resolution prefix. It is also used with <ref target="wxfileaccess">wxFile::Access</ref> function.

\twocolwidtha{7cm}
<table><tr><td><b> wxFile::read</b></td><td>Open file for reading or test if it can be opened for reading with Access()</td></tr>
<tr><td><b> wxFile::write</b></td><td>Open file for writing deleting the contents of the file if it already exists
or test if it can be opened for writing with Access()</td></tr>
<tr><td><b> wxFile::read_write</b></td><td>Open file for reading and writing; can not be used with Access()</td></tr>
<tr><td><b> wxFile::write_append</b></td><td>Open file for appending: the file is opened for writing, but the old
contents of the file is not erased and the file pointer is initially placed at the end of the file;
can not be used with Access(). This is the same as <b> wxFile::write</b> if the
file doesn't exist.</td></tr>
<tr><td><b> wxFile::write_excl</b></td><td>Open the file securely for writing (Uses O_EXCL | O_CREAT).
Will fail if the file already exists, else create and open it atomically.  Useful for opening temporary files without being vulnerable to race exploits.</td></tr>
</table>

Other constants defined elsewhere but used by wxFile functions are wxInvalidOffset which represents an
invalid value of type <i> off_t</i> and is returned by functions returning <i> off_t</i> on error and the seek
mode constants used with <ref target="wxfileseek">Seek()</ref>:

\twocolwidtha{7cm}
<table><tr><td><b> wxFromStart</b></td><td>Count offset from the start of the file</td></tr>
<tr><td><b> wxFromCurrent</b></td><td>Count offset from the current position of the file pointer</td></tr>
<tr><td><b> wxFromEnd</b></td><td>Count offset from the end of the file (backwards)</td></tr>
</table>

</constants>
<members>
<member class="wxFile" name="wxFile"><function type="" name="wxFile"><description>

Default constructor.

</description></function>
<function type="" name="wxFile"><parameters><parameter type="const char&#42;" name=" filename"></parameter><parameter type="wxFile::OpenMode" name="mode" value="wxFile::read">The mode in which to open the file. May be one of <b> wxFile::read</b>, <b> wxFile::write</b> and <b> wxFile::read_write</b>.</parameter></parameters><description>

Opens a file with the given mode. As there is no way to return whether the
operation was successful or not from the constructor you should test the
return value of <ref target="wxfileisopened">IsOpened</ref> to check that it didn't
fail.

</description></function>
<function type="" name="wxFile"><parameters><parameter type="int" name=" fd"></parameter></parameters><description>

Associates the file with the given file descriptor, which has already been opened.









</description></function></member>
<member class="wxFile" name="~wxFile"><function type="" name="~wxFile"><description>

Destructor will close the file.

<b> NB:</b> it is not virtual so you should not use wxFile polymorphically.

</description></function></member>
<member class="wxFile" name="Access"><function type="static bool" name="Access"><parameters><parameter type="const char &#42;" name=" name"></parameter><parameter type="OpenMode" name=" mode"></parameter></parameters><description>

This function verifies if we may access the given file in specified mode. Only
values of wxFile::read or wxFile::write really make sense here.

</description></function></member>
<member class="wxFile" name="Attach"><function type="void" name="Attach"><parameters><parameter type="int" name=" fd"></parameter></parameters><description>

Attaches an existing file descriptor to the wxFile object. Example of predefined
file descriptors are 0, 1 and 2 which correspond to stdin, stdout and stderr (and
have symbolic names of <b> wxFile::fd_stdin</b>, <b> wxFile::fd_stdout</b> and <b> wxFile::fd_stderr</b>).

The descriptor should be already opened and it will be closed by wxFile
object.

</description></function></member>
<member class="wxFile" name="Close"><function type="void" name="Close"><description>

Closes the file.

</description></function></member>
<member class="wxFile" name="Create"><function type="bool" name="Create"><parameters><parameter type="const char&#42;" name=" filename"></parameter><parameter type="bool" name="overwrite" value="false"></parameter><parameter type="int " name="access" value="wxS_DEFAULT"></parameter></parameters><description>

Creates a file for writing. If the file already exists, setting <b> overwrite</b> to true
will ensure it is overwritten.

</description></function></member>
<member class="wxFile" name="Detach"><function type="void" name="Detach"><description>

Get back a file descriptor from wxFile object - the caller is responsible for closing the file if this
descriptor is opened. <ref target="wxfileisopened">IsOpened()</ref> will return false after call to Detach().

</description></function></member>
<member class="wxFile" name="fd"><function type="int" name="fd" suffix="const"><description>

Returns the file descriptor associated with the file.

</description></function></member>
<member class="wxFile" name="Eof"><function type="bool" name="Eof" suffix="const"><description>

Returns true if the end of the file has been reached.

Note that the behaviour of the file pointer based class 
<ref target="wxffile">wxFFile</ref> is different as <ref target="wxffileeof">wxFFile::Eof</ref> 
will return true here only if an attempt has been made to read 
<i> past</i> the last byte of the file, while wxFile::Eof() will return true
even before such attempt is made if the file pointer is at the last position
in the file.

Note also that this function doesn't work on unseekable file descriptors
(examples include pipes, terminals and sockets under Unix) and an attempt to
use it will result in an error message in such case. So, to read the entire
file into memory, you should write a loop which uses 
<ref target="wxfileread">Read</ref> repeatedly and tests its return condition instead
of using Eof() as this will not work for special files under Unix.

</description></function></member>
<member class="wxFile" name="Exists"><function type="static bool" name="Exists"><parameters><parameter type="const char&#42;" name=" filename"></parameter></parameters><description>

Returns true if the given name specifies an existing regular file (not a
directory or a link)

</description></function></member>
<member class="wxFile" name="Flush"><function type="bool" name="Flush"><description>

Flushes the file descriptor.

Note that wxFile::Flush is not implemented on some Windows compilers
due to a missing fsync function, which reduces the usefulness of this function
(it can still be called but it will do nothing on unsupported compilers).

</description></function></member>
<member class="wxFile" name="IsOpened"><function type="bool" name="IsOpened" suffix="const"><description>

Returns true if the file has been opened.

</description></function></member>
<member class="wxFile" name="Length"><function type="off_t" name="Length" suffix="const"><description>

Returns the length of the file.

</description></function></member>
<member class="wxFile" name="Open"><function type="bool" name="Open"><parameters><parameter type="const char&#42;" name=" filename"></parameter><parameter type="wxFile::OpenMode" name="mode" value="wxFile::read">The mode in which to open the file. May be one of <b> wxFile::read</b>, <b> wxFile::write</b> and <b> wxFile::read_write</b>.</parameter></parameters><description>

Opens the file, returning true if successful.







</description></function></member>
<member class="wxFile" name="Read"><function type="off_t" name="Read"><parameters><parameter type="void&#42;" name=" buffer"></parameter><parameter type="off_t" name=" count"></parameter></parameters><returnvalue>

The number of bytes read, or the symbol <b> wxInvalidOffset</b> (-1) if there was an error.

</returnvalue><description>

Reads the specified number of bytes into a buffer, returning the actual number read.







</description></function></member>
<member class="wxFile" name="Seek"><function type="off_t" name="Seek"><parameters><parameter type="off_t " name="ofs">Offset to seek to.</parameter><parameter type="wxSeekMode " name="mode" value="wxFromStart">One of <b> wxFromStart</b>, <b> wxFromEnd</b>, <b> wxFromCurrent</b>.</parameter></parameters><returnvalue>

The actual offset position achieved, or wxInvalidOffset on failure.

</returnvalue><description>

Seeks to the specified position.







</description></function></member>
<member class="wxFile" name="SeekEnd"><function type="off_t" name="SeekEnd"><parameters><parameter type="off_t " name="ofs" value="0">Number of bytes before the end of the file.</parameter></parameters><returnvalue>

The actual offset position achieved, or wxInvalidOffset on failure.

</returnvalue><description>

Moves the file pointer to the specified number of bytes before the end of the file.





</description></function></member>
<member class="wxFile" name="Tell"><function type="off_t" name="Tell" suffix="const"><description>

Returns the current position or wxInvalidOffset if file is not opened or if another
error occurred.

</description></function></member>
<member class="wxFile" name="Write"><function type="size_t" name="Write"><parameters><parameter type="const void&#42;" name=" buffer"></parameter><parameter type="off_t" name=" count"></parameter></parameters><returnvalue>

the number of bytes actually written

</returnvalue><description>

Writes the specified number of bytes from a buffer.







</description></function></member>
<member class="wxFile" name="Write"><function type="bool" name="Write"><parameters><parameter type="const wxString&amp; " name="s"></parameter><parameter type="wxMBConv&amp;" name="conv" value="wxConvUTF8"></parameter></parameters><description>

Writes the contents of the string to the file, returns true on success.

The second argument is only meaningful in Unicode build of wxWindows when
<i> conv</i> is used to convert <i> s</i> to multibyte representation.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFileDataObject">
<description>
<p class="classdesc">
wxFileDataObject is a specialization of <ref target="wxdataobject">wxDataObject</ref> 
for file names. The program works with it just as if it were a list of absolute file
names, but internally it uses the same format as
Explorer and other compatible programs under Windows or GNOME/KDE filemanager
under Unix which makes it possible to receive files from them using this
class.</p><p class="classdesc"><b> Warning:</b> Under all non-Windows platforms this class is currently
&quot;input-only&quot;, i.e. you can receive the files from another application, but
copying (or dragging) file(s) from a wxWindows application is not currently
supported.</p>
</description>
<parents>
<classref name="wxDataObjectSimple"/>
<classref name="wxDataObject"/>

</parents>
<includes>
<header name="wx/dataobj.h"/></includes>
<seealso>

<ref target="wxdataobject">wxDataObject</ref>
<ref target="wxdataobjectsimple">wxDataObjectSimple</ref>
<ref target="wxtextdataobject">wxTextDataObject</ref>
<ref target="wxbitmapdataobject">wxBitmapDataObject</ref>

</seealso>
<members>
<member class="" name=""></member>
<member class="wxFileDataObject" name="AddFile"><function type="virtual void" name="AddFile"><parameters><parameter type="const wxString&amp; " name="file"></parameter></parameters><description>

<b> MSW only:</b> adds a file to the file list represented by this data object.

</description></function></member>
<member class="wxFileDataObject" name="GetFilenames"><function type="const wxArrayString&amp; " name="GetFilenames" suffix="const"><description>

Returns the <ref target="wxarraystring">array</ref> of file names.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class>
<class name="wxFileDialog">
<description>
<p class="classdesc">
This class represents the file chooser dialog.</p>
</description>
<remarks>

Pops up a file selector box. In Windows, this is the common file selector
dialog. In X, this is a file selector box with somewhat less functionality.
The path and filename are distinct elements of a full file pathname.
If path is ``&quot;, the current directory will be used. If filename is ``&quot;,
no default filename will be supplied. The wildcard determines what files
are displayed in the file selector, and file extension supplies a type
extension for the required filename. Flags may be a combination of wxOPEN,
wxSAVE, wxOVERWRITE_PROMPT, wxHIDE_READONLY, wxFILE_MUST_EXIST, wxMULTIPLE or 0.

Both the X and Windows versions implement a wildcard filter. Typing a
filename containing wildcards (&#42;, ?) in the filename text item, and
clicking on Ok, will result in only those files matching the pattern being
displayed. The wildcard may be a specification for multiple
types of file with a description for each, such as:

<pre>
 &quot;BMP files (&#42;.bmp)|&#42;.bmp|GIF files (&#42;.gif)|&#42;.gif&quot;
</pre>

It must be noted that wildcard support in the native Motif file
dialog is quite limited: only one alternative is supported,
and it is displayed without the descriptive test; ``BMP files (&#42;.bmp)|&#42;.bmp''
is displayed as ``&#42;.bmp'', and both
``BMP files (&#42;.bmp)|&#42;.bmp|GIF files (&#42;.gif)|&#42;.gif'' and
``Image files|&#42;.bmp;&#42;.gif'' are errors.

</remarks>
<parents>
<classref name="wxDialog"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/filedlg.h"/></includes>
<seealso>

<ref target="wxfiledialogoverview">wxFileDialog overview</ref><ref target="wxfileselector">wxFileSelector</ref>

</seealso>
<members>
<member class="wxFileDialog" name="wxFileDialog"><function type="" name="wxFileDialog"><parameters><parameter type="wxWindow&#42; " name="parent">Parent window.</parameter><parameter type="const wxString&amp; " name="message" value="&quot;Choose">Message to show on the dialog.</parameter><parameter type="const wxString&amp; " name="defaultDir" value="&quot;&quot;">The default directory, or the empty string.</parameter><parameter type="const wxString&amp; " name="defaultFile" value="``&quot;">The default filename, or the empty string.</parameter><parameter type="const wxString&amp; " name="wildcard" value="``&#42;.&#42;&quot;">A wildcard, such as ``&#42;.&#42;&quot; or ``BMP files (&#42;.bmp)|&#42;.bmp|GIF files (&#42;.gif)|&#42;.gif&quot;.

Note that the native Motif dialog has some limitations with respect to
wildcards; see the Remarks section above.</parameter><parameter type="long " name="style" value="0"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Dialog position. Not implemented.</parameter></parameters><description>

Constructor. Use <ref target="wxfiledialogshowmodal">wxFileDialog::ShowModal</ref> to show the dialog.

















<b> NB:</b> Previous versions of wxWindows used <tt> wxCHANGE_DIR</tt> by default
under MS Windows which allowed the program to simply remember the last
directory where user selected the files to open/save. This (desired)
functionality must be implemented in the program itself now (manually remember
the last path used and pass it to the dialog the next time it is called) or
by using this flag.

</description></function></member>
<member class="wxFileDialog" name="~wxFileDialog"><function type="" name="~wxFileDialog"><description>

Destructor.

</description></function></member>
<member class="wxFileDialog" name="GetDirectory"><function type="wxString" name="GetDirectory" suffix="const"><description>

Returns the default directory.

</description></function></member>
<member class="wxFileDialog" name="GetFilename"><function type="wxString" name="GetFilename" suffix="const"><description>

Returns the default filename.

</description></function></member>
<member class="wxFileDialog" name="GetFilenames"><function type="void" name="GetFilenames" suffix="const"><parameters><parameter type="wxArrayString&amp; " name="filenames"></parameter></parameters><description>

Fills the array <i> filenames</i> with the names of the files chosen. This
function should only be used with the dialogs which have <tt> wxMULTIPLE</tt> style,
use <ref target="wxfiledialoggetfilename">GetFilename</ref> for the others.

Note that under Windows, if the user selects shortcuts, the filenames
include paths, since the application cannot determine the full path
of each referenced file by appending the directory containing the shortcuts
to the filename.

</description></function></member>
<member class="wxFileDialog" name="GetFilterIndex"><function type="int" name="GetFilterIndex" suffix="const"><description>

Returns the index into the list of filters supplied, optionally, in the wildcard parameter.
Before the dialog is shown, this is the index which will be used when the dialog is first displayed.
After the dialog is shown, this is the index selected by the user.

</description></function></member>
<member class="wxFileDialog" name="GetMessage"><function type="wxString" name="GetMessage" suffix="const"><description>

Returns the message that will be displayed on the dialog.

</description></function></member>
<member class="wxFileDialog" name="GetPath"><function type="wxString" name="GetPath" suffix="const"><description>

Returns the full path (directory and filename) of the selected file.

</description></function></member>
<member class="wxFileDialog" name="GetPaths"><function type="void" name="GetPaths" suffix="const"><parameters><parameter type="wxArrayString&amp; " name="paths"></parameter></parameters><description>

Fills the array <i> paths</i> with the full paths of the files chosen. This
function should only be used with the dialogs which have <tt> wxMULTIPLE</tt> style,
use <ref target="wxfiledialoggetpath">GetPath</ref> for the others.

</description></function></member>
<member class="wxFileDialog" name="GetStyle"><function type="long" name="GetStyle" suffix="const"><description>

Returns the dialog style.

</description></function></member>
<member class="wxFileDialog" name="GetWildcard"><function type="wxString" name="GetWildcard" suffix="const"><description>

Returns the file dialog wildcard.

</description></function></member>
<member class="wxFileDialog" name="SetDirectory"><function type="void" name="SetDirectory"><parameters><parameter type="const wxString&amp; " name="directory"></parameter></parameters><description>

Sets the default directory.

</description></function></member>
<member class="wxFileDialog" name="SetFilename"><function type="void" name="SetFilename"><parameters><parameter type="const wxString&amp; " name="setfilename"></parameter></parameters><description>

Sets the default filename.

</description></function></member>
<member class="wxFileDialog" name="SetFilterIndex"><function type="void" name="SetFilterIndex"><parameters><parameter type="int " name="filterIndex"></parameter></parameters><description>

Sets the default filter index, starting from zero.

</description></function></member>
<member class="wxFileDialog" name="SetMessage"><function type="void" name="SetMessage"><parameters><parameter type="const wxString&amp; " name="message"></parameter></parameters><description>

Sets the message that will be displayed on the dialog.

</description></function></member>
<member class="wxFileDialog" name="SetPath"><function type="void" name="SetPath"><parameters><parameter type="const wxString&amp; " name="path"></parameter></parameters><description>

Sets the path (the combined directory and filename that will be returned when the dialog is dismissed).

</description></function></member>
<member class="wxFileDialog" name="SetStyle"><function type="void" name="SetStyle"><parameters><parameter type="long " name="style"></parameter></parameters><description>

Sets the dialog style. See <ref target="wxfiledialogconstr">wxFileDialog::wxFileDialog</ref> for details.

</description></function></member>
<member class="wxFileDialog" name="SetWildcard"><function type="void" name="SetWildcard"><parameters><parameter type="const wxString&amp; " name="wildCard"></parameter></parameters><description>

Sets the wildcard, which can contain multiple file types, for example:

``BMP files (&#42;.bmp)|&#42;.bmp|GIF files (&#42;.gif)|&#42;.gif&quot;

Note that the native Motif dialog has some limitations with respect to
wildcards; see the Remarks section above.

</description></function></member>
<member class="wxFileDialog" name="ShowModal"><function type="int" name="ShowModal"><description>

Shows the dialog, returning wxID_OK if the user pressed OK, and wxID_CANCEL
otherwise.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFileDropTarget">
<description>
<p class="classdesc">
This is a <ref target="wxdroptarget">drop target</ref> which accepts files (dragged
from File Manager or Explorer).</p>
</description>
<parents>
<classref name="wxDropTarget"/>

</parents>
<includes>
<header name="wx/dnd.h"/></includes>
<seealso>

<ref target="wxdndoverview">Drag and drop overview</ref><ref target="wxdropsource">wxDropSource</ref>
<ref target="wxdroptarget">wxDropTarget</ref><ref target="wxtextdroptarget">wxTextDropTarget</ref>

</seealso>
<members>
<member class="wxFileDropTarget" name="wxFileDropTarget"><function type="" name="wxFileDropTarget"><description>

Constructor.

</description></function></member>
<member class="wxFileDropTarget" name="OnDrop"><function type="virtual bool" name="OnDrop"><parameters><parameter type="long " name="x"></parameter><parameter type="long " name="y"></parameter><parameter type="const void " name="&#42;data"></parameter><parameter type="size_t " name="size"></parameter></parameters><description>

See <ref target="wxdroptargetondrop">wxDropTarget::OnDrop</ref>. This function is implemented
appropriately for files, and calls <ref target="wxfiledroptargetondropfiles">wxFileDropTarget::OnDropFiles</ref>.

</description></function></member>
<member class="wxFileDropTarget" name="OnDropFiles"><function type="virtual bool" name="OnDropFiles"><parameters><parameter type="wxCoord " name="x">The x coordinate of the mouse.</parameter><parameter type="wxCoord " name="y">The y coordinate of the mouse.</parameter><parameter type="const wxArrayString&amp; " name="filenames">An array of filenames.</parameter></parameters><returnvalue>

Return true to accept the data, false to veto the operation.


</returnvalue><description>

Override this function to receive dropped files.









</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFileHistory">
<description>
<p class="classdesc">
The wxFileHistory encapsulates a user interface convenience, the
list of most recently visited files as shown on a menu (usually the File menu).</p><p class="classdesc">wxFileHistory can manage one or more file menus. More than one menu may be required
in an MDI application, where the file history should appear on each MDI child menu
as well as the MDI parent frame.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/docview.h"/></includes>
<seealso>

<ref target="wxfilehistoryoverview">wxFileHistory overview</ref><ref target="wxdocmanager">wxDocManager</ref>

</seealso>
<members>
<member class="wxFileHistory" name="m_fileHistory"></member>
<member class="wxFileHistory" name="m_fileHistoryN"></member>
<member class="wxFileHistory" name="m_fileMaxFiles"></member>
<member class="wxFileHistory" name="m_fileMenu"></member>
<member class="wxFileHistory" name="wxFileHistory"><function type="" name="wxFileHistory"><parameters><parameter type="size_t" name="maxFiles" value="9"></parameter><parameter type="wxWindowID" name="idBase" value="wxID_FILE1"></parameter></parameters><description>

Constructor. Pass the maximum number of files that should be stored and
displayed.

<i> idBase</i> defaults to wxID_FILE1 and represents the id given to the first
history menu item.  Since menu items can't share the same ID you should change
idBase (To one of your own defined IDs) when using more than one wxFileHistory
in your application.

</description></function></member>
<member class="wxFileHistory" name="~wxFileHistory"><function type="" name="~wxFileHistory"><description>

Destructor.

</description></function></member>
<member class="wxFileHistory" name="AddFileToHistory"><function type="void" name="AddFileToHistory"><parameters><parameter type="const wxString&amp; " name="filename"></parameter></parameters><description>

Adds a file to the file history list, if the object has a pointer to an appropriate file menu.

</description></function></member>
<member class="wxFileHistory" name="AddFilesToMenu"><function type="void" name="AddFilesToMenu"><description>

Appends the files in the history list, to all menus managed by the file history object.

</description></function>
<function type="void" name="AddFilesToMenu"><parameters><parameter type="wxMenu&#42;" name=" menu"></parameter></parameters><description>

Appends the files in the history list, to the given menu only.

</description></function></member>
<member class="wxFileHistory" name="GetHistoryFile"><function type="wxString" name="GetHistoryFile" suffix="const"><parameters><parameter type="size_t" name=" index"></parameter></parameters><description>

Returns the file at this index (zero-based).

</description></function></member>
<member class="wxFileHistory" name="GetMaxFiles"><function type="size_t" name="GetMaxFiles" suffix="const"><description>

Returns the maximum number of files that can be stored.

</description></function></member>
<member class="wxFileHistory" name="GetNoHistoryFiles"><function type="size_t" name="GetNoHistoryFiles" suffix="const"><description>

Returns the number of files currently stored in the file history.

</description></function></member>
<member class="wxFileHistory" name="Load"><function type="void" name="Load"><parameters><parameter type="wxConfigBase&amp; " name="config"></parameter></parameters><seealso>

<ref target="wxconfigbase">wxConfig</ref>

</seealso><description>

Loads the file history from the given config object. This function should be called explicitly by the application.

</description></function></member>
<member class="wxFileHistory" name="RemoveMenu"><function type="void" name="RemoveMenu"><parameters><parameter type="wxMenu&#42; " name="menu"></parameter></parameters><description>

Removes this menu from the list of those managed by this object.

</description></function></member>
<member class="wxFileHistory" name="Save"><function type="void" name="Save"><parameters><parameter type="wxConfigBase&amp; " name="config"></parameter></parameters><seealso>

<ref target="wxconfigbase">wxConfig</ref>

</seealso><description>

Saves the file history into the given config object. This must be called
explicitly by the application.

</description></function></member>
<member class="wxFileHistory" name="UseMenu"><function type="void" name="UseMenu"><parameters><parameter type="wxMenu&#42; " name="menu"></parameter></parameters><description>

Adds this menu to the list of those managed by this object.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFileInputStream">
<description>
<p class="classdesc">
This class represents data read in from a file. There are actually
two such groups of classes: this one is based on <ref target="wxfile">wxFile</ref> 
whereas <ref target="wxffileinputstream">wxFFileInputStream</ref> is based in
the <ref target="wxffile">wxFFile</ref> class.</p><p class="classdesc">Note that <ref target="wxfile">wxFile</ref> and <ref target="wxffile">wxFFile</ref> differ
in one aspect, namely when to report that the end of the file has been
reached. This is documented in <ref target="wxfileeof">wxFile::Eof</ref> and 
<ref target="wxffileeof">wxFFile::Eof</ref> and the behaviour of the stream
classes reflects this difference, i.e. wxFileInputStream will report
wxSTREAM_EOF after having read the last byte whereas wxFFileInputStream
will report wxSTREAM_EOF after trying to read <i> past</i> the last byte.</p>
</description>
<parents>
<classref name="wxInputStream"/>

</parents>
<includes>
<header name="wx/wfstream.h"/></includes>
<seealso>

<ref target="wxbufferedinputstream">wxBufferedInputStream</ref><ref target="wxfileoutputstream">wxFileOutputStream</ref><ref target="wxffileoutputstream">wxFFileOutputStream</ref>

</seealso>
<members>
<member class="wxFileInputStream" name="wxFileInputStream"><function type="" name="wxFileInputStream"><parameters><parameter type="const wxString&amp;" name=" ifileName"></parameter></parameters><description>

Opens the specified file using its <i> ifilename</i> name in read-only mode.

</description></function>
<function type="" name="wxFileInputStream"><parameters><parameter type="wxFile&amp;" name=" file"></parameter></parameters><description>

Initializes a file stream in read-only mode using the file I/O object <i> file</i>.

</description></function>
<function type="" name="wxFileInputStream"><parameters><parameter type="int" name=" fd"></parameter></parameters><description>

Initializes a file stream in read-only mode using the specified file descriptor.

</description></function></member>
<member class="wxFileInputStream" name="~wxFileInputStream"><function type="" name="~wxFileInputStream"><description>

Destructor.

</description></function></member>
<member class="wxFileInputStream" name="Ok"><function type="bool" name="Ok" suffix="const"><description>

Returns true if the stream is initialized and ready.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFileName">
<description>
<p class="classdesc">
wxFileName encapsulates a file name. This class serves two purposes: first, it
provides the functions to split the file names into components and to recombine
these components in the full file name which can then be passed to the OS file
functions (and <ref target="filefunctions">wxWindows functions</ref> wrapping them).
Second, it includes the functions for working with the files itself. Note that
to change the file data you should use <ref target="wxfile">wxFile</ref> class instead.
wxFileName provides functions for working with the file attributes.</p>
</description>
<parents></parents>
<structs>

Many wxFileName methods accept the path format argument which is by
<tt> wxPATH_NATIVE</tt> by default meaning to use the path format native for the
current platform.

The path format affects the operation of wxFileName functions in several ways:
first and foremost, it defines the path separator character to use, but it also
affects other things such as whether the path has the drive part or not.

<pre>
enum wxPathFormat
{
    wxPATH_NATIVE = 0,      // the path format for the current platform
    wxPATH_UNIX,
    wxPATH_MAC,
    wxPATH_DOS,
    wxPATH_VMS,

    wxPATH_BEOS = wxPATH_UNIX,
    wxPATH_WIN = wxPATH_DOS,
    wxPATH_OS2 = wxPATH_DOS
}
</pre>

</structs>
<members>
<member class="" name=""></member>
<member class="" name=""></member>
<member class="" name=""></member>
<member class="" name=""></member>
<member class="" name=""></member>
<member class="wxFileName" name="wxFileName"><function type="" name="wxFileName"><description>

Default constructor.

</description></function>
<function type="" name="wxFileName"><parameters><parameter type="const wxFileName&amp; " name="filename"></parameter></parameters><description>

Copy constructor.

</description></function>
<function type="" name="wxFileName"><parameters><parameter type="const wxString&amp; " name="fullpath"></parameter><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

Constructor taking a full filename. If it terminates with a '/', a directory path
is constructed (the name will be empty), otherwise a file name and
extension are extracted from it.

</description></function>
<function type="" name="wxFileName"><parameters><parameter type="const wxString&amp; " name="path"></parameter><parameter type="const wxString&amp; " name="name"></parameter><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

Constructor from a directory name and a file name.

</description></function>
<function type="" name="wxFileName"><parameters><parameter type="const wxString&amp; " name="path"></parameter><parameter type="const wxString&amp; " name="name"></parameter><parameter type="const wxString&amp; " name="ext"></parameter><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

Constructor from a directory name, base file name and extension.

</description></function>
<function type="" name="wxFileName"><parameters><parameter type="const wxString&amp; " name="volume"></parameter><parameter type="const wxString&amp; " name="path"></parameter><parameter type="const wxString&amp; " name="name"></parameter><parameter type="const wxString&amp; " name="ext"></parameter><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

Constructor from a volume name, a directory name, base file name and extension.

</description></function></member>
<member class="wxFileName" name="AppendDir"><function type="void" name="AppendDir"><parameters><parameter type="const wxString&amp; " name="dir"></parameter></parameters><description>

Appends a directory to the path.

</description></function></member>
<member class="wxFileName" name="Assign"><function type="void" name="Assign"><parameters><parameter type="const wxFileName&amp; " name="filepath"></parameter></parameters><description>

</description></function>
<function type="void" name="Assign"><parameters><parameter type="const wxString&amp; " name="fullpath"></parameter><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

</description></function>
<function type="void" name="Assign"><parameters><parameter type="const wxString&amp; " name="volume"></parameter><parameter type="const wxString&amp; " name="path"></parameter><parameter type="const wxString&amp; " name="name"></parameter><parameter type="const wxString&amp; " name="ext"></parameter><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

</description></function>
<function type="void" name="Assign"><parameters><parameter type="const wxString&amp; " name="path"></parameter><parameter type="const wxString&amp; " name="name"></parameter><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

</description></function>
<function type="void" name="Assign"><parameters><parameter type="const wxString&amp; " name="path"></parameter><parameter type="const wxString&amp; " name="name"></parameter><parameter type="const wxString&amp; " name="ext"></parameter><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

Creates the file name from various combinations of data.

</description></function></member>
<member class="wxFileName" name="AssignCwd"><function type="void" name="AssignCwd"><parameters><parameter type="const wxString&amp; " name="volume" value="&quot;&quot;"></parameter></parameters><seealso>

<ref target="wxfilenamegetcwd">GetCwd</ref>

</seealso><description>

Makes this object refer to the current working directory on the specified
volume (or current volume if <i> volume</i> is empty).

</description></function></member>
<member class="wxFileName" name="AssignDir"><function type="void" name="AssignDir"><parameters><parameter type="const wxString&amp; " name="dir"></parameter><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

Sets this file name object to the given directory name. The name and extension
will be empty.

</description></function></member>
<member class="wxFileName" name="AssignHomeDir"><function type="void" name="AssignHomeDir"><description>

Sets this file name object to the home directory.

</description></function></member>
<member class="wxFileName" name="AssignTempFileName"><function type="void" name="AssignTempFileName"><parameters><parameter type="const wxString&amp; " name="prefix"></parameter><parameter type="wxFile &#42;" name="fileTemp" value="NULL"></parameter></parameters><description>

The function calls <ref target="wxfilenamecreatetempfilename">CreateTempFileName</ref> to
create a temporary file and sets this object to the name of the file. If a
temporary file couldn't be created, the object is put into the
<ref target="wxfilenameisok">invalid</ref> state.

</description></function></member>
<member class="wxFileName" name="Clear"><function type="void" name="Clear"><description>

Reset all components to default, uninitialized state.

</description></function></member>
<member class="wxFileName" name="CreateTempFileName"><function type="static wxString" name="CreateTempFileName"><parameters><parameter type="const wxString&amp; " name="prefix">Prefix to use for the temporary file name construction</parameter><parameter type="wxFile &#42;" name="fileTemp" value="NULL">The file to open or <tt> NULL</tt> to just get the name</parameter></parameters><returnvalue>

The full temporary file name or an empty string on error.

</returnvalue><description>

Returns a temporary file name starting with the given <i> prefix</i>. If
the <i> prefix</i> is an absolute path, the temporary file is created in this
directory, otherwise it is created in the default system directory for the
temporary files or in the current directory.

If the function succeeds, the temporary file is actually created. If
<i> fileTemp</i> is not <tt> NULL</tt>, this file will be opened using the name of
the temporary file. When possible, this is done in an atomic way ensuring that
no race condition occurs between the temporary file name generation and opening
it which could often lead to security compromise on the multiuser systems.
If <i> fileTemp</i> is <tt> NULL</tt>, the file is only created, but not opened.

Under Unix, the temporary file will have read and write permissions for the
owner only to minimize the security problems.







</description></function></member>
<member class="wxFileName" name="DirExists"><function type="bool" name="DirExists" suffix="const"><description>

</description></function>
<function type="static bool" name="DirExists"><parameters><parameter type="const wxString&amp; " name="dir"></parameter></parameters><description>

Returns true if the directory with this name exists.

</description></function></member>
<member class="wxFileName" name="DirName"><function type="wxFileName" name="DirName"><parameters><parameter type="const wxString&amp; " name="dir"></parameter></parameters><description>

Returns the directory name.

</description></function></member>
<member class="wxFileName" name="FileExists"><function type="bool" name="FileExists" suffix="const"><description>

</description></function>
<function type="static bool" name="FileExists"><parameters><parameter type="const wxString&amp; " name="file"></parameter></parameters><seealso>

<ref target="wxfilenamedirexists">DirExists</ref>

</seealso><description>

Returns true if the file with this name exists.

</description></function></member>
<member class="wxFileName" name="FileName"><function type="wxFileName" name="FileName"><parameters><parameter type="const wxString&amp; " name="file"></parameter></parameters><description>

Static pseudo constructors.

</description></function></member>
<member class="wxFileName" name="GetCwd"><function type="wxString" name="GetCwd"><parameters><parameter type="const wxString&amp; " name="volume" value="&quot;&quot;"></parameter></parameters><seealso>

<ref target="wxfilenameassigncwd">AssignCwd</ref>

</seealso><returnvalue>

The string containing the current working directory or an empty string on
error.

</returnvalue><description>

Retrieves the value of the current working directory on the specified volume. If
the volume is empty, the programs current working directory is returned for the
current volume.

</description></function></member>
<member class="wxFileName" name="GetDirCount"><function type="size_t" name="GetDirCount" suffix="const"><description>

Returns the number of directories in the file name.

</description></function></member>
<member class="wxFileName" name="GetDirs"><function type="const wxArrayString&amp;" name="GetDirs" suffix="const"><description>

Returns the directories in string array form.

</description></function></member>
<member class="wxFileName" name="GetExt"><function type="wxString" name="GetExt" suffix="const"><description>

Returns the file name extension.

</description></function></member>
<member class="wxFileName" name="GetFormat"><function type="wxPathFormat" name="GetFormat"><parameters><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

Returns the canonical path format for this platform.

</description></function></member>
<member class="wxFileName" name="GetFullName"><function type="wxString" name="GetFullName" suffix="const"><description>

Returns the full name (including extension but excluding directories).

</description></function></member>
<member class="wxFileName" name="GetFullPath"><function type="wxString" name="GetFullPath" suffix="const"><parameters><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

Returns the full path with name and extension.

</description></function></member>
<member class="wxFileName" name="GetHomeDir"><function type="wxString" name="GetHomeDir"><description>

Returns the home directory.

</description></function></member>
<member class="wxFileName" name="GetLongPath"><function type="wxString" name="GetLongPath" suffix="const"><description>

Return the long form of the path (returns identity on non-Windows platforms)

</description></function></member>
<member class="wxFileName" name="GetModificationTime"><function type="wxDateTime" name="GetModificationTime" suffix="const"><description>

Returns the last time the file was last modified.

</description></function></member>
<member class="wxFileName" name="GetName"><function type="wxString" name="GetName" suffix="const"><description>

Returns the name part of the filename.

</description></function></member>
<member class="wxFileName" name="GetPath"><function type="wxString" name="GetPath" suffix="const"><parameters><parameter type="int " name="flags" value="0"></parameter><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

Returns the path part of the filename (without the name or extension). The
possible flags values are:

\twocolwidtha{5cm}
<table>
<tr><td><b> wxPATH_GET_VOLUME</b></td><td>Return the path with the volume (does
nothing for the filename formats without volumes)</td></tr>
<tr><td><b> wxPATH_GET_SEPARATOR</b></td><td>Return the path with the trailing
separator, if this flag is not given there will be no separator at the end of
the path.</td></tr>
</table>

</description></function></member>
<member class="wxFileName" name="GetPathSeparator"><function type="wxChar" name="GetPathSeparator"><parameters><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><seealso>

<ref target="wxfilenamegetpathseparators">GetPathSeparators</ref>

</seealso><description>

Returns the usually used path separator for this format. For all formats but 
<tt> wxPATH_DOS</tt> there is only one path separator anyhow, but for DOS there
are two of them and the native one, i.e. the backslash is returned by this
method.

</description></function></member>
<member class="wxFileName" name="GetPathSeparators"><function type="wxString" name="GetPathSeparators"><parameters><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><seealso>

<ref target="wxfilenamegetpathseparator">GetPathSeparator</ref>

</seealso><description>

Returns the string containing all the path separators for this format. For all
formats but <tt> wxPATH_DOS</tt> this string contains only one character but for
DOS and Windows both <tt> '/'</tt> and <tt> '\textbackslash'</tt> may be used as
separators.

</description></function></member>
<member class="wxFileName" name="GetShortPath"><function type="wxString" name="GetShortPath" suffix="const"><description>

Return the short form of the path (returns identity on non-Windows platforms).

</description></function></member>
<member class="wxFileName" name="GetTimes"><function type="bool" name="GetTimes" suffix="const"><parameters><parameter type="wxDateTime&#42; " name="dtAccess"></parameter><parameter type="wxDateTime&#42; " name="dtMod"></parameter><parameter type="wxDateTime&#42; " name="dtCreate"></parameter></parameters><returnvalue>

<tt> true</tt> on success, <tt> false</tt> if we failed to retrieve the times.

</returnvalue><description>

Returns the last access, last modification and creation times. The last access
time is updated whenever the file is read or written (or executed in the case
of Windows), last modification time is only changed when the file is written
to. Finally, the creation time is indeed the time when the file was created
under Windows and the inode change time under Unix (as it is impossible to
retrieve the real file creation time there anyhow) which can also be changed
by many operations after the file creation.

Any of the pointers may be <tt> NULL</tt> if the corresponding time is not
needed.

</description></function></member>
<member class="wxFileName" name="GetVolume"><function type="wxString" name="GetVolume" suffix="const"><description>

Returns the string containing the volume for this file name, mepty if it
doesn't have one or if the file system doesn't support volumes at all (for
example, Unix).

</description></function></member>
<member class="wxFileName" name="GetVolumeSeparator"><function type="wxString" name="GetVolumeSeparator"><parameters><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

Returns the string separating the volume from the path for this format.

</description></function></member>
<member class="wxFileName" name="HasExt"><function type="bool" name="HasExt" suffix="const"><description>

Returns true if an extension is present.

</description></function></member>
<member class="wxFileName" name="HasName"><function type="bool" name="HasName" suffix="const"><description>

Returns true if a name is present.

</description></function></member>
<member class="wxFileName" name="HasVolume"><function type="bool" name="HasVolume" suffix="const"><description>

Returns true if a volume specifier is present.

</description></function></member>
<member class="wxFileName" name="InsertDir"><function type="void" name="InsertDir"><parameters><parameter type="int " name="before"></parameter><parameter type="const wxString&amp; " name="dir"></parameter></parameters><description>

Inserts a directory before the zero-based position in the directory list.

</description></function></member>
<member class="wxFileName" name="IsAbsolute"><function type="bool" name="IsAbsolute"><parameters><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

Returns true if this filename is absolute.

</description></function></member>
<member class="wxFileName" name="IsCaseSensitive"><function type="bool" name="IsCaseSensitive"><parameters><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

Returns true if the file names of this type are case-sensitive.

</description></function></member>
<member class="wxFileName" name="IsOk"><function type="bool" name="IsOk" suffix="const"><description>

Returns <tt> true</tt> if the filename is valid, <tt> false</tt> if it is not
initialized yet. The assignment functions and
<ref target="wxfilenameclear">Clear</ref> may reset the object to the uninitialized,
invalid state (the former only do it on failure).

</description></function></member>
<member class="wxFileName" name="IsPathSeparator"><function type="bool" name="IsPathSeparator"><parameters><parameter type="wxChar " name="ch"></parameter><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

Returns <tt> true</tt> if the char is a path separator for this format.

</description></function></member>
<member class="wxFileName" name="IsRelative"><function type="bool" name="IsRelative"><parameters><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

Returns <tt> true</tt> if this filename is not absolute.

</description></function></member>
<member class="wxFileName" name="IsDir"><function type="bool" name="IsDir" suffix="const"><description>

Returns <tt> true</tt> if this object represents a directory, <tt> false</tt> otherwise
(i.e. if it is a file). Note that this method doesn't test whether the
directory or file really exists, you should use 
<ref target="wxfilenamedirexists">DirExists</ref> or 
<ref target="wxfilenamefileexists">FileExists</ref> for this.

</description></function></member>
<member class="wxFileName" name="MakeAbsolute"><function type="bool" name="MakeAbsolute"><parameters><parameter type="const wxString&amp; " name="cwd" value="wxEmptyString"></parameter><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><seealso>

<ref target="wxfilenamemakerelativeto">MakeRelativeTo</ref>,
<ref target="wxfilenamenormalize">Normalize</ref>,
<ref target="wxfilenameisabsolute">IsAbsolute</ref>

</seealso><description>

Make the file name absolute. This is a shortcut for
<tt> \helpref{Normalize</tt>{wxfilenamenormalize}(wxPATH_NORM_DOTS | wxPATH_NORM_ABSOLUTE | wxPATH_NORM_TILDE, cwd, format)}.

</description></function></member>
<member class="wxFileName" name="MakeRelativeTo"><function type="bool" name="MakeRelativeTo"><parameters><parameter type="const wxString&amp; " name="pathBase" value="&quot;&quot;">the directory to use as root, current directory is used by
default</parameter><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE">the file name format, native by default</parameter></parameters><seealso>

<ref target="wxfilenamenormalize">Normalize</ref>

</seealso><returnvalue>

<tt> true</tt> if the file name has been changed, <tt> false</tt> if we failed to do
anything with it (currently this only happens if the file name is on a volume
different from the volume specified by <i> pathBase</i>).

</returnvalue><description>

This function tries to put this file name in a form relative to <i> pathBase</i>.
In other words, it returns the file name which should be used to access this
file if the current directory were <i> pathBase</i>.





</description></function></member>
<member class="wxFileName" name="Mkdir"><function type="bool" name="Mkdir"><parameters><parameter type="int " name="perm" value="0777"></parameter><parameter type="int " name="flags" value="0">if the flags contain <tt> wxPATH_MKDIR_FULL</tt> flag,
try to create each directory in the path and also don't return an error
if the target directory already exists.</parameter></parameters><description>

</description></function>
<function type="static bool" name="Mkdir"><parameters><parameter type="const wxString&amp; " name="dir">the directory to create</parameter><parameter type="int " name="perm" value="0777"></parameter><parameter type="int " name="flags" value="0">if the flags contain <tt> wxPATH_MKDIR_FULL</tt> flag,
try to create each directory in the path and also don't return an error
if the target directory already exists.</parameter></parameters><returnvalue>

Returns <tt> true</tt> if the directory was successfully created, <tt> false</tt>
otherwise.

</returnvalue><description>







</description></function></member>
<member class="wxFileName" name="Normalize"><function type="bool" name="Normalize"><parameters><parameter type="int " name="flags" value="wxPATH_NORM_ALL"></parameter><parameter type="const wxString&amp; " name="cwd" value="wxEmptyString">If not empty, this directory will be used instead of current
working directory in normalization.</parameter><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE">The file name format, native by default.</parameter></parameters><description>

Normalize the path. With the default flags value, the path will be
made absolute, without any &quot;..&quot; and &quot;.&quot; and all environment
variables will be expanded in it.







</description></function></member>
<member class="wxFileName" name="PrependDir"><function type="void" name="PrependDir"><parameters><parameter type="const wxString&amp; " name="dir"></parameter></parameters><description>

Prepends a directory name.

</description></function></member>
<member class="wxFileName" name="RemoveDir"><function type="void" name="RemoveDir"><parameters><parameter type="int " name="pos"></parameter></parameters><description>

Removes a directory name.

</description></function></member>
<member class="wxFileName" name="Rmdir"><function type="bool" name="Rmdir"><description>

</description></function>
<function type="static bool" name="Rmdir"><parameters><parameter type="const wxString&amp; " name="dir"></parameter></parameters><description>

Deletes the specified directory from the file system.

</description></function></member>
<member class="wxFileName" name="SameAs"><function type="bool" name="SameAs" suffix="const"><parameters><parameter type="const wxFileName&amp; " name="filepath"></parameter><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

Compares the filename using the rules of this platform.

</description></function></member>
<member class="wxFileName" name="SetCwd"><function type="bool" name="SetCwd"><description>

</description></function>
<function type="static bool" name="SetCwd"><parameters><parameter type="const wxString&amp; " name="cwd"></parameter></parameters><description>

Changes the current working directory.

</description></function></member>
<member class="wxFileName" name="SetExt"><function type="void" name="SetExt"><parameters><parameter type="const wxString&amp; " name="ext"></parameter></parameters><description>

Sets the extension of this file name.

</description></function></member>
<member class="wxFileName" name="SetFullName"><function type="void" name="SetFullName"><parameters><parameter type="const wxString&amp; " name="fullname"></parameter></parameters><description>

The full name is the file name and extension (but without the path).

</description></function></member>
<member class="wxFileName" name="SetName"><function type="void" name="SetName"><parameters><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Sets the name.

</description></function></member>
<member class="wxFileName" name="SetTimes"><function type="bool" name="SetTimes"><parameters><parameter type="const wxDateTime&#42; " name="dtAccess"></parameter><parameter type="const wxDateTime&#42; " name="dtMod"></parameter><parameter type="const wxDateTime&#42; " name="dtCreate"></parameter></parameters><description>

Sets the file creation and last access/modification times (any of the pointers may be NULL).

</description></function></member>
<member class="wxFileName" name="SetVolume"><function type="void" name="SetVolume"><parameters><parameter type="const wxString&amp; " name="volume"></parameter></parameters><description>

Sets the volume specifier.

</description></function></member>
<member class="wxFileName" name="SplitPath"><function type="static void" name="SplitPath"><parameters><parameter type="const wxString&amp; " name="fullpath"></parameter><parameter type="wxString&#42; " name="volume"></parameter><parameter type="wxString&#42; " name="path"></parameter><parameter type="wxString&#42; " name="name"></parameter><parameter type="wxString&#42; " name="ext"></parameter><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

</description></function>
<function type="static void" name="SplitPath"><parameters><parameter type="const wxString&amp; " name="fullpath"></parameter><parameter type="wxString&#42; " name="path"></parameter><parameter type="wxString&#42; " name="name"></parameter><parameter type="wxString&#42; " name="ext"></parameter><parameter type="wxPathFormat " name="format" value="wxPATH_NATIVE"></parameter></parameters><description>

This function splits a full file name into components: the volume (with the
first version) path (including the volume in the second version), the base name
and the extension. Any of the output parameters (<i> volume</i>, <i> path</i>, 
<i> name</i> or <i> ext</i>) may be <tt> NULL</tt> if you are not interested in the
value of a particular component. Also, <i> fullpath</i> may be empty on entry.

On return, <i> path</i> contains the file path (without the trailing separator), 
<i> name</i> contains the file name and <i> ext</i> contains the file extension
without leading dot. All three of them may be empty if the corresponding
component is. The old contents of the strings pointed to by these parameters
will be overwritten in any case (if the pointers are not <tt> NULL</tt>).

</description></function></member>
<member class="wxFileName" name="Touch"><function type="bool" name="Touch"><description>

Sets the access and modification times to the current moment.

</description></function></member>
<member class="wxFileName" name="operator="><function type="wxFileName&amp; operator" name="operator="><parameters><parameter type="const wxFileName&amp; " name="filename"></parameter></parameters><description>

</description></function>
<function type="wxFileName&amp; operator" name="operator="><parameters><parameter type="const wxString&amp; " name="filename"></parameter></parameters><description>

Assigns the new value to this filename object.

</description></function></member>
<member class="wxFileName" name="operator=="><function type="bool operator" name="operator==" suffix="const"><parameters><parameter type="const wxFileName&amp; " name="filename"></parameter></parameters><description>

</description></function>
<function type="bool operator" name="operator==" suffix="const"><parameters><parameter type="const wxString&amp; " name="filename"></parameter></parameters><description>

Returns <tt> true</tt> if the filenames are equal. The string <i> filenames</i> is
interpreted as a path in the native filename format.

</description></function></member>
<member class="wxFileName" name="operator!="><function type="bool operator" name="operator!=" suffix="const"><parameters><parameter type="const wxFileName&amp; " name="filename"></parameter></parameters><description>

</description></function>
<function type="bool operator" name="operator!=" suffix="const"><parameters><parameter type="const wxString&amp; " name="filename"></parameter></parameters><description>

Returns <tt> true</tt> if the filenames are different. The string <i> filenames</i>
is interpreted as a path in the native filename format.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFileOutputStream">
<description>
<p class="classdesc">
This class represents data written to a file. There are actually
two such groups of classes: this one is based on <ref target="wxfile">wxFile</ref> 
whereas <ref target="wxffileinputstream">wxFFileInputStream</ref> is based in
the <ref target="wxffile">wxFFile</ref> class.</p><p class="classdesc">Note that <ref target="wxfile">wxFile</ref> and <ref target="wxffile">wxFFile</ref> differ
in one aspect, namely when to report that the end of the file has been
reached. This is documented in <ref target="wxfileeof">wxFile::Eof</ref> and 
<ref target="wxffileeof">wxFFile::Eof</ref> and the behaviour of the stream
classes reflects this difference, i.e. wxFileInputStream will report
wxSTREAM_EOF after having read the last byte whereas wxFFileInputStream
will report wxSTREAM_EOF after trying to read <i> past</i> the last byte.</p>
</description>
<parents>
<classref name="wxOutputStream"/>

</parents>
<includes>
<header name="wx/wfstream.h"/></includes>
<seealso>

<ref target="wxbufferedoutputstream">wxBufferedOutputStream</ref><ref target="wxfileinputstream">wxFileInputStream</ref><ref target="wxffileinputstream">wxFFileInputStream</ref>

</seealso>
<members>
<member class="wxFileOutputStream" name="wxFileOutputStream"><function type="" name="wxFileOutputStream"><parameters><parameter type="const wxString&amp;" name=" ofileName"></parameter></parameters><description>

Creates a new file with <i> ofilename</i> name and initializes the stream in
write-only mode. 

</description></function>
<function type="" name="wxFileOutputStream"><parameters><parameter type="wxFile&amp;" name=" file"></parameter></parameters><description>

Initializes a file stream in write-only mode using the file I/O object <i> file</i>.

</description></function>
<function type="" name="wxFileOutputStream"><parameters><parameter type="int" name=" fd"></parameter></parameters><description>

Initializes a file stream in write-only mode using the file descriptor <i> fd</i>.

</description></function></member>
<member class="wxFileOutputStream" name="~wxFileOutputStream"><function type="" name="~wxFileOutputStream"><description>

Destructor.

</description></function></member>
<member class="wxFileOutputStream" name="Ok"><function type="bool" name="Ok" suffix="const"><description>

Returns true if the stream is initialized and ready.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFileStream">
<description>

</description>
<parents>
<classref name="wxFileOutputStream"/><classref name="wxFileInputStream"/>

</parents>
<includes>
<header name="wx/wfstream.h"/></includes>
<seealso>

<ref target="wxstreambuffer">wxStreamBuffer</ref>

</seealso>
<members>
<member class="wxFileStream" name="wxFileStream"><function type="" name="wxFileStream"><parameters><parameter type="const wxString&amp;" name=" iofileName"></parameter></parameters><description>

Initializes a new file stream in read-write mode using the specified 
<i> iofilename</i> name.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFileSystem">
<description>
<p class="classdesc">
This class provides an interface for opening files on different
file systems. It can handle absolute and/or local filenames.
It uses a system of <ref target="wxfilesystemhandler">handlers</ref> to
provide access to user-defined virtual file systems.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/filesys.h"/></includes>
<seealso>

<ref target="wxfilesystemhandler">wxFileSystemHandler</ref>
<ref target="wxfsfile">wxFSFile</ref>
<ref target="fs">Overview</ref>

</seealso>
<members>
<member class="wxFileSystem" name="wxFileSystem"><function type="" name="wxFileSystem"><description>

Constructor. 

</description></function></member>
<member class="wxFileSystem" name="AddHandler"><function type="static void" name="AddHandler"><parameters><parameter type="wxFileSystemHandler " name="&#42;handler"></parameter></parameters><note>

You can call:

<pre>
wxFileSystem::AddHandler(new My_FS_Handler);
</pre>

This is because (a) AddHandler is a static method, and (b) the handlers
are deleted in wxFileSystem's destructor so that you don't have to
care about it.

</note><description>

This static function adds new handler into the list of handlers.
The <ref target="wxfilesystemhandler">handlers</ref> provide access to virtual FS.

</description></function></member>
<member class="wxFileSystem" name="ChangePathTo"><function type="void" name="ChangePathTo"><parameters><parameter type="const wxString&amp; " name="location">the new location. Its meaning depends on the value of <i> is_dir</i></parameter><parameter type="bool " name="is_dir" value="false">if true <i> location</i> is new directory. If false (default) 
<i> location</i> is <b> file in</b> the new directory.</parameter></parameters><example>

<pre>
  f = fs -&gt; OpenFile(&quot;hello.htm&quot;); // opens file 'hello.htm'
  fs -&gt; ChangePathTo(&quot;subdir/folder&quot;, true);
  f = fs -&gt; OpenFile(&quot;hello.htm&quot;); // opens file 'subdir/folder/hello.htm' !!
</pre>

</example><description>

Sets the current location. <i> location</i> parameter passed to 
<ref target="wxfilesystemopenfile">OpenFile</ref> is relative to this path.

<b> Caution! </b> Unless <i> is_dir</i> is true the <i> location</i> parameter
is not the directory name but the name of the file in this directory. All these
commands change the path to &quot;dir/subdir/&quot;:

<pre>
  ChangePathTo(&quot;dir/subdir/xh.htm&quot;);
  ChangePathTo(&quot;dir/subdir&quot;, true);
C  hangePathTo(&quot;dir/subdir/&quot;, true);
</pre>







</description></function></member>
<member class="wxFileSystem" name="GetPath"><function type="wxString" name="GetPath"><description>

Returns actual path (set by <ref target="wxfilesystemchangepathto">ChangePathTo</ref>).

</description></function></member>
<member class="wxFileSystem" name="FileNameToURL"><function type="static wxString" name="FileNameToURL"><parameters><parameter type="wxFileName " name="filename"></parameter></parameters><seealso>

<ref target="wxfilesystemurltofilename">wxFileSystem::URLToFileName</ref>,
<ref target="wxfilename">wxFileName</ref>

</seealso><description>

Converts filename into URL.

</description></function></member>
<member class="wxFileSystem" name="FindFirst"><function type="wxString" name="FindFirst"><parameters><parameter type="const wxString&amp; " name="wildcard"></parameter><parameter type="int " name="flags" value="0"></parameter></parameters><description>

Works like <ref target="wxfindfirstfile">wxFindFirstFile</ref>. Returns name of the first
filename (within filesystem's current path) that matches <i> wildcard</i>. <i> flags</i> may be one of
wxFILE (only files), wxDIR (only directories) or 0 (both).

</description></function></member>
<member class="wxFileSystem" name="FindNext"><function type="wxString" name="FindNext"><description>

Returns the next filename that matches parameters passed to <ref target="wxfilesystemfindfirst">FindFirst</ref>.

</description></function></member>
<member class="wxFileSystem" name="OpenFile"><function type="wxFSFile&#42;" name="OpenFile"><parameters><parameter type="const wxString&amp; " name="location"></parameter></parameters><description>

Opens the file and returns a pointer to a <ref target="wxfsfile">wxFSFile</ref> object
or NULL if failed. It first tries to open the file in relative scope
(based on value passed to ChangePathTo() method) and then as an
absolute path.

</description></function></member>
<member class="wxFileSystem" name="URLToFileName"><function type="static wxFileName" name="URLToFileName"><parameters><parameter type="const wxString&amp; " name="url"></parameter></parameters><seealso>

<ref target="wxfilesystemfilenametourl">wxFileSystem::FileNameToURL</ref>
<ref target="wxfilename">wxFileName</ref>

</seealso><description></description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFileSystemHandler">
<description>
<p class="classdesc">
Classes derived from wxFileSystemHandler are used
to access virtual file systems. Its public interface consists
of two methods: <ref target="wxfilesystemhandlercanopen">CanOpen</ref> 
and <ref target="wxfilesystemhandleropenfile">OpenFile</ref>. 
It provides additional protected methods to simplify the process
of opening the file: GetProtocol, GetLeftLocation, GetRightLocation,
GetAnchor, GetMimeTypeFromExt.</p><p class="classdesc">Please have a look at <ref target="fs">overview</ref> if you don't know how locations
are constructed.</p><p class="classdesc">Also consult <ref target="fs">list of available handlers</ref>.</p>
</description>
<note>

<ul><li> The handlers are shared by all instances of wxFileSystem.
</li>
<li> wxHTML library provides handlers for local files and HTTP or FTP protocol
</li>
<li> The <i> location</i> parameter passed to OpenFile or CanOpen methods
is always an <b> absolute</b> path. You don't need to check the FS's current path.
</li></ul>

</note>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/filesys.h"/></includes>
<seealso>

<ref target="wxfilesystem">wxFileSystem</ref>
<ref target="wxfsfile">wxFSFile</ref>
<ref target="fs">Overview</ref>

</seealso>
<members>
<member class="wxFileSystemHandler" name="wxFileSystemHandler"><function type="" name="wxFileSystemHandler"><description>

Constructor.

</description></function></member>
<member class="wxFileSystemHandler" name="CanOpen"><function type="virtual bool" name="CanOpen"><parameters><parameter type="const wxString&amp; " name="location"></parameter></parameters><description>

Returns true if the handler is able to open this file. This function doesn't
check whether the file exists or not, it only checks if it knows the protocol.
Example:

<pre>
bool MyHand::CanOpen(const wxString&amp; location) 
{
    return (GetProtocol(location) == &quot;http&quot;);
}
</pre>

Must be overridden in derived handlers.

</description></function></member>
<member class="wxFileSystemHandler" name="GetAnchor"><function type="wxString" name="GetAnchor" suffix="const"><parameters><parameter type="const wxString&amp; " name="location"></parameter></parameters><description>

Returns the anchor if present in the location.
See <ref target="wxfsfilegetanchor">wxFSFile</ref> for details.

Example: GetAnchor(&quot;index.htm\#chapter2&quot;) == &quot;chapter2&quot;

<b> Note:</b> the anchor is NOT part of the left location.

</description></function></member>
<member class="wxFileSystemHandler" name="GetLeftLocation"><function type="wxString" name="GetLeftLocation" suffix="const"><parameters><parameter type="const wxString&amp; " name="location"></parameter></parameters><description>

Returns the left location string extracted from <i> location</i>. 

Example: GetLeftLocation(&quot;file:myzipfile.zip\#zip:index.htm&quot;) == &quot;file:myzipfile.zip&quot;

</description></function></member>
<member class="wxFileSystemHandler" name="GetMimeTypeFromExt"><function type="wxString" name="GetMimeTypeFromExt"><parameters><parameter type="const wxString&amp; " name="location"></parameter></parameters><description>

Returns the MIME type based on <b> extension</b> of <i> location</i>. (While wxFSFile::GetMimeType
returns real MIME type - either extension-based or queried from HTTP.)

Example : GetMimeTypeFromExt(&quot;index.htm&quot;) == &quot;text/html&quot;

</description></function></member>
<member class="wxFileSystemHandler" name="GetProtocol"><function type="wxString" name="GetProtocol" suffix="const"><parameters><parameter type="const wxString&amp; " name="location"></parameter></parameters><description>

Returns the protocol string extracted from <i> location</i>. 

Example: GetProtocol(&quot;file:myzipfile.zip\#zip:index.htm&quot;) == &quot;zip&quot;

</description></function></member>
<member class="wxFileSystemHandler" name="GetRightLocation"><function type="wxString" name="GetRightLocation" suffix="const"><parameters><parameter type="const wxString&amp; " name="location"></parameter></parameters><description>

Returns the right location string extracted from <i> location</i>. 

Example : GetRightLocation(&quot;file:myzipfile.zip\#zip:index.htm&quot;) == &quot;index.htm&quot;

</description></function></member>
<member class="wxFileSystemHandler" name="FindFirst"><function type="virtual wxString" name="FindFirst"><parameters><parameter type="const wxString&amp; " name="wildcard"></parameter><parameter type="int " name="flags" value="0"></parameter></parameters><description>

Works like <ref target="wxfindfirstfile">wxFindFirstFile</ref>. Returns name of the first
filename (within filesystem's current path) that matches <i> wildcard</i>. <i> flags</i> may be one of
wxFILE (only files), wxDIR (only directories) or 0 (both).

This method is only called if <ref target="wxfilesystemhandlercanopen">CanOpen</ref> returns true.

</description></function></member>
<member class="wxFileSystemHandler" name="FindNext"><function type="virtual wxString" name="FindNext"><description>

Returns next filename that matches parameters passed to <ref target="wxfilesystemfindfirst">FindFirst</ref>.

This method is only called if <ref target="wxfilesystemhandlercanopen">CanOpen</ref> returns true and FindFirst
returned a non-empty string.

</description></function></member>
<member class="wxFileSystemHandler" name="OpenFile"><function type="virtual wxFSFile&#42;" name="OpenFile"><parameters><parameter type="wxFileSystem&amp; " name="fs">Parent FS (the FS from that OpenFile was called). See ZIP handler
for details of how to use it.</parameter><parameter type="const wxString&amp; " name="location">The <b> absolute</b> location of file.</parameter></parameters><description>

Opens the file and returns wxFSFile pointer or NULL if failed.

Must be overridden in derived handlers.







</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFileType">
<description>
<p class="classdesc">
This class holds information about a given <i> file type</i>. File type is the same as
MIME type under Unix, but under Windows it corresponds more to an extension than
to MIME type (in fact, several extensions may correspond to a file type). This
object may be created in several different ways: the program might know the file
extension and wish to find out the corresponding MIME type or, conversely, it
might want to find the right extension for the file to which it writes the
contents of given MIME type. Depending on how it was created some fields may be
unknown so the return value of all the accessors <b> must</b> be checked: <tt> false</tt>
will be returned if the corresponding information couldn't be found.</p><p class="classdesc">The objects of this class are never created by the application code but are
returned by <ref target="wxmimetypesmanagergetfiletypefrommimetype">wxMimeTypesManager::GetFileTypeFromMimeType</ref> and 
<ref target="wxmimetypesmanagergetfiletypefromextension">wxMimeTypesManager::GetFileTypeFromExtension</ref> methods.
But it is your responsibility to delete the returned pointer when you're done
with it!</p><p class="classdesc">A brief reminder about what the MIME types are (see the RFC 1341 for more
information): basically, it is just a pair category/type (for example,
&quot;text/plain&quot;) where the category is a basic indication of what a file is.
Examples of categories are &quot;application&quot;, &quot;image&quot;, &quot;text&quot;, &quot;binary&quot;, and
type is a precise definition of the document format: &quot;plain&quot; in the example
above means just ASCII text without any formatting, while &quot;text/html&quot; is the
HTML document source.</p><p class="classdesc">A MIME type may have one or more associated extensions: &quot;text/plain&quot; will
typically correspond to the extension &quot;.txt&quot;, but may as well be associated with
&quot;.ini&quot; or &quot;.conf&quot;.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/mimetype.h"/></includes>
<seealso>

<ref target="wxmimetypesmanager">wxMimeTypesManager</ref>

</seealso>
<members>
<member class="
   }

   virtual wxString GetParamValue(const wxString&amp; name) const
   {
       // parameter names are not case-sensitive
       if ( name.CmpNoCase(&quot;charset&quot;) == 0 )
           return &quot;US-ASCII&quot;;
       else
           return wxFileType" name="MessageParameters::GetParamValue(name);
   "></member>
<member class="wxFileType" name="wxFileType"><function type="" name="wxFileType"><description>

The default constructor is private because you should never create objects of
this type: they are only returned by <ref target="wxmimetypesmanager">wxMimeTypesManager</ref> methods.

</description></function></member>
<member class="wxFileType" name="~wxFileType"><function type="" name="~wxFileType"><description>

The destructor of this class is not virtual, so it should not be derived from.

</description></function></member>
<member class="wxFileType" name="GetMimeType"><function type="bool" name="GetMimeType"><parameters><parameter type="wxString&#42;" name=" mimeType"></parameter></parameters><description>

If the function returns <tt> true</tt>, the string pointed to by <i> mimeType</i> is filled
with full MIME type specification for this file type: for example, &quot;text/plain&quot;.

</description></function></member>
<member class="wxFileType" name="GetMimeTypes"><function type="bool" name="GetMimeType"><parameters><parameter type="wxArrayString&amp;" name=" mimeTypes"></parameter></parameters><description>

Same as <ref target="wxfiletypegetmimetype">GetMimeType</ref> but returns array of MIME
types. This array will contain only one item in most cases but sometimes,
notably under Unix with KDE, may contain more MIME types. This happens when
one file extension is mapped to different MIME types by KDE, mailcap and
mime.types.

</description></function></member>
<member class="wxFileType" name="GetExtensions"><function type="bool" name="GetExtensions"><parameters><parameter type="wxArrayString&amp;" name=" extensions"></parameter></parameters><description>

If the function returns <tt> true</tt>, the array <i> extensions</i> is filled
with all extensions associated with this file type: for example, it may
contain the following two elements for the MIME type &quot;text/html&quot; (notice the
absence of the leading dot): &quot;html&quot; and &quot;htm&quot;.

<b> Windows:</b> This function is currently not implemented: there is no
(efficient) way to retrieve associated extensions from the given MIME type on
this platform, so it will only return <tt> true</tt> if the wxFileType object was created
by <ref target="wxmimetypesmanagergetfiletypefromextension">GetFileTypeFromExtension</ref> 
function in the first place.

</description></function></member>
<member class="wxFileType" name="GetIcon"><function type="bool" name="GetIcon"><parameters><parameter type="wxIconLocation &#42;" name=" iconLoc"></parameter></parameters><description>

If the function returns <tt> true</tt>, the <tt> iconLoc</tt> is filled with the
location of the icon for this MIME type. A <ref target="wxicon">wxIcon</ref> may be
created from <i> iconLoc</i> later.

<b> Windows:</b> The function returns the icon shown by Explorer for the files of
the specified type.

<b> Mac:</b> This function is not implemented and always returns <tt> false</tt>.

<b> Unix:</b> MIME manager gathers information about icons from GNOME
and KDE settings and thus GetIcon's success depends on availability
of these desktop environments.

</description></function></member>
<member class="wxFileType" name="GetDescription"><function type="bool" name="GetDescription"><parameters><parameter type="wxString&#42;" name=" desc"></parameter></parameters><description>

If the function returns <tt> true</tt>, the string pointed to by <i> desc</i> is filled
with a brief description for this file type: for example, &quot;text document&quot; for
the &quot;text/plain&quot; MIME type.

</description></function></member>
<member class="wxFileType" name="GetOpenCommand"><function type="bool" name="GetOpenCommand"><parameters><parameter type="wxString&#42;" name=" command"></parameter><parameter type="MessageParameters&amp;" name=" params"></parameter></parameters><description>

</description></function>
<function type="wxString" name="GetOpenCommand"><parameters><parameter type="const wxString&amp;" name=" filename"></parameter></parameters><description>

With the first version of this method, if the <tt> true</tt> is returned, the
string pointed to by <i> command</i> is filled with the command which must be
executed (see <ref target="wxexecute">wxExecute</ref>) in order to open the file of the
given type. In this case, the name of the file as well as any other parameters
is retrieved from <ref target="wxfiletypemessageparameters">MessageParameters</ref> 
class.

In the second case, only the filename is specified and the command to be used
to open this kind of file is returned directly. An empty string is returned to
indicate that an error occured (typically meaning that there is no standard way
to open this kind of files).

</description></function></member>
<member class="wxFileType" name="GetPrintCommand"><function type="bool" name="GetPrintCommand"><parameters><parameter type="wxString&#42;" name=" command"></parameter><parameter type="MessageParameters&amp;" name=" params"></parameter></parameters><description>

If the function returns <tt> true</tt>, the string pointed to by <i> command</i> is filled
with the command which must be executed (see <ref target="wxexecute">wxExecute</ref>) in
order to print the file of the given type. The name of the file is
retrieved from <ref target="wxfiletypemessageparameters">MessageParameters</ref> class.

</description></function></member>
<member class="wxFileType" name="ExpandCommand"><function type="static wxString" name="ExpandCommand"><parameters><parameter type="const wxString&amp;" name=" command"></parameter><parameter type="MessageParameters&amp;" name=" params"></parameter></parameters><description>

This function is primarily intended for GetOpenCommand and GetPrintCommand
usage but may be also used by the application directly if, for example, you want
to use some non default command to open the file.

The function replaces all occurrences of

\twocolwidtha{7cm}
<table>
<tr><td>format specification</td><td>with</td></tr>
<tr><td>%s</td><td>the full file name</td></tr>
<tr><td>%t</td><td>the MIME type</td></tr>
<tr><td>%{param}</td><td>the value of the parameter <i>param</i></td></tr>
</table>

using the MessageParameters object you pass to it.

If there is no '\assumed that the command reads the data on stdin and so the effect is the same
as &quot;&lt; \
Unlike all other functions of this class, there is no error return for this
function.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class>
<class name="wxFilterInputStream">
<description>
<p class="classdesc">
A filter stream has the capability of a normal stream but it can be placed on top
of another stream. So, for example, it can uncompress or decrypt the data which are read
from another stream and pass it to the requester.</p>
</description>
<note>

The interface of this class is the same as that of wxInputStream. Only a constructor
differs and it is documented below.

</note>
<parents>
<classref name="wxInputStream"/>
<classref name="wxStreamBase"/>

</parents>
<includes>
<header name="wx/stream.h"/></includes>
<members>
<member class="wxFilterInputStream" name="wxFilterInputStream"><function type="" name="wxFilterInputStream"><parameters><parameter type="wxInputStream&amp;" name=" stream"></parameter></parameters><description>

Initializes a &quot;filter&quot; stream.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFilterOutputStream">
<description>
<p class="classdesc">
A filter stream has the capability of a normal
stream but it can be placed on top of another stream. So, for example, it
can compress, encrypt the data which are passed to it and write them to another
stream.</p>
</description>
<note>

The use of this class is exactly the same as of wxOutputStream. Only a constructor
differs and it is documented below.

</note>
<parents>
<classref name="wxOutputStream"/>
<classref name="wxStreamBase"/>

</parents>
<includes>
<header name="wx/stream.h"/></includes>
<members>
<member class="wxFilterOutputStream" name="wxFilterOutputStream"><function type="" name="wxFilterOutputStream"><parameters><parameter type="wxOutputStream&amp;" name=" stream"></parameter></parameters><description>

Initializes a &quot;filter&quot; stream.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFindDialogEvent">
<description>
<p class="classdesc">
wxFindReplaceDialog events</p>
</description>
<parents>
<classref name="wxCommandEvent"/>

</parents>
<includes>
<header name="wx/fdrepdlg.h"/></includes>
<events>
<event name="EVT_FIND(id, func)">Find button was pressed in the dialog.</event><event name="EVT_FIND_NEXT(id, func)">Find next button was pressed in the dialog.</event><event name="EVT_FIND_REPLACE(id, func)">Replace button was pressed in the dialog.</event><event name="EVT_FIND_REPLACE_ALL(id, func)">Replace all button was pressed in the dialog.</event><event name="EVT_FIND_CLOSE(id, func)">The dialog is being destroyed,
any pointers to it cannot be used any longer.</event></events>
<members>
<member class="wxFindDialogEvent" name="wxFindDialogEvent"><function type="" name="wxFindDialogEvent"><parameters><parameter type="wxEventType " name="commandType" value="wxEVT_NULL"></parameter><parameter type="int " name="id" value="0"></parameter></parameters><description>

Constuctor used by wxWindows only.

</description></function></member>
<member class="wxFindDialogEvent" name="GetFlags"><function type="int" name="GetFlags" suffix="const"><description>

Get the currently selected flags: this is the combination of <tt> wxFR_DOWN</tt>,
<tt> wxFR_WHOLEWORD</tt> and <tt> wxFR_MATCHCASE</tt> flags.

</description></function></member>
<member class="wxFindDialogEvent" name="GetFindString"><function type="wxString" name="GetFindString" suffix="const"><description>

Return the string to find (never empty).

</description></function></member>
<member class="wxFindDialogEvent" name="GetReplaceString"><function type="const wxString&amp;" name="GetReplaceString" suffix="const"><description>

Return the string to replace the search string with (only for replace and
replace all events).

</description></function></member>
<member class="wxFindDialogEvent" name="GetDialog"><function type="wxFindReplaceDialog&#42;" name="GetDialog" suffix="const"><description>

Return the pointer to the dialog which generated this event.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFindReplaceData">
<description>
<p class="classdesc">
wxFindReplaceData holds the data for 
<ref target="wxfindreplacedialog">wxFindReplaceDialog</ref>. It is used to initialize
the dialog with the default values and will keep the last values from the
dialog when it is closed. It is also updated each time a 
<ref target="wxfinddialogevent">wxFindDialogEvent</ref> is generated so instead of
using the wxFindDialogEvent methods you can also directly query this object.</p><p class="classdesc">Note that all <tt> SetXXX()</tt> methods may only be called before showing the
dialog and calling them has no effect later.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/fdrepdlg.h" comment="\end{verbatim}"/></includes>
<structs>

Flags used by 
<ref target="wxfindreplacedatagetflags">wxFindReplaceData::GetFlags()</ref> and
<ref target="wxfinddialogeventgetflags">wxFindDialogEvent::GetFlags()</ref>:

<pre>
enum wxFindReplaceFlags
{
    // downward search/replace selected (otherwise - upwards)
    wxFR_DOWN       = 1,

    // whole word search/replace selected
    wxFR_WHOLEWORD  = 2,

    // case sensitive search/replace selected (otherwise - case insensitive)
    wxFR_MATCHCASE  = 4
}
</pre>

These flags can be specified in 
<ref target="wxfindreplacedialogctor">wxFindReplaceDialog ctor</ref> or 
<ref target="wxfindreplacedialogcreate">Create()</ref>:

<pre>
enum wxFindReplaceDialogStyles
{
    // replace dialog (otherwise find dialog)
    wxFR_REPLACEDIALOG = 1,

    // don't allow changing the search direction
    wxFR_NOUPDOWN      = 2,

    // don't allow case sensitive searching
    wxFR_NOMATCHCASE   = 4,

    // don't allow whole word searching
    wxFR_NOWHOLEWORD   = 8
}
</pre>

</structs>
<members>
<member class="wxFindReplaceData" name="wxFindReplaceData"><function type="" name="wxFindReplaceData"><parameters><parameter type="wxUint32 " name="flags" value="0"></parameter></parameters><description>

Constuctor initializes the flags to default value (0).

</description></function></member>
<member class="wxFindReplaceData" name="GetFindString"><function type="const wxString&amp;" name="GetFindString"><description>

Get the string to find.

</description></function></member>
<member class="wxFindReplaceData" name="GetReplaceString"><function type="const wxString&amp;" name="GetReplaceString"><description>

Get the replacement string.

</description></function></member>
<member class="wxFindReplaceData" name="GetFlags"><function type="int" name="GetFlags" suffix="const"><description>

Get the combination of <tt> wxFindReplaceFlags</tt> values.

</description></function></member>
<member class="wxFindReplaceData" name="SetFlags"><function type="void" name="SetFlags"><parameters><parameter type="wxUint32 " name="flags"></parameter></parameters><description>

Set the flags to use to initialize the controls of the dialog.

</description></function></member>
<member class="wxFindReplaceData" name="SetFindString"><function type="void" name="SetFindString"><parameters><parameter type="const wxString&amp; " name="str"></parameter></parameters><description>

Set the string to find (used as initial value by the dialog).

</description></function></member>
<member class="wxFindReplaceData" name="SetReplaceString"><function type="void" name="SetReplaceString"><parameters><parameter type="const wxString&amp; " name="str"></parameter></parameters><description>

Set the replacement string (used as initial value by the dialog).
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFindReplaceDialog">
<description>
<p class="classdesc">
wxFindReplaceDialog is a standard modeless dialog which is used to allow the
user to search for some text (and possibly replace it with something else).
The actual searching is supposed to be done in the owner window which is the
parent of this dialog. Note that it means that unlike for the other standard
dialogs this one <b> must</b> have a parent window. Also note that there is no
way to use this dialog in a modal way; it is always, by design and
implementation, modeless.</p><p class="classdesc">Please see the dialogs sample for an example of using it.</p>
</description>
<parents>
<classref name="wxDialog"/>

</parents>
<includes>
<header name="wx/fdrepdlg.h" comment="\end{verbatim}"/></includes>
<members>
<member class="wxFindReplaceDialog" name="wxFindReplaceDialog"><function type="" name="wxFindReplaceDialog"><description>

</description></function>
<function type="" name="wxFindReplaceDialog"><parameters><parameter type="wxWindow &#42; " name="parent"></parameter><parameter type="wxFindReplaceData&#42; " name="data"></parameter><parameter type="const wxString&amp; " name="title"></parameter><parameter type="int " name="style" value="0"></parameter></parameters><description>

After using default constructor <ref target="wxfindreplacedialogcreate">Create()</ref> 
must be called.

The <i> parent</i> and <i> data</i> parameters must be non-<tt> NULL</tt>.

</description></function></member>
<member class="wxFindReplaceDialog" name="~wxFindReplaceDialog"><function type="" name="~wxFindReplaceDialog"><description>

Destructor.

</description></function></member>
<member class="wxFindReplaceDialog" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow &#42; " name="parent"></parameter><parameter type="wxFindReplaceData&#42; " name="data"></parameter><parameter type="const wxString&amp; " name="title"></parameter><parameter type="int " name="style" value="0"></parameter></parameters><description>

Creates the dialog; use <ref target="wxwindowshow">Show</ref> to show it on screen.

The <i> parent</i> and <i> data</i> parameters must be non-<tt> NULL</tt>.
</description></function></member>
<member class="wxFindReplaceDialog" name="GetData"><function type="const wxFindReplaceData&#42;" name="GetData" suffix="const"><description>

Get the <ref target="wxfindreplacedata">wxFindReplaceData</ref> object used by this
dialog.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFlexGridSizer">
<description>
<p class="classdesc">
A flex grid sizer is a sizer which lays out its children in a two-dimensional
table with all table fields in one row having the same
height and all fields in one column having the same width, but all
rows or all columns are not necessarily the same height or width as in
the <ref target="wxgridsizer">wxGridSizer</ref>.</p><p class="classdesc">Since wxWindows 2.5.0, wxFlexGridSizer can also size items equally in one
direction but unequally (&quot;flexibly&quot;) in the other. If the sizer is only
flexible in one direction (this can be changed using 
<ref target="wxflexgridsizersetflexibledirection">SetFlexibleDrection</ref>),
it needs to be decided how the sizer should grow in the other (&quot;non flexible&quot;)
direction in order to fill the available space. The 
<ref target="wxflexgridsizersetnonflexiblegrowmode">SetNonFlexibleGrowMode</ref> method
serves this purpose.</p>
</description>
<parents>
<classref name="wxGridSizer"/>
<classref name="wxSizer"/>
<classref name="wxObject"/>

</parents>
<seealso>

<ref target="wxsizer">wxSizer</ref><ref target="sizeroverview">Sizer overview</ref>

</seealso>
<members>
<member class="wxFlexGridSizer" name="wxFlexGridSizer"><function type="" name="wxFlexGridSizer"><parameters><parameter type="int " name="rows"></parameter><parameter type="int " name="cols"></parameter><parameter type="int " name="vgap"></parameter><parameter type="int " name="hgap"></parameter></parameters><description>

</description></function>
<function type="" name="wxFlexGridSizer"><parameters><parameter type="int " name="cols"></parameter><parameter type="int " name="vgap" value="0"></parameter><parameter type="int " name="hgap" value="0"></parameter></parameters><description>

Constructor for a wxGridSizer. <i> rows</i> and <i> cols</i> determine the number of
columns and rows in the sizer - if either of the parameters is zero, it will be
calculated to form the total number of children in the sizer, thus making the
sizer grow dynamically. <i> vgap</i> and <i> hgap</i> define extra space between
all children.


</description></function></member>
<member class="wxFlexGridSizer" name="AddGrowableCol"><function type="void" name="AddGrowableCol"><parameters><parameter type="size_t " name="idx"></parameter><parameter type="int " name="proportion" value="0"></parameter></parameters><description>

Specifies that column <i> idx</i> (starting from zero) should be grown if
there is extra space available to the sizer.

The <i> proportion</i> parameter has the same meaning as the stretch factor for
the <ref target="sizeroverview">sizers</ref> except that if all proportions are 0,
then all columns are resized equally (instead of not being resized at all).

</description></function></member>
<member class="wxFlexGridSizer" name="AddGrowableRow"><function type="void" name="AddGrowableRow"><parameters><parameter type="size_t " name="idx"></parameter><parameter type="int " name="proportion" value="0"></parameter></parameters><description>

Specifies that row idx (starting from zero) should be grown if there
is extra space available to the sizer.

See <ref target="wxflexgridsizeraddgrowablecol">AddGrowableCol</ref> for the description
of <i> proportion</i> parameter.

</description></function></member>
<member class="wxFlexGridSizer" name="GetFlexibleDirection"><function type="int" name="GetFlexibleDirections" suffix="const"><seealso>

<ref target="wxflexgridsizersetflexibledirection">SetFlexibleDrection</ref>


</seealso><returnvalue>

One of the following values:

<table>
<tr><td>wxVERTICAL</td><td>Rows are flexibly sized.</td></tr>
<tr><td>wxHORIZONTAL</td><td>Columns are flexibly sized.</td></tr>
<tr><td>wxBOTH</td><td>Both rows and columns are flexibly sized (this is the default value).</td></tr>
</table>

</returnvalue><description>

Returns a wxOrientation value that specifies whether the sizer flexibly
resizes its columns, rows, or both (default).

</description></function></member>
<member class="wxFlexGridSizer" name="GetNonFlexibleGrowMode"><function type="int" name="GetNonFlexibleGrowMode" suffix="const"><seealso>

<ref target="wxflexgridsizersetflexibledirection">SetFlexibleDrection</ref>
<ref target="wxflexgridsizersetnonflexiblegrowmode">SetNonFlexibleGrowMode</ref>


</seealso><description></description></function></member>
<member class="wxFlexGridSizer" name="RemoveGrowableCol"><function type="void" name="RemoveGrowableCol"><parameters><parameter type="size_t " name="idx"></parameter></parameters><description>

Specifies that column idx is no longer growable.


</description></function></member>
<member class="wxFlexGridSizer" name="RemoveGrowableRow"><function type="void" name="RemoveGrowableRow"><parameters><parameter type="size_t " name="idx"></parameter></parameters><description>

Specifies that row idx is no longer growable.


</description></function></member>
<member class="wxFlexGridSizer" name="SetFlexibleDirection"><function type="void" name="SetFlexibleDirections"><parameters><parameter type="int " name="direction"></parameter></parameters><description>

Specifies whether the sizer should flexibly resize its columns, rows, or
both. Argument <tt> direction</tt> can be <tt> wxVERTICAL</tt>, <tt> wxHORIZONTAL</tt> 
or <tt> wxBOTH</tt> (which is the default value). Any other value is ignored. See
<ref target="wxflexgridsizergetflexibledrection">GetFlexibleDirection()</ref> for the
explanation of these values.

Note that this method does not trigger relayout.


</description></function></member>
<member class="wxFlexGridSizer" name="SetNonFlexibleGrowMode"><function type="void" name="SetNonFlexibleGrowMode"><parameters><parameter type="int " name="mode"></parameter></parameters><description>

Specifies how the sizer should grow in the non flexible direction if
there is one (so
<ref target="wxflexgridsizersetflexibledirection">SetFlexibleDirections()</ref> must have
been called previously). Argument <i> mode</i> can be one of those documented in
<ref target="wxflexgridsizergetnonflexiblegrowmode">GetNonFlexibleGrowMode</ref>, please
see there for their explanation.

Note that this method does not trigger relayout.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFocusEvent">
<description>
<p class="classdesc">
A focus event is sent when a window's focus changes. The window losing focus
receives a ``kill focus'' event while the window gaining it gets a ``set
focus'' one.</p><p class="classdesc">Notice that the set focus event happens both when the user gives focus to the
window (whether using the mouse or keyboard) and when it is done from the
program itself using <ref target="wxwindowsetfocus">SetFocus</ref>.</p>
</description>
<parents>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_SET_FOCUS(func)">Process a wxEVT_SET_FOCUS event.</event><event name="EVT_KILL_FOCUS(func)">Process a wxEVT_KILL_FOCUS event.</event></events>
<seealso>

<ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxFocusEvent" name="wxFocusEvent"><function type="" name="wxFocusEvent"><parameters><parameter type="WXTYPE " name="eventType" value="0"></parameter><parameter type="int " name="id" value="0"></parameter></parameters><description>

Constructor.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFont">
<description>
<p class="classdesc">
A font is an object which determines the appearance of text. Fonts are
used for drawing text to a device context, and setting the appearance of
a window's text.</p><p class="classdesc">You can retrieve the current system font settings with <ref target="wxsystemsettings">wxSystemSettings</ref>.</p>
</description>
<parents>
<classref name="wxGDIObject"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/font.h"/></includes>
<constants>

The font flags which can be used during the font creation are:
<pre>
enum
{
    // no special flags: font with default weight/slant/anti-aliasing
    wxFONTFLAG_DEFAULT          = 0,

    // slant flags (default: no slant)
    wxFONTFLAG_ITALIC           = 1 &lt;&lt; 0,
    wxFONTFLAG_SLANT            = 1 &lt;&lt; 1,

    // weight flags (default: medium)
    wxFONTFLAG_LIGHT            = 1 &lt;&lt; 2,
    wxFONTFLAG_BOLD             = 1 &lt;&lt; 3,

    // anti-aliasing flag: force on or off (default: the current system default)
    wxFONTFLAG_ANTIALIASED      = 1 &lt;&lt; 4,
    wxFONTFLAG_NOT_ANTIALIASED  = 1 &lt;&lt; 5,

    // underlined/strikethrough flags (default: no lines)
    wxFONTFLAG_UNDERLINED       = 1 &lt;&lt; 6,
    wxFONTFLAG_STRIKETHROUGH    = 1 &lt;&lt; 7,
};
</pre>

The known font encodings are:
<pre>
enum wxFontEncoding
{
    wxFONTENCODING_SYSTEM = -1,     // system default
    wxFONTENCODING_DEFAULT,         // current default encoding

    // ISO8859 standard defines a number of single-byte charsets
    wxFONTENCODING_ISO8859_1,       // West European (Latin1)
    wxFONTENCODING_ISO8859_2,       // Central and East European (Latin2)
    wxFONTENCODING_ISO8859_3,       // Esperanto (Latin3)
    wxFONTENCODING_ISO8859_4,       // Baltic (old) (Latin4)
    wxFONTENCODING_ISO8859_5,       // Cyrillic
    wxFONTENCODING_ISO8859_6,       // Arabic
    wxFONTENCODING_ISO8859_7,       // Greek
    wxFONTENCODING_ISO8859_8,       // Hebrew
    wxFONTENCODING_ISO8859_9,       // Turkish (Latin5)
    wxFONTENCODING_ISO8859_10,      // Variation of Latin4 (Latin6)
    wxFONTENCODING_ISO8859_11,      // Thai
    wxFONTENCODING_ISO8859_12,      // doesn't exist currently, but put it
                                    // here anyhow to make all ISO8859
                                    // consecutive numbers
    wxFONTENCODING_ISO8859_13,      // Baltic (Latin7)
    wxFONTENCODING_ISO8859_14,      // Latin8
    wxFONTENCODING_ISO8859_15,      // Latin9 (a.k.a. Latin0, includes euro)
    wxFONTENCODING_ISO8859_MAX,

    // Cyrillic charset soup (see http://czyborra.com/charsets/cyrillic.html)
    wxFONTENCODING_KOI8,            // we don't support any of KOI8 variants
    wxFONTENCODING_ALTERNATIVE,     // same as MS-DOS CP866
    wxFONTENCODING_BULGARIAN,       // used under Linux in Bulgaria

    // what would we do without Microsoft? They have their own encodings
        // for DOS
    wxFONTENCODING_CP437,           // original MS-DOS codepage
    wxFONTENCODING_CP850,           // CP437 merged with Latin1
    wxFONTENCODING_CP852,           // CP437 merged with Latin2
    wxFONTENCODING_CP855,           // another cyrillic encoding
    wxFONTENCODING_CP866,           // and another one
        // and for Windows
    wxFONTENCODING_CP874,           // WinThai
    wxFONTENCODING_CP1250,          // WinLatin2
    wxFONTENCODING_CP1251,          // WinCyrillic
    wxFONTENCODING_CP1252,          // WinLatin1
    wxFONTENCODING_CP1253,          // WinGreek (8859-7)
    wxFONTENCODING_CP1254,          // WinTurkish
    wxFONTENCODING_CP1255,          // WinHebrew
    wxFONTENCODING_CP1256,          // WinArabic
    wxFONTENCODING_CP1257,          // WinBaltic (same as Latin 7)
    wxFONTENCODING_CP12_MAX,

    wxFONTENCODING_UTF7,            // UTF-7 Unicode encoding
    wxFONTENCODING_UTF8,            // UTF-8 Unicode encoding

    wxFONTENCODING_UNICODE,         // Unicode - currently used only by
                                    // wxEncodingConverter class

    wxFONTENCODING_MAX
};
</pre>

</constants>
<predefs>

Objects:

<b> wxNullFont</b>

Pointers:

<b> wxNORMAL_FONT<br/>
wxSMALL_FONT<br/>
wxITALIC_FONT<br/>
wxSWISS_FONT</b>

</predefs>
<seealso>

<ref target="wxfontoverview">wxFont overview</ref><ref target="wxdcsetfont">wxDC::SetFont</ref>,
<ref target="wxdcdrawtext">wxDC::DrawText</ref><ref target="wxdcgettextextent">wxDC::GetTextExtent</ref>,
<ref target="wxfontdialog">wxFontDialog</ref><ref target="wxsystemsettings">wxSystemSettings</ref>

</seealso>
<members>
<member class="wxFont" name="wxFont"><function type="" name="wxFont"><description>

Default constructor.

</description></function>
<function type="" name="wxFont"><parameters><parameter type="int" name=" pointSize"></parameter><parameter type="int" name=" family"></parameter><parameter type="int" name=" style"></parameter><parameter type="int" name=" weight"></parameter><parameter type="const bool" name="underline" value="false">The value can be true or false. At present this has an effect on Windows and Motif 2.x only.</parameter><parameter type="const wxString&amp; " name="faceName" value="&quot;&quot;">An optional string specifying the actual typeface to be used. If the empty string,
a default typeface will chosen based on the family.</parameter><parameter type="wxFontEncoding " name="encoding" value="wxFONTENCODING_DEFAULT"></parameter></parameters><remarks>

If the desired font does not exist, the closest match will be chosen.
Under Windows, only scalable TrueType fonts are used.

See also <ref target="wxdcsetfont">wxDC::SetFont</ref>, <ref target="wxdcdrawtext">wxDC::DrawText</ref>
and <ref target="wxdcgettextextent">wxDC::GetTextExtent</ref>.

</remarks><description>

Creates a font object (see <ref target="wxfontencodingoverview">font encoding
overview</ref> for the meaning of the last parameter).

















</description></function></member>
<member class="wxFont" name="~wxFont"><function type="" name="~wxFont"><remarks>

The destructor may not delete the underlying font object of the native windowing
system, since wxFont uses a reference counting system for efficiency.

Although all remaining fonts are deleted when the application exits,
the application should try to clean up all fonts itself. This is because
wxWindows cannot know if a pointer to the font object is stored in an
application data structure, and there is a risk of double deletion.

</remarks><description>

Destructor.

</description></function></member>
<member class="wxFont" name="IsFixedWidth"><function type="bool" name="IsFixedWidth" suffix="const"><description>

Returns <tt> true</tt> if the font is a fixed width (or monospaced) font, 
<tt> false</tt> if it is a proportional one or font is invalid.

</description></function></member>
<member class="wxFont" name="GetDefaultEncoding"><function type="static wxFontEncoding" name="GetDefaultEncoding"><seealso>

<ref target="wxfontencodingoverview">Font encoding overview</ref>
<ref target="wxfontsetdefaultencoding">SetDefaultEncoding</ref>

</seealso><description></description></function></member>
<member class="wxFont" name="GetFaceName"><function type="wxString" name="GetFaceName" suffix="const"><seealso>

<ref target="wxfontsetfacename">wxFont::SetFaceName</ref>

</seealso><description>

Returns the typeface name associated with the font, or the empty string if there is no
typeface information.

</description></function></member>
<member class="wxFont" name="GetFamily"><function type="int" name="GetFamily" suffix="const"><seealso>

<ref target="wxfontsetfamily">wxFont::SetFamily</ref>

</seealso><description>

Gets the font family. See <ref target="wxfontconstr">wxFont::wxFont</ref> for a list of valid
family identifiers.

</description></function></member>
<member class="wxFont" name="GetNativeFontInfoDesc"><function type="wxString" name="GetNativeFontInfoDesc" suffix="const"><seealso>

<ref target="wxfontsetnativefontinfo">wxFont::SetNativeFontInfo</ref>

</seealso><description>

Returns the platform-dependent string completely describing this font or an
empty string if the font wasn't constructed using the native font description.

</description></function></member>
<member class="wxFont" name="GetPointSize"><function type="int" name="GetPointSize" suffix="const"><seealso>

<ref target="wxfontsetpointsize">wxFont::SetPointSize</ref>

</seealso><description>

Gets the point size.

</description></function></member>
<member class="wxFont" name="GetStyle"><function type="int" name="GetStyle" suffix="const"><seealso>

<ref target="wxfontsetstyle">wxFont::SetStyle</ref>

</seealso><description>

Gets the font style. See <ref target="wxfontconstr">wxFont::wxFont</ref> for a list of valid
styles.

</description></function></member>
<member class="wxFont" name="GetUnderlined"><function type="bool" name="GetUnderlined" suffix="const"><seealso>

<ref target="wxfontsetunderlined">wxFont::SetUnderlined</ref>

</seealso><description>

Returns true if the font is underlined, false otherwise.

</description></function></member>
<member class="wxFont" name="GetWeight"><function type="int" name="GetWeight" suffix="const"><seealso>

<ref target="wxfontsetweight">wxFont::SetWeight</ref>

</seealso><description>

Gets the font weight. See <ref target="wxfontconstr">wxFont::wxFont</ref> for a list of valid
weight identifiers.

</description></function></member>
<member class="wxFont" name="Ok"><function type="bool" name="Ok" suffix="const"><description>

Returns <tt> true</tt> if this object is a valid font, <tt> false</tt> otherwise.

</description></function></member>
<member class="wxFont" name="SetDefaultEncoding"><function type="static void" name="SetDefaultEncoding"><parameters><parameter type="wxFontEncoding " name="encoding"></parameter></parameters><seealso>

<ref target="wxfontencodingoverview">Font encoding overview</ref>
<ref target="wxfontgetdefaultencoding">GetDefaultEncoding</ref>

</seealso><description></description></function></member>
<member class="wxFont" name="SetFaceName"><function type="void" name="SetFaceName"><parameters><parameter type="const wxString&amp; " name="faceName">A valid facename, which should be on the end-user's system.</parameter></parameters><seealso>

<ref target="wxfontgetfacename">wxFont::GetFaceName</ref><ref target="wxfontsetfamily">wxFont::SetFamily</ref>

</seealso><description></description></function></member>
<member class="wxFont" name="SetFamily"><function type="void" name="SetFamily"><parameters><parameter type="int" name=" family"></parameter></parameters><seealso>

<ref target="wxfontgetfamily">wxFont::GetFamily</ref><ref target="wxfontsetfacename">wxFont::SetFaceName</ref>

</seealso><description></description></function></member>
<member class="wxFont" name="SetNativeFontInfo"><function type="void" name="SetNativeFontInfo"><parameters><parameter type="const wxString&amp; " name="info"></parameter></parameters><description>

Creates the font corresponding to the given native font description string
which must have been previously returned by 
<ref target="wxfontgetnativefontinfodesc">GetNativeFontInfoDesc</ref>. If the string is
invalid, font is unchanged.

</description></function></member>
<member class="wxFont" name="SetPointSize"><function type="void" name="SetPointSize"><parameters><parameter type="int" name=" pointSize"></parameter></parameters><seealso>

<ref target="wxfontgetpointsize">wxFont::GetPointSize</ref>

</seealso><description>

Sets the point size.





</description></function></member>
<member class="wxFont" name="SetStyle"><function type="void" name="SetStyle"><parameters><parameter type="int" name=" style"></parameter></parameters><seealso>

<ref target="wxfontgetstyle">wxFont::GetStyle</ref>

</seealso><description>

Sets the font style.





</description></function></member>
<member class="wxFont" name="SetUnderlined"><function type="void" name="SetUnderlined"><parameters><parameter type="const bool" name=" underlined"></parameter></parameters><seealso>

<ref target="wxfontgetunderlined">wxFont::GetUnderlined</ref>

</seealso><description>

Sets underlining.





</description></function></member>
<member class="wxFont" name="SetWeight"><function type="void" name="SetWeight"><parameters><parameter type="int" name=" weight"></parameter></parameters><seealso>

<ref target="wxfontgetweight">wxFont::GetWeight</ref>

</seealso><description>

Sets the font weight.





</description></function></member>
<member class="wxFont" name="operator $=$"><function type="wxFont&amp;" name="operator $=$"><parameters><parameter type="const wxFont&amp; " name="font"></parameter></parameters><description>

Assignment operator, using reference counting. Returns a reference
to `this'.

</description></function></member>
<member class="wxFont" name="operator $==$"><function type="bool" name="operator $==$"><parameters><parameter type="const wxFont&amp; " name="font"></parameter></parameters><description>

Equality operator. Two fonts are equal if they contain pointers
to the same underlying font data. It does not compare each attribute,
so two indefontdently-created fonts using the same parameters will
fail the test.

</description></function></member>
<member class="wxFont" name="operator $!=$"><function type="bool" name="operator $!=$"><parameters><parameter type="const wxFont&amp; " name="font"></parameter></parameters><description>

Inequality operator. Two fonts are not equal if they contain pointers
to different underlying font data. It does not compare each attribute.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFontData">
<description>
<p class="classdesc">
\overview{wxFontDialog overview}{wxfontdialogoverview}</p><p class="classdesc">This class holds a variety of information related to font dialogs.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/cmndata.h"/></includes>
<seealso>

<ref target="wxfontdialogoverview">Overview</ref><ref target="wxfontdialog">wxFontDialog</ref>

</seealso>
<members>
<member class="wxFontData" name="wxFontData"><function type="" name="wxFontData"><description>

Constructor. Initializes <i> fontColour</i> to black, <i> showHelp</i> to black,
<i> allowSymbols</i> to true, <i> enableEffects</i> to true,
<i> minSize</i> to 0 and <i> maxSize</i> to 0.

</description></function></member>
<member class="wxFontData" name="~wxFontData"><function type="" name="~wxFontData"><description>

Destructor.

</description></function></member>
<member class="wxFontData" name="EnableEffects"><function type="void" name="EnableEffects"><parameters><parameter type="bool" name=" enable"></parameter></parameters><description>

Enables or disables `effects' under MS Windows only. This refers to the
controls for manipulating colour, strikeout and underline properties.

The default value is true.

</description></function></member>
<member class="wxFontData" name="GetAllowSymbols"><function type="bool" name="GetAllowSymbols"><description>

Under MS Windows, returns a flag determining whether symbol fonts can be selected. Has no
effect on other platforms.

The default value is true.

</description></function></member>
<member class="wxFontData" name="GetColour"><function type="wxColour&amp;" name="GetColour"><description>

Gets the colour associated with the font dialog.

The default value is black.

</description></function></member>
<member class="wxFontData" name="GetChosenFont"><function type="wxFont" name="GetChosenFont"><description>

Gets the font chosen by the user. If the user pressed OK (wxFontDialog::Show returned true), this returns
a new font which is now `owned' by the application, and should be deleted
if not required. If the user pressed Cancel (wxFontDialog::Show returned false) or
the colour dialog has not been invoked yet, this will return NULL.

</description></function></member>
<member class="wxFontData" name="GetEnableEffects"><function type="bool" name="GetEnableEffects"><description>

Determines whether `effects' are enabled under Windows. This refers to the
controls for manipulating colour, strikeout and underline properties.

The default value is true.

</description></function></member>
<member class="wxFontData" name="GetInitialFont"><function type="wxFont" name="GetInitialFont"><description>

Gets the font that will be initially used by the font dialog. This should have
previously been set by the application.

</description></function></member>
<member class="wxFontData" name="GetShowHelp"><function type="bool" name="GetShowHelp"><description>

Returns true if the Help button will be shown (Windows only).

The default value is false.

</description></function></member>
<member class="wxFontData" name="SetAllowSymbols"><function type="void" name="SetAllowSymbols"><parameters><parameter type="bool" name=" allowSymbols"></parameter></parameters><description>

Under MS Windows, determines whether symbol fonts can be selected. Has no
effect on other platforms.

The default value is true.

</description></function></member>
<member class="wxFontData" name="SetChosenFont"><function type="void" name="SetChosenFont"><parameters><parameter type="const wxFont&amp; " name="font"></parameter></parameters><description>

Sets the font that will be returned to the user (for internal use only).

</description></function></member>
<member class="wxFontData" name="SetColour"><function type="void" name="SetColour"><parameters><parameter type="const wxColour&amp;" name=" colour"></parameter></parameters><description>

Sets the colour that will be used for the font foreground colour.

The default colour is black.

</description></function></member>
<member class="wxFontData" name="SetInitialFont"><function type="void" name="SetInitialFont"><parameters><parameter type="const wxFont&amp;" name="font"></parameter></parameters><description>

Sets the font that will be initially used by the font dialog.

</description></function></member>
<member class="wxFontData" name="SetRange"><function type="void" name="SetRange"><parameters><parameter type="int" name=" min"></parameter><parameter type="int" name=" max"></parameter></parameters><description>

Sets the valid range for the font point size (Windows only).

The default is 0, 0 (unrestricted range).

</description></function></member>
<member class="wxFontData" name="SetShowHelp"><function type="void" name="SetShowHelp"><parameters><parameter type="bool" name=" showHelp"></parameter></parameters><description>

Determines whether the Help button will be displayed in the font dialog (Windows only).

The default value is false.

</description></function></member>
<member class="wxFontData" name="operator $=$"><function type="void" name="operator $=$"><parameters><parameter type="const wxFontData&amp;" name=" data"></parameter></parameters><description>

Assignment operator for the font data.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFontDialog">
<description>
<p class="classdesc">
This class represents the font chooser dialog.</p>
</description>
<parents>
<classref name="wxDialog"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/fontdlg.h"/></includes>
<seealso>

<ref target="wxfontdialogoverview">Overview</ref>,<br/>
<ref target="wxfontdata">wxFontData</ref>,<br/>
<ref target="wxgetfontfromuser">wxGetFontFromUser</ref>

</seealso>
<members>
<member class="wxFontDialog" name="wxFontDialog"><function type="" name="wxFontDialog"><description>

</description></function>
<function type="" name="wxFontDialog"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter></parameters><description>

</description></function>
<function type="" name="wxFontDialog"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="const wxFontData&amp; " name="data"></parameter></parameters><description>

Constructor. Pass a parent window, and optionally the 
<ref target="wxfontdata">font data</ref> object to be used to initialize the dialog
controls. If the default constructor is used, 
<ref target="wxfontdialogcreate">Create()</ref> must be called before the dialog can be
shown.

</description></function></member>
<member class="wxFontDialog" name="Create"><function type="bool" name="Create"><description>

</description></function>
<function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter></parameters><description>

</description></function>
<function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="const wxFontData&amp; " name="data"></parameter></parameters><description>

Creates the dialog if it the wxFontDialog object had been initialized using the
default constructor. Returns <tt> true</tt> on success and <tt> false</tt> if an error
occured.

</description></function></member>
<member class="wxFontDialog" name="~wxFontDialog"><function type="" name="~wxFontDialog"><description>

Destructor.

</description></function></member>
<member class="wxFontDialog" name="GetFontData"><function type="const wxFontData&amp;" name="GetFontData" suffix="const"><description>

</description></function>
<function type="wxFontData&amp;" name="GetFontData"><description>

Returns the <ref target="wxfontdata">font data</ref> associated with the font dialog.

</description></function></member>
<member class="wxFontDialog" name="ShowModal"><function type="int" name="ShowModal"><description>

Shows the dialog, returning <tt> wxID_OK</tt> if the user pressed Ok, and 
<tt> wxID_CANCEL</tt> otherwise.

If the user cancels the dialog (ShowModal returns <tt> wxID_CANCEL</tt>), no font
will be created. If the user presses OK, a new wxFont will be created and
stored in the font dialog's wxFontData structure.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFontEnumerator">
<description>
<p class="classdesc">
wxFontEnumerator enumerates either all available fonts on the system or only
the ones with given attributes - either only fixed-width (suited for use in
programs such as terminal emulators and the like) or the fonts available in
the given <ref target="wxfontencodingoverview">encoding</ref>.</p><p class="classdesc">To do this, you just have to call one of EnumerateXXX() functions - either 
<ref target="wxfontenumeratorenumeratefacenames">EnumerateFacenames</ref> or 
<ref target="wxfontenumeratorenumerateencodings">EnumerateEncodings</ref> and the
corresponding callback (<ref target="wxfontenumeratoronfacename">OnFacename</ref> or 
<ref target="wxfontenumeratoronfontencoding">OnFontEncoding</ref>) will be called
repeatedly until either all fonts satisfying the specified criteria are
exhausted or the callback returns false.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/fontenum.h"/></includes>
<override>

Either <ref target="wxfontenumeratoronfacename">OnFacename</ref> or 
<ref target="wxfontenumeratoronfontencoding">OnFontEncoding</ref> should be overridden
depending on whether you plan to call 
<ref target="wxfontenumeratorenumeratefacenames">EnumerateFacenames</ref> or 
<ref target="wxfontenumeratorenumerateencodings">EnumerateEncodings</ref>. Of course,
if you call both of them, you should override both functions.

</override>
<seealso>

<ref target="wxfontencodingoverview">Font encoding overview</ref>
<ref target="samplefont">Font sample</ref>
<ref target="wxfont">wxFont</ref>
<ref target="wxfontmapper">wxFontMapper</ref>

</seealso>
<members>
<member class="wxFontEnumerator" name="EnumerateFacenames"><function type="virtual bool" name="EnumerateFacenames"><parameters><parameter type="wxFontEncoding " name="encoding" value="wxFONTENCODING_SYSTEM"></parameter><parameter type="bool " name="fixedWidthOnly" value="false"></parameter></parameters><description>

Call <ref target="wxfontenumeratoronfacename">OnFacename</ref> for each font which
supports given encoding (only if it is not wxFONTENCODING_SYSTEM) and is of
fixed width (if <i> fixedWidthOnly</i> is true).

Calling this function with default arguments will result in enumerating all
fonts available on the system.

</description></function></member>
<member class="wxFontEnumerator" name="EnumerateEncodings"><function type="virtual bool" name="EnumerateEncodings"><parameters><parameter type="const wxString&amp; " name="font" value="&quot;&quot;"></parameter></parameters><description>

Call <ref target="wxfontenumeratoronfontencoding">OnFontEncoding</ref> for each
encoding supported by the given font - or for each encoding supported by at
least some font if <i> font</i> is not specified.


</description></function></member>
<member class="wxFontEnumerator" name="GetEncodings"><function type="wxArrayString&#42;" name="GetEncodings"><description>

Return array of strings containing all encodings found by 
<ref target="wxfontenumeratorenumerateencodings">EnumerateEncodings</ref>. This is convenience function. It is 
based on default implementation of <ref target="wxfontenumeratoronfontencoding">OnFontEncoding</ref> so don't expect
it to work if you overwrite that method.

</description></function></member>
<member class="wxFontEnumerator" name="GetFacenames"><function type="wxArrayString&#42;" name="GetFacenames"><description>

Return array of strings containing all facenames found by 
<ref target="wxfontenumeratorenumeratefacenames">EnumerateFacenames</ref>. This is convenience function. It is 
based on default implementation of <ref target="wxfontenumeratoronfacename">OnFacename</ref> so don't expect
it to work if you overwrite that method.


</description></function></member>
<member class="wxFontEnumerator" name="OnFacename"><function type="virtual bool" name="OnFacename"><parameters><parameter type="const wxString&amp; " name="font"></parameter></parameters><description>

Called by <ref target="wxfontenumeratorenumeratefacenames">EnumerateFacenames</ref> for
each match. Return true to continue enumeration or false to stop it.

</description></function></member>
<member class="wxFontEnumerator" name="OnFontEncoding"><function type="virtual bool" name="OnFontEncoding"><parameters><parameter type="const wxString&amp; " name="font"></parameter><parameter type="const wxString&amp; " name="encoding"></parameter></parameters><description>

Called by <ref target="wxfontenumeratorenumerateencodings">EnumerateEncodings</ref> for
each match. Return true to continue enumeration or false to stop it.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="N"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFontList">
<description>
<p class="classdesc">
A font list is a list containing all fonts which have been created. There
is only one instance of this class: <b> wxTheFontList</b>.  Use this object to search
for a previously created font of the desired type and create it if not already found.
In some windowing systems, the font may be a scarce resource, so it is best to
reuse old resources if possible.  When an application finishes, all fonts will be
deleted and their resources freed, eliminating the possibility of `memory leaks'.</p>
</description>
<parents>
<classref name="wxList"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/gdicmn.h"/></includes>
<seealso>

<ref target="wxfont">wxFont</ref>

</seealso>
<members>
<member class="wxFontList" name="wxFontList"><function type="" name="wxFontList"><description>

Constructor. The application should not construct its own font list:
use the object pointer <b> wxTheFontList</b>.

</description></function></member>
<member class="wxFontList" name="AddFont"><function type="void" name="AddFont"><parameters><parameter type="wxFont &#42;" name="font"></parameter></parameters><description>

Used by wxWindows to add a font to the list, called in the font constructor.

</description></function></member>
<member class="wxFontList" name="FindOrCreateFont"><function type="wxFont &#42;" name="FindOrCreateFont"><parameters><parameter type="int" name=" point_size"></parameter><parameter type="int" name=" family"></parameter><parameter type="int" name=" style"></parameter><parameter type="int" name=" weight"></parameter><parameter type="bool" name="underline" value="false"></parameter><parameter type="const wxString&amp; " name="facename" value="NULL"></parameter><parameter type="wxFontEncoding " name="encoding" value="wxFONTENCODING_DEFAULT"></parameter></parameters><description>

Finds a font of the given specification, or creates one and adds it to the list. See the <ref target="wxfontconstr">wxFont constructor</ref> for
details of the arguments.

</description></function></member>
<member class="wxFontList" name="RemoveFont"><function type="void" name="RemoveFont"><parameters><parameter type="wxFont &#42;" name="font"></parameter></parameters><description>

Used by wxWindows to remove a font from the list.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFontMapper">
<description>
<p class="classdesc">
wxFontMapper manages user-definable correspondence between logical font
names and the fonts present on the machine.</p><p class="classdesc">The default implementations of all functions will ask the user if they are
not capable of finding the answer themselves and store the answer in a
config file (configurable via SetConfigXXX functions). This behaviour may
be disabled by giving the value of false to &quot;interactive&quot; parameter.</p><p class="classdesc">However, the functions will always consult the config file to allow the
user-defined values override the default logic and there is no way to
disable this - which shouldn't be ever needed because if &quot;interactive&quot; was
never true, the config file is never created anyhow.</p><p class="classdesc">In case everything else fails (i.e. there is no record in config file
and &quot;interactive&quot; is false or user denied to choose any replacement), 
the class queries <ref target="wxencodingconverter">wxEncodingConverter</ref> 
for &quot;equivalent&quot; encodings (e.g. iso8859-2 and cp1250) and tries them.</p><p class="classdesc"><heading>Using wxFontMapper in conjunction with wxMBConv classes</heading></p><p class="classdesc">If you need to display text in encoding which is not available at
host system (see <ref target="wxfontmapperisencodingavailable">IsEncodingAvailable</ref>),
you may use these two classes to find font in some similar encoding
(see <ref target="wxfontmappergetaltforencoding">GetAltForEncoding</ref>)
and convert the text to this encoding 
(<ref target="mbconvclasses">wxMBConv classes</ref>).</p><p class="classdesc">Following code snippet demonstrates it:</p><p class="classdesc"><pre>
if (!wxFontMapper::Get()-&gt;IsEncodingAvailable(enc, facename))
{
   wxFontEncoding alternative;
   if (wxFontMapper::Get()-&gt;GetAltForEncoding(enc, &amp;alternative,
                                              facename, false))
   {
       wxCSConv convFrom(wxFontMapper::Get()-&gt;GetEncodingName(enc));
       wxCSConv convTo(wxFontMapper::Get()-&gt;GetEncodingName(alternative));
       text = wxString(text.mb_str(convFrom), convTo);
   }
   else
       ...failure (or we may try iso8859-1/7bit ASCII)...
}
...display text...
</pre></p>
</description>
<parents></parents>
<includes>
<header name="wx/fontmap.h"/></includes>
<seealso>

<ref target="wxencodingconverter">wxEncodingConverter</ref>
<ref target="nonenglishoverview">Writing non-English applications</ref>

</seealso>
<members>
<member class="wxFontMapper" name="wxFontMapper"><function type="" name="wxFontMapper"><note>

The preferred way of creating a wxFontMapper instance is to call 
<ref target="wxfontmapperget">wxFontMapper::Get</ref>.

</note><description>

Default ctor.

</description></function></member>
<member class="wxFontMapper" name="~wxFontMapper"><function type="" name="~wxFontMapper"><description>

Virtual dtor for a base class.

</description></function></member>
<member class="wxFontMapper" name="Get"><function type="static wxFontMapper &#42;" name="Get"><seealso>

<ref target="wxfontmapperset">wxFontMapper::Set</ref>

</seealso><description>

Get the current font mapper object. If there is no current object, creates
one.

</description></function></member>
<member class="wxFontMapper" name="GetAltForEncoding"><function type="bool" name="GetAltForEncoding"><parameters><parameter type="wxFontEncoding " name="encoding"></parameter><parameter type="wxNativeEncodingInfo&#42; " name="info"></parameter><parameter type="const wxString&amp; " name="facename" value="wxEmptyString"></parameter><parameter type="bool " name="interactive" value="true"></parameter></parameters><description>

</description></function>
<function type="bool" name="GetAltForEncoding"><parameters><parameter type="wxFontEncoding " name="encoding"></parameter><parameter type="wxFontEncoding&#42; " name="alt_encoding"></parameter><parameter type="const wxString&amp; " name="facename" value="wxEmptyString"></parameter><parameter type="bool " name="interactive" value="true"></parameter></parameters><description>

Find an alternative for the given encoding (which is supposed to not be
available on this system). If successful, return true and fill info
structure with the parameters required to create the font, otherwise
return false.

The first form is for wxWindows' internal use while the second one
is better suitable for general use -- it returns wxFontEncoding which
can consequently be passed to wxFont constructor.

</description></function></member>
<member class="wxFontMapper" name="IsEncodingAvailable"><function type="bool" name="IsEncodingAvailable"><parameters><parameter type="wxFontEncoding " name="encoding"></parameter><parameter type="const wxString&amp; " name="facename" value="wxEmptyString"></parameter></parameters><description>

Check whether given encoding is available in given face or not.
If no facename is given, find <i> any</i> font in this encoding.

</description></function></member>
<member class="wxFontMapper" name="CharsetToEncoding"><function type="wxFontEncoding" name="CharsetToEncoding"><parameters><parameter type="const wxString&amp; " name="charset"></parameter><parameter type="bool " name="interactive" value="true"></parameter></parameters><description>

Returns the encoding for the given charset (in the form of RFC 2046) or
wxFONTENCODING_SYSTEM if couldn't decode it.

</description></function></member>
<member class="wxFontMapper" name="GetEncoding"><function type="static wxFontEncoding" name="GetEncoding"><parameters><parameter type="size_t " name="n"></parameter></parameters><description>

Returns the <i> n</i>-th supported encoding. Together with 
<ref target="wxfontmappergetsupportedencodingscount">GetSupportedEncodingsCount()</ref> 
this method may be used to get all supported encodings.


</description></function></member>
<member class="wxFontMapper" name="GetEncodingName"><function type="static wxString" name="GetEncodingName"><parameters><parameter type="wxFontEncoding " name="encoding"></parameter></parameters><description>

Return internal string identifier for the encoding (see also 
<ref target="wxfontmappergetencodingdescription">GetEncodingDescription()</ref>)

</description></function></member>
<member class="wxFontMapper" name="GetEncodingDescription"><function type="static wxString" name="GetEncodingDescription"><parameters><parameter type="wxFontEncoding " name="encoding"></parameter></parameters><description>

Return user-readable string describing the given encoding.

</description></function></member>
<member class="wxFontMapper" name="GetSupportedEncodingsCount"><function type="static size_t" name="GetSupportedEncodingsCount"><description>

Returns the number of the font encodings supported by this class. Together with 
<ref target="wxfontmappergetencoding">GetEncoding</ref> this method may be used to get
all supported encodings.


</description></function></member>
<member class="wxFontMapper" name="SetDialogParent"><function type="void" name="SetDialogParent"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter></parameters><description>

The parent window for modal dialogs.

</description></function></member>
<member class="wxFontMapper" name="SetDialogTitle"><function type="void" name="SetDialogTitle"><parameters><parameter type="const wxString&amp; " name="title"></parameter></parameters><description>

The title for the dialogs (note that default is quite reasonable).

</description></function></member>
<member class="wxFontMapper" name="Set"><function type="static wxFontMapper &#42;" name="Set"><parameters><parameter type="wxFontMapper &#42;" name="mapper"></parameter></parameters><seealso>

<ref target="wxfontmapperget">wxFontMapper::Get</ref>

</seealso><description>

Set the current font mapper object and return previous one (may be NULL).
This method is only useful if you want to plug-in an alternative font mapper
into wxWindows.

</description></function></member>
<member class="wxFontMapper" name="SetConfig"><function type="void" name="SetConfig"><parameters><parameter type="wxConfigBase&#42; " name="config"></parameter></parameters><description>

Set the config object to use (may be NULL to use default).

By default, the global one (from wxConfigBase::Get() will be used) 
and the default root path for the config settings is the string returned by
GetDefaultConfigPath().

</description></function></member>
<member class="wxFontMapper" name="SetConfigPath"><function type="void" name="SetConfigPath"><parameters><parameter type="const wxString&amp; " name="prefix"></parameter></parameters><description>

Set the root config path to use (should be an absolute path).

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxFrame">
<description>
<p class="classdesc">
A frame is a window whose size and position can (usually) be changed by the
user. It usually has thick borders and a title bar, and can optionally contain
a menu bar, toolbar and status bar. A frame can contain any window that is not
a frame or dialog.</p><p class="classdesc">A frame that has a status bar and toolbar created via the
CreateStatusBar/CreateToolBar functions manages these windows, and adjusts the
value returned by GetClientSize to reflect the remaining size available to
application windows.</p><p class="classdesc"><heading>Default event processing</heading></p><p class="classdesc">wxFrame processes the following events:</p><p class="classdesc"><table>
<tr><td><ref target="wxsizeevent">wxEVT_SIZE</ref></td><td>If the frame has exactly one
child window, not counting the status and toolbar, this child is resized to
take the entire frame client area. If two or more windows are present, they
should be laid out explicitly either by manually handling wxEVT_SIZE or using
<ref target="sizeroverview">sizers</ref></td></tr><tr><td><ref target="wxmenuevent">wxEVT_MENU_HIGHLIGHT</ref></td><td>The default
implementation displays the <ref target="wxmenuitemgethelp">help string</ref> associated
with the selected item in the first pane of the status bar, if there is one.</td></tr>
</table></p>
</description>
<remarks>

An application should normally define an <ref target="wxcloseevent">wxCloseEvent</ref> handler for the
frame to respond to system close events, for example so that related data and subwindows can be cleaned up.

</remarks>
<parents>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/frame.h"/></includes>
<windowstyles>
<style name="wxDEFAULT_FRAME_STYLE">Defined as {\bf wxMINIMIZE_BOX \pipe wxMAXIMIZE_BOX \pipe wxRESIZE_BORDER \pipe wxSYSTEM_MENU \pipe wxCAPTION \pipe wxCLOSE_BOX</style><style name="wxICONIZE">Display the frame iconized (minimized). Windows only. </style><style name="wxCAPTION">Puts a caption on the frame.</style><style name="wxMINIMIZE">Identical to {\bf wxICONIZE</style><style name="wxMINIMIZE_BOX">Displays a minimize box on the frame.</style><style name="wxMAXIMIZE">Displays the frame maximized. Windows only.</style><style name="wxMAXIMIZE_BOX">Displays a maximize box on the frame.</style><style name="wxCLOSE_BOX">Displays a close box on the frame.</style><style name="wxSTAY_ON_TOP">Stay on top of all other windows,
see also wxFRAME_FLOAT_ON_PARENT. Windows only.</style><style name="wxSYSTEM_MENU">Displays a system menu.</style><style name="wxSIMPLE_BORDER">Displays no border or decorations. GTK and Windows only.</style><style name="wxRESIZE_BORDER">Displays a resizeable border around the window.</style><style name="wxFRAME_TOOL_WINDOW">Causes a frame with a small
titlebar to be created; the frame does not appear in the taskbar under Windows.</style><style name="wxFRAME_NO_TASKBAR">Creates an otherwise normal
frame but it does not appear in the taskbar under Windows (note that it will
minimize to the desktop window which may seem strange to the users and thus it
might be better to use this style only without wxMINIMIZE_BOX style).
Has no effect under other platforms.</style><style name="wxFRAME_FLOAT_ON_PARENT">The frame will always be
on top of its parent (unlike wxSTAY_ON_TOP). A frame created with this style
must have a non-NULL parent.</style><style name="wxFRAME_EX_CONTEXTHELP">Under Windows, puts a query button on the
caption. When pressed, Windows will go into a context-sensitive help mode and wxWindows will send
a wxEVT_HELP event if the user clicked on an application window. {\it Note</style><style name="wxFRAME_SHAPED">Windows with this style are
  allowed to have their shape changed with the \helpref{SetShape</style></windowstyles>
<seealso>

<ref target="wxmdiparentframe">wxMDIParentFrame</ref><ref target="wxmdichildframe">wxMDIChildFrame</ref>,
<ref target="wxminiframe">wxMiniFrame</ref><ref target="wxdialog">wxDialog</ref>

</seealso>
<members>
<member class="wxFrame" name="wxFrame"><function type="" name="wxFrame"><description>

Default constructor.

</description></function>
<function type="" name="wxFrame"><parameters><parameter type="wxWindow&#42; " name="parent">The window parent. This may be NULL. If it is non-NULL, the frame will
always be displayed on top of the parent window on Windows.</parameter><parameter type="wxWindowID " name="id">The window identifier. It may take a value of -1 to indicate a default value.</parameter><parameter type="const wxString&amp; " name="title">The caption to be displayed on the frame's title bar.</parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition">The window position. A value of (-1, -1) indicates a default position, chosen by
either the windowing system or wxWindows, depending on platform.</parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize">The window size. A value of (-1, -1) indicates a default size, chosen by
either the windowing system or wxWindows, depending on platform.</parameter><parameter type="long" name="style" value="wxDEFAULT_FRAME_STYLE">The window style. See <ref target="wxframe">wxFrame</ref>.</parameter><parameter type="const wxString&amp; " name="name" value="``frame&quot;">The name of the window. This parameter is used to associate a name with the item,
allowing the application user to set Motif resource values for
individual windows.</parameter></parameters><seealso>

<ref target="wxframecreate">wxFrame::Create</ref>

</seealso><remarks>

For Motif, MWM (the Motif Window Manager) should be running for any window styles to work
(otherwise all styles take effect).

</remarks><description>

Constructor, creating the window.

















</description></function></member>
<member class="wxFrame" name="~wxFrame"><function type="void" name="~wxFrame"><description>

Destructor. Destroys all child windows and menu bar if present.

</description></function></member>
<member class="wxFrame" name="Centre"><function type="void" name="Centre"><parameters><parameter type="int" name="direction" value="wxBOTH">The parameter may be <tt> wxHORIZONTAL</tt>, <tt> wxVERTICAL</tt> or <tt> wxBOTH</tt>.</parameter></parameters><description>

Centres the frame on the display.





</description></function></member>
<member class="wxFrame" name="Command"><function type="void" name="Command"><parameters><parameter type="int " name="id">The identifier for a menu item.</parameter></parameters><description>

Simulate a menu command.





</description></function></member>
<member class="wxFrame" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxString&amp; " name="title"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="wxDEFAULT_FRAME_STYLE"></parameter><parameter type="const wxString&amp; " name="name" value="``frame&quot;"></parameter></parameters><description>

Used in two-step frame construction. See <ref target="wxframeconstr">wxFrame::wxFrame</ref>
for further details.

</description></function></member>
<member class="wxFrame" name="CreateStatusBar"><function type="virtual wxStatusBar&#42;" name="CreateStatusBar"><parameters><parameter type="int" name="number" value="1">The number of fields to create. Specify a
value greater than 1 to create a multi-field status bar.</parameter><parameter type="long" name="style" value="0">The status bar style. See <ref target="wxstatusbar">wxStatusBar</ref> for a list
of valid styles.</parameter><parameter type="wxWindowID" name="id" value="-1">The status bar window identifier. If -1, an identifier will be chosen by
wxWindows.</parameter><parameter type="const wxString&amp;" name="name" value="&quot;statusBar&quot;">The status bar window name.</parameter></parameters><seealso>

<ref target="wxframesetstatustext">wxFrame::SetStatusText</ref>,
<ref target="wxframeoncreatestatusbar">wxFrame::OnCreateStatusBar</ref>,
<ref target="wxframegetstatusbar">wxFrame::GetStatusBar</ref>

</seealso><remarks>

The width of the status bar is the whole width of the frame (adjusted automatically when
resizing), and the height and text size are chosen by the host windowing system.

By default, the status bar is an instance of wxStatusBar. To use a different class,
override <ref target="wxframeoncreatestatusbar">wxFrame::OnCreateStatusBar</ref>.

Note that you can put controls and other windows on the status bar if you wish.

</remarks><returnvalue>

A pointer to the the status bar if it was created successfully, NULL otherwise.

</returnvalue><description>

Creates a status bar at the bottom of the frame.











</description></function></member>
<member class="wxFrame" name="CreateToolBar"><function type="virtual wxToolBar&#42;" name="CreateToolBar"><parameters><parameter type="long" name="style" value="wxNO_BORDER">The toolbar style. See <ref target="wxtoolbar">wxToolBar</ref> for a list
of valid styles.</parameter><parameter type="wxWindowID" name="id" value="-1">The toolbar window identifier. If -1, an identifier will be chosen by
wxWindows.</parameter><parameter type="const wxString&amp;" name="name" value="&quot;toolBar&quot;">The toolbar window name.</parameter></parameters><seealso>

<ref target="wxframecreatestatusbar">wxFrame::CreateStatusBar</ref>,
<ref target="wxframeoncreatetoolbar">wxFrame::OnCreateToolBar</ref>,
<ref target="wxframesettoolbar">wxFrame::SetToolBar</ref>,
<ref target="wxframegettoolbar">wxFrame::GetToolBar</ref>

</seealso><remarks>

By default, the toolbar is an instance of wxToolBar (which is defined to be
a suitable toolbar class on each platform, such as wxToolBar95). To use a different class,
override <ref target="wxframeoncreatetoolbar">wxFrame::OnCreateToolBar</ref>.

When a toolbar has been created with this function, or made known to the frame
with <ref target="wxframesettoolbar">wxFrame::SetToolBar</ref>, the frame will manage the toolbar
position and adjust the return value from <ref target="wxwindowgetclientsize">wxWindow::GetClientSize</ref> to
reflect the available space for application windows.

</remarks><returnvalue>

A pointer to the the toolbar if it was created successfully, NULL otherwise.

</returnvalue><description>

Creates a toolbar at the top or left of the frame.









</description></function></member>
<member class="wxFrame" name="GetClientAreaOrigin"><function type="wxPoint" name="GetClientAreaOrigin" suffix="const"><description>

Returns the origin of the frame client area (in client coordinates). It may be
different from (0, 0) if the frame has a toolbar.

</description></function></member>
<member class="wxFrame" name="GetMenuBar"><function type="wxMenuBar&#42;" name="GetMenuBar" suffix="const"><seealso>

<ref target="wxframesetmenubar">wxFrame::SetMenuBar</ref><ref target="wxmenubar">wxMenuBar</ref><ref target="wxmenu">wxMenu</ref>

</seealso><description></description></function></member>
<member class="wxFrame" name="GetStatusBar"><function type="wxStatusBar&#42;" name="GetStatusBar" suffix="const"><seealso>

<ref target="wxframecreatestatusbar">wxFrame::CreateStatusBar</ref><ref target="wxstatusbar">wxStatusBar</ref>

</seealso><description></description></function></member>
<member class="wxFrame" name="GetStatusBarPane"><function type="int" name="GetStatusBarPane"><seealso>

<ref target="wxframesetstatusbarpane">wxFrame::SetStatusBarPane</ref>

</seealso><description>

Returns the status bar pane used to display menu and toolbar help.

</description></function></member>
<member class="wxFrame" name="GetTitle"><function type="wxString" name="GetTitle" suffix="const"><description>

Gets a string containing the frame title. See <ref target="wxframesettitle">wxFrame::SetTitle</ref>.

</description></function></member>
<member class="wxFrame" name="GetToolBar"><function type="wxToolBar&#42;" name="GetToolBar" suffix="const"><seealso>

<ref target="wxframecreatetoolbar">wxFrame::CreateToolBar</ref><ref target="wxtoolbar">wxToolBar</ref>,
<ref target="wxframesettoolbar">wxFrame::SetToolBar</ref>

</seealso><description></description></function></member>
<member class="wxFrame" name="Iconize"><function type="void" name="Iconize"><parameters><parameter type="bool" name=" iconize"></parameter></parameters><seealso>

<ref target="wxframeisiconized">wxFrame::IsIconized</ref><ref target="wxframemaximize">wxFrame::Maximize</ref>.

</seealso><description></description></function></member>
<member class="wxFrame" name="IsFullScreen"><function type="bool" name="IsFullScreen"><seealso>

<ref target="wxframeshowfullscreen">wxFrame::ShowFullScreen</ref>

</seealso><description>

Returns true if the frame is in fullscreen mode.

</description></function></member>
<member class="wxFrame" name="IsIconized"><function type="bool" name="IsIconized" suffix="const"><description>

Returns true if the frame is iconized.

</description></function></member>
<member class="wxFrame" name="IsMaximized"><function type="bool" name="IsMaximized" suffix="const"><description>

Returns true if the frame is maximized.

</description></function></member>
<member class="wxFrame" name="Maximize"><function type="void" name="Maximize"><parameters><parameter type="bool " name="maximize">If true, maximizes the frame, otherwise it restores it.</parameter></parameters><seealso>

<ref target="wxframeiconize">wxFrame::Iconize</ref>

</seealso><remarks>

This function only works under Windows.

</remarks><description>

Maximizes or restores the frame.





</description></function></member>
<member class="wxFrame" name="OnCreateStatusBar"><function type="virtual wxStatusBar&#42;" name="OnCreateStatusBar"><parameters><parameter type="int " name="number">The number of fields to create.</parameter><parameter type="long" name=" style"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp;" name=" name"></parameter></parameters><seealso>

<ref target="wxframecreatestatusbar">wxFrame::CreateStatusBar</ref><ref target="wxstatusbar">wxStatusBar</ref>.

</seealso><description></description></function></member>
<member class="wxFrame" name="OnCreateToolBar"><function type="virtual wxToolBar&#42;" name="OnCreateToolBar"><parameters><parameter type="long" name=" style"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp;" name=" name"></parameter></parameters><seealso>

<ref target="wxframecreatetoolbar">wxFrame::CreateToolBar</ref><ref target="wxtoolbar">wxToolBar</ref>.

</seealso><description></description></function></member>
<member class="wxFrame" name="SendSizeEvent"><function type="void" name="SendSizeEvent"><description>

This function sends a dummy <ref target="wxsizeevent">size event</ref> to the frame
forcing it to reevaluate its children positions. It is sometimes useful to call
this function after adding or deleting a children after the frame creation or
if a child size changes.

Note that if the frame is using either sizers or constraints for the children
layout, it is enough to call <ref target="wxwindowlayout">Layout()</ref> directly and
this function should not be used in this case.

</description></function></member>
<member class="wxFrame" name="SetIcon"><function type="void" name="SetIcon"><parameters><parameter type="const wxIcon&amp; " name="icon">The icon to associate with this frame.</parameter></parameters><remarks>

The frame takes a `copy' of <i> icon</i>, but since it uses reference
counting, the copy is very quick. It is safe to delete <i> icon</i> after
calling this function.

See also <ref target="wxicon">wxIcon</ref>.

</remarks><description>

Sets the icon for this frame.





</description></function></member>
<member class="wxFrame" name="SetIcons"><function type="void" name="SetIcons"><parameters><parameter type="const wxIconBundle&amp; " name="icons">The icons to associate with this frame.</parameter></parameters><description>

Sets the icons for this frame.





See also <ref target="wxiconbundle">wxIconBundle</ref>.


</description></function></member>
<member class="wxFrame" name="SetMenuBar"><function type="void" name="SetMenuBar"><parameters><parameter type="wxMenuBar&#42; " name="menuBar">The menu bar to associate with the frame.</parameter></parameters><seealso>

<ref target="wxframegetmenubar">wxFrame::GetMenuBar</ref><ref target="wxmenubar">wxMenuBar</ref><ref target="wxmenu">wxMenu</ref>.

</seealso><description></description></function></member>
<member class="wxFrame" name="SetShape"><function type="bool" name="SetShape"><parameters><parameter type="const wxRegion&amp;" name=" region"></parameter></parameters><description>

If the platform supports it, sets the shape of the window to that
depicted by \it{region}.  The system will not display or
respond to any mouse event for the pixels that lie outside of the
region.  To reset the window to the normal rectangular shape simply
call \it{SetShape} again with an empty region.  Returns TRUE if the
operation is successful.

</description></function></member>
<member class="wxFrame" name="SetStatusBar"><function type="void" name="SetStatusBar"><parameters><parameter type="wxStatusBar&#42;" name=" statusBar"></parameter></parameters><seealso>

<ref target="wxframecreatestatusbar">wxFrame::CreateStatusBar</ref><ref target="wxstatusbar">wxStatusBar</ref>,
<ref target="wxframegetstatusbar">wxFrame::GetStatusBar</ref>

</seealso><description></description></function></member>
<member class="wxFrame" name="SetStatusBarPane"><function type="void" name="SetStatusBarPane"><parameters><parameter type="int" name=" n"></parameter></parameters><description>

Set the status bar pane used to display menu and toolbar help.
Using -1 disables help display.

</description></function></member>
<member class="wxFrame" name="SetStatusText"><function type="virtual void" name="SetStatusText"><parameters><parameter type="const wxString&amp; " name=" text"></parameter><parameter type="int" name="number" value="0">The status field (starting from zero).</parameter></parameters><seealso>

<ref target="wxframecreatestatusbar">wxFrame::CreateStatusBar</ref><ref target="wxstatusbar">wxStatusBar</ref>

</seealso><description></description></function></member>
<member class="wxFrame" name="SetStatusWidths"><function type="virtual void" name="SetStatusWidths"><parameters><parameter type="int" name=" n"></parameter><parameter type="int &#42;" name="widths">Must contain an array of <i> n</i> integers, each of which is a status field width
in pixels. A value of -1 indicates that the field is variable width; at least one
field must be -1. You should delete this array after calling <b> SetStatusWidths</b>.</parameter></parameters><remarks>

The widths of the variable fields are calculated from the total width of all fields,
minus the sum of widths of the non-variable fields, divided by the number of
variable fields.

\pythonnote{Only a single parameter is required, a Python list of
integers.}

\perlnote{In wxPerl this method takes the field widths as parameters.}

</remarks><description>

Sets the widths of the fields in the status bar.



\wxheading{n}{The number of fields in the status bar. It must be the
same used in <ref target="wxframecreatestatusbar">CreateStatusBar</ref>.}



</description></function></member>
<member class="wxFrame" name="SetToolBar"><function type="void" name="SetToolBar"><parameters><parameter type="wxToolBar&#42;" name=" toolBar"></parameter></parameters><seealso>

<ref target="wxframecreatetoolbar">wxFrame::CreateToolBar</ref><ref target="wxtoolbar">wxToolBar</ref>,
<ref target="wxframegettoolbar">wxFrame::GetToolBar</ref>

</seealso><description></description></function></member>
<member class="wxFrame" name="SetTitle"><function type="virtual void" name="SetTitle"><parameters><parameter type="const wxString&amp; " name=" title"></parameter></parameters><seealso>

<ref target="wxframegettitle">wxFrame::GetTitle</ref>

</seealso><description>

Sets the frame title.





</description></function></member>
<member class="wxFrame" name="ShowFullScreen"><function type="bool" name="ShowFullScreen"><parameters><parameter type="bool" name=" show"></parameter><parameter type="long" name="style" value="wxFULLSCREEN_ALL"></parameter></parameters><seealso>

<ref target="wxframeisfullscreen">wxFrame::IsFullScreen</ref>

</seealso><description>

Depending on the value of <i> show</i> parameter the frame is either shown full
screen or restored to its normal state. <i> style</i> is a bit list containing
some or all of the following values, which indicate what elements of the frame
to hide in full-screen mode:

<ul><li> wxFULLSCREEN_NOMENUBAR
</li>
<li> wxFULLSCREEN_NOTOOLBAR
</li>
<li> wxFULLSCREEN_NOSTATUSBAR
</li>
<li> wxFULLSCREEN_NOBORDER
</li>
<li> wxFULLSCREEN_NOCAPTION
</li>
<li> wxFULLSCREEN_ALL (all of the above)
</li></ul>

This function has not been tested with MDI frames.

Note that showing a frame full screen also actually
<ref target="wxwindowshow">Show()s</ref> if it hadn't been shown yet.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class>
<class name="wxGDIObject">
<description>
<p class="classdesc">
This class allows platforms to implement functionality to optimise GDI objects, such
as wxPen, wxBrush and wxFont. On Windows, the underling GDI objects are a scarce resource
and are cleaned up when a usage count goes to zero. On some platforms this
class may not have any special functionality.</p><p class="classdesc">Since the functionality of this class is platform-specific, it is not documented here in detail.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/gdiobj.h"/></includes>
<seealso>

<ref target="wxpen">wxPen</ref><ref target="wxbrush">wxBrush</ref><ref target="wxfont">wxFont</ref>

</seealso>
<members>
<member class="wxGDIObject" name="wxGDIObject"><function type="" name="wxGDIObject"><description>

Default constructor.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGLCanvas">
<description>
<p class="classdesc">
wxGLCanvas is a class for displaying OpenGL graphics. There are
wrappers for OpenGL on Windows, and GTK+ and Motif.</p><p class="classdesc">To use this class, create a wxGLCanvas window, call <ref target="wxglcanvassetcurrent">wxGLCanvas::SetCurrent</ref> 
to direct normal OpenGL commands to the window, and then call <ref target="wxglcanvasswapbuffers">wxGLCanvas::SwapBuffers</ref> 
to show the OpenGL buffer on the window.</p><p class="classdesc">To set up the attributes for the rendering context (number of bits for the depth buffer,
number of bits for the stencil buffer and so on) you should set up the correct values of
the <i> attribList</i> parameter. The values that should be set up and their meanings will be described below.</p><p class="classdesc">To switch wxGLCanvas support on under Windows, edit setup.h and set
<tt> wxUSE_GLCANVAS</tt> to 1. You may also need to have to add
<tt> opengl32.lib</tt> to the list of libraries your program is linked with. On
Unix, pass <tt> --with-opengl</tt> to configure to compile using OpenGL or Mesa.</p>
</description>
<parents>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/glcanvas.h"/></includes>
<windowstyles>
</windowstyles>
<constants>

The generic GL implementation doesn't support many of these options, such as stereo, auxiliary buffers,
alpha channel, and accum buffer. Other implementations may support them.

\twocolwidtha{5cm}
<table>
<tr><td>\windowstyle{WX_GL_RGBA}</td><td>Use true colour</td></tr>
<tr><td>\windowstyle{WX_GL_BUFFER_SIZE}</td><td>Bits for buffer if not WX_GL_RGBA</td></tr>
<tr><td>\windowstyle{WX_GL_LEVEL}</td><td>0 for main buffer, &gt;0 for overlay, &lt;0 for underlay</td></tr>
<tr><td>\windowstyle{WX_GL_DOUBLEBUFFER}</td><td>Use doublebuffer</td></tr>
<tr><td>\windowstyle{WX_GL_STEREO}</td><td>Use stereoscopic display</td></tr>
<tr><td>\windowstyle{WX_GL_AUX_BUFFERS}</td><td>Number of auxiliary buffers (not all implementation support this option)</td></tr>
<tr><td>\windowstyle{WX_GL_MIN_RED}</td><td>Use red buffer with most bits (&gt; MIN_RED bits)</td></tr>
<tr><td>\windowstyle{WX_GL_MIN_GREEN}</td><td>Use green buffer with most bits (&gt; MIN_GREEN bits) </td></tr>
<tr><td>\windowstyle{WX_GL_MIN_BLUE}</td><td>Use blue buffer with most bits (&gt; MIN_BLUE bits) </td></tr>
<tr><td>\windowstyle{WX_GL_MIN_ALPHA}</td><td>Use alpha buffer with most bits (&gt; MIN_ALPHA bits)</td></tr>
<tr><td>\windowstyle{WX_GL_DEPTH_SIZE}</td><td>Bits for Z-buffer (0,16,32)</td></tr>
<tr><td>\windowstyle{WX_GL_STENCIL_SIZE}</td><td>Bits for stencil buffer</td></tr>
<tr><td>\windowstyle{WX_GL_MIN_ACCUM_RED}</td><td>Use red accum buffer with most bits (&gt; MIN_ACCUM_RED bits)</td></tr>
<tr><td>\windowstyle{WX_GL_MIN_ACCUM_GREEN}</td><td>Use green buffer with most bits (&gt; MIN_ACCUM_GREEN bits)</td></tr>
<tr><td>\windowstyle{WX_GL_MIN_ACCUM_BLUE}</td><td>Use blue buffer with most bits (&gt; MIN_ACCUM_BLUE bits)</td></tr>
<tr><td>\windowstyle{WX_GL_MIN_ACCUM_ALPHA}</td><td>Use blue buffer with most bits (&gt; MIN_ACCUM_ALPHA bits)</td></tr>
</table>

</constants>
<members>
<member class="wxGLCanvas" name="wxGLCanvas"><function type="void" name="wxGLCanvas"><parameters><parameter type="wxWindow&#42; " name="parent">Pointer to a parent window.</parameter><parameter type="wxWindowID" name="id" value="-1">Window identifier. If -1, will automatically create an identifier.</parameter><parameter type="const wxPoint&amp;" name=" pos"></parameter><parameter type="const wxSize&amp;" name=" size"></parameter><parameter type="long" name="style" value="0">Window style.</parameter><parameter type="const wxString&amp; " name="name" value="&quot;GLCanvas&quot;">Window name.</parameter><parameter type="int&#42;" name="attribList" value="0">Array of int. With this parameter you can set the device context attributes associated to this window.
This array is zero-terminated: it should be set up with constants described in the table above.
If a constant should be followed by a value, put it in the next array position.
For example, the WX_GL_DEPTH_SIZE should be followed by the value that indicates the number of
bits for the depth buffer, so:

<pre>
attribList&#91;index]= WX_GL_DEPTH_SIZE;
attribList&#91;index+1]=32;
and so on.
</pre>
</parameter><parameter type="const wxPalette&amp;" name="palette" value="wxNullPalette">If the window has the palette, it should by pass this value.
Note: palette and WX_GL_RGBA are mutually exclusive.</parameter></parameters><description>

</description></function>
<function type="void" name="wxGLCanvas"><parameters><parameter type="wxWindow&#42; " name="parent">Pointer to a parent window.</parameter><parameter type="wxGLCanvas&#42; " name="sharedCanvas" value="NULL"></parameter><parameter type="wxWindowID" name="id" value="-1">Window identifier. If -1, will automatically create an identifier.</parameter><parameter type="const wxPoint&amp;" name=" pos"></parameter><parameter type="const wxSize&amp;" name=" size"></parameter><parameter type="long" name="style" value="0">Window style.</parameter><parameter type="const wxString&amp; " name="name" value="&quot;GLCanvas&quot;">Window name.</parameter><parameter type="int&#42;" name="attribList" value="0">Array of int. With this parameter you can set the device context attributes associated to this window.
This array is zero-terminated: it should be set up with constants described in the table above.
If a constant should be followed by a value, put it in the next array position.
For example, the WX_GL_DEPTH_SIZE should be followed by the value that indicates the number of
bits for the depth buffer, so:

<pre>
attribList&#91;index]= WX_GL_DEPTH_SIZE;
attribList&#91;index+1]=32;
and so on.
</pre>
</parameter><parameter type="const wxPalette&amp;" name="palette" value="wxNullPalette">If the window has the palette, it should by pass this value.
Note: palette and WX_GL_RGBA are mutually exclusive.</parameter></parameters><description>

</description></function>
<function type="void" name="wxGLCanvas"><parameters><parameter type="wxWindow&#42; " name="parent">Pointer to a parent window.</parameter><parameter type="wxGLContext&#42; " name="sharedContext" value="NULL"></parameter><parameter type="wxWindowID" name="id" value="-1">Window identifier. If -1, will automatically create an identifier.</parameter><parameter type="const wxPoint&amp;" name=" pos"></parameter><parameter type="const wxSize&amp;" name=" size"></parameter><parameter type="long" name="style" value="0">Window style.</parameter><parameter type="const wxString&amp; " name="name" value="&quot;GLCanvas&quot;">Window name.</parameter><parameter type="int&#42;" name="attribList" value="0">Array of int. With this parameter you can set the device context attributes associated to this window.
This array is zero-terminated: it should be set up with constants described in the table above.
If a constant should be followed by a value, put it in the next array position.
For example, the WX_GL_DEPTH_SIZE should be followed by the value that indicates the number of
bits for the depth buffer, so:

<pre>
attribList&#91;index]= WX_GL_DEPTH_SIZE;
attribList&#91;index+1]=32;
and so on.
</pre>
</parameter><parameter type="const wxPalette&amp;" name="palette" value="wxNullPalette">If the window has the palette, it should by pass this value.
Note: palette and WX_GL_RGBA are mutually exclusive.</parameter></parameters><description>

Constructor.

















</description></function></member>
<member class="wxGLCanvas" name="SetCurrent"><function type="void" name="SetCurrent"><description>

Sets this canvas as the current recipient of OpenGL calls.
Each canvas contain an OpenGL device context that has been created during
the creation of this window. So this call sets the current device context
as the target device context for OpenGL operations.

</description></function></member>
<member class="wxGLCanvas" name="SetColour"><function type="void" name="SetColour"><parameters><parameter type="const char&#42;" name=" colour"></parameter></parameters><description>

Sets the current colour for this window, using the wxWindows colour database to find a named colour.

</description></function></member>
<member class="wxGLCanvas" name="SwapBuffers"><function type="void" name="SwapBuffers"><description>

Displays the previous OpenGL commands on the window.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGauge">
<description>
<p class="classdesc">
A gauge is a horizontal or vertical bar which shows a quantity (often time).
There are no user commands for the gauge.</p>
</description>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/gauge.h"/></includes>
<windowstyles>
<style name="wxGA_HORIZONTAL">Creates a horizontal gauge.</style><style name="wxGA_VERTICAL">Creates a vertical gauge.</style><style name="wxGA_PROGRESSBAR">Under Windows 95, creates a horizontal progress bar.</style><style name="wxGA_SMOOTH">Under Windows 95, creates smooth progress bar with one pixel wide update step.</style></windowstyles>
<events>
</events>
<seealso>

<ref target="wxslider">wxSlider</ref><ref target="wxscrollbar">wxScrollBar</ref>

</seealso>
<members>
<member class="wxGauge" name="wxGauge"><function type="" name="wxGauge"><description>

Default constructor.

</description></function>
<function type="" name="wxGauge"><parameters><parameter type="wxWindow&#42; " name="parent">Window parent.</parameter><parameter type="wxWindowID " name="id">Window identifier.</parameter><parameter type="int" name=" range"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Window position.</parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize">Window size.</parameter><parameter type="long" name="style" value="wxGA_HORIZONTAL">Gauge style. See <ref target="wxgauge">wxGauge</ref>.</parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator"></parameter><parameter type="const wxString&amp; " name="name" value="``gauge&quot;">Window name.</parameter></parameters><seealso>

<ref target="wxgaugecreate">wxGauge::Create</ref>

</seealso><remarks>

Under Windows 95, there are two different styles of gauge: normal gauge, and progress bar (when
the <b> wxGA_PROGRESSBAR</b> style is used). A progress bar is always horizontal.

</remarks><description>

Constructor, creating and showing a gauge.

















</description></function></member>
<member class="wxGauge" name="~wxGauge"><function type="" name="~wxGauge"><description>

Destructor, destroying the gauge.

</description></function></member>
<member class="wxGauge" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="int" name=" range"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="wxGA_HORIZONTAL"></parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator"></parameter><parameter type="const wxString&amp; " name="name" value="``gauge&quot;"></parameter></parameters><description>

Creates the gauge for two-step construction. See <ref target="wxgaugeconstr">wxGauge::wxGauge</ref>
for further details.

</description></function></member>
<member class="wxGauge" name="GetBezelFace"><function type="int" name="GetBezelFace" suffix="const"><seealso>

<ref target="wxgaugesetbezelface">wxGauge::SetBezelFace</ref>

</seealso><remarks>

Windows only, not for <b> wxGA_PROGRESSBAR</b>.

</remarks><description>

Returns the width of the 3D bezel face.

</description></function></member>
<member class="wxGauge" name="GetRange"><function type="int" name="GetRange" suffix="const"><seealso>

<ref target="wxgaugesetrange">wxGauge::SetRange</ref>

</seealso><description>

Returns the maximum position of the gauge.

</description></function></member>
<member class="wxGauge" name="GetShadowWidth"><function type="int" name="GetShadowWidth" suffix="const"><seealso>

<ref target="wxgaugesetshadowwidth">wxGauge::SetShadowWidth</ref>

</seealso><remarks>

Windows only, not for <b> wxGA_PROGRESSBAR</b>.

</remarks><description>

Returns the 3D shadow margin width.

</description></function></member>
<member class="wxGauge" name="GetValue"><function type="int" name="GetValue" suffix="const"><seealso>

<ref target="wxgaugesetvalue">wxGauge::SetValue</ref>

</seealso><description>

Returns the current position of the gauge.

</description></function></member>
<member class="wxGauge" name="SetBezelFace"><function type="void" name="SetBezelFace"><parameters><parameter type="int " name="width"></parameter></parameters><seealso>

<ref target="wxgaugegetbezelface">wxGauge::GetBezelFace</ref>

</seealso><remarks>

Windows only, not for <b> wxGA_PROGRESSBAR</b>.

</remarks><description>

Sets the 3D bezel face width.

</description></function></member>
<member class="wxGauge" name="SetRange"><function type="void" name="SetRange"><parameters><parameter type="int " name="range"></parameter></parameters><seealso>

<ref target="wxgaugegetrange">wxGauge::GetRange</ref>

</seealso><description>

Sets the range (maximum value) of the gauge.

</description></function></member>
<member class="wxGauge" name="SetShadowWidth"><function type="void" name="SetShadowWidth"><parameters><parameter type="int " name="width"></parameter></parameters><remarks>

Windows only, not for <b> wxGA_PROGRESSBAR</b>.

</remarks><description>

Sets the 3D shadow width.

</description></function></member>
<member class="wxGauge" name="SetValue"><function type="void" name="SetValue"><parameters><parameter type="int " name="pos">Position for the gauge level.</parameter></parameters><seealso>

<ref target="wxgaugegetvalue">wxGauge::GetValue</ref>


</seealso><description>

Sets the position of the gauge.





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGenericDirCtrl">
<description>
<p class="classdesc">
This control can  be used to place a directory listing (with optional files) on an arbitrary window.</p><p class="classdesc">The control contains a <ref target="wxtreectrl">wxTreeCtrl</ref> window representing the directory
hierarchy, and optionally, a <ref target="wxchoice">wxChoice</ref> window containing a list of filters.</p>
</description>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/dirctrl.h"/></includes>
<windowstyles>
</windowstyles>
<structs>

</structs>
<members>
<member class="wxGenericDirCtrl" name="wxGenericDirCtrl"><function type="" name="wxGenericDirCtrl"><description>

Default constructor.

</description></function>
<function type="" name="wxGenericDirCtrl"><parameters><parameter type="wxWindow&#42; " name="parent">Parent window.</parameter><parameter type="const wxWindowID " name="id" value="-1">Window identifier.</parameter><parameter type="const wxString&amp; " name="dir" value="wxDirDialogDefaultFolderStr">Initial folder.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Position.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Size.</parameter><parameter type="long " name="style" value="wxDIRCTRL_3D_INTERNAL|wxSUNKEN_BORDER">Window style. Please see <ref target="wxgenericdirctrl">wxGenericDirCtrl</ref> for a list of possible styles.</parameter><parameter type="const wxString&amp; " name="filter" value="wxEmptyString">A filter string, using the same syntax as that for <ref target="wxfiledialog">wxFileDialog</ref>. This may be empty if filters
are not being used.

Example: ``All files (&#42;.&#42;)|&#42;.&#42;|JPEG files (&#42;.jpg)|&#42;.jpg&quot;</parameter><parameter type="int " name="defaultFilter" value="0">The zero-indexed default filter setting.</parameter><parameter type="const wxString&amp; " name="name" value="wxTreeCtrlNameStr">The window name.</parameter></parameters><description>

Main constructor.





















</description></function></member>
<member class="wxGenericDirCtrl" name="~wxGenericDirCtrl"><function type="" name="~wxGenericDirCtrl"><description>

Destructor.

</description></function></member>
<member class="wxGenericDirCtrl" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="const wxWindowID " name="id" value="-1"></parameter><parameter type="const wxString&amp; " name="dir" value="wxDirDialogDefaultFolderStr"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long " name="style" value="wxDIRCTRL_3D_INTERNAL|wxSUNKEN_BORDER"></parameter><parameter type="const wxString&amp; " name="filter" value="wxEmptyString"></parameter><parameter type="int " name="defaultFilter" value="0"></parameter><parameter type="const wxString&amp; " name="name" value="wxTreeCtrlNameStr"></parameter></parameters><description>

Create function for two-step construction. See <ref target="wxgenericdirctrlwxgenericdirctrl">wxGenericDirCtrl::wxGenericDirCtrl</ref> for details.

</description></function></member>
<member class="wxGenericDirCtrl" name="Init"><function type="void" name="Init"><description>

Initializes variables.

</description></function></member>
<member class="wxGenericDirCtrl" name="ExpandPath"><function type="bool" name="ExpandPath"><parameters><parameter type="const wxString&amp; " name="path"></parameter></parameters><description>

Tries to expand as much of the given path as possible, so that the filename or directory is visible in the tree control.

</description></function></member>
<member class="wxGenericDirCtrl" name="GetDefaultPath"><function type="wxString" name="GetDefaultPath" suffix="const"><description>

Gets the default path.

</description></function></member>
<member class="wxGenericDirCtrl" name="GetPath"><function type="wxString" name="GetPath" suffix="const"><description>

Gets the currently-selected directory or filename.

</description></function></member>
<member class="wxGenericDirCtrl" name="GetFilePath"><function type="wxString" name="GetFilePath" suffix="const"><description>

Gets selected filename path only (else empty string).

This function doesn't count a directory as a selection.

</description></function></member>
<member class="wxGenericDirCtrl" name="GetFilter"><function type="wxString" name="GetFilter" suffix="const"><description>

Returns the filter string.

</description></function></member>
<member class="wxGenericDirCtrl" name="GetFilterIndex"><function type="int" name="GetFilterIndex" suffix="const"><description>

Returns the current filter index (zero-based).

</description></function></member>
<member class="wxGenericDirCtrl" name="GetFilterListCtrl"><function type="wxDirFilterListCtrl&#42;" name="GetFilterListCtrl" suffix="const"><description>

Returns a pointer to the filter list control (if present).

</description></function></member>
<member class="wxGenericDirCtrl" name="GetRootId"><function type="wxTreeItemId" name="GetRootId"><description>

Returns the root id for the tree control.

</description></function></member>
<member class="wxGenericDirCtrl" name="GetTreeCtrl"><function type="wxTreeCtrl&#42;" name="GetTreeCtrl" suffix="const"><description>

Returns a pointer to the tree control.

</description></function></member>
<member class="wxGenericDirCtrl" name="SetDefaultPath"><function type="void" name="SetDefaultPath"><parameters><parameter type="const wxString&amp; " name="path"></parameter></parameters><description>

Sets the default path.

</description></function></member>
<member class="wxGenericDirCtrl" name="SetFilter"><function type="void" name="SetFilter"><parameters><parameter type="const wxString&amp; " name="filter"></parameter></parameters><description>

Sets the filter string.

</description></function></member>
<member class="wxGenericDirCtrl" name="SetFilterIndex"><function type="void" name="SetFilterIndex"><parameters><parameter type="int " name="n"></parameter></parameters><description>

Sets the current filter index (zero-based).

</description></function></member>
<member class="wxGenericDirCtrl" name="SetPath"><function type="void" name="SetPath"><parameters><parameter type="const wxString&amp; " name="path"></parameter></parameters><description>

Sets the current path.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGenericValidator">
<description>
<p class="classdesc">
wxGenericValidator performs data transfer (but not validation or filtering) for the following
basic controls: wxButton, wxCheckBox, wxListBox, wxStaticText, wxRadioButton, wxRadioBox,
wxChoice, wxComboBox, wxGauge, wxSlider, wxScrollBar, wxSpinButton, wxTextCtrl, wxCheckListBox.</p><p class="classdesc">It checks the type of the window and uses an appropriate type for that window. For example,
wxButton and wxTextCtrl transfer data to and from a wxString variable; wxListBox uses a
wxArrayInt; wxCheckBox uses a bool.</p><p class="classdesc">For more information, please see <ref target="validatoroverview">Validator overview</ref>.</p>
</description>
<parents>
<classref name="wxValidator"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/valgen.h"/></includes>
<seealso>

<ref target="validatoroverview">Validator overview</ref><ref target="wxvalidator">wxValidator</ref>,
<ref target="wxtextvalidator">wxTextValidator</ref>

</seealso>
<members>
<member class="wxGenericValidator" name="wxGenericValidator"><function type="" name="wxGenericValidator"><parameters><parameter type="const wxGenericValidator&amp;" name=" validator"></parameter></parameters><description>

Copy constructor.

</description></function>
<function type="" name="wxGenericValidator"><parameters><parameter type="bool&#42;" name=" valPtr"></parameter></parameters><description>

Constructor taking a bool pointer. This will be used for wxCheckBox and wxRadioButton.

</description></function>
<function type="" name="wxGenericValidator"><parameters><parameter type="wxString&#42;" name=" valPtr"></parameter></parameters><description>

Constructor taking a wxString pointer. This will be used for wxButton, wxComboBox, wxStaticText,
wxTextCtrl.

</description></function>
<function type="" name="wxGenericValidator"><parameters><parameter type="int&#42;" name=" valPtr"></parameter></parameters><description>

Constructor taking an integer pointer. This will be used for wxGauge, wxScrollBar, wxRadioBox, wxSpinButton,
wxChoice.

</description></function>
<function type="" name="wxGenericValidator"><parameters><parameter type="wxArrayInt&#42;" name=" valPtr"></parameter></parameters><description>

Constructor taking a wxArrayInt pointer. This will be used for wxListBox, wxCheckListBox.







</description></function></member>
<member class="wxGenericValidator" name="~wxGenericValidator"><function type="" name="~wxGenericValidator"><description>

Destructor.

</description></function></member>
<member class="wxGenericValidator" name="Clone"><function type="virtual wxValidator&#42;" name="Clone" suffix="const"><description>

Clones the generic validator using the copy constructor.

</description></function></member>
<member class="wxGenericValidator" name="TransferFromWindow"><function type="virtual bool" name="TransferFromWindow"><parameters></parameters><description>

Transfers the value from the window to the appropriate data type.

</description></function></member>
<member class="wxGenericValidator" name="TransferToWindow"><function type="virtual bool" name="TransferToWindow"><parameters></parameters><description>

Transfers the value to the window.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGrid">
<description>
<p class="classdesc">
wxGrid and its related classes are used for displaying and editing tabular
data. They provide a rich set of features for display, editing, and
interacting with a variety of data sources. For simple applications, and to
help you get started, wxGrid is the only class you need to refer to
directly. It will set up default instances of the other classes and manage
them for you. For more complex applications you can derive your own
classes for custom grid views, grid data tables, cell editors and
renderers. The <ref target="gridoverview">wxGrid classes overview</ref> has
examples of simple and more complex applications, explains the
relationship between the various grid classes and has a summary of the
keyboard shortcuts and mouse functions provided by wxGrid.</p><p class="classdesc">wxGrid has been greatly expanded and redesigned for wxWindows 2.2
onwards. If you have been using the old wxGrid class you will probably
want to have a look at the <ref target="gridoverview">wxGrid classes overview</ref> to see
how things have changed. The new grid classes are reasonably backward-compatible
but there are some exceptions. There are also easier ways of doing many things compared to
the previous implementation. </p>
</description>
<parents>
<classref name="wxScrolledWindow"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/grid.h"/></includes>
<windowstyles>
</windowstyles>
<events>
<event name="EVT_GRID_COL_SIZE(func)">The user resized a column by dragging it. Processes a wxEVT_GRID_COL_SIZE.</event><event name="EVT_GRID_ROW_SIZE(func)">The user resized a row by dragging it. Processes a wxEVT_GRID_ROW_SIZE.</event><event name="EVT_GRID_RANGE_SELECT(func)">The user selected a group of contiguous cells. Processes a wxEVT_GRID_RANGE_SELECT.</event><event name="EVT_GRID_EDITOR_CREATED(func)">The editor for a cell was created. Processes a wxEVT_GRID_EDITOR_CREATED.</event></events>
<seealso>

<ref target="gridoverview">wxGrid overview</ref>

</seealso>
<members>
<member class="wxGrid" name=""></member>
<member class="wxGrid" name=""></member>
<member class="Selection functions}

\helpref{wxGrid" name="ClearSelection"></member>
<member class="wxGrid" name="wxGrid"><function type="" name="wxGrid"><description>

Default constructor

</description></function>
<function type="" name="wxGrid"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long " name="style" value="wxWANTS_CHARS"></parameter><parameter type="const wxString&amp; " name="name" value="wxPanelNameStr"></parameter></parameters><description>

Constructor to create a grid object. Call either <ref target="wxgridcreategrid">wxGrid::CreateGrid</ref> or 
<ref target="wxgridsettable">wxGrid::SetTable</ref> directly after this to initialize the grid before using
it. 

</description></function></member>
<member class="wxGrid" name="~wxGrid"><function type="" name="~wxGrid"><description>

Destructor. This will also destroy the associated grid table unless you passed a table
object to the grid and specified that the grid should not take ownership of the
table (see <ref target="wxgridsettable">wxGrid::SetTable</ref>). 

</description></function></member>
<member class="wxGrid" name="AppendCols"><function type="bool" name="AppendCols"><parameters><parameter type="int " name="numCols" value="1"></parameter><parameter type="bool " name="updateLabels" value="true"></parameter></parameters><description>

Appends one or more new columns to the right of the grid and returns true if
successful. The updateLabels argument is not used at present.

If you are using a derived grid table class you will need to override 
<ref target="wxgridtablebaseappendcols">wxGridTableBase::AppendCols</ref>. See 
<ref target="wxgridinsertcols">wxGrid::InsertCols</ref> for further information. 

</description></function></member>
<member class="wxGrid" name="AppendRows"><function type="bool" name="AppendRows"><parameters><parameter type="int " name="numRows" value="1"></parameter><parameter type="bool " name="updateLabels" value="true"></parameter></parameters><description>

Appends one or more new rows to the bottom of the grid and returns true if
successful. The updateLabels argument is not used at present.

If you are using a derived grid table class you will need to override 
<ref target="wxgridtablebaseappendrows">wxGridTableBase::AppendRows</ref>. See 
<ref target="wxgridinsertrows">wxGrid::InsertRows</ref> for further information. 

</description></function></member>
<member class="wxGrid" name="AutoSize"><function type="void" name="AutoSize"><note><br/>
wxGrid sets up arrays to store individual row and column sizes when non-default sizes are used.
The memory requirements for this could become prohibitive if your grid is very large. 

</note><description>

Automatically sets the height and width of all rows and columns to fit their contents.

</description></function></member>
<member class="wxGrid" name="AutoSizeColumn"><function type="void" name="AutoSizeColumn"><parameters><parameter type="int " name="col"></parameter><parameter type="bool " name="setAsMin" value="true"></parameter></parameters><note><br/>
wxGrid sets up arrays to store individual row and column sizes when non-default sizes are used.
The memory requirements for this could become prohibitive if your grid is very large. 

</note><description>

Automatically sizes the column to fit its contents. If setAsMin is true the calculated width will
also be set as the minimal width for the column.

</description></function></member>
<member class="wxGrid" name="AutoSizeColumns"><function type="void" name="AutoSizeColumns"><parameters><parameter type="bool " name="setAsMin" value="true"></parameter></parameters><note><br/>
wxGrid sets up arrays to store individual row and column sizes when non-default sizes are used.
The memory requirements for this could become prohibitive if your grid is very large. 

</note><description>

Automatically sizes all columns to fit their contents. If setAsMin is true the calculated widths will
also be set as the minimal widths for the columns.

</description></function></member>
<member class="wxGrid" name="AutoSizeRow"><function type="void" name="AutoSizeRow"><parameters><parameter type="int " name="row"></parameter><parameter type="bool " name="setAsMin" value="true"></parameter></parameters><note><br/>
wxGrid sets up arrays to store individual row and column sizes when non-default sizes are used.
The memory requirements for this could become prohibitive if your grid is very large. 

</note><description>

Automatically sizes the row to fit its contents. If setAsMin is true the calculated height will
also be set as the minimal height for the row.

</description></function></member>
<member class="wxGrid" name="AutoSizeRows"><function type="void" name="AutoSizeRows"><parameters><parameter type="bool " name="setAsMin" value="true"></parameter></parameters><note><br/>
wxGrid sets up arrays to store individual row and column sizes when non-default sizes are used.
The memory requirements for this could become prohibitive if your grid is very large. 

</note><description>

Automatically sizes all rows to fit their contents. If setAsMin is true the calculated heights will
also be set as the minimal heights for the rows.

</description></function></member>
<member class="wxGrid" name="BeginBatch"><function type="void" name="BeginBatch"><description>

Increments the grid's batch count. When the count is greater than zero repainting of
the grid is suppressed. Each call to BeginBatch must be matched by a later call to 
<ref target="wxgridendbatch">wxGrid::EndBatch</ref>. Code that does a lot of grid
modification can be enclosed between BeginBatch and EndBatch calls to avoid
screen flicker. The final EndBatch will cause the grid to be repainted.

</description></function></member>
<member class="wxGrid" name="CanDragColSize"><function type="bool" name="CanDragColSize"><description>

Returns true if columns can be resized by dragging with the mouse. Columns can be resized
by dragging the edges of their labels. If grid line dragging is enabled they can also be
resized by dragging the right edge of the column in the grid cell area 
(see <ref target="wxgridenabledraggridsize">wxGrid::EnableDragGridSize</ref>).

</description></function></member>
<member class="wxGrid" name="CanDragRowSize"><function type="bool" name="CanDragRowSize"><description>

Returns true if rows can be resized by dragging with the mouse. Rows can be resized
by dragging the edges of their labels. If grid line dragging is enabled they can also be
resized by dragging the lower edge of the row in the grid cell area 
(see <ref target="wxgridenabledraggridsize">wxGrid::EnableDragGridSize</ref>).

</description></function></member>
<member class="wxGrid" name="CanDragGridSize"><function type="bool" name="CanDragGridSize"><description>

Return true if the dragging of grid lines to resize rows and columns is enabled or false otherwise.

</description></function></member>
<member class="wxGrid" name="CanEnableCellControl"><function type="bool" name="CanEnableCellControl" suffix="const"><description>

Returns true if the in-place edit control for the current grid cell can be used and
false otherwise (e.g. if the current cell is read-only).

</description></function></member>
<member class="wxGrid" name="CellToRect"><function type="wxRect" name="CellToRect"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

</description></function>
<function type="wxRect" name="CellToRect"><parameters><parameter type="const wxGridCellCoords&amp; " name="coords"></parameter></parameters><description>

Return the rectangle corresponding to the grid cell's size and position in logical
coordinates.

</description></function></member>
<member class="wxGrid" name="ClearGrid"><function type="void" name="ClearGrid"><description>

Clears all data in the underlying grid table and repaints the grid. The table is not deleted by
this function. If you are using a derived table class then you need to override 
<ref target="wxgridtablebaseclear">wxGridTableBase::Clear</ref> for this function to have any effect.

</description></function></member>
<member class="wxGrid" name="ClearSelection"><function type="void" name="ClearSelection"><description>

Deselects all cells that are currently selected.

</description></function></member>
<member class="wxGrid" name="CreateGrid"><function type="bool" name="CreateGrid"><parameters><parameter type="int " name="numRows"></parameter><parameter type="int " name="numCols"></parameter><parameter type="wxGrid::wxGridSelectionModes " name="selmode" value="wxGrid::wxGridSelectCells"></parameter></parameters><description>

Creates a grid with the specified initial number of rows and columns.
Call this directly after the grid constructor. When you use this
function wxGrid will create and manage a simple table of string values
for you. All of the grid data will be stored in memory.

For applications with more complex data types or relationships, or for
dealing with very large datasets, you should derive your own grid table
class and pass a table object to the grid with <ref target="wxgridsettable">wxGrid::SetTable</ref>. 

</description></function></member>
<member class="wxGrid" name="DeleteCols"><function type="bool" name="DeleteCols"><parameters><parameter type="int " name="pos" value="0"></parameter><parameter type="int " name="numCols" value="1"></parameter><parameter type="bool " name="updateLabels" value="true"></parameter></parameters><description>

Deletes one or more columns from a grid starting at the specified position and returns
true if successful. The updateLabels argument is not used at present.

If you are using a derived grid table class you will need to override 
<ref target="wxgridtablebasedeletecols">wxGridTableBase::DeleteCols</ref>. See 
<ref target="wxgridinsertcols">wxGrid::InsertCols</ref> for further information.

</description></function></member>
<member class="wxGrid" name="DeleteRows"><function type="bool" name="DeleteRows"><parameters><parameter type="int " name="pos" value="0"></parameter><parameter type="int " name="numRows" value="1"></parameter><parameter type="bool " name="updateLabels" value="true"></parameter></parameters><description>

Deletes one or more rows from a grid starting at the specified position and returns
true if successful. The updateLabels argument is not used at present.

If you are using a derived grid table class you will need to override 
<ref target="wxgridtablebasedeleterows">wxGridTableBase::DeleteRows</ref>. See 
<ref target="wxgridinsertrows">wxGrid::InsertRows</ref> for further information.

</description></function></member>
<member class="wxGrid" name="DisableCellEditControl"><function type="void" name="DisableCellEditControl"><description>

Disables in-place editing of grid cells. 
Equivalent to calling EnableCellEditControl(false).

</description></function></member>
<member class="wxGrid" name="DisableDragColSize"><function type="void" name="DisableDragColSize"><description>

Disables column sizing by dragging with the mouse. Equivalent to passing false to 
<ref target="wxgridenabledragcolsize">wxGrid::EnableDragColSize</ref>. 

</description></function></member>
<member class="wxGrid" name="DisableDragGridSize"><function type="void" name="DisableDragGridSize"><description>

Disable mouse dragging of grid lines to resize rows and columns. Equivalent to passing
false to <ref target="wxgridenabledraggridsize">wxGrid::EnableDragGridSize</ref>

</description></function></member>
<member class="wxGrid" name="DisableDragRowSize"><function type="void" name="DisableDragRowSize"><description>

Disables row sizing by dragging with the mouse. Equivalent to passing false to 
<ref target="wxgridenabledragrowsize">wxGrid::EnableDragRowSize</ref>. 

</description></function></member>
<member class="wxGrid" name="EnableCellEditControl"><function type="void" name="EnableCellEditControl"><parameters><parameter type="bool " name="enable" value="true"></parameter></parameters><description>

Enables or disables in-place editing of grid cell data. The grid will issue either a
wxEVT_GRID_EDITOR_SHOWN or wxEVT_GRID_EDITOR_HIDDEN event.

</description></function></member>
<member class="wxGrid" name="EnableDragColSize"><function type="void" name="EnableDragColSize"><parameters><parameter type="bool " name="enable" value="true"></parameter></parameters><description>

Enables or disables column sizing by dragging with the mouse.

</description></function></member>
<member class="wxGrid" name="EnableDragGridSize"><function type="void" name="EnableDragGridSize"><parameters><parameter type="bool " name="enable" value="true"></parameter></parameters><description>

Enables or disables row and column resizing by dragging gridlines with the mouse.

</description></function></member>
<member class="wxGrid" name="EnableDragRowSize"><function type="void" name="EnableDragRowSize"><parameters><parameter type="bool " name="enable" value="true"></parameter></parameters><description>

Enables or disables row sizing by dragging with the mouse.

</description></function></member>
<member class="wxGrid" name="EnableEditing"><function type="void" name="EnableEditing"><parameters><parameter type="bool " name="edit"></parameter></parameters><description>

If the edit argument is false this function sets the whole grid as read-only. If the
argument is true the grid is set to the default state where cells may be editable. In the
default state you can set single grid cells and whole rows and columns to be editable or
read-only via 
<ref target="wxgridcellattrsetreadonly">wxGridCellAttribute::SetReadOnly</ref>. For single
cells you can also use the shortcut function 
<ref target="wxgridsetreadonly">wxGrid::SetReadOnly</ref>. 

For more information about controlling grid cell attributes see the 
<ref target="wxgridcellattr">wxGridCellAttr</ref> cell attribute class and the 
<ref target="gridoverview">wxGrid classes overview</ref>.

</description></function></member>
<member class="wxGrid" name="EnableGridLines"><function type="void" name="EnableGridLines"><parameters><parameter type="bool " name="enable" value="true"></parameter></parameters><description>

Turns the drawing of grid lines on or off.

</description></function></member>
<member class="wxGrid" name="EndBatch"><function type="void" name="EndBatch"><description>

Decrements the grid's batch count. When the count is greater than zero repainting of
the grid is suppressed. Each previous call to 
<ref target="wxgridbeginbatch">wxGrid::BeginBatch</ref> must be matched by a later call to
EndBatch. Code that does a lot of grid modification can be enclosed between
BeginBatch and EndBatch calls to avoid screen flicker. The final EndBatch will
cause the grid to be repainted.

</description></function></member>
<member class="wxGrid" name="ForceRefresh"><function type="void" name="ForceRefresh"><description>

Causes immediate repainting of the grid. Use this instead of the usual wxWindow::Refresh.

</description></function></member>
<member class="wxGrid" name="GetBatchCount"><function type="int" name="GetBatchCount"><description>

Returns the number of times that <ref target="wxgridbeginbatch">wxGrid::BeginBatch</ref> has been called
without (yet) matching calls to <ref target="wxgridendbatch">wxGrid::EndBatch</ref>. While
the grid's batch count is greater than zero the display will not be updated.

</description></function></member>
<member class="wxGrid" name="GetCellAlignment"><function type="void" name="GetCellAlignment"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="int&#42; " name="horiz"></parameter><parameter type="int&#42; " name="vert"></parameter></parameters><description>

Sets the arguments to the horizontal and vertical text alignment values for the
grid cell at the specified location.

Horizontal alignment will be one of wxALIGN_LEFT, wxALIGN_CENTRE or wxALIGN_RIGHT. <br/>
Vertical alignment will be one of wxALIGN_TOP, wxALIGN_CENTRE or wxALIGN_BOTTOM.

\perlnote{This method only takes the parameters <tt> row</tt> and <tt> col</tt> and
returns a 2-element list <tt> ( horiz, vert )</tt>.}

</description></function></member>
<member class="wxGrid" name="GetCellBackgroundColour"><function type="wxColour" name="GetCellBackgroundColour"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

Returns the background colour of the cell at the specified location.

</description></function></member>
<member class="wxGrid" name="GetCellEditor"><function type="wxGridCellEditor&#42;" name="GetCellEditor"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

Returns a pointer to the editor for the cell at the specified location.

See <ref target="wxgridcelleditor">wxGridCellEditor</ref> and
the <ref target="gridoverview">wxGrid overview</ref> for more information about cell editors and renderers.

</description></function></member>
<member class="wxGrid" name="GetCellFont"><function type="wxFont" name="GetCellFont"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

Returns the font for text in the grid cell at the specified location.

</description></function></member>
<member class="wxGrid" name="GetCellRenderer"><function type="wxGridCellRenderer&#42;" name="GetCellRenderer"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

Returns a pointer to the renderer for the grid cell at the specified location.

See <ref target="wxgridcellrenderer">wxGridCellRenderer</ref> and
the <ref target="gridoverview">wxGrid overview</ref> for more information about cell editors and renderers.

</description></function></member>
<member class="wxGrid" name="GetCellTextColour"><function type="wxColour" name="GetCellTextColour"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

Returns the text colour for the grid cell at the specified location.

</description></function></member>
<member class="wxGrid" name="GetCellValue"><function type="wxString" name="GetCellValue"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

</description></function>
<function type="wxString" name="GetCellValue"><parameters><parameter type="const wxGridCellCoords&amp;" name="coords"></parameter></parameters><description>

Returns the string contained in the cell at the specified location. For simple applications where a
grid object automatically uses a default grid table of string values you use this function together
with <ref target="wxgridsetcellvalue">wxGrid::SetCellValue</ref> to access cell values. 

For more complex applications where you have derived your own grid table class that contains
various data types (e.g. numeric, boolean or user-defined custom types) then you only use this
function for those cells that contain string values. 

See <ref target="wxgridtablebasecangetvalueas">wxGridTableBase::CanGetValueAs</ref>
and the <ref target="gridoverview">wxGrid overview</ref> for more information.

</description></function></member>
<member class="wxGrid" name="GetColLabelAlignment"><function type="void" name="GetColLabelAlignment"><parameters><parameter type="int&#42; " name="horiz"></parameter><parameter type="int&#42; " name="vert"></parameter></parameters><description>

Sets the arguments to the current column label alignment values.

Horizontal alignment will be one of wxLEFT, wxCENTRE or wxRIGHT. <br/>
Vertical alignment will be one of wxTOP, wxCENTRE or wxBOTTOM.

\perlnote{This method takes no parameters and
returns a 2-element list <tt> ( horiz, vert )</tt>.}

</description></function></member>
<member class="wxGrid" name="GetColLabelSize"><function type="int" name="GetColLabelSize"><description>

Returns the current height of the column labels.

</description></function></member>
<member class="wxGrid" name="GetColLabelValue"><function type="wxString" name="GetColLabelValue"><parameters><parameter type="int " name="col"></parameter></parameters><description>

Returns the specified column label. The default grid table class provides column labels of
the form A,B...Z,AA,AB...ZZ,AAA... If you are using a custom grid table you can override 
<ref target="wxgridtablebasegetcollabelvalue">wxGridTableBase::GetColLabelValue</ref> to provide
your own labels. 

</description></function></member>
<member class="wxGrid" name="GetColSize"><function type="int" name="GetColSize"><parameters><parameter type="int " name="col"></parameter></parameters><description>

Returns the width of the specified column.

</description></function></member>
<member class="wxGrid" name="GetDefaultCellAlignment"><function type="void" name="GetDefaultCellAlignment"><parameters><parameter type="int&#42; " name="horiz"></parameter><parameter type="int&#42; " name="vert"></parameter></parameters><description>

Sets the arguments to the current default horizontal and vertical text alignment
values.

Horizontal alignment will be one of wxALIGN_LEFT, wxALIGN_CENTRE or wxALIGN_RIGHT. <br/>
Vertical alignment will be one of wxALIGN_TOP, wxALIGN_CENTRE or wxALIGN_BOTTOM.

</description></function></member>
<member class="wxGrid" name="GetDefaultCellBackgroundColour"><function type="wxColour" name="GetDefaultCellBackgroundColour"><description>

Returns the current default background colour for grid cells.

</description></function></member>
<member class="wxGrid" name="GetDefaultCellFont"><function type="wxFont" name="GetDefaultCellFont"><description>

Returns the current default font for grid cell text.

</description></function></member>
<member class="wxGrid" name="GetDefaultCellTextColour"><function type="wxColour" name="GetDefaultCellTextColour"><description>

Returns the current default colour for grid cell text.

</description></function></member>
<member class="wxGrid" name="GetDefaultColLabelSize"><function type="int" name="GetDefaultColLabelSize"><description>

Returns the default height for column labels.

</description></function></member>
<member class="wxGrid" name="GetDefaultColSize"><function type="int" name="GetDefaultColSize"><description>

Returns the current default width for grid columns.

</description></function></member>
<member class="wxGrid" name="GetDefaultEditor"><function type="wxGridCellEditor&#42;" name="GetDefaultEditor" suffix="const"><description>

Returns a pointer to the current default grid cell editor.

See <ref target="wxgridcelleditor">wxGridCellEditor</ref> and
the <ref target="gridoverview">wxGrid overview</ref> for more information about cell editors and renderers.

</description></function></member>
<member class="wxGrid" name="GetDefaultRenderer"><function type="wxGridCellRenderer&#42;" name="GetDefaultRenderer" suffix="const"><description>

Returns a pointer to the current default grid cell renderer.

See <ref target="wxgridcellrenderer">wxGridCellRenderer</ref> and
the <ref target="gridoverview">wxGrid overview</ref> for more information about cell editors and renderers.

</description></function></member>
<member class="wxGrid" name="GetDefaultRowLabelSize"><function type="int" name="GetDefaultRowLabelSize"><description>

Returns the default width for the row labels.

</description></function></member>
<member class="wxGrid" name="GetDefaultRowSize"><function type="int" name="GetDefaultRowSize"><description>

Returns the current default height for grid rows.

</description></function></member>
<member class="wxGrid" name="GetGridCursorCol"><function type="int" name="GetGridCursorCol"><description>

Returns the current grid cell column position.

</description></function></member>
<member class="wxGrid" name="GetGridCursorRow"><function type="int" name="GetGridCursorRow"><description>

Returns the current grid cell row position.

</description></function></member>
<member class="wxGrid" name="GetGridLineColour"><function type="wxColour" name="GetGridLineColour"><description>

Returns the colour used for grid lines.

</description></function></member>
<member class="wxGrid" name="GridLinesEnabled"><function type="bool" name="GridLinesEnabled"><description>

Returns true if drawing of grid lines is turned on, false otherwise.

</description></function></member>
<member class="wxGrid" name="GetLabelBackgroundColour"><function type="wxColour" name="GetLabelBackgroundColour"><description>

Returns the colour used for the background of row and column labels.

</description></function></member>
<member class="wxGrid" name="GetLabelFont"><function type="wxFont" name="GetLabelFont"><description>

Returns the font used for row and column labels.

</description></function></member>
<member class="wxGrid" name="GetLabelTextColour"><function type="wxColour" name="GetLabelTextColour"><description>

Returns the colour used for row and column label text.

</description></function></member>
<member class="wxGrid" name="GetNumberCols"><function type="int" name="GetNumberCols"><description>

Returns the total number of grid columns (actually the number of columns in the underlying grid
table).

</description></function></member>
<member class="wxGrid" name="GetNumberRows"><function type="int" name="GetNumberRows"><description>

Returns the total number of grid rows (actually the number of rows in the underlying grid table).

</description></function></member>
<member class="wxGrid" name="GetRowLabelAlignment"><function type="void" name="GetRowLabelAlignment"><parameters><parameter type="int&#42; " name="horiz"></parameter><parameter type="int&#42; " name="vert"></parameter></parameters><description>

Sets the arguments to the current row label alignment values.

Horizontal alignment will be one of wxLEFT, wxCENTRE or wxRIGHT. <br/>
Vertical alignment will be one of wxTOP, wxCENTRE or wxBOTTOM.

\perlnote{This method takes no parameters and
returns a 2-element list <tt> ( horiz, vert )</tt>.}

</description></function></member>
<member class="wxGrid" name="GetRowLabelSize"><function type="int" name="GetRowLabelSize"><description>

Returns the current width of the row labels.

</description></function></member>
<member class="wxGrid" name="GetRowLabelValue"><function type="wxString" name="GetRowLabelValue"><parameters><parameter type="int " name="row"></parameter></parameters><description>

Returns the specified row label. The default grid table class provides numeric row labels.
If you are using a custom grid table you can override 
<ref target="wxgridtablebasegetcollabelvalue">wxGridTableBase::GetRowLabelValue</ref> to provide
your own labels. 

</description></function></member>
<member class="wxGrid" name="GetRowSize"><function type="int" name="GetRowSize"><parameters><parameter type="int " name="row"></parameter></parameters><description>

Returns the height of the specified row.

</description></function></member>
<member class="wxGrid" name="GetSelectionMode"><function type="wxGrid::wxGridSelectionModes" name="GetSelectionMode" suffix="const"><description>

Returns the current selection mode, see <ref target="wxgridsetselectionmode">wxGrid::SetSelectionMode</ref>.

</description></function></member>
<member class="wxGrid" name="GetSelectedCells"><function type="wxGridCellCoordsArray" name="GetSelectedCells" suffix="const"><description>

Returns an array of singly selected cells.

</description></function></member>
<member class="wxGrid" name="GetSelectedCols"><function type="wxArrayInt" name="GetSelectedCols" suffix="const"><description>

Returns an array of selected cols.

</description></function></member>
<member class="wxGrid" name="GetSelectedRows"><function type="wxArrayInt" name="GetSelectedRows" suffix="const"><description>

Returns an array of selected rows.

</description></function></member>
<member class="wxGrid" name="GetSelectionBlockTopLeft"><function type="wxGridCellCoordsArray" name="GetSelectionBlockTopLeft" suffix="const"><description>

Returns an array of the top left corners of blocks of selected cells, 
see <ref target="wxgridgetselectionblockbottomright">wxGrid::GetSelectionBlockBottomRight</ref>.

</description></function></member>
<member class="wxGrid" name="GetSelectionBlockBottomRight"><function type="wxGridCellCoordsArray" name="GetSelectionBlockBottomRight" suffix="const"><description>

Returns an array of the bottom right corners of blocks of selected cells,
see <ref target="wxgridgetselectionblocktopleft">wxGrid::GetSelectionBlockTopLeft</ref>.

</description></function></member>
<member class="wxGrid" name="GetTable"><function type="wxGridTableBase &#42;" name="GetTable" suffix="const"><description>

Returns a base pointer to the current table object.

</description></function></member>
<member class="wxGrid" name="HideCellEditControl"><function type="void" name="HideCellEditControl"><description>

Hides the in-place cell edit control.

</description></function></member>
<member class="wxGrid" name="InsertCols"><function type="bool" name="InsertCols"><parameters><parameter type="int " name="pos" value="0"></parameter><parameter type="int " name="numCols" value="1"></parameter><parameter type="bool " name="updateLabels" value="true"></parameter></parameters><description>

Inserts one or more new columns into a grid with the first new column at the
specified position and returns true if successful. The updateLabels argument is not
used at present. 

The sequence of actions begins with the grid object requesting the underlying grid
table to insert new columns. If this is successful the table notifies the grid and the
grid updates the display. For a default grid (one where you have called 
<ref target="wxgridcreategrid">wxGrid::CreateGrid</ref>) this process is automatic. If you are
using a custom grid table (specified with <ref target="wxgridsettable">wxGrid::SetTable</ref>) 
then you must override 
<ref target="wxgridtablebaseinsertcols">wxGridTableBase::InsertCols</ref> in your derived
table class.

</description></function></member>
<member class="wxGrid" name="InsertRows"><function type="bool" name="InsertRows"><parameters><parameter type="int " name="pos" value="0"></parameter><parameter type="int " name="numRows" value="1"></parameter><parameter type="bool " name="updateLabels" value="true"></parameter></parameters><description>

Inserts one or more new rows into a grid with the first new row at the specified
position and returns true if successful. The updateLabels argument is not used at
present. 

The sequence of actions begins with the grid object requesting the underlying grid
table to insert new rows. If this is successful the table notifies the grid and the
grid updates the display. For a default grid (one where you have called 
<ref target="wxgridcreategrid">wxGrid::CreateGrid</ref>) this process is automatic. If you are
using a custom grid table (specified with <ref target="wxgridsettable">wxGrid::SetTable</ref>) 
then you must override 
<ref target="wxgridtablebaseinsertrows">wxGridTableBase::InsertRows</ref> in your derived
table class.

</description></function></member>
<member class="wxGrid" name="IsCellEditControlEnabled"><function type="bool" name="IsCellEditControlEnabled" suffix="const"><description>

Returns true if the in-place edit control is currently enabled.

</description></function></member>
<member class="wxGrid" name="IsCurrentCellReadOnly"><function type="bool" name="IsCurrentCellReadOnly" suffix="const"><description>

Returns true if the current cell has been set to read-only
(see <ref target="wxgridsetreadonly">wxGrid::SetReadOnly</ref>).

</description></function></member>
<member class="wxGrid" name="IsEditable"><function type="bool" name="IsEditable"><description>

Returns false if the whole grid has been set as read-only or true otherwise.
See <ref target="wxgridenableediting">wxGrid::EnableEditing</ref> for more information about
controlling the editing status of grid cells.

</description></function></member>
<member class="wxGrid" name="IsInSelection"><function type="bool" name="IsInSelection" suffix="const"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

</description></function>
<function type="bool" name="IsInSelection" suffix="const"><parameters><parameter type="const wxGridCellCoords&amp; " name="coords"></parameter></parameters><description>

Is this cell currently selected.

</description></function></member>
<member class="wxGrid" name="IsReadOnly"><function type="bool" name="IsReadOnly" suffix="const"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

Returns true if the cell at the specified location can't be edited.
See also <ref target="wxgridisreadonly">wxGrid::IsReadOnly</ref>.

</description></function></member>
<member class="wxGrid" name="IsSelection"><function type="bool" name="IsSelection"><description>

Returns true if there are currently rows, columns or blocks of cells selected.

</description></function></member>
<member class="wxGrid" name="IsVisible"><function type="bool" name="IsVisible"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="bool " name="wholeCellVisible" value="true"></parameter></parameters><description>

</description></function>
<function type="bool" name="IsVisible"><parameters><parameter type="const wxGridCellCoords&amp; " name="coords"></parameter><parameter type="bool " name="wholeCellVisible" value="true"></parameter></parameters><description>

Returns true if a cell is either wholly visible (the default) or at least partially
visible in the grid window.

</description></function></member>
<member class="wxGrid" name="MakeCellVisible"><function type="void" name="MakeCellVisible"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

</description></function>
<function type="void" name="MakeCellVisible"><parameters><parameter type="const wxGridCellCoords&amp; " name="coords"></parameter></parameters><description>

Brings the specified cell into the visible grid cell area with minimal scrolling. Does
nothing if the cell is already visible. 

</description></function></member>
<member class="wxGrid" name="MoveCursorDown"><function type="bool" name="MoveCursorDown"><parameters><parameter type="bool " name="expandSelection"></parameter></parameters><description>

Moves the grid cursor down by one row. If a block of cells was previously selected it
will expand if the argument is true or be cleared if the argument is false.

\wxheading{Keyboard}<br/>
This function is called for Down cursor key presses or Shift+Down to expand a selection.

</description></function></member>
<member class="wxGrid" name="MoveCursorLeft"><function type="bool" name="MoveCursorLeft"><parameters><parameter type="bool " name="expandSelection"></parameter></parameters><description>

Moves the grid cursor left by one column. If a block of cells was previously selected it
will expand if the argument is true or be cleared if the argument is false.

\wxheading{Keyboard}<br/>
This function is called for Left cursor key presses or Shift+Left to expand a selection.

</description></function></member>
<member class="wxGrid" name="MoveCursorRight"><function type="bool" name="MoveCursorRight"><parameters><parameter type="bool " name="expandSelection"></parameter></parameters><description>

Moves the grid cursor right by one column. If a block of cells was previously selected it
will expand if the argument is true or be cleared if the argument is false.

\wxheading{Keyboard}<br/>
This function is called for Right cursor key presses or Shift+Right to expand a selection.

</description></function></member>
<member class="wxGrid" name="MoveCursorUp"><function type="bool" name="MoveCursorUp"><parameters><parameter type="bool " name="expandSelection"></parameter></parameters><description>

Moves the grid cursor up by one row. If a block of cells was previously selected it
will expand if the argument is true or be cleared if the argument is false.

\wxheading{Keyboard}<br/>
This function is called for Up cursor key presses or Shift+Up to expand a selection.

</description></function></member>
<member class="wxGrid" name="MoveCursorDownBlock"><function type="bool" name="MoveCursorDownBlock"><parameters><parameter type="bool " name="expandSelection"></parameter></parameters><description>

Moves the grid cursor down in the current column such that it skips to the beginning or
end of a block of non-empty cells. If a block of cells was previously selected it
will expand if the argument is true or be cleared if the argument is false.

\wxheading{Keyboard}<br/>
This function is called for the Ctrl+Down key combination. Shift+Ctrl+Down expands a selection.

</description></function></member>
<member class="wxGrid" name="MoveCursorLeftBlock"><function type="bool" name="MoveCursorLeftBlock"><parameters><parameter type="bool " name="expandSelection"></parameter></parameters><description>

Moves the grid cursor left in the current row such that it skips to the beginning or
end of a block of non-empty cells. If a block of cells was previously selected it
will expand if the argument is true or be cleared if the argument is false.

\wxheading{Keyboard}<br/>
This function is called for the Ctrl+Left key combination. Shift+Ctrl+left expands a selection.

</description></function></member>
<member class="wxGrid" name="MoveCursorRightBlock"><function type="bool" name="MoveCursorRightBlock"><parameters><parameter type="bool " name="expandSelection"></parameter></parameters><description>

Moves the grid cursor right in the current row such that it skips to the beginning or
end of a block of non-empty cells. If a block of cells was previously selected it
will expand if the argument is true or be cleared if the argument is false.

\wxheading{Keyboard}<br/>
This function is called for the Ctrl+Right key combination. Shift+Ctrl+Right expands a selection.

</description></function></member>
<member class="wxGrid" name="MoveCursorUpBlock"><function type="bool" name="MoveCursorUpBlock"><parameters><parameter type="bool " name="expandSelection"></parameter></parameters><description>

Moves the grid cursor up in the current column such that it skips to the beginning or
end of a block of non-empty cells. If a block of cells was previously selected it
will expand if the argument is true or be cleared if the argument is false.

\wxheading{Keyboard}<br/>
This function is called for the Ctrl+Up key combination. Shift+Ctrl+Up expands a selection.

</description></function></member>
<member class="wxGrid" name="MovePageDown"><function type="bool" name="MovePageDown"><description>

Moves the grid cursor down by some number of rows so that the previous bottom visible row
becomes the top visible row.

\wxheading{Keyboard}<br/>
This function is called for PgDn keypresses.

</description></function></member>
<member class="wxGrid" name="MovePageUp"><function type="bool" name="MovePageUp"><description>

Moves the grid cursor up by some number of rows so that the previous top visible row
becomes the bottom visible row.

\wxheading{Keyboard}<br/>
This function is called for PgUp keypresses.

</description></function></member>
<member class="wxGrid" name="SaveEditControlValue"><function type="void" name="SaveEditControlValue"><description>

Sets the value of the current grid cell to the current in-place edit control value.
This is called automatically when the grid cursor moves from the current cell to a
new cell. It is also a good idea to call this function when closing a grid since
any edits to the final cell location will not be saved otherwise.

</description></function></member>
<member class="wxGrid" name="SelectAll"><function type="void" name="SelectAll"><description>

Selects all cells in the grid.

</description></function></member>
<member class="wxGrid" name="SelectBlock"><function type="void" name="SelectBlock"><parameters><parameter type="int " name="topRow"></parameter><parameter type="int " name="leftCol"></parameter><parameter type="int " name="bottomRow"></parameter><parameter type="int " name="rightCol"></parameter><parameter type="bool " name="addToSelected" value="false"></parameter></parameters><description>

</description></function>
<function type="void" name="SelectBlock"><parameters><parameter type="const wxGridCellCoords&amp; " name="topLeft"></parameter><parameter type="const wxGridCellCoords&amp; " name="bottomRight"></parameter><parameter type="bool " name="addToSelected" value="false"></parameter></parameters><description>

Selects a rectangular block of cells. If addToSelected is false then any existing selection will be
deselected; if true the column will be added to the existing selection. 

</description></function></member>
<member class="wxGrid" name="SelectCol"><function type="void" name="SelectCol"><parameters><parameter type="int " name="col"></parameter><parameter type="bool " name="addToSelected" value="false"></parameter></parameters><description>

Selects the specified column. If addToSelected is false then any existing selection will be
deselected; if true the column will be added to the existing selection.

</description></function></member>
<member class="wxGrid" name="SelectRow"><function type="void" name="SelectRow"><parameters><parameter type="int " name="row"></parameter><parameter type="bool " name="addToSelected" value="false"></parameter></parameters><description>

Selects the specified row. If addToSelected is false then any existing selection will be
deselected; if true the row will be added to the existing selection.

</description></function></member>
<member class="wxGrid" name="SetCellAlignment"><function type="void" name="SetCellAlignment"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="int " name="horiz"></parameter><parameter type="int " name="vert"></parameter></parameters><description>

</description></function>
<function type="void" name="SetCellAlignment"><parameters><parameter type="int " name="align"></parameter><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

</description></function>
<function type="void" name="SetCellAlignment"><parameters><parameter type="int " name="align"></parameter></parameters><description>

Sets the horizontal and vertical alignment for grid cell text at the specified location.

Horizontal alignment should be one of wxALIGN_LEFT, wxALIGN_CENTRE or wxALIGN_RIGHT. <br/>
Vertical alignment should be one of wxALIGN_TOP, wxALIGN_CENTRE or wxALIGN_BOTTOM.

</description></function></member>
<member class="wxGrid" name="SetCellEditor"><function type="void" name="SetCellEditor"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="wxGridCellEditor&#42; " name="editor"></parameter></parameters><description>

Sets the editor for the grid cell at the specified location. 
The grid will take ownership of the pointer.

See <ref target="wxgridcelleditor">wxGridCellEditor</ref> and
the <ref target="gridoverview">wxGrid overview</ref> for more information about cell editors and renderers.

</description></function></member>
<member class="wxGrid" name="SetCellFont"><function type="void" name="SetCellFont"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="const wxFont&amp;" name=" font"></parameter></parameters><description>

Sets the font for text in the grid cell at the specified location.

</description></function></member>
<member class="wxGrid" name="SetCellRenderer"><function type="void" name="SetCellRenderer"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="wxGridCellRenderer&#42; " name="renderer"></parameter></parameters><description>

Sets the renderer for the grid cell at the specified location. 
The grid will take ownership of the pointer.

See <ref target="wxgridcellrenderer">wxGridCellRenderer</ref> and
the <ref target="gridoverview">wxGrid overview</ref> for more information about cell editors and renderers.

</description></function></member>
<member class="wxGrid" name="SetCellTextColour"><function type="void" name="SetCellTextColour"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="const wxColour&amp;" name=" colour"></parameter></parameters><description>

</description></function>
<function type="void" name="SetCellTextColour"><parameters><parameter type="const wxColour&amp; " name="val"></parameter><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

</description></function>
<function type="void" name="SetCellTextColour"><parameters><parameter type="const wxColour&amp; " name="colour"></parameter></parameters><description>

Sets the text colour for the grid cell at the specified location.

</description></function></member>
<member class="wxGrid" name="SetCellValue"><function type="void" name="SetCellValue"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="const wxString&amp; " name="s"></parameter></parameters><description>

</description></function>
<function type="void" name="SetCellValue"><parameters><parameter type="const wxGridCellCoords&amp; " name="coords"></parameter><parameter type="const wxString&amp; " name="s"></parameter></parameters><description>

</description></function>
<function type="void" name="SetCellValue"><parameters><parameter type="const wxString&amp; " name="val"></parameter><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

Sets the string value for the cell at the specified location. For simple applications where a
grid object automatically uses a default grid table of string values you use this function together
with <ref target="wxgridgetcellvalue">wxGrid::GetCellValue</ref> to access cell values. 

For more complex applications where you have derived your own grid table class that contains
various data types (e.g. numeric, boolean or user-defined custom types) then you only use this
function for those cells that contain string values.

The last form is for backward compatibility only.

See <ref target="wxgridtablebasecangetvalueas">wxGridTableBase::CanSetValueAs</ref>
and the <ref target="gridoverview">wxGrid overview</ref> for more information.

</description></function></member>
<member class="wxGrid" name="SetColAttr"><function type="void" name="SetColAttr"><parameters><parameter type="int " name="col"></parameter><parameter type="wxGridCellAttr&#42; " name="attr"></parameter></parameters><description>

Sets the cell attributes for all cells in the specified column.

For more information about controlling grid cell attributes see the 
<ref target="wxgridcellattr">wxGridCellAttr</ref> cell attribute class and the 
<ref target="gridoverview">wxGrid classes overview</ref>.

</description></function></member>
<member class="wxGrid" name="SetColFormatBool"><function type="void" name="SetColFormatBool"><parameters><parameter type="int " name="col"></parameter></parameters><description>

Sets the specified column to display boolean values. wxGrid displays boolean values with a checkbox.

</description></function></member>
<member class="wxGrid" name="SetColFormatNumber"><function type="void" name="SetColFormatNumber"><parameters><parameter type="int " name="col"></parameter></parameters><description>

Sets the specified column to display integer values.

</description></function></member>
<member class="wxGrid" name="SetColFormatFloat"><function type="void" name="SetColFormatFloat"><parameters><parameter type="int " name="col"></parameter><parameter type="int " name="width" value="-1"></parameter><parameter type="int " name="precision" value="-1"></parameter></parameters><description>

Sets the specified column to display floating point values with the given width and precision.

</description></function></member>
<member class="wxGrid" name="SetColFormatCustom"><function type="void" name="SetColFormatCustom"><parameters><parameter type="int " name="col"></parameter><parameter type="const wxString&amp; " name="typeName"></parameter></parameters><description>

Sets the specified column to display data in a custom format.
See the <ref target="gridoverview">wxGrid overview</ref> for more information on working
with custom data types.

</description></function></member>
<member class="wxGrid" name="SetColLabelAlignment"><function type="void" name="SetColLabelAlignment"><parameters><parameter type="int " name="horiz"></parameter><parameter type="int " name="vert"></parameter></parameters><description>

Sets the horizontal and vertical alignment of column label text.

Horizontal alignment should be one of wxALIGN_LEFT, wxALIGN_CENTRE or wxALIGN_RIGHT.

Vertical alignment should be one of wxALIGN_TOP, wxALIGN_CENTRE or wxALIGN_BOTTOM.

</description></function></member>
<member class="wxGrid" name="SetColLabelSize"><function type="void" name="SetColLabelSize"><parameters><parameter type="int " name="height"></parameter></parameters><description>

Sets the height of the column labels.

</description></function></member>
<member class="wxGrid" name="SetColLabelValue"><function type="void" name="SetColLabelValue"><parameters><parameter type="int " name="col"></parameter><parameter type="const wxString&amp;" name=" value"></parameter></parameters><description>

Set the value for the given column label. If you are using a derived grid table you must 
override <ref target="wxgridtablebasesetcollabelvalue">wxGridTableBase::SetColLabelValue</ref>
for this to have any effect.

</description></function></member>
<member class="wxGrid" name="SetColMinimalWidth"><function type="void" name="SetColMinimalWidth"><parameters><parameter type="int " name="col"></parameter><parameter type="int " name="width"></parameter></parameters><description>

Sets the minimal width for the specified column. This should normally be called when creating the grid
because it will not resize a column that is already narrower than the minimal width.
The width argument must be higher than the minimimal acceptable column width, see
<ref target="wxgridgetcolminimalacceptablewidth">wxGrid::GetColMinimalAcceptableWidth</ref>.

</description></function></member>
<member class="wxGrid" name="SetColMinimalAcceptableWidth"><function type="void" name="SetColMinimalAcceptableWidth"><parameters><parameter type="int " name="width"></parameter></parameters><description>

This modifies the minimum column width that can be handled correctly. Specifying a low value here
allows smaller grid cells to be dealt with correctly. Specifying a value here which is much smaller
than the actual minimum size will incur a performance penalty in the functions which perform
grid cell index lookup on the basis of screen coordinates.
This should normally be called when creating the grid because it will not resize existing columns
with sizes smaller than the value specified here. 

</description></function></member>
<member class="wxGrid" name="GetColMinimalAcceptableWidth"><function type="int" name="GetColMinimalAcceptableWidth"><parameters></parameters><description>

This returns the value of the lowest column width that can be handled correctly. See
member <ref target="wxgridsetcolminimalacceptablewidth">SetColMinimalAcceptableWidth</ref> for details.

</description></function></member>
<member class="wxGrid" name="SetColSize"><function type="void" name="SetColSize"><parameters><parameter type="int " name="col"></parameter><parameter type="int " name="width"></parameter></parameters><note><br/>
wxGrid sets up arrays to store individual row and column sizes when non-default sizes are used.
The memory requirements for this could become prohibitive if your grid is very large. 

</note><description>

Sets the width of the specified column. 

This function does not refresh the grid. If you are calling it outside of a BeginBatch / EndBatch
block you can use <ref target="wxgridforcerefresh">wxGrid::ForceRefresh</ref> to see the changes. 

Automatically sizes the column to fit its contents. If setAsMin is true the calculated width will
also be set as the minimal width for the column.

</description></function></member>
<member class="wxGrid" name="SetDefaultCellAlignment"><function type="void" name="SetDefaultCellAlignment"><parameters><parameter type="int " name="horiz"></parameter><parameter type="int " name="vert"></parameter></parameters><description>

Sets the default horizontal and vertical alignment for grid cell text.

Horizontal alignment should be one of wxALIGN_LEFT, wxALIGN_CENTRE or wxALIGN_RIGHT.

Vertical alignment should be one of wxALIGN_TOP, wxALIGN_CENTRE or wxALIGN_BOTTOM.

</description></function></member>
<member class="wxGrid" name="SetDefaultCellBackgroundColour"><function type="void" name="SetDefaultCellBackgroundColour"><parameters><parameter type="const wxColour&amp;" name=" colour"></parameter></parameters><description>

Sets the default background colour for grid cells.

</description></function></member>
<member class="wxGrid" name="SetDefaultCellFont"><function type="void" name="SetDefaultCellFont"><parameters><parameter type="const wxFont&amp;" name=" font"></parameter></parameters><description>

Sets the default font to be used for grid cell text.

</description></function></member>
<member class="wxGrid" name="SetDefaultEditor"><function type="void" name="SetDefaultEditor"><parameters><parameter type="wxGridCellEditor&#42; " name="editor"></parameter></parameters><description>

Sets the default editor for grid cells. The grid will take ownership of the pointer.

See <ref target="wxgridcelleditor">wxGridCellEditor</ref> and
the <ref target="gridoverview">wxGrid overview</ref> for more information about cell editors and renderers.

</description></function></member>
<member class="wxGrid" name="SetDefaultRenderer"><function type="void" name="SetDefaultRenderer"><parameters><parameter type="wxGridCellRenderer&#42; " name="renderer"></parameter></parameters><description>

Sets the default renderer for grid cells. The grid will take ownership of the pointer.

See <ref target="wxgridcellrenderer">wxGridCellRenderer</ref> and
the <ref target="gridoverview">wxGrid overview</ref> for more information about cell editors and renderers.

</description></function></member>
<member class="wxGrid" name="SetDefaultColSize"><function type="void" name="SetDefaultColSize"><parameters><parameter type="int " name="width"></parameter><parameter type="bool " name="resizeExistingCols" value="false"></parameter></parameters><description>

Sets the default width for columns in the grid. This will only affect columns subsequently added to
the grid unless resizeExistingCols is true. 

</description></function></member>
<member class="wxGrid" name="SetDefaultRowSize"><function type="void" name="SetDefaultRowSize"><parameters><parameter type="int " name="height"></parameter><parameter type="bool " name="resizeExistingRows" value="false"></parameter></parameters><description>

Sets the default height for rows in the grid. This will only affect rows subsequently added
to the grid unless resizeExistingRows is true.

</description></function></member>
<member class="wxGrid" name="SetGridCursor"><function type="void" name="SetGridCursor"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

Set the grid cursor to the specified cell. 
This function calls <ref target="wxgridmakecellvisible">wxGrid::MakeCellVisible</ref>.

</description></function></member>
<member class="wxGrid" name="SetGridLineColour"><function type="void" name="SetGridLineColour"><parameters><parameter type="const wxColour&amp;" name="colour"></parameter></parameters><description>

Sets the colour used to draw grid lines.

</description></function></member>
<member class="wxGrid" name="SetLabelBackgroundColour"><function type="void" name="SetLabelBackgroundColour"><parameters><parameter type="const wxColour&amp;" name=" colour"></parameter></parameters><description>

Sets the background colour for row and column labels.

</description></function></member>
<member class="wxGrid" name="SetLabelFont"><function type="void" name="SetLabelFont"><parameters><parameter type="const wxFont&amp;" name=" font"></parameter></parameters><description>

Sets the font for row and column labels.

</description></function></member>
<member class="wxGrid" name="SetLabelTextColour"><function type="void" name="SetLabelTextColour"><parameters><parameter type="const wxColour&amp;" name=" colour"></parameter></parameters><description>

Sets the colour for row and column label text.

</description></function></member>
<member class="wxGrid" name="SetReadOnly"><function type="void" name="SetReadOnly"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="bool " name="isReadOnly" value="true"></parameter></parameters><description>

Makes the cell at the specified location read-only or editable.
See also <ref target="wxgridisreadonly">wxGrid::IsReadOnly</ref>.

</description></function></member>
<member class="wxGrid" name="SetRowAttr"><function type="void" name="SetRowAttr"><parameters><parameter type="int " name="row"></parameter><parameter type="wxGridCellAttr&#42; " name="attr"></parameter></parameters><description>

Sets the cell attributes for all cells in the specified row.
See the <ref target="wxgridcellattr">wxGridCellAttr</ref> class for more information
about controlling cell attributes.

</description></function></member>
<member class="wxGrid" name="SetRowLabelAlignment"><function type="void" name="SetRowLabelAlignment"><parameters><parameter type="int " name="horiz"></parameter><parameter type="int " name="vert"></parameter></parameters><description>

Sets the horizontal and vertical alignment of row label text.

Horizontal alignment should be one of wxALIGN_LEFT, wxALIGN_CENTRE or wxALIGN_RIGHT.

Vertical alignment should be one of wxALIGN_TOP, wxALIGN_CENTRE or wxALIGN_BOTTOM.

</description></function></member>
<member class="wxGrid" name="SetRowLabelSize"><function type="void" name="SetRowLabelSize"><parameters><parameter type="int " name="width"></parameter></parameters><description>

Sets the width of the row labels.

</description></function></member>
<member class="wxGrid" name="SetRowLabelValue"><function type="void" name="SetRowLabelValue"><parameters><parameter type="int " name="row"></parameter><parameter type="const wxString&amp;" name=" value"></parameter></parameters><description>

Set the value for the given row label. If you are using a derived grid table you must 
override <ref target="wxgridtablebasesetrowlabelvalue">wxGridTableBase::SetRowLabelValue</ref> 
for this to have any effect.

</description></function></member>
<member class="wxGrid" name="SetRowMinimalHeight"><function type="void" name="SetRowMinimalHeight"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="height"></parameter></parameters><description>

Sets the minimal height for the specified row. This should normally be called when creating the grid
because it will not resize a row that is already shorter than the minimal height.
The height argument must be higher than the minimimal acceptable row height, see
<ref target="wxgridgetrowminimalacceptableheight">wxGrid::GetRowMinimalAcceptableHeight</ref>.

</description></function></member>
<member class="wxGrid" name="SetRowMinimalAcceptableHeight"><function type="void" name="SetRowMinimalAcceptableHeight"><parameters><parameter type="int " name="height"></parameter></parameters><description>

This modifies the minimum row width that can be handled correctly. Specifying a low value here
allows smaller grid cells to be dealt with correctly. Specifying a value here which is much smaller
than the actual minimum size will incur a performance penalty in the functions which perform
grid cell index lookup on the basis of screen coordinates.
This should normally be called when creating the grid because it will not resize existing rows
with sizes smaller than the value specified here. 

</description></function></member>
<member class="wxGrid" name="GetRowMinimalAcceptableHeight"><function type="int" name="GetRowMinimalAcceptableHeight"><parameters></parameters><description>

This returns the value of the lowest row width that can be handled correctly. See
member <ref target="wxgridsetrowminimalacceptableheight">SetRowMinimalAcceptableHeight</ref> for details.

</description></function></member>
<member class="wxGrid" name="SetRowSize"><function type="void" name="SetRowSize"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="height"></parameter></parameters><note>

wxGrid sets up arrays to store individual row and column sizes when non-default sizes are used.
The memory requirements for this could become prohibitive if your grid is very large. 

</note><description>

Sets the height of the specified row. 

This function does not refresh the grid. If you are calling it outside of a BeginBatch / EndBatch
block you can use <ref target="wxgridforcerefresh">wxGrid::ForceRefresh</ref> to see the changes. 

Automatically sizes the column to fit its contents. If setAsMin is true the calculated width will
also be set as the minimal width for the column.

</description></function></member>
<member class="wxGrid" name="SetSelectionMode"><function type="void" name="SetSelectionMode"><parameters><parameter type="wxGrid::wxGridSelectionModes" name=" selmode"></parameter></parameters><description>

Set the selection behaviour of the grid.









</description></function></member>
<member class="wxGrid" name="SetTable"><function type="bool" name="SetTable"><parameters><parameter type="wxGridTableBase&#42; " name="table"></parameter><parameter type="bool " name="takeOwnership" value="false"></parameter><parameter type="wxGrid::wxGridSelectionModes " name="selmode" value="wxGrid::wxGridSelectCells"></parameter></parameters><description>

Passes a pointer to a custom grid table to be used by the grid. This should be called
after the grid constructor and before using the grid object. If takeOwnership is set to
true then the table will be deleted by the wxGrid destructor. 

Use this function instead of <ref target="wxgridcreategrid">wxGrid::CreateGrid</ref> when your
application involves complex or non-string data or data sets that are too large to fit
wholly in memory. 

</description></function></member>
<member class="wxGrid" name="ShowCellEditControl"><function type="void" name="ShowCellEditControl"><description>

Displays the in-place cell edit control for the current cell.

</description></function></member>
<member class="wxGrid" name="XToCol"><function type="int" name="XToCol"><parameters><parameter type="int " name="x"></parameter></parameters><description>

Returns the grid column that corresponds to the logical x coordinate. Returns
wxNOT_FOUND if there is no column at the x position.

</description></function></member>
<member class="wxGrid" name="XToEdgeOfCol"><function type="int" name="XToEdgeOfCol"><parameters><parameter type="int " name="x"></parameter></parameters><description>

Returns the column whose right hand edge is close to the given logical x position.
If no column edge is near to this position wxNOT_FOUND is returned.

</description></function></member>
<member class="wxGrid" name="YToEdgeOfRow"><function type="int" name="YToEdgeOfRow"><parameters><parameter type="int " name="y"></parameter></parameters><description>

Returns the row whose bottom edge is close to the given logical y position.
If no row edge is near to this position wxNOT_FOUND is returned.

</description></function></member>
<member class="wxGrid" name="YToRow"><function type="int" name="YToRow"><parameters><parameter type="int " name="y"></parameter></parameters><description>

Returns the grid row that corresponds to the logical y coordinate. Returns
wxNOT_FOUND if there is no row at the y position.


</description></function></member>
<member class="wxGrid" name="BlockToDeviceRect"><function type="wxRect" name="BlockToDeviceRect"><parameters><parameter type="const wxGridCellCoords &amp; " name="topLeft"></parameter><parameter type="const wxGridCellCoords &amp; " name="bottomRight"></parameter></parameters><description>

This function returns the rectangle that encloses the block of cells
limited by TopLeft and BottomRight cell in device coords and clipped
to the client size of the grid window.


</description></function></member>
<member class="wxGrid" name="SelectionToDeviceRect"><function type="wxRect" name="SelectionToDeviceRect"><description>

This function returns the rectangle that encloses the selected cells
in device coords and clipped to the client size of the grid window.


</description></function></member>
<member class="wxGrid" name="GetSelectionBackground"><function type="wxColour" name="GetSelectionBackground" suffix="const"><description>

Access or update the selection fore/back colours


</description></function></member>
<member class="wxGrid" name="GetSelectionForeground"><function type="wxColour" name="GetSelectionForeground" suffix="const"><description>


</description></function></member>
<member class="wxGrid" name="SetSelectionBackground"><function type="void" name="SetSelectionBackground"><parameters><parameter type="const wxColour&amp; " name="c"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="SetSelectionForeground"><function type="void" name="SetSelectionForeground"><parameters><parameter type="const wxColour&amp; " name="c"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="RegisterDataType"><function type="void" name="RegisterDataType"><parameters><parameter type="const wxString&amp; " name="typeName"></parameter><parameter type="wxGridCellRenderer&#42; " name="renderer"></parameter><parameter type="wxGridCellEditor&#42; " name="editor"></parameter></parameters><description>

Methods for a registry for mapping data types to Renderers/Editors

</description></function></member>
<member class="wxGrid" name="GetDefaultEditorForCell"><function type="wxGridCellEditor&#42;" name="GetDefaultEditorForCell" suffix="const"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

</description></function>
<function type="wxGridCellEditor&#42;" name="GetDefaultEditorForCell" suffix="const"><parameters><parameter type="const wxGridCellCoords&amp; " name="c"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="GetDefaultRendererForCell"><function type="wxGridCellRenderer&#42;" name="GetDefaultRendererForCell" suffix="const"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="GetDefaultEditorForType"><function type="wxGridCellEditor&#42;" name="GetDefaultEditorForType" suffix="const"><parameters><parameter type="const wxString&amp; " name="typeName"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="GetDefaultRendererForType"><function type="wxGridCellRenderer&#42;" name="GetDefaultRendererForType" suffix="const"><parameters><parameter type="const wxString&amp; " name="typeName"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="SetMargins"><function type="void" name="SetMargins"><parameters><parameter type="int " name="extraWidth"></parameter><parameter type="int " name="extraHeight"></parameter></parameters><description>

A grid may occupy more space than needed for its rows/columns. This
function allows to set how big this extra space is

</description></function></member>
<member class="wxGrid" name="wxGrid"><function type="" name="wxGrid"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="int " name="x"></parameter><parameter type="int " name="y"></parameter><parameter type="int " name="w" value="-1"></parameter><parameter type="int " name="h" value="-1"></parameter><parameter type="long " name="style" value="wxWANTS_CHARS"></parameter><parameter type="const wxString&amp; " name="name" value="wxPanelNameStr"></parameter></parameters><description>

Backward compatibility.

</description></function></member>
<member class="wxGrid" name="UpdateDimensions"><function type="void" name="UpdateDimensions"><description>

Backward compatibility.

</description></function></member>
<member class="wxGrid" name="GetRows"><function type="int" name="GetRows"><description>

Backward compatibility.

</description></function></member>
<member class="wxGrid" name="GetCols"><function type="int" name="GetCols"><description>

Backward compatibility.

</description></function></member>
<member class="wxGrid" name="GetCursorRow"><function type="int" name="GetCursorRow"><description>

Backward compatibility.

</description></function></member>
<member class="wxGrid" name="GetCursorColumn"><function type="int" name="GetCursorColumn"><description>

Backward compatibility.

</description></function></member>
<member class="wxGrid" name="GetScrollPosX"><function type="int" name="GetScrollPosX"><description>

Backward compatibility.

</description></function></member>
<member class="wxGrid" name="GetScrollPosY"><function type="int" name="GetScrollPosY"><description>

Backward compatibility.

</description></function></member>
<member class="wxGrid" name="SetScrollX"><function type="void" name="SetScrollX"><parameters><parameter type="int " name="x"></parameter></parameters><description>

Backward compatibility.

</description></function></member>
<member class="wxGrid" name="SetScrollY"><function type="void" name="SetScrollY"><parameters><parameter type="int " name="y"></parameter></parameters><description>

Backward compatibility.

</description></function></member>
<member class="wxGrid" name="SetColumnWidth"><function type="void" name="SetColumnWidth"><parameters><parameter type="int " name="col"></parameter><parameter type="int " name="width"></parameter></parameters><description>

Backward compatibility.

</description></function></member>
<member class="wxGrid" name="GetColumnWidth"><function type="int" name="GetColumnWidth"><parameters><parameter type="int " name="col"></parameter></parameters><description>

Backward compatibility.

</description></function></member>
<member class="wxGrid" name="SetRowHeight"><function type="void" name="SetRowHeight"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="height"></parameter></parameters><description>

Backward compatibility.

</description></function></member>
<member class="wxGrid" name="GetViewHeight"><function type="int" name="GetViewHeight"><description>

Backward compatibility.

</description></function></member>
<member class="wxGrid" name="GetViewWidth"><function type="int" name="GetViewWidth"><description>

Returned number of whole cols visible.

</description></function></member>
<member class="wxGrid" name="SetLabelSize"><function type="void" name="SetLabelSize"><parameters><parameter type="int " name="orientation"></parameter><parameter type="int " name="sz"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="GetLabelSize"><function type="int" name="GetLabelSize"><parameters><parameter type="int " name="orientation"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="SetLabelAlignment"><function type="void" name="SetLabelAlignment"><parameters><parameter type="int " name="orientation"></parameter><parameter type="int " name="align"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="GetLabelAlignment"><function type="int" name="GetLabelAlignment"><parameters><parameter type="int " name="orientation"></parameter><parameter type="int " name="align"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="SetLabelValue"><function type="void" name="SetLabelValue"><parameters><parameter type="int " name="orientation"></parameter><parameter type="const wxString&amp; " name="val"></parameter><parameter type="int " name="pos"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="GetLabelValue"><function type="wxString" name="GetLabelValue"><parameters><parameter type="int " name="orientation"></parameter><parameter type="int " name="pos"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="GetCellTextFont"><function type="wxFont" name="GetCellTextFont" suffix="const"><description>

</description></function>
<function type="wxFont" name="GetCellTextFont" suffix="const"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="SetCellTextFont"><function type="void" name="SetCellTextFont"><parameters><parameter type="const wxFont&amp; " name="fnt"></parameter></parameters><description>

</description></function>
<function type="void" name="SetCellTextFont"><parameters><parameter type="const wxFont&amp; " name="fnt"></parameter><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="SetCellBackgroundColour"><function type="void" name="SetCellBackgroundColour"><parameters><parameter type="const wxColour&amp; " name="col"></parameter></parameters><description>

</description></function>
<function type="void" name="SetCellBackgroundColour"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="const wxColour&amp;" name=" colour"></parameter></parameters><description>

</description></function>
<function type="void" name="SetCellBackgroundColour"><parameters><parameter type="const wxColour&amp; " name="colour"></parameter><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="GetEditable"><function type="bool" name="GetEditable"><description>


</description></function></member>
<member class="wxGrid" name="SetEditable"><function type="void" name="SetEditable"><parameters><parameter type="bool " name="edit" value="true"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="GetEditInPlace"><function type="bool" name="GetEditInPlace"><description>


</description></function></member>
<member class="wxGrid" name="SetEditInPlace"><function type="void" name="SetEditInPlace"><parameters><parameter type="bool " name="edit" value="true"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="SetCellBitmap"><function type="void" name="SetCellBitmap"><parameters><parameter type="wxBitmap&#42; " name="bitmap"></parameter><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="SetDividerPen"><function type="void" name="SetDividerPen"><parameters><parameter type="const wxPen&amp; " name="pen"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="GetDividerPen"><function type="wxPen&amp;" name="GetDividerPen" suffix="const"><description>


</description></function></member>
<member class="wxGrid" name="OnActivate"><function type="void" name="OnActivate"><parameters><parameter type="bool " name="active"></parameter></parameters><description>

</description></function></member>
<member class="wxGrid" name="Fit"><function type="void" name="Fit"><description>

Overridden wxWindow methods

</description></function></member>
<member class="wxGrid" name="DoGetBestSize"><function type="wxSize" name="DoGetBestSize" suffix="const"><description>

</description></function></member>
<member class="wxGrid" name="InitRowHeights"><function type="void" name="InitRowHeights"><description>

NB: <i> never</i> access m_row/col arrays directly because they are created
on demand, <i> always</i> use accessor functions instead!

Init the m_rowHeights/Bottoms arrays with default values.

</description></function></member>
<member class="wxGrid" name="InitColWidths"><function type="void" name="InitColWidths"><description>

Init the m_colWidths/Rights arrays


</description></function></member>
<member class="wxGrid" name="GetColWidth"><function type="int" name="GetColWidth" suffix="const"><parameters><parameter type="int " name="col"></parameter></parameters><description>

Get the col/row coords


</description></function></member>
<member class="wxGrid" name="GetColLeft"><function type="int" name="GetColLeft" suffix="const"><parameters><parameter type="int " name="col"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="GetColRight"><function type="int" name="GetColRight" suffix="const"><parameters><parameter type="int " name="col"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="GetRowHeight"><function type="int" name="GetRowHeight" suffix="const"><parameters><parameter type="int " name="row"></parameter></parameters><description>

This function must be public for compatibility.

</description></function></member>
<member class="wxGrid" name="GetRowTop"><function type="int" name="GetRowTop" suffix="const"><parameters><parameter type="int " name="row"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="GetRowBottom"><function type="int" name="GetRowBottom" suffix="const"><parameters><parameter type="int " name="row"></parameter></parameters><description>


</description></function></member>
<member class="wxGrid" name="SetOrCalcColumnSizes"><function type="int" name="SetOrCalcColumnSizes"><parameters><parameter type="bool " name="calcOnly"></parameter><parameter type="bool " name="setAsMin" value="true"></parameter></parameters><description>

Common part of AutoSizeColumn/Row() and GetBestSize()

</description></function></member>
<member class="wxGrid" name="SetOrCalcRowSizes"><function type="int" name="SetOrCalcRowSizes"><parameters><parameter type="bool " name="calcOnly"></parameter><parameter type="bool " name="setAsMin" value="true"></parameter></parameters><description>

</description></function></member>
<member class="wxGrid" name="AutoSizeColOrRow"><function type="void" name="AutoSizeColOrRow"><parameters><parameter type="int " name="n"></parameter><parameter type="bool " name="setAsMin"></parameter><parameter type="bool " name="column"></parameter></parameters><description>

Common part of AutoSizeColumn/Row() or row? 

</description></function></member>
<member class="wxGrid" name="GetColMinimalWidth"><function type="int" name="GetColMinimalWidth" suffix="const"><parameters><parameter type="int " name="col"></parameter></parameters><description>

get the minimal width of the given column/row

</description></function></member>
<member class="wxGrid" name="GetRowMinimalHeight"><function type="int" name="GetRowMinimalHeight" suffix="const"><parameters><parameter type="int " name="col"></parameter></parameters><description>

</description></function></member>
<member class="wxGrid" name="CanHaveAttributes"><function type="bool" name="CanHaveAttributes"><description>

Do we have some place to store attributes in?

</description></function></member>
<member class="wxGrid" name="GetOrCreateCellAttr"><function type="wxGridCellAttr&#42;" name="GetOrCreateCellAttr" suffix="const"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGridCellAttr">
<description>
<p class="classdesc">
This class can be used to alter the cells' appearance in
the grid by changing their colour/font/... from default. An object of this
class may be returned by wxGridTable::GetAttr().</p>
</description>
<parents></parents>
<structs>

</structs>
<members>
<member class="wxGridCellAttr" name="wxGridCellAttr"><function type="" name="wxGridCellAttr"><description>

Default constructor.
            
</description></function>
<function type="" name="wxGridCellAttr"><parameters><parameter type="const wxColour&amp; " name="colText"></parameter><parameter type="const wxColour&amp; " name="colBack"></parameter><parameter type="const wxFont&amp; " name="font"></parameter><parameter type="int " name="hAlign"></parameter><parameter type="int " name="vAlign"></parameter></parameters><description>

VZ: considering the number of members wxGridCellAttr has now, this ctor
seems to be pretty useless... may be we should just remove it?

</description></function></member>
<member class="wxGridCellAttr" name="Clone"><function type="wxGridCellAttr&#42;" name="Clone" suffix="const"><description>

Creates a new copy of this object.

</description></function></member>
<member class="wxGridCellAttr" name="IncRef"><function type="void" name="IncRef"><description>

This class is ref counted: it is created with ref count of 1, so
calling DecRef() once will delete it. Calling IncRef() allows to lock
it until the matching DecRef() is called

</description></function></member>
<member class="wxGridCellAttr" name="DecRef"><function type="void" name="DecRef"><description>

</description></function></member>
<member class="wxGridCellAttr" name="SetTextColour"><function type="void" name="SetTextColour"><parameters><parameter type="const wxColour&amp; " name="colText"></parameter></parameters><description>

Sets the text colour.

</description></function></member>
<member class="wxGridCellAttr" name="SetBackgroundColour"><function type="void" name="SetBackgroundColour"><parameters><parameter type="const wxColour&amp; " name="colBack"></parameter></parameters><description>

Sets the background colour.

</description></function></member>
<member class="wxGridCellAttr" name="SetFont"><function type="void" name="SetFont"><parameters><parameter type="const wxFont&amp; " name="font"></parameter></parameters><description>

Sets the font.

</description></function></member>
<member class="wxGridCellAttr" name="SetAlignment"><function type="void" name="SetAlignment"><parameters><parameter type="int " name="hAlign"></parameter><parameter type="int " name="vAlign"></parameter></parameters><description>

Sets the alignment.

</description></function></member>
<member class="wxGridCellAttr" name="SetReadOnly"><function type="void" name="SetReadOnly"><parameters><parameter type="bool " name="isReadOnly" value="true"></parameter></parameters><description>


</description></function></member>
<member class="wxGridCellAttr" name="SetRenderer"><function type="void" name="SetRenderer"><parameters><parameter type="wxGridCellRenderer&#42; " name="renderer"></parameter></parameters><description>

takes ownership of the pointer


</description></function></member>
<member class="wxGridCellAttr" name="SetEditor"><function type="void" name="SetEditor"><parameters><parameter type="wxGridCellEditor&#42; " name="editor"></parameter></parameters><description>


</description></function></member>
<member class="wxGridCellAttr" name="HasTextColour"><function type="bool" name="HasTextColour" suffix="const"><description>

accessors


</description></function></member>
<member class="wxGridCellAttr" name="HasBackgroundColour"><function type="bool" name="HasBackgroundColour" suffix="const"><description>


</description></function></member>
<member class="wxGridCellAttr" name="HasFont"><function type="bool" name="HasFont" suffix="const"><description>


</description></function></member>
<member class="wxGridCellAttr" name="HasAlignment"><function type="bool" name="HasAlignment" suffix="const"><description>


</description></function></member>
<member class="wxGridCellAttr" name="HasRenderer"><function type="bool" name="HasRenderer" suffix="const"><description>


</description></function></member>
<member class="wxGridCellAttr" name="HasEditor"><function type="bool" name="HasEditor" suffix="const"><description>


</description></function></member>
<member class="wxGridCellAttr" name="GetTextColour"><function type="const wxColour&amp;" name="GetTextColour" suffix="const"><description>


</description></function></member>
<member class="wxGridCellAttr" name="GetBackgroundColour"><function type="const wxColour&amp;" name="GetBackgroundColour" suffix="const"><description>


</description></function></member>
<member class="wxGridCellAttr" name="GetFont"><function type="const wxFont&amp;" name="GetFont" suffix="const"><description>


</description></function></member>
<member class="wxGridCellAttr" name="GetAlignment"><function type="void" name="GetAlignment" suffix="const"><parameters><parameter type="int&#42; " name="hAlign"></parameter><parameter type="int&#42; " name="vAlign"></parameter></parameters><description>

\perlnote{This method takes no parameters and
returns a 2-element list <tt> ( hAlign, vAlign )</tt>.}

</description></function></member>
<member class="wxGridCellAttr" name="GetRenderer"><function type="wxGridCellRenderer&#42;" name="GetRenderer" suffix="const"><parameters><parameter type="wxGrid&#42; " name="grid"></parameter><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>


</description></function></member>
<member class="wxGridCellAttr" name="GetEditor"><function type="wxGridCellEditor&#42;" name="GetEditor" suffix="const"><parameters><parameter type="wxGrid&#42; " name="grid"></parameter><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>


</description></function></member>
<member class="wxGridCellAttr" name="IsReadOnly"><function type="bool" name="IsReadOnly" suffix="const"><description>


</description></function></member>
<member class="wxGridCellAttr" name="SetDefAttr"><function type="void" name="SetDefAttr"><parameters><parameter type="wxGridCellAttr&#42; " name="defAttr"></parameter></parameters><description>

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGridCellBoolEditor">
<description>
<p class="classdesc">
The editor for boolean data.</p>
</description>
<parents>
<classref name="wxGridCellEditor"/>

</parents>
<seealso>

<ref target="wxgridcelleditor">wxGridCellEditor</ref>,
<ref target="wxgridcellfloateditor">wxGridCellFloatEditor</ref>,
<ref target="wxgridcellnumbereditor">wxGridCellNumberEditor</ref>,
<ref target="wxgridcelltexteditor">wxGridCellTextEditor</ref>,
<ref target="wxgridcellchoiceeditor">wxGridCellChoiceEditor</ref>

</seealso>
<members>
<member class="wxGridCellBoolEditor" name="wxGridCellBoolEditor"><function type="" name="wxGridCellBoolEditor"><parameters></parameters><description>

Default constructor.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGridCellBoolRenderer">
<description>
<p class="classdesc">
This class may be used to format boolean data in a cell.
for string cells.</p>
</description>
<parents>
<classref name="wxGridCellRenderer"/>

</parents>
<seealso>

<ref target="wxgridcellrenderer">wxGridCellRenderer</ref>,
<ref target="wxgridcellstringrenderer">wxGridCellStringRenderer</ref>,
<ref target="wxgridcellfloatrenderer">wxGridCellFloatRenderer</ref>,
<ref target="wxgridcellnumberrenderer">wxGridCellNumberRenderer</ref>

</seealso>
<members>
<member class="wxGridCellBoolRenderer" name="wxGridCellBoolRenderer"><function type="" name="wxGridCellBoolRenderer"><parameters></parameters><description>

Default constructor
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGridCellChoiceEditor">
<description>
<p class="classdesc">
The editor for string data allowing to choose from a list of strings.</p>
</description>
<parents>
<classref name="wxGridCellEditor"/>

</parents>
<seealso>

<ref target="wxgridcelleditor">wxGridCellEditor</ref>,
<ref target="wxgridcellfloateditor">wxGridCellFloatEditor</ref>,
<ref target="wxgridcellbooleditor">wxGridCellBoolEditor</ref>,
<ref target="wxgridcelltexteditor">wxGridCellTextEditor</ref>,
<ref target="wxgridcellnumbereditor">wxGridCellNumberEditor</ref>


</seealso>
<members>
<member class="wxGridCellChoiceEditor" name="wxGridCellChoiceEditor"><function type="" name="wxGridCellChoiceEditor"><parameters><parameter type="size_t " name="count" value="0">Number of strings from which the user can choose.</parameter><parameter type="const wxString " name="choices&#91;]" value="NULL"></parameter><parameter type="bool " name="allowOthers" value="false">If allowOthers if true, the user can type a string not in choices array.</parameter></parameters><description>






</description></function></member>
<member class="wxGridCellChoiceEditor" name="SetParameters"><function type="void" name="SetParameters"><parameters><parameter type="const wxString&amp; " name="params"></parameter></parameters><description>

Parameters string format is &quot;item1&#91;,item2&#91;...,itemN]]&quot;
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGridCellEditor">
<description>
<p class="classdesc">
This class is responsible for providing and manipulating
the in-place edit controls for the grid.  Instances of wxGridCellEditor
(actually, instances of derived classes since it is an abstract class) can be
associated with the cell attributes for individual cells, rows, columns, or
even for the entire grid.</p>
</description>
<parents>

</parents>
<seealso>

<ref target="wxgridcelltexteditor">wxGridCellTextEditor</ref>,
<ref target="wxgridcellfloateditor">wxGridCellFloatEditor</ref>,
<ref target="wxgridcellbooleditor">wxGridCellBoolEditor</ref>,
<ref target="wxgridcellnumbereditor">wxGridCellNumberEditor</ref>,
<ref target="wxgridcellchoiceeditor">wxGridCellChoiceEditor</ref>

</seealso>
<members>
<member class="wxGridCellEditor" name="wxGridCellEditor"><function type="" name="wxGridCellEditor"><description>

</description></function></member>
<member class="wxGridCellEditor" name="IsCreated"><function type="bool" name="IsCreated"><description>

</description></function></member>
<member class="wxGridCellEditor" name="Create"><function type="void" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="wxEvtHandler&#42; " name="evtHandler"></parameter></parameters><description>

Creates the actual edit control.

</description></function></member>
<member class="wxGridCellEditor" name="SetSize"><function type="void" name="SetSize"><parameters><parameter type="const wxRect&amp; " name="rect"></parameter></parameters><description>

Size and position the edit control.

</description></function></member>
<member class="wxGridCellEditor" name="Show"><function type="void" name="Show"><parameters><parameter type="bool " name="show"></parameter><parameter type="wxGridCellAttr&#42; " name="attr" value="NULL"></parameter></parameters><description>

Show or hide the edit control, use the specified attributes to set
colours/fonts for it.

</description></function></member>
<member class="wxGridCellEditor" name="PaintBackground"><function type="void" name="PaintBackground"><parameters><parameter type="const wxRect&amp; " name="rectCell"></parameter><parameter type="wxGridCellAttr&#42; " name="attr"></parameter></parameters><description>

Draws the part of the cell not occupied by the control: the base class
version just fills it with background colour from the attribute.

</description></function></member>
<member class="wxGridCellEditor" name="BeginEdit"><function type="void" name="BeginEdit"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="wxGrid&#42; " name="grid"></parameter></parameters><description>

Fetch the value from the table and prepare the edit control
to begin editing. Set the focus to the edit control.

</description></function></member>
<member class="wxGridCellEditor" name="EndEdit"><function type="bool" name="EndEdit"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="wxGrid&#42; " name="grid"></parameter></parameters><description>

Complete the editing of the current cell. Returns true if the value has
changed. If necessary, the control may be destroyed.

</description></function></member>
<member class="wxGridCellEditor" name="Reset"><function type="void" name="Reset"><description>

Reset the value in the control back to its starting value.

</description></function></member>
<member class="wxGridCellEditor" name="StartingKey"><function type="void" name="StartingKey"><parameters><parameter type="wxKeyEvent&amp; " name="event"></parameter></parameters><description>

If the editor is enabled by pressing keys on the grid,
this will be called to let the editor do something about
that first key if desired.

</description></function></member>
<member class="wxGridCellEditor" name="StartingClick"><function type="void" name="StartingClick"><description>

If the editor is enabled by clicking on the cell, this method will be
called.

</description></function></member>
<member class="wxGridCellEditor" name="HandleReturn"><function type="void" name="HandleReturn"><parameters><parameter type="wxKeyEvent&amp; " name="event"></parameter></parameters><description>

Some types of controls on some platforms may need some help
with the Return key.

</description></function></member>
<member class="wxGridCellEditor" name="Destroy"><function type="void" name="Destroy"><description>

Final cleanup.

</description></function></member>
<member class="wxGridCellEditor" name="Clone"><function type="wxGridCellEditor&#42;" name="Clone" suffix="const"><description>

Create a new object which is the copy of this one.

</description></function></member>
<member class="wxGridCellEditor" name="~wxGridCellEditor"><function type="" name="~wxGridCellEditor"><description>

The dtor is private because only DecRef() can delete us.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class>
<class name="wxGridCellFloatEditor">
<description>
<p class="classdesc">
The editor for floating point numbers data.</p>
</description>
<parents>
<classref name="wxGridCellTextEditor"/>
<classref name="wxGridCellEditor"/>

</parents>
<seealso>

<ref target="wxgridcelleditor">wxGridCellEditor</ref>,
<ref target="wxgridcellnumbereditor">wxGridCellNumberEditor</ref>,
<ref target="wxgridcellbooleditor">wxGridCellBoolEditor</ref>,
<ref target="wxgridcelltexteditor">wxGridCellTextEditor</ref>,
<ref target="wxgridcellchoiceeditor">wxGridCellChoiceEditor</ref>


</seealso>
<members>
<member class="wxGridCellFloatEditor" name="wxGridCellFloatEditor"><function type="" name="wxGridCellFloatEditor"><parameters><parameter type="int " name="width" value="-1">Minimum number of characters to be shown.</parameter><parameter type="int " name="precision" value="-1">Number of digits after the decimal dot.</parameter></parameters><description>





</description></function></member>
<member class="wxGridCellFloatEditor" name="SetParameters"><function type="void" name="SetParameters"><parameters><parameter type="const wxString&amp; " name="params"></parameter></parameters><description>

Parameters string format is &quot;width,precision&quot;
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGridCellFloatRenderer">
<description>
<p class="classdesc">
This class may be used to format floating point data in a cell.</p>
</description>
<parents>
<classref name="wxGridCellStringRenderer"/>
<classref name="wxGridCellRenderer"/>

</parents>
<seealso>

<ref target="wxgridcellrenderer">wxGridCellRenderer</ref>,
<ref target="wxgridcellnumberrenderer">wxGridCellNumberRenderer</ref>,
<ref target="wxgridcellstringrenderer">wxGridCellStringRenderer</ref>,
<ref target="wxgridcellboolrenderer">wxGridCellBoolRenderer</ref>

</seealso>
<members>
<member class="wxGridCellFloatRenderer" name="wxGridCellFloatRenderer"><function type="" name="wxGridCellFloatRenderer"><parameters><parameter type="int " name="width" value="-1">Minimum number of characters to be shown.</parameter><parameter type="int " name="precision" value="-1">Number of digits after the decimal dot.</parameter></parameters><description>




</description></function></member>
<member class="wxGridCellFloatRenderer" name="GetPrecision"><function type="int" name="GetPrecision" suffix="const"><description>

Returns the precision ( see <ref target="wxgridcellfloatrendererconstr">wxGridCellFloatRenderer</ref> ).

</description></function></member>
<member class="wxGridCellFloatRenderer" name="GetWidth"><function type="int" name="GetWidth" suffix="const"><description>

Returns the width ( see <ref target="wxgridcellfloatrendererconstr">wxGridCellFloatRenderer</ref> ).

</description></function></member>
<member class="wxGridCellFloatRenderer" name="SetParameters"><function type="void" name="SetParameters"><parameters><parameter type="const wxString&amp; " name="params"></parameter></parameters><description>

Parameters string format is &quot;width&#91;,precision]&quot;.

</description></function></member>
<member class="wxGridCellFloatRenderer" name="SetPrecision"><function type="void" name="SetPrecision"><parameters><parameter type="int " name="precision"></parameter></parameters><description>

Sets the precision ( see <ref target="wxgridcellfloatrendererconstr">wxGridCellFloatRenderer</ref> ).

</description></function></member>
<member class="wxGridCellFloatRenderer" name="SetWidth"><function type="void" name="SetWidth"><parameters><parameter type="int " name="width"></parameter></parameters><description>

Sets the width ( see <ref target="wxgridcellfloatrendererconstr">wxGridCellFloatRenderer</ref> )
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGridCellNumberEditor">
<description>
<p class="classdesc">
The editor for numeric integer data.</p>
</description>
<parents>
<classref name="wxGridCellTextEditor"/>
<classref name="wxGridCellEditor"/>

</parents>
<seealso>

<ref target="wxgridcelleditor">wxGridCellEditor</ref>,
<ref target="wxgridcellfloateditor">wxGridCellFloatEditor</ref>,
<ref target="wxgridcellbooleditor">wxGridCellBoolEditor</ref>,
<ref target="wxgridcelltexteditor">wxGridCellTextEditor</ref>,
<ref target="wxgridcellchoiceeditor">wxGridCellChoiceEditor</ref>


</seealso>
<members>
<member class="wxGridCellNumberEditor" name="wxGridCellNumberEditor"><function type="" name="wxGridCellNumberEditor"><parameters><parameter type="int " name="min" value="-1"></parameter><parameter type="int " name="max" value="-1"></parameter></parameters><description>

Allows to specify the range for acceptable data;
if min == max == -1, no range checking is done


</description></function></member>
<member class="wxGridCellNumberEditor" name="GetString"><function type="wxString" name="GetString" suffix="const"><description>

String representation of the value.


</description></function></member>
<member class="wxGridCellNumberEditor" name="HasRange"><function type="bool" name="HasRange" suffix="const"><description>

If the return value is true, the editor uses a wxSpinCtrl to get user input,
otherwise it uses a wxTextCtrl.


</description></function></member>
<member class="wxGridCellNumberEditor" name="SetParameters"><function type="void" name="SetParameters"><parameters><parameter type="const wxString&amp; " name="params"></parameter></parameters><description>

Parameters string format is &quot;min,max&quot;.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGridCellNumberRenderer">
<description>
<p class="classdesc">
This class may be used to format integer data in a cell.</p>
</description>
<parents>
<classref name="wxGridellStringRenderer"/>
<classref name="wxGridCellRenderer"/>

</parents>
<seealso>

<ref target="wxgridcellrenderer">wxGridCellRenderer</ref>,
<ref target="wxgridcellstringrenderer">wxGridCellStringRenderer</ref>,
<ref target="wxgridcellfloatrenderer">wxGridCellFloatRenderer</ref>,
<ref target="wxgridcellboolrenderer">wxGridCellBoolRenderer</ref>

</seealso>
<members>
<member class="wxGridCellNumberRenderer" name="wxGridCellNumberRenderer"><function type="" name="wxGridCellNumberRenderer"><parameters></parameters><description>

Default constructor
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGridCellRenderer">
<description>
<p class="classdesc">
This class is responsible for actually drawing the cell
in the grid. You may pass it to the wxGridCellAttr (below) to change the
format of one given cell or to wxGrid::SetDefaultRenderer() to change the
view of all cells. This is an abstract class, and you will normally use one of the
predefined derived classes or derive your own class from it.</p>
</description>
<parents>

</parents>
<seealso>

<ref target="wxgridcellstringrenderer">wxGridCellStringRenderer</ref>,
<ref target="wxgridcellnumberrenderer">wxGridCellNumberRenderer</ref>,
<ref target="wxgridcellfloatrenderer">wxGridCellFloatRenderer</ref>,
<ref target="wxgridcellboolrenderer">wxGridCellBoolRenderer</ref>

</seealso>
<members>
<member class="wxGridCellRenderer" name="Draw"><function type="void" name="Draw"><parameters><parameter type="wxGrid&amp; " name="grid"></parameter><parameter type="wxGridCellAttr&amp; " name="attr"></parameter><parameter type="wxDC&amp; " name="dc"></parameter><parameter type="const wxRect&amp; " name="rect"></parameter><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="bool " name="isSelected"></parameter></parameters><description>

Draw the given cell on the provided DC inside the given rectangle
using the style specified by the attribute and the default or selected
state corresponding to the isSelected value.

This pure virtual function has a default implementation which will
prepare the DC using the given attribute: it will draw the rectangle
with the background colour from attr and set the text colour and font.

</description></function></member>
<member class="wxGridCellRenderer" name="GetBestSize"><function type="wxSize" name="GetBestSize"><parameters><parameter type="wxGrid&amp; " name="grid"></parameter><parameter type="wxGridCellAttr&amp; " name="attr"></parameter><parameter type="wxDC&amp; " name="dc"></parameter><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

Get the preferred size of the cell for its contents.

</description></function></member>
<member class="wxGridCellRenderer" name="Clone"><function type="wxGridCellRenderer&#42;" name="Clone" suffix="const"><description>
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class>
<class name="wxGridCellStringRenderer">
<description>
<p class="classdesc">
This class may be used to format string data in a cell; it is the default
for string cells.</p>
</description>
<parents>
<classref name="wxGridCellRenderer"/>

</parents>
<seealso>

<ref target="wxgridcellrenderer">wxGridCellRenderer</ref>,
<ref target="wxgridcellnumberrenderer">wxGridCellNumberRenderer</ref>,
<ref target="wxgridcellfloatrenderer">wxGridCellFloatRenderer</ref>,
<ref target="wxgridcellboolrenderer">wxGridCellBoolRenderer</ref>

</seealso>
<members>
<member class="wxGridCellStringRenderer" name="wxGridCellStringRenderer"><function type="" name="wxGridCellStringRenderer"><parameters></parameters><description>

Default constructor


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGridCellTextEditor">
<description>
<p class="classdesc">
The editor for string/text data.</p>
</description>
<parents>
<classref name="wxGridCellEditor"/>

</parents>
<seealso>

<ref target="wxgridcelleditor">wxGridCellEditor</ref>,
<ref target="wxgridcellfloateditor">wxGridCellFloatEditor</ref>,
<ref target="wxgridcellbooleditor">wxGridCellBoolEditor</ref>,
<ref target="wxgridcellnumbereditor">wxGridCellNumberEditor</ref>,
<ref target="wxgridcellchoiceeditor">wxGridCellChoiceEditor</ref>

</seealso>
<members>
<member class="wxGridCellTextEditor" name="wxGridCellTextEditor"><function type="" name="wxGridCellTextEditor"><description>

Default constructor.

</description></function></member>
<member class="wxGridCellTextEditor" name="SetParameters"><function type="void" name="SetParameters"><parameters><parameter type="const wxString&amp; " name="params"></parameter></parameters><description>

The parameters string format is &quot;n&quot; where n is a number representing the maximum width.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGridEditorCreatedEvent">
<description>

</description>
<parents>
<classref name="wxCommandEvent"/>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<events>
<event name="EVT_GRID_EDITOR_CREATED(func)">The editor for a cell was created. Processes a wxEVT_GRID_EDITOR_CREATED.</event></events>
<members>
<member class="wxGridEditorCreatedEvent" name="wxGridEditorCreatedEvent"><function type="" name="wxGridEditorCreatedEvent"><description>

Default constructor.

</description></function>
<function type="" name="wxGridEditorCreatedEvent"><parameters><parameter type="int " name="id"></parameter><parameter type="wxEventType " name="type"></parameter><parameter type="wxObject&#42; " name="obj"></parameter><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="wxControl&#42; " name="ctrl"></parameter></parameters><description>

</description></function></member>
<member class="wxGridEditorCreatedEvent" name="GetCol"><function type="int" name="GetCol"><description>

Returns the column at which the event occurred.

</description></function></member>
<member class="wxGridEditorCreatedEvent" name="GetControl"><function type="wxControl&#42;" name="GetControl"><description>

Returns the edit control.

</description></function></member>
<member class="wxGridEditorCreatedEvent" name="GetRow"><function type="int" name="GetRow"><description>

Returns the row at which the event occurred.

</description></function></member>
<member class="wxGridEditorCreatedEvent" name="SetCol"><function type="void" name="SetCol"><parameters><parameter type="int " name="col"></parameter></parameters><description>

Sets the column at which the event occurred.

</description></function></member>
<member class="wxGridEditorCreatedEvent" name="SetControl"><function type="void" name="SetControl"><parameters><parameter type="wxControl&#42; " name="ctrl"></parameter></parameters><description>

Sets the edit control.

</description></function></member>
<member class="wxGridEditorCreatedEvent" name="SetRow"><function type="void" name="SetRow"><parameters><parameter type="int " name="row"></parameter></parameters><description>

Sets the row at which the event occurred.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGridEvent">
<description>
<p class="classdesc">
This event class contains information about various grid events.</p>
</description>
<parents>
<classref name="wxNotifyEvent"/>
<classref name="wxCommandEvent"/>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/grid.h"/></includes>
<events>
</events>
<members>
<member class="wxGridEvent" name="wxGridEvent"><function type="" name="wxGridEvent"><description>

Default constructor.

</description></function>
<function type="" name="wxGridEvent"><parameters><parameter type="int " name="id"></parameter><parameter type="wxEventType " name="type"></parameter><parameter type="wxObject&#42; " name="obj"></parameter><parameter type="int " name="row" value="-1"></parameter><parameter type="int " name="col" value="-1"></parameter><parameter type="int " name="x" value="-1"></parameter><parameter type="int " name="y" value="-1"></parameter><parameter type="bool " name="sel" value="true"></parameter><parameter type="bool " name="control" value="false"></parameter><parameter type="bool " name="shift" value="false"></parameter><parameter type="bool " name="alt" value="false"></parameter><parameter type="bool " name="meta" value="false"></parameter></parameters><description>



</description></function></member>
<member class="wxGridEvent" name="AltDown"><function type="bool" name="AltDown"><description>

Returns true if the Alt key was down at the time of the event.

</description></function></member>
<member class="wxGridEvent" name="ControlDown"><function type="bool" name="ControlDown"><description>

Returns true if the Control key was down at the time of the event.

</description></function></member>
<member class="wxGridEvent" name="GetCol"><function type="int" name="GetCol"><description>

Column at which the event occurred.

</description></function></member>
<member class="wxGridEvent" name="GetPosition"><function type="wxPoint" name="GetPosition"><description>

Position in pixels at which the event occurred.

</description></function></member>
<member class="wxGridEvent" name="GetRow"><function type="int" name="GetRow"><description>

Row at which the event occurred.

</description></function></member>
<member class="wxGridEvent" name="MetaDown"><function type="bool" name="MetaDown"><description>

Returns true if the Meta key was down at the time of the event.

</description></function></member>
<member class="wxGridEvent" name="Selecting"><function type="bool" name="Selecting"><description>

Returns true if the user deselected a cell, false if the user
deselected a cell.

</description></function></member>
<member class="wxGridEvent" name="ShiftDown"><function type="bool" name="ShiftDown"><description>

Returns true if the Shift key was down at the time of the event.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGridRangeSelectEvent">
<description>

</description>
<parents>
<classref name="wxNotifyEvent"/>
<classref name="wxCommandEvent"/>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<events>
<event name="EVT_GRID_RANGE_SELECT(func)">The user selected a group of contiguous cells. Processes a wxEVT_GRID_RANGE_SELECT.</event></events>
<members>
<member class="wxGridRangeSelectEvent" name="wxGridRangeSelectEvent"><function type="" name="wxGridRangeSelectEvent"><description>

Default constructor.

</description></function>
<function type="" name="wxGridRangeSelectEvent"><parameters><parameter type="int " name="id"></parameter><parameter type="wxEventType " name="type"></parameter><parameter type="wxObject&#42; " name="obj"></parameter><parameter type="const wxGridCellCoords&amp; " name="topLeft"></parameter><parameter type="const wxGridCellCoords&amp; " name="bottomRight"></parameter><parameter type="bool " name="sel" value="true"></parameter><parameter type="bool " name="control" value="false"></parameter><parameter type="bool " name="shift" value="false"></parameter><parameter type="bool " name="alt" value="false"></parameter><parameter type="bool " name="meta" value="false"></parameter></parameters><description>

</description></function></member>
<member class="wxGridRangeSelectEvent" name="AltDown"><function type="bool" name="AltDown"><description>

Returns true if the Alt key was down at the time of the event.

</description></function></member>
<member class="wxGridRangeSelectEvent" name="ControlDown"><function type="bool" name="ControlDown"><description>

Returns true if the Control key was down at the time of the event.

</description></function></member>
<member class="wxGridRangeSelectEvent" name="GetBottomRightCoords"><function type="wxGridCellCoords" name="GetBottomRightCoords"><description>

Top left corner of the rectangular area that was (de)selected.

</description></function></member>
<member class="wxGridRangeSelectEvent" name="GetBottomRow"><function type="int" name="GetBottomRow"><description>

Bottom row of the rectangular area that was (de)selected.

</description></function></member>
<member class="wxGridRangeSelectEvent" name="GetLeftCol"><function type="int" name="GetLeftCol"><description>

Left column of the rectangular area that was (de)selected.

</description></function></member>
<member class="wxGridRangeSelectEvent" name="GetRightCol"><function type="int" name="GetRightCol"><description>

Right column of the rectangular area that was (de)selected.

</description></function></member>
<member class="wxGridRangeSelectEvent" name="GetTopLeftCoords"><function type="wxGridCellCoords" name="GetTopLeftCoords"><description>

Top left corner of the rectangular area that was (de)selected.

</description></function></member>
<member class="wxGridRangeSelectEvent" name="GetTopRow"><function type="int" name="GetTopRow"><description>

Top row of the rectangular area that was (de)selected.

</description></function></member>
<member class="wxGridRangeSelectEvent" name="MetaDown"><function type="bool" name="MetaDown"><description>

Returns true if the Meta key was down at the time of the event.

</description></function></member>
<member class="wxGridRangeSelectEvent" name="Selecting"><function type="bool" name="Selecting"><description>

Returns true if the area was selected, false otherwise.

</description></function></member>
<member class="wxGridRangeSelectEvent" name="ShiftDown"><function type="bool" name="ShiftDown"><description>

Returns true if the Shift key was down at the time of the event.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGridSizeEvent">
<description>
<p class="classdesc">
This event class contains information about a row/column resize event.</p>
</description>
<parents>
<classref name="wxNotifyEvent"/>
<classref name="wxCommandEvent"/>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/grid.h"/></includes>
<events>
<event name="EVT_GRID_COL_SIZE(func)">The user resized a column by dragging it. Processes a wxEVT_GRID_COL_SIZE.</event><event name="EVT_GRID_ROW_SIZE(func)">The user resized a row by dragging it. Processes a wxEVT_GRID_ROW_SIZE.</event></events>
<members>
<member class="wxGridSizeEvent" name="wxGridSizeEvent"><function type="" name="wxGridSizeEvent"><description>

Default constructor.

</description></function>
<function type="" name="wxGridSizeEvent"><parameters><parameter type="int " name="id"></parameter><parameter type="wxEventType " name="type"></parameter><parameter type="wxObject&#42; " name="obj"></parameter><parameter type="int " name="rowOrCol" value="-1"></parameter><parameter type="int " name="x" value="-1"></parameter><parameter type="int " name="y" value="-1"></parameter><parameter type="bool " name="control" value="false"></parameter><parameter type="bool " name="shift" value="false"></parameter><parameter type="bool " name="alt" value="false"></parameter><parameter type="bool " name="meta" value="false"></parameter></parameters><description>

</description></function></member>
<member class="wxGridSizeEvent" name="AltDown"><function type="bool" name="AltDown"><description>

Returns true if the Alt key was down at the time of the event.

</description></function></member>
<member class="wxGridSizeEvent" name="ControlDown"><function type="bool" name="ControlDown"><description>

Returns true if the Control key was down at the time of the event.

</description></function></member>
<member class="wxGridSizeEvent" name="GetPosition"><function type="wxPoint" name="GetPosition"><description>

Position in pixels at which the event occurred.

</description></function></member>
<member class="wxGridSizeEvent" name="GetRowOrCol"><function type="int" name="GetRowOrCol"><description>

Row or column at that was resized.

</description></function></member>
<member class="wxGridSizeEvent" name="MetaDown"><function type="bool" name="MetaDown"><description>

Returns true if the Meta key was down at the time of the event.

</description></function></member>
<member class="wxGridSizeEvent" name="ShiftDown"><function type="bool" name="ShiftDown"><description>

Returns true if the Shift key was down at the time of the event.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGridSizer">
<description>
<p class="classdesc">
A grid sizer is a sizer which lays out its children in a two-dimensional
table with all table fields having the same size,
i.e. the width of each field is the width of the widest child,
the height of each field is the height of the tallest child.</p>
</description>
<parents>
<classref name="wxSizer"/>
<classref name="wxObject"/>

</parents>
<members>
<member class="wxGridSizer" name="wxGridSizer"><function type="" name="wxGridSizer"><parameters><parameter type="int " name="rows"></parameter><parameter type="int " name="cols"></parameter><parameter type="int " name="vgap"></parameter><parameter type="int " name="hgap"></parameter></parameters><description>

</description></function>
<function type="" name="wxGridSizer"><parameters><parameter type="int " name="cols"></parameter><parameter type="int " name="vgap" value="0"></parameter><parameter type="int " name="hgap" value="0"></parameter></parameters><description>

Constructor for a wxGridSizer. <i> rows</i> and <i> cols</i> determine the number of
columns and rows in the sizer - if either of the parameters is zero, it will be
calculated to form the total number of children in the sizer, thus making the
sizer grow dynamically. <i> vgap</i> and <i> hgap</i> define extra space between
all children.

</description></function></member>
<member class="wxGridSizer" name="GetCols"><function type="int" name="GetCols"><parameters></parameters><description>

Returns the number of columns in the sizer.


</description></function></member>
<member class="wxGridSizer" name="GetHGap"><function type="int" name="GetHGap"><parameters></parameters><description>

Returns the horizontal gap (in pixels) between cells in the sizer.


</description></function></member>
<member class="wxGridSizer" name="GetRows"><function type="int" name="GetRows"><parameters></parameters><description>

Returns the number of rows in the sizer.


</description></function></member>
<member class="wxGridSizer" name="GetVGap"><function type="int" name="GetVGap"><parameters></parameters><description>

Returns the vertical gap (in pixels) between the cells in the sizer.


</description></function></member>
<member class="wxGridSizer" name="SetCols"><function type="void" name="SetCols"><parameters><parameter type="int " name="cols"></parameter></parameters><description>

Sets the number of columns in the sizer.


</description></function></member>
<member class="wxGridSizer" name="SetHGap"><function type="void" name="SetHGap"><parameters><parameter type="int " name="gap"></parameter></parameters><description>

Sets the horizontal gap (in pixels) between cells in the sizer.


</description></function></member>
<member class="wxGridSizer" name="SetRows"><function type="void" name="SetRows"><parameters><parameter type="int " name="rows"></parameter></parameters><description>

Sets the number of rows in the sizer.


</description></function></member>
<member class="wxGridSizer" name="SetVGap"><function type="void" name="SetVGap"><parameters><parameter type="int " name="gap"></parameter></parameters><description>

Sets the vertical gap (in pixels) between the cells in the sizer.




</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxGridTableBase">
<description>
<p class="classdesc">
Grid table classes.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<structs>

</structs>
<members>
<member class="wxGridTableBase" name="wxGridTableBase"><function type="" name="wxGridTableBase"><description>

</description></function></member>
<member class="wxGridTableBase" name="~wxGridTableBase"><function type="" name="~wxGridTableBase"><description>

</description></function></member>
<member class="wxGridTableBase" name="GetNumberRows"><function type="int" name="GetNumberRows"><description>

You must override these functions in a derived table class.

</description></function></member>
<member class="wxGridTableBase" name="GetNumberCols"><function type="int" name="GetNumberCols"><description>


</description></function></member>
<member class="wxGridTableBase" name="IsEmptyCell"><function type="bool" name="IsEmptyCell"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="GetValue"><function type="wxString" name="GetValue"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="SetValue"><function type="void" name="SetValue"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="const wxString&amp; " name="value"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="GetTypeName"><function type="wxString" name="GetTypeName"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

Data type determination and value access.

</description></function></member>
<member class="wxGridTableBase" name="CanGetValueAs"><function type="bool" name="CanGetValueAs"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="const wxString&amp; " name="typeName"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="CanSetValueAs"><function type="bool" name="CanSetValueAs"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="const wxString&amp; " name="typeName"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="GetValueAsLong"><function type="long" name="GetValueAsLong"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="GetValueAsDouble"><function type="double" name="GetValueAsDouble"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="GetValueAsBool"><function type="bool" name="GetValueAsBool"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="SetValueAsLong"><function type="void" name="SetValueAsLong"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="long " name="value"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="SetValueAsDouble"><function type="void" name="SetValueAsDouble"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="double " name="value"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="SetValueAsBool"><function type="void" name="SetValueAsBool"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="bool " name="value"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="GetValueAsCustom"><function type="void&#42;" name="GetValueAsCustom"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="const wxString&amp; " name="typeName"></parameter></parameters><description>

For user defined types


</description></function></member>
<member class="wxGridTableBase" name="SetValueAsCustom"><function type="void" name="SetValueAsCustom"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter><parameter type="const wxString&amp; " name="typeName"></parameter><parameter type="void&#42; " name="value"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="SetView"><function type="void" name="SetView"><parameters><parameter type="wxGrid&#42; " name="grid"></parameter></parameters><description>

Overriding these is optional


</description></function></member>
<member class="wxGridTableBase" name="GetView"><function type="wxGrid &#42;" name="GetView" suffix="const"><description>


</description></function></member>
<member class="wxGridTableBase" name="Clear"><function type="void" name="Clear"><description>


</description></function></member>
<member class="wxGridTableBase" name="InsertRows"><function type="bool" name="InsertRows"><parameters><parameter type="size_t " name="pos" value="0"></parameter><parameter type="size_t " name="numRows" value="1"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="AppendRows"><function type="bool" name="AppendRows"><parameters><parameter type="size_t " name="numRows" value="1"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="DeleteRows"><function type="bool" name="DeleteRows"><parameters><parameter type="size_t " name="pos" value="0"></parameter><parameter type="size_t " name="numRows" value="1"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="InsertCols"><function type="bool" name="InsertCols"><parameters><parameter type="size_t " name="pos" value="0"></parameter><parameter type="size_t " name="numCols" value="1"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="AppendCols"><function type="bool" name="AppendCols"><parameters><parameter type="size_t " name="numCols" value="1"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="DeleteCols"><function type="bool" name="DeleteCols"><parameters><parameter type="size_t " name="pos" value="0"></parameter><parameter type="size_t " name="numCols" value="1"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="GetRowLabelValue"><function type="wxString" name="GetRowLabelValue"><parameters><parameter type="int " name="row"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="GetColLabelValue"><function type="wxString" name="GetColLabelValue"><parameters><parameter type="int " name="col"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="SetRowLabelValue"><function type="void" name="SetRowLabelValue"><parameters><parameter type="int " name="WXUNUSED(row)"></parameter><parameter type="const " name="wxString&amp;"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="SetColLabelValue"><function type="void" name="SetColLabelValue"><parameters><parameter type="int " name="WXUNUSED(col)"></parameter><parameter type="const " name="wxString&amp;"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="SetAttrProvider"><function type="void" name="SetAttrProvider"><parameters><parameter type="wxGridCellAttrProvider&#42; " name="attrProvider"></parameter></parameters><description>

Attribute handling
give us the attr provider to use - we take ownership of the pointer


</description></function></member>
<member class="wxGridTableBase" name="GetAttrProvider"><function type="wxGridCellAttrProvider&#42;" name="GetAttrProvider" suffix="const"><description>

get the currently used attr provider (may be NULL)


</description></function></member>
<member class="wxGridTableBase" name="CanHaveAttributes"><function type="bool" name="CanHaveAttributes"><description>

Does this table allow attributes?  Default implementation creates
a wxGridCellAttrProvider if necessary.


</description></function></member>
<member class="wxGridTableBase" name="UpdateAttrRows"><function type="void" name="UpdateAttrRows"><parameters><parameter type="size_t " name="pos"></parameter><parameter type="int " name="numRows"></parameter></parameters><description>

change row/col number in attribute if needed


</description></function></member>
<member class="wxGridTableBase" name="UpdateAttrCols"><function type="void" name="UpdateAttrCols"><parameters><parameter type="size_t " name="pos"></parameter><parameter type="int " name="numCols"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="GetAttr"><function type="wxGridCellAttr&#42;" name="GetAttr"><parameters><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

by default forwarded to wxGridCellAttrProvider if any. May be
overridden to handle attributes directly in the table.


</description></function></member>
<member class="wxGridTableBase" name="SetAttr"><function type="void" name="SetAttr"><parameters><parameter type="wxGridCellAttr&#42; " name="attr"></parameter><parameter type="int " name="row"></parameter><parameter type="int " name="col"></parameter></parameters><description>

these functions take ownership of the pointer


</description></function></member>
<member class="wxGridTableBase" name="SetRowAttr"><function type="void" name="SetRowAttr"><parameters><parameter type="wxGridCellAttr&#42; " name="attr"></parameter><parameter type="int " name="row"></parameter></parameters><description>


</description></function></member>
<member class="wxGridTableBase" name="SetColAttr"><function type="void" name="SetColAttr"><parameters><parameter type="wxGridCellAttr&#42; " name="attr"></parameter><parameter type="int " name="col"></parameter></parameters><description>

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHTTP">
<description>

</description>
<parents>
<classref name="wxProtocol"/>

</parents>
<includes>
<header name="wx/protocol/http.h"/></includes>
<seealso>

<ref target="wxsocketbase">wxSocketBase</ref><ref target="wxurl">wxURL</ref>

</seealso>
<members>
<member class="wxHTTP" name="GetInputStream"><function type="wxInputStream &#42;" name="GetInputStream"><parameters><parameter type="const wxString&amp;" name=" path"></parameter></parameters><seealso>

<ref target="wxinputstream">wxInputStream</ref>

</seealso><note>

You can know the size of the file you are getting using <ref target="wxstreambasegetsize">wxStreamBase::GetSize()</ref>.
But there is a limitation: as HTTP servers aren't obliged to pass the size of
the file, in some case, you will be returned 0xfffffff by GetSize(). In these
cases, you should use the value returned by <ref target="wxinputstreamlastread">wxInputStream::LastRead()</ref>:
this value will be 0 when the stream is finished.

\wxheading{Return value}

Returns the initialized stream. You will have to delete it yourself once you
don't use it anymore. The destructor closes the network connection.
The next time you will try to get a file the network connection will have
to be reestablished: but you don't have to take care of this wxHTTP reestablishes it automatically.

</note><description>

Creates a new input stream on the the specified path. You can use all except the seek
functionality of wxStream. Seek isn't available on all streams. For example,
http or ftp streams doesn't deal with it. Other functions like Tell and SeekI
for this sort of stream.
You will be notified when the EOF is reached by an error.

</description></function></member>
<member class="wxHTTP" name="SetHeader"><function type="void" name="SetHeader"><parameters><parameter type="const wxString&amp;" name=" header"></parameter><parameter type="const wxString&amp;" name=" h_data"></parameter></parameters><description>

It sets data of a field to be sent during the next request to the HTTP server. The field
name is specified by <i> header</i> and the content by <i> h_data</i>.
This is a low level function and it assumes that you know what you are doing.

</description></function></member>
<member class="wxHTTP" name="GetHeader"><function type="wxString" name="GetHeader"><parameters><parameter type="const wxString&amp;" name=" header"></parameter></parameters><note>

The header is not case-sensitive: I mean that &quot;CONTENT-TYPE&quot; and &quot;content-type&quot; 
represent the same header.

</note><description>

Returns the data attached with a field whose name is specified by <i> header</i>.
If the field doesn't exist, it will return an empty string and not a NULL string.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHashMap">
<description>
<p class="classdesc">
This is a simple, type-safe, and reasonably efficient hash map class,
whose interface is a subset of the interface of STL containers. </p><p class="classdesc"><heading>Declaring new hash table types</heading></p><p class="classdesc"><pre>
    WX_DECLARE_STRING_HASH_MAP( VALUE_T,     // type of the values
                                CLASSNAME ); // name of the class
</pre></p><p class="classdesc">Declares an hash map class named CLASSNAME, with <tt> wxString</tt> keys
and VALUE_T values.</p><p class="classdesc"><pre>
    WX_DECLARE_VOIDPTR_HASH_MAP( VALUE_T,     // type of the values
                                 CLASSNAME ); // name of the class
</pre></p><p class="classdesc">Declares an hash map class named CLASSNAME, with <tt> void&#42;</tt> keys
and VALUE_T values.</p><p class="classdesc"><pre>
    WX_DECLARE_HASH_MAP( KEY_T,      // type of the keys
                         VALUE_T,    // type of the values
                         HASH_T,     // hasher
                         KEY_EQ_T,   // key equality predicate
                         CLASSNAME); // name of the class
</pre></p><p class="classdesc">The HASH_T and KEY_EQ_T are the types
used for the hashing function and key comparison. wxWindows provides
three predefined hashing functions: <tt> wxIntegerHash</tt>
for integer types ( <tt> int</tt>, <tt> long</tt>, <tt> short</tt>,
and their unsigned counterparts ), <tt> wxStringHash</tt> for strings
( <tt> wxString</tt>, <tt> wxChar&#42;</tt>, <tt> char&#42;</tt> ), and
<tt> wxPointerHash</tt> for any kind of pointer.
Similarly three equality predicates:
<tt> wxIntegerEqual</tt>, <tt> wxStringEqual</tt>, <tt> wxPointerEqual</tt> are provided.</p><p class="classdesc">Using this you could declare an hash map mapping <tt> int</tt> values
to <tt> wxString</tt> like this:</p><p class="classdesc"><pre>
    WX_DECLARE_HASH_MAP( int,
                         wxString,
                         wxIntegerHash,
                         wxIntegerEqual,
                         MyHash );
</pre></p><p class="classdesc"><heading>Iterators</heading></p><p class="classdesc">An iterator is similar to a pointer, and so you can use the usual pointer
operations: <tt> ++it</tt> ( and <tt> it++</tt> ) to move to the next element,
<tt> &#42;it</tt> to access the element pointed to, <tt> it-&gt;first</tt>
( <tt> it-&gt;second</tt> ) to access the key ( value )
of the element pointed to. Hash maps provide forward only iterators, this
means that you can't use <tt> --it</tt>, <tt> it + 3</tt>, <tt> it1 - it2</tt>.</p>
</description>
<example>

<pre>
    class MyClass { /&#42; ... &#42;/ };

    // declare a hash map with string keys and int values
    WX_DECLARE_STRING_HASH_MAP( int, MyHash5 );
    // same, with int keys and MyClass&#42; values
    WX_DECLARE_HASH_MAP( int, MyClass&#42;, wxIntegerHash, wxIntegerEqual, MyHash1 );
    // same, with wxString keys and int values
    WX_DECLARE_STRING_HASH_MAP( int, MyHash3 );
    // same, with wxString keys and values
    WX_DECLARE_STRING_HASH_MAP( wxString, MyHash2 );

    MyHash1 h1;
    MyHash2 h2;

    // store and retrieve values
    h1&#91;1] = new MyClass( 1 );
    h1&#91;10000000] = NULL;
    h1&#91;50000] = new MyClass( 2 );
    h2&#91;&quot;Bill&quot;] = &quot;ABC&quot;;
    wxString tmp = h2&#91;&quot;Bill&quot;];
    // since element with key &quot;Joe&quot; is not present, this will return
    // the default value, that is an empty string in the case of wxString
    MyClass tmp2 = h2&#91;&quot;Joe&quot;];

    // iterate over all the elements in the class
    MyHash2::iterator it;
    for( it = h2.begin(); it != h2.end(); ++it )
    {
        wxString key = it-&gt;first, value = it-&gt;second;
        // do something useful with key and value
    }
</pre>

</example>
<includes>
<header name="wx/hashmap.h"/></includes>
<types>

In the documentation below you should replace wxHashMap with the name
you used in the class declaration.

<table>
<tr><td>wxHashMap::key_type</td><td>Type of the hash keys</td></tr>
<tr><td>wxHashMap::mapped_type</td><td>Type of the values stored in the hash map</td></tr>
<tr><td>wxHashMap::value_type</td><td>Equivalent to
<tt> struct { key_type first; mapped_type second </tt>;} </td></tr>
<tr><td>wxHashMap::iterator</td><td>Used to enumerate all the elements in an hash
map; it is similar to a <tt> value_type&#42;</tt></td></tr>
<tr><td>wxHashMap::const_iterator</td><td>Used to enumerate all the elements
in a constant hash map; it is similar to a <tt> const value_type&#42;</tt></td></tr>
<tr><td>wxHashMap::size_type</td><td>Used for sizes</td></tr>
</table>

</types>
<members>
<member class="wxHashMap" name="wxHashMap"><function type="" name="wxHashMap"><parameters><parameter type="size_type" name="size" value="10"></parameter></parameters><description>

The size parameter is just an hint, the table will resize automatically
to preserve performance.

</description></function>
<function type="" name="wxHashMap"><parameters><parameter type="const wxHashMap&amp;" name=" map"></parameter></parameters><description>

Copy constructor.

</description></function></member>
<member class="wxHashMap" name="begin"><function type="const_iterator" name="begin" suffix="const"><parameters></parameters><description>

</description></function>
<function type="iterator" name="begin"><parameters></parameters><description>

Returns an iterator pointing at the first element of the hash map.
Please remember that hash maps do not guarantee ordering.

</description></function></member>
<member class="wxHashMap" name="clear"><function type="void" name="clear"><parameters></parameters><description>

Removes all elements from the hash map.

</description></function></member>
<member class="wxHashMap" name="count"><function type="size_type" name="count" suffix="const"><parameters><parameter type="const key_type&amp;" name=" key"></parameter></parameters><description>

Counts the number of elements with the given key present in the map.
This function can actually return 0 or 1.

</description></function></member>
<member class="wxHashMap" name="empty"><function type="bool" name="empty" suffix="const"><parameters></parameters><description>

Returns true if the hash map does not contain any element, false otherwise.

</description></function></member>
<member class="wxHashMap" name="end"><function type="const_iterator" name="end" suffix="const"><parameters></parameters><description>

</description></function>
<function type="iterator" name="end"><parameters></parameters><description>

Returns an iterator pointing at the one-after-the-last element of the hash map.
Please remember that hash maps do not guarantee ordering.

</description></function></member>
<member class="wxHashMap" name="erase"><function type="size_type" name="erase"><parameters><parameter type="const key_type&amp;" name=" key"></parameter></parameters><description>

Erases the element with the given key, and returns the number of element
erased (either 0 or 1).

</description></function>
<function type="void" name="erase"><parameters><parameter type="iterator" name=" it"></parameter></parameters><description>

</description></function>
<function type="void" name="erase"><parameters><parameter type="const_iterator" name=" it"></parameter></parameters><description>

Erases the element pointed to by the iterator. After the deletion
the iterator is no longer valid and must not be used.

</description></function></member>
<member class="wxHashMap" name="find"><function type="iterator" name="find"><parameters><parameter type="const key_type&amp;" name=" key"></parameter></parameters><description>

</description></function>
<function type="const_iterator" name="find" suffix="const"><parameters><parameter type="const key_type&amp;" name=" key"></parameter></parameters><description>

If an element with the given key is present, the functions returns
an iterator pointing at that element, otherwise an invalid iterator
is returned (i.e. hashmap.find( non_existent_key ) == hashmap.end()).

</description></function></member>
<member class="wxHashMap" name="insert"><function type="void" name="insert"><parameters><parameter type="const value_type&amp;" name=" v"></parameter></parameters><description>

Inserts the given value in the hash map.

</description></function></member>
<member class="wxHashMap" name="operator&#91;]"><function type="mapped_type&amp;" name="operator&#91;]"><parameters><parameter type="const key_type&amp;" name=" key"></parameter></parameters><description>

Use it as an array subscript. The only difference is that if the
given key is not present in the hash map, an element with the
default <tt> value_type()</tt> is inserted in the table.

</description></function></member>
<member class="wxHashMap" name="size"><function type="size_type" name="size" suffix="const"><parameters></parameters><description>

Returns the numbers of elements in the map.

</description></function></member></members>
<supported>
</supported>
</class><class name="wxHashTable">
<description>
<p class="classdesc">
<b> Please note</b> that this class is retained for backward compatibility
reasons; you should use <ref target="wxhashmap">wxHashMap</ref>.</p><p class="classdesc">This class provides hash table functionality for wxWindows, and for an
application if it wishes.  Data can be hashed on an integer or string
key.</p>
</description>
<example>

Below is an example of using a hash table.

<pre>
  wxHashTable table(KEY_STRING);

  wxPoint &#42;point = new wxPoint(100, 200);
  table.Put(&quot;point 1&quot;, point);

  ....

  wxPoint &#42;found_point = (wxPoint &#42;)table.Get(&quot;point 1&quot;);
</pre>

A hash table is implemented as an array of pointers to lists. When no
data has been stored, the hash table takes only a little more space than
this array (default size is 1000).  When a data item is added, an
integer is constructed from the integer or string key that is within the
bounds of the array. If the array element is NULL, a new (keyed) list is
created for the element. Then the data object is appended to the list,
storing the key in case other data objects need to be stored in the list
also (when a `collision' occurs).

Retrieval involves recalculating the array index from the key, and searching
along the keyed list for the data object whose stored key matches the passed
key. Obviously this is quicker when there are fewer collisions, so hashing
will become inefficient if the number of items to be stored greatly exceeds
the size of the hash table.

</example>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/hash.h"/></includes>
<seealso>

<ref target="wxlist">wxList</ref>

</seealso>
<members>
<member class="wxHashTable" name="wxHashTable"><function type="" name="wxHashTable"><parameters><parameter type="unsigned int" name=" key_type"></parameter><parameter type="int" name="size" value="1000"></parameter></parameters><description>

Constructor. <i> key_type</i> is one of wxKEY_INTEGER, or wxKEY_STRING,
and indicates what sort of keying is required. <i> size</i> is optional.

</description></function></member>
<member class="wxHashTable" name="~wxHashTable"><function type="" name="~wxHashTable"><description>

Destroys the hash table.

</description></function></member>
<member class="wxHashTable" name="BeginFind"><function type="void" name="BeginFind"><description>

The counterpart of <i> Next</i>.  If the application wishes to iterate
through all the data in the hash table, it can call <i> BeginFind</i> and
then loop on <i> Next</i>.

</description></function></member>
<member class="wxHashTable" name="Clear"><function type="void" name="Clear"><description>

Clears the hash table of all nodes (but as usual, doesn't delete user data).

</description></function></member>
<member class="wxHashTable" name="Delete"><function type="wxObject &#42;" name="Delete"><parameters><parameter type="long" name=" key"></parameter></parameters><description>

</description></function>
<function type="wxObject &#42;" name="Delete"><parameters><parameter type="const wxString&amp; " name=" key"></parameter></parameters><description>

Deletes entry in hash table and returns the user's data (if found).

</description></function></member>
<member class="wxHashTable" name="DeleteContents"><function type="void" name="DeleteContents"><parameters><parameter type="bool" name=" flag"></parameter></parameters><description>

If set to true data stored in hash table will be deleted when hash table object
is destroyed.


</description></function></member>
<member class="wxHashTable" name="Get"><function type="wxObject &#42;" name="Get"><parameters><parameter type="long" name=" key"></parameter></parameters><description>

</description></function>
<function type="wxObject &#42;" name="Get"><parameters><parameter type="const char&#42;" name=" key"></parameter></parameters><description>

Gets data from the hash table, using an integer or string key (depending on which
has table constructor was used).

</description></function></member>
<member class="wxHashTable" name="MakeKey"><function type="long" name="MakeKey"><parameters><parameter type="const wxString&amp; " name="string"></parameter></parameters><description>

Makes an integer key out of a string. An application may wish to make a key
explicitly (for instance when combining two data values to form a key).

</description></function></member>
<member class="wxHashTable" name="Next"><function type="wxNode &#42;" name="Next"><description>

If the application wishes to iterate through all the data in the hash
table, it can call <i> BeginFind</i> and then loop on <i> Next</i>. This function
returns a <b> wxNode</b> pointer (or NULL if there are no more nodes).  See the
description for <ref target="wxnode">wxNode</ref>. The user will probably only wish to use the
<b> wxNode::Data</b> function to retrieve the data; the node may also be deleted.

</description></function></member>
<member class="wxHashTable" name="Put"><function type="void" name="Put"><parameters><parameter type="long" name=" key"></parameter><parameter type="wxObject &#42;" name="object"></parameter></parameters><description>

</description></function>
<function type="void" name="Put"><parameters><parameter type="const char&#42;" name=" key"></parameter><parameter type="wxObject &#42;" name="object"></parameter></parameters><description>

Inserts data into the hash table, using an integer or string key (depending on which
has table constructor was used). The key string is copied and stored by the hash
table implementation.

</description></function></member>
<member class="wxHashTable" name="GetCount"><function type="size_t" name="GetCount" suffix="const"><description>

Returns the number of elements in the hash table.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHelpController">
<description>
<p class="classdesc">
This is a family of classes by which
applications may invoke a help viewer to provide on-line help.</p><p class="classdesc">A help controller allows an application to display help, at the contents
or at a particular topic, and shut the help program down on termination.
This avoids proliferation of many instances of the help viewer whenever the
user requests a different topic via the application's menus or buttons.</p><p class="classdesc">Typically, an application will create a help controller instance
when it starts, and immediately call <b> Initialize</b>
to associate a filename with it. The help viewer will only get run, however,
just before the first call to display something.</p><p class="classdesc">Most help controller classes actually derive from wxHelpControllerBase and have
names of the form wxXXXHelpController or wxHelpControllerXXX. An
appropriate class is aliased to the name wxHelpController for each platform, as follows:</p><p class="classdesc"><ul><li> On Windows, wxWinHelpController is used.
</li>
<li> On all other platforms, wxHtmlHelpController is used if wxHTML is
compiled into wxWindows; otherwise wxExtHelpController is used (for invoking an external
browser).
</li></ul></p><p class="classdesc">The remaining help controller classes need to be named
explicitly by an application that wishes to make use of them.</p><p class="classdesc">There are currently the following help controller classes defined:</p><p class="classdesc"><ul><li> wxWinHelpController, for controlling Windows Help.
</li>
<li> wxCHMHelpController, for controlling MS HTML Help. To use this, you need to set wxUSE_MS_HTML_HELP
to 1 in setup.h and have htmlhelp.h header from Microsoft's HTML Help kit (you don't need
VC++ specific htmlhelp.lib because wxWindows loads necessary DLL at runtime and so it
works with all compilers).
</li>
<li> wxBestHelpController, for controlling MS HTML Help or, if Microsoft's runtime is
not available, <ref target="wxhtmlhelpcontroller">wxHtmlHelpController</ref>. You need to provide
<b> both</b> CHM and HTB versions of the help file. For 32bit Windows only.
</li>
<li> wxExtHelpController, for controlling external browsers under Unix.
The default browser is Netscape Navigator. The 'help' sample shows its use.
</li>
<li> <ref target="wxhtmlhelpcontroller">wxHtmlHelpController</ref>, a sophisticated help controller using <ref target="wxhtml">wxHTML</ref>, in
a similar style to the Microsoft HTML Help viewer and using some of the same files.
Although it has an API compatible with other help controllers, it has more advanced features, so it is
recommended that you use the specific API for this class instead. Note that if you
use .zip or .htb formats for your books, you
must add this line to your application initialization: <tt> wxFileSystem::AddHandler(new wxZipFSHandler);</tt>
or nothing will be shown in your help window.
</li></ul></p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/help.h" comment="(wxWindows chooses the appropriate help controller class)"/></includes>
<seealso>

<ref target="wxhtmlhelpcontroller">wxHtmlHelpController</ref><ref target="wxhtml">wxHTML</ref>

</seealso>
<members>
<member class="wxHelpController" name="wxHelpController"><function type="" name="wxHelpController"><description>

Constructs a help instance object, but does not invoke the help viewer.

</description></function></member>
<member class="wxHelpController" name="~wxHelpController"><function type="" name="~wxHelpController"><description>

Destroys the help instance, closing down the viewer if it is running.

</description></function></member>
<member class="wxHelpController" name="Initialize"><function type="virtual void" name="Initialize"><parameters><parameter type="const wxString&amp; " name="file"></parameter></parameters><description>

</description></function>
<function type="virtual void" name="Initialize"><parameters><parameter type="const wxString&amp; " name="file"></parameter><parameter type="int" name=" server"></parameter></parameters><description>

Initializes the help instance with a help filename, and optionally a server socket
number if using wxHelp (now obsolete). Does not invoke the help viewer.
This must be called directly after the help instance object is created and before
any attempts to communicate with the viewer.

You may omit the file extension and a suitable one will be chosen. For
wxHtmlHelpController, the extensions zip, htb and hhp will be appended while searching for
a suitable file. For WinHelp, the hlp extension is appended.

</description></function></member>
<member class="wxHelpController" name="DisplayBlock"><function type="virtual bool" name="DisplayBlock"><parameters><parameter type="long" name=" blockNo"></parameter></parameters><description>

If the help viewer is not running, runs it and displays the file at the given block number.

<i> WinHelp:</i> Refers to the context number.

<i> MS HTML Help:</i> Refers to the context number.

<i> External HTML help:</i> the same as for <ref target="wxhelpcontrollerdisplaysection">wxHelpController::DisplaySection</ref>.

<i> wxHtmlHelpController:</i> <i> sectionNo</i> is an identifier as specified in the <tt> .hhc</tt> file. See <ref target="helpformat">Help files format</ref>.

This function is for backward compatibility only, and applications should use <ref target="wxhelpcontrollerdisplaysection">wxHelpController</ref> instead.

</description></function></member>
<member class="wxHelpController" name="DisplayContents"><function type="virtual bool" name="DisplayContents"><description>

If the help viewer is not running, runs it and displays the
contents.

</description></function></member>
<member class="wxHelpController" name="DisplayContextPopup"><function type="virtual bool" name="DisplayContextPopup"><parameters><parameter type="int " name="contextId"></parameter></parameters><description>

Displays the section as a popup window using a context id.

Returns false if unsuccessful or not implemented.

</description></function></member>
<member class="wxHelpController" name="DisplaySection"><function type="virtual bool" name="DisplaySection"><parameters><parameter type="const wxString&amp;" name=" section"></parameter></parameters><description>

If the help viewer is not running, runs it and displays the given section.

The interpretation of <i> section</i> differs between help viewers. For most viewers,
this call is equivalent to KeywordSearch. For MS HTML Help, wxHTML help and external HTML help,
if <i> section</i> has a .htm
or .html extension, that HTML file will be displayed; otherwise
a keyword search is done.

</description></function>
<function type="virtual bool" name="DisplaySection"><parameters><parameter type="int" name=" sectionNo"></parameter></parameters><description>

If the help viewer is not running, runs it and displays the given section.

<i> WinHelp, MS HTML Help</i> <i> sectionNo</i> is a context id.

<i> External HTML help:</i> wxExtHelpController implements <i> sectionNo</i> as an id in a map file, which is of the form:

<pre>
0  wx.html             ; Index
1  wx34.html#classref  ; Class reference
2  wx204.html          ; Function reference
</pre>

<i> wxHtmlHelpController:</i> <i> sectionNo</i> is an identifier as specified in the <tt> .hhc</tt> file. See <ref target="helpformat">Help files format</ref>.

See also the help sample for notes on how to specify section numbers for various help file formats.

</description></function></member>
<member class="wxHelpController" name="DisplayTextPopup"><function type="virtual bool" name="DisplayTextPopup"><parameters><parameter type="const wxString&amp;" name=" text"></parameter><parameter type="const wxPoint&amp; " name="pos"></parameter></parameters><description>

Displays the text in a popup window, if possible.

Returns false if unsuccessful or not implemented.

</description></function></member>
<member class="wxHelpController" name="GetFrameParameters"><function type="virtual wxFrame &#42;" name="GetFrameParameters"><parameters><parameter type="const wxSize &#42; " name="size" value="NULL"></parameter><parameter type="const wxPoint &#42; " name="pos" value="NULL"></parameter><parameter type="bool &#42;" name="newFrameEachTime" value="NULL"></parameter></parameters><description>

wxHtmlHelpController returns the frame, size and position.

For all other help controllers, this function does nothing
and just returns NULL.







</description></function></member>
<member class="wxHelpController" name="KeywordSearch"><function type="virtual bool" name="KeywordSearch"><parameters><parameter type="const wxString&amp; " name="keyWord"></parameter></parameters><description>

If the help viewer is not running, runs it, and searches for sections matching the given keyword. If one
match is found, the file is displayed at this section.

<i> WinHelp, MS HTML Help:</i> If more than one match is found, 
the first topic is displayed.

<i> External HTML help, simple wxHTML help:</i> If more than one match is found, 
a choice of topics is displayed.

<i> wxHtmlHelpController:</i> see <ref target="wxhtmlhelpcontrollerkeywordsearch">wxHtmlHelpController::KeywordSearch</ref>.

</description></function></member>
<member class="wxHelpController" name="LoadFile"><function type="virtual bool" name="LoadFile"><parameters><parameter type="const wxString&amp; " name="file" value="&quot;&quot;"></parameter></parameters><description>

If the help viewer is not running, runs it and loads the given file.
If the filename is not supplied or is
empty, the file specified in <b> Initialize</b> is used. If the viewer is
already displaying the specified file, it will not be reloaded. This
member function may be used before each display call in case the user
has opened another file.

wxHtmlHelpController ignores this call.

</description></function></member>
<member class="wxHelpController" name="OnQuit"><function type="virtual bool" name="OnQuit"><description>

Overridable member called when this application's viewer is quit by the user.

This does not work for all help controllers.

</description></function></member>
<member class="wxHelpController" name="SetFrameParameters"><function type="virtual void" name="SetFrameParameters"><parameters><parameter type="const wxString &amp; " name="title"></parameter><parameter type="const wxSize &amp; " name="size"></parameter><parameter type="const wxPoint &amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="bool " name="newFrameEachTime" value="false"></parameter></parameters><description>

For wxHtmlHelpController, the title is set (again with \page title) and also the size and position of the frame if the frame is already
open. <i> newFrameEachTime</i> is ignored.

For all other help controllers this function has no effect.

</description></function></member>
<member class="wxHelpController" name="SetViewer"><function type="virtual void" name="SetViewer"><parameters><parameter type="const wxString&amp; " name="viewer"></parameter><parameter type="long" name=" flags"></parameter></parameters><description>

Sets detailed viewer information. So far this is only relevant to wxExtHelpController.

Some examples of usage:

<pre>
  m_help.SetViewer(&quot;kdehelp&quot;);
  m_help.SetViewer(&quot;gnome-help-browser&quot;);
  m_help.SetViewer(&quot;netscape&quot;, wxHELP_NETSCAPE);
</pre>

</description></function></member>
<member class="wxHelpController" name="Quit"><function type="virtual bool" name="Quit"><description>

If the viewer is running, quits it by disconnecting.

For Windows Help, the viewer will only close if no other application is using it.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class>
<class name="wxHelpControllerHelpProvider">
<description>
<p class="classdesc">
wxHelpControllerHelpProvider is an implementation of wxHelpProvider which supports
both context identifiers and plain text help strings. If the help text is an integer,
it is passed to wxHelpController::DisplayContextPopup. Otherwise, it shows the string
in a tooltip as per wxSimpleHelpProvider. If you use this with a wxCHMHelpController instance
on windows, it will use the native style of tip window instead of <ref target="wxtipwindow">wxTipWindow</ref>.</p><p class="classdesc">You can use the convenience function <b> wxContextId</b> to convert an integer context
id to a string for passing to <ref target="wxwindowsethelptext">wxWindow::SetHelpText</ref>.</p>
</description>
<parents>
<classref name="wxSimpleHelpProvider"/>
<classref name="wxHelpProvider"/>

</parents>
<includes>
<header name="wx/cshelp.h"/></includes>
<seealso>

<ref target="wxhelpprovider">wxHelpProvider</ref><ref target="wxsimplehelpprovider">wxSimpleHelpProvider</ref>
<ref target="wxcontexthelp">wxContextHelp</ref><ref target="wxwindowsethelptext">wxWindow::SetHelpText</ref>
<ref target="wxwindowgethelptext">wxWindow::GetHelpText</ref>

</seealso>
<members>
<member class="wxHelpControllerHelpProvider" name="wxHelpControllerHelpProvider"><function type="" name="wxHelpControllerHelpProvider"><parameters><parameter type="wxHelpControllerBase&#42; " name="hc" value="NULL"></parameter></parameters><description>

Note that the instance doesn't own the help controller. The help controller
should be deleted separately.

</description></function></member>
<member class="wxHelpControllerHelpProvider" name="SetHelpController"><function type="void" name="SetHelpController"><parameters><parameter type="wxHelpControllerBase&#42; " name="hc"></parameter></parameters><description>

Sets the help controller associated with this help provider.

</description></function></member>
<member class="wxHelpControllerHelpProvider" name="GetHelpController"><function type="wxHelpControllerBase&#42;" name="GetHelpController" suffix="const"><description>

Returns the help controller associated with this help provider.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHelpEvent">
<description>
<p class="classdesc">
A help event is sent when the user has requested context-sensitive help.
This can either be caused by the application requesting
context-sensitive help mode via <ref target="wxcontexthelp">wxContextHelp</ref>, or
(on MS Windows) by the system generating a WM_HELP message when the user pressed F1 or clicked
on the query button in a dialog caption.</p><p class="classdesc">A help event is sent to the window that the user clicked on, and is propagated up the
window hierarchy until the event is processed or there are no more event handlers.
The application should call wxEvent::GetId to check the identity of the clicked-on window,
and then either show some suitable help or call wxEvent::Skip if the identifier is unrecognised.
Calling Skip is important because it allows wxWindows to generate further events for ancestors
of the clicked-on window. Otherwise it would be impossible to show help for container windows,
since processing would stop after the first window found.</p>
</description>
<parents>
<classref name="wxCommandEvent"/>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_HELP(id, func)">Process a wxEVT_HELP event.</event><event name="EVT_HELP_RANGE(id1, id2, func)">Process a wxEVT_HELP event for a range of ids.</event></events>
<seealso>

<ref target="wxcontexthelp">wxContextHelp</ref>,
<ref target="wxdialog">wxDialog</ref>,
<ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxHelpEvent" name="wxHelpEvent"><function type="" name="wxHelpEvent"><parameters><parameter type="WXTYPE " name="eventType" value="0"></parameter><parameter type="bool" name="active" value="true"></parameter><parameter type="wxWindowID " name="id" value="0"></parameter><parameter type="const wxPoint&amp; " name="point"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxHelpEvent" name="GetPosition"><function type="const wxPoint&amp;" name="GetPosition" suffix="const"><description>

Returns the left-click position of the mouse, in screen coordinates. This allows
the application to position the help appropriately.

</description></function></member>
<member class="wxHelpEvent" name="SetPosition"><function type="void" name="SetPosition"><parameters><parameter type="const wxPoint&amp;" name=" pt"></parameter></parameters><description>

Sets the left-click position of the mouse, in screen coordinates.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHelpProvider">
<description>
<p class="classdesc">
wxHelpProvider is an abstract class used by a program implementing context-sensitive help to
show the help text for the given window.</p><p class="classdesc">The current help provider must be explicitly set by the application using
wxHelpProvider::Set().</p>
</description>
<parents></parents>
<includes>
<header name="wx/cshelp.h"/></includes>
<seealso>

<ref target="wxcontexthelp">wxContextHelp</ref><ref target="wxcontexthelpbutton">wxContextHelpButton</ref>
<ref target="wxsimplehelpprovider">wxSimpleHelpProvider</ref><ref target="wxhelpcontrollerhelpprovider">wxHelpControllerHelpProvider</ref>
<ref target="wxwindowsethelptext">wxWindow::SetHelpText</ref><ref target="wxwindowgethelptext">wxWindow::GetHelpText</ref>

</seealso>
<members>
<member class="wxHelpProvider" name="~wxHelpProvider"><function type="" name="~wxHelpProvider"><description>

Virtual destructor for any base class.

</description></function></member>
<member class="wxHelpProvider" name="Set"><function type="wxHelpProvider&#42;" name="Set"><parameters><parameter type="wxHelpProvider&#42; " name="helpProvider"></parameter></parameters><description>

Get/set the current, application-wide help provider. Returns
the previous one.

</description></function></member>
<member class="wxHelpProvider" name="Get"><function type="wxHelpProvider&#42;" name="Get"><description>

Unlike some other classes, the help provider is not created on demand.
This must be explicitly done by the application.

</description></function></member>
<member class="wxHelpProvider" name="GetHelp"><function type="wxString" name="GetHelp"><parameters><parameter type="const wxWindowBase&#42; " name="window"></parameter></parameters><description>

Gets the help string for this window. Its interpretation is dependent on the help provider
except that empty string always means that no help is associated with
the window.

</description></function></member>
<member class="wxHelpProvider" name="ShowHelp"><function type="bool" name="ShowHelp"><parameters><parameter type="wxWindowBase&#42; " name="window"></parameter></parameters><description>

Shows help for the given window. Uses <ref target="wxhelpprovidergethelp">GetHelp</ref> internally if
applicable.

Returns true if it was done, or false if no help was available
for this window.

</description></function></member>
<member class="wxHelpProvider" name="AddHelp"><function type="void" name="AddHelp"><parameters><parameter type="wxWindowBase&#42; " name="window"></parameter><parameter type="const wxString&amp; " name="text"></parameter></parameters><description>

Associates the text with the given window or id. Although all help
providers have these functions to allow making <ref target="wxwindowsethelptext">wxWindow::SetHelpText</ref> 
work, not all of them implement the functions.

</description></function>
<function type="void" name="AddHelp"><parameters><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxString&amp; " name="text"></parameter></parameters><description>

This version associates the given text with all windows with this id.
May be used to set the same help string for all Cancel buttons in
the application, for example.

</description></function></member>
<member class="wxHelpProvider" name="RemoveHelp"><function type="void" name="RemoveHelp"><parameters><parameter type="wxWindowBase&#42; " name="window"></parameter></parameters><description>

Removes the association between the window pointer and the help text. This is
called by the wxWindow destructor. Without this, the table of help strings will fill up
and when window pointers are reused, the wrong help string will be found.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHtmlCell">
<description>
<p class="classdesc">
Internal data structure. It represents fragments of parsed HTML
page, the so-called <b> cell</b> - a word, picture, table, horizontal line and so on.
It is used by <ref target="wxhtmlwindow">wxHtmlWindow</ref> and 
<ref target="wxhtmlwinparser">wxHtmlWinParser</ref> to represent HTML page in memory.</p><p class="classdesc">You can divide cells into two groups : <i> visible</i> cells with non-zero width and
height and <i> helper</i> cells (usually with zero width and height) that
perform special actions such as color or font change.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/html/htmlcell.h"/></includes>
<seealso>

<ref target="cells">Cells Overview</ref>,
<ref target="wxhtmlcontainercell">wxHtmlContainerCell</ref>

</seealso>
<members>
<member class="wxHtmlCell" name="wxHtmlCell"><function type="" name="wxHtmlCell"><description>

Constructor.

</description></function></member>
<member class="wxHtmlCell" name="AdjustPagebreak"><function type="virtual bool" name="AdjustPagebreak"><parameters><parameter type="int &#42; " name="pagebreak"></parameter></parameters><description>

This method is used to adjust pagebreak position. The parameter is
variable that contains y-coordinate of page break (= horizontal line that
should not be crossed by words, images etc.). If this cell cannot be divided
into two pieces (each one on another page) then it moves the pagebreak
few pixels up.

Returns true if pagebreak was modified, false otherwise

Usage: 
<pre>
while (container-&gt;AdjustPagebreak(&amp;p)) {}
</pre>

</description></function></member>
<member class="wxHtmlCell" name="Draw"><function type="virtual void" name="Draw"><parameters><parameter type="wxDC&amp; " name="dc">Device context to which the cell is to be drawn</parameter><parameter type="int " name="x"></parameter><parameter type="int " name="y"></parameter><parameter type="int " name="view_y1">y-coord of the first line visible in window. This is
used to optimize rendering speed</parameter><parameter type="int " name="view_y2">y-coord of the last line visible in window. This is
used to optimize rendering speed</parameter></parameters><description>

Renders the cell.











</description></function></member>
<member class="wxHtmlCell" name="DrawInvisible"><function type="virtual void" name="DrawInvisible"><parameters><parameter type="wxDC&amp; " name="dc">Device context to which the cell is to be drawn</parameter><parameter type="int " name="x"></parameter><parameter type="int " name="y"></parameter></parameters><description>

This method is called instead of <ref target="wxhtmlcelldraw">Draw</ref> when the
cell is certainly out of the screen (and thus invisible). This is not
nonsense - some tags (like <ref target="wxhtmlcolourcell">wxHtmlColourCell</ref>
or font setter) must be drawn even if they are invisible!







</description></function></member>
<member class="wxHtmlCell" name="Find"><function type="virtual const wxHtmlCell&#42;" name="Find"><parameters><parameter type="int " name="condition">Unique integer identifier of condition</parameter><parameter type="const void&#42; " name="param">Optional parameters</parameter></parameters><description>

Returns pointer to itself if this cell matches condition (or if any of the cells
following in the list matches), NULL otherwise.
(In other words if you call top-level container's Find it will
return pointer to the first cell that matches the condition)

It is recommended way how to obtain pointer to particular cell or
to cell of some type (e.g. wxHtmlAnchorCell reacts on
wxHTML_COND_ISANCHOR condition)







\wxheading{Defined conditions}

<table>
<tr><td><b> wxHTML_COND_ISANCHOR</b></td><td>Finds particular anchor. 
<i> param</i> is pointer to wxString with name of the anchor.</td></tr>
<tr><td><b> wxHTML_COND_USER</b></td><td>User-defined conditions start
from this number.</td></tr>
</table>

</description></function></member>
<member class="wxHtmlCell" name="GetDescent"><function type="int" name="GetDescent" suffix="const"><description>

Returns descent value of the cell (m_Descent member). 
\helponly{See explanation:

\image{}{descent.bmp}
}

</description></function></member>
<member class="wxHtmlCell" name="GetHeight"><function type="int" name="GetHeight" suffix="const"><description>

Returns height of the cell (m_Height member).

</description></function></member>
<member class="wxHtmlCell" name="GetId"><function type="virtual wxString" name="GetId" suffix="const"><description>

Returns unique cell identifier if there is any, empty string otherwise.

</description></function></member>
<member class="wxHtmlCell" name="GetLink"><function type="virtual wxHtmlLinkInfo&#42;" name="GetLink" suffix="const"><parameters><parameter type="int " name="x" value="0"></parameter><parameter type="int " name="y" value="0"></parameter></parameters><description>

Returns hypertext link if associated with this cell or NULL otherwise.
See <ref target="wxhtmllinkinfo">wxHtmlLinkInfo</ref>.
(Note: this makes sense only for visible tags).





</description></function></member>
<member class="wxHtmlCell" name="GetNext"><function type="wxHtmlCell&#42;" name="GetNext" suffix="const"><description>

Returns pointer to the next cell in list (see htmlcell.h if you're
interested in details).

</description></function></member>
<member class="wxHtmlCell" name="GetParent"><function type="wxHtmlContainerCell&#42;" name="GetParent" suffix="const"><description>

Returns pointer to parent container.

</description></function></member>
<member class="wxHtmlCell" name="GetPosX"><function type="int" name="GetPosX" suffix="const"><description>

Returns X position within parent (the value is relative to parent's
upper left corner). The returned value is meaningful only if
parent's <ref target="wxhtmlcelllayout">Layout</ref> was called before!

</description></function></member>
<member class="wxHtmlCell" name="GetPosY"><function type="int" name="GetPosY" suffix="const"><description>

Returns Y position within parent (the value is relative to parent's
upper left corner). The returned value is meaningful only if
parent's <ref target="wxhtmlcelllayout">Layout</ref> was called before!

</description></function></member>
<member class="wxHtmlCell" name="GetWidth"><function type="int" name="GetWidth" suffix="const"><description>

Returns width of the cell (m_Width member).

</description></function></member>
<member class="wxHtmlCell" name="Layout"><function type="virtual void" name="Layout"><parameters><parameter type="int " name="w"></parameter></parameters><description>

This method performs two actions:

\begin{enumerate}\itemsep=0pt
\item adjusts the cell's width according to the fact that maximal possible width is <i> w</i>.
(this has sense when working with horizontal lines, tables etc.)
\item prepares layout (=fill-in m_PosX, m_PosY (and sometimes m_Height) members)
based on actual width <i> w</i>
\end{enumerate}

It must be called before displaying cells structure because
m_PosX and m_PosY are undefined (or invalid)
before calling Layout.

</description></function></member>
<member class="wxHtmlCell" name="OnMouseClick"><function type="virtual void" name="OnMouseClick"><parameters><parameter type="wxWindow&#42; " name="parent">parent window (always wxHtmlWindow!)</parameter><parameter type="int" name="x"></parameter><parameter type="int " name="y"></parameter><parameter type="const wxMouseEvent&amp; " name="event"></parameter></parameters><note>

If you need more &quot;advanced&quot; event handling
you should use wxHtmlBinderCell instead.









</note><description>

This function is simple event handler. Each time the user clicks mouse button over a cell
within <ref target="wxhtmlwindow">wxHtmlWindow</ref> this method of that cell is called. Default behavior is
that it calls <ref target="wxhtmlwindowloadpage">wxHtmlWindow::LoadPage</ref>.

</description></function></member>
<member class="wxHtmlCell" name="SetId"><function type="void" name="SetId"><parameters><parameter type="const wxString&amp; " name="id"></parameter></parameters><description>

Sets unique cell identifier. Default value is no identifier, i.e. empty string.

</description></function></member>
<member class="wxHtmlCell" name="SetLink"><function type="void" name="SetLink"><parameters><parameter type="const wxHtmlLinkInfo&amp; " name="link"></parameter></parameters><description>

Sets the hypertext link associated with this cell. (Default value
is <ref target="wxhtmllinkinfo">wxHtmlLinkInfo</ref>(&quot;&quot;, &quot;&quot;) (no link))

</description></function></member>
<member class="wxHtmlCell" name="SetNext"><function type="void" name="SetNext"><parameters><parameter type="wxHtmlCell " name="&#42;cell"></parameter></parameters><description>

Sets the next cell in the list. This shouldn't be called by user - it is
to be used only by <ref target="wxhtmlcontainercellinsertcell">wxHtmlContainerCell::InsertCell</ref>.

</description></function></member>
<member class="wxHtmlCell" name="SetParent"><function type="void" name="SetParent"><parameters><parameter type="wxHtmlContainerCell " name="&#42;p"></parameter></parameters><description>

Sets parent container of this cell. This is called from
<ref target="wxhtmlcontainercellinsertcell">wxHtmlContainerCell::InsertCell</ref>.

</description></function></member>
<member class="wxHtmlCell" name="SetPos"><function type="void" name="SetPos"><parameters><parameter type="int " name="x"></parameter><parameter type="int " name="y"></parameter></parameters><description>

Sets the cell's position within parent container.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHtmlColourCell">
<description>
<p class="classdesc">
This cell changes the colour of either the background or the foreground. </p>
</description>
<parents>
<classref name="wxHtmlCell"/>

</parents>
<includes>
<header name="wx/html/htmlcell.h"/></includes>
<members>
<member class="wxHtmlColourCell" name="wxHtmlColourCell"><function type="" name="wxHtmlColourCell"><parameters><parameter type="wxColour " name="clr">The color</parameter><parameter type="int " name="flags" value="wxHTML_CLR_FOREGROUND"></parameter></parameters><description>

Constructor.







</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHtmlContainerCell">
<description>
<p class="classdesc">
The wxHtmlContainerCell class is an implementation of a cell that may
contain more cells in it. It is heavily used in the wxHTML layout algorithm.</p>
</description>
<parents>
<classref name="wxHtmlCell"/>

</parents>
<includes>
<header name="wx/html/htmlcell.h"/></includes>
<seealso>

<ref target="cells">Cells Overview</ref>

</seealso>
<members>
<member class="wxHtmlContainerCell" name="wxHtmlContainerCell"><function type="" name="wxHtmlContainerCell"><parameters><parameter type="wxHtmlContainerCell " name="&#42;parent"></parameter></parameters><description>

Constructor. <i> parent</i> is pointer to parent container or NULL.


</description></function></member>
<member class="wxHtmlContainerCell" name="GetAlignHor"><function type="int" name="GetAlignHor" suffix="const"><description>

Returns container's horizontal alignment.

</description></function></member>
<member class="wxHtmlContainerCell" name="GetAlignVer"><function type="int" name="GetAlignVer" suffix="const"><description>

Returns container's vertical alignment.

</description></function></member>
<member class="wxHtmlContainerCell" name="GetBackgroundColour"><function type="wxColour" name="GetBackgroundColour"><description>

Returns the background colour of the container or <tt> wxNullColour</tt> if no background
colour is set.

</description></function></member>
<member class="wxHtmlContainerCell" name="GetFirstCell"><function type="wxHtmlCell&#42;" name="GetFirstCell"><description>

Returns pointer to the first cell in the list.
You can then use wxHtmlCell's GetNext method to obtain pointer to the next
cell in list.

<b> Note:</b> This shouldn't be used by the end user. If you need some way of
finding particular cell in the list, try <ref target="wxhtmlcellfind">Find</ref> method
instead.

</description></function></member>
<member class="wxHtmlContainerCell" name="GetIndent"><function type="int" name="GetIndent" suffix="const"><parameters><parameter type="int " name="ind"></parameter></parameters><description>

Returns the indentation. <i> ind</i> is one of the <b> wxHTML_INDENT_&#42;</b> constants.

<b> Note:</b> You must call <ref target="wxhtmlcontainercellgetindentunits">GetIndentUnits</ref> 
with same <i> ind</i> parameter in order to correctly interpret the returned integer value.
It is NOT always in pixels!

</description></function></member>
<member class="wxHtmlContainerCell" name="GetIndentUnits"><function type="int" name="GetIndentUnits" suffix="const"><parameters><parameter type="int " name="ind"></parameter></parameters><description>

Returns the units of indentation for <i> ind</i> where <i> ind</i> is one
of the <b> wxHTML_INDENT_&#42;</b> constants.

</description></function></member>
<member class="wxHtmlContainerCell" name="InsertCell"><function type="void" name="InsertCell"><parameters><parameter type="wxHtmlCell " name="&#42;cell"></parameter></parameters><description>

Inserts new cell into the container.

</description></function></member>
<member class="wxHtmlContainerCell" name="SetAlign"><function type="void" name="SetAlign"><parameters><parameter type="const wxHtmlTag&amp; " name="tag"></parameter></parameters><description>

Sets the container's alignment (both horizontal and vertical) according to
the values stored in <i> tag</i>. (Tags <tt> ALIGN</tt> parameter is extracted.) In fact
it is only a front-end to <ref target="wxhtmlcontainercellsetalignhor">SetAlignHor</ref> 
and <ref target="wxhtmlcontainercellsetalignver">SetAlignVer</ref>.

</description></function></member>
<member class="wxHtmlContainerCell" name="SetAlignHor"><function type="void" name="SetAlignHor"><parameters><parameter type="int " name="al"></parameter></parameters><description>

Sets the container's <i> horizontal alignment</i>. During <ref target="wxhtmlcelllayout">Layout</ref> 
each line is aligned according to <i> al</i> value.





</description></function></member>
<member class="wxHtmlContainerCell" name="SetAlignVer"><function type="void" name="SetAlignVer"><parameters><parameter type="int " name="al"></parameter></parameters><description>

Sets the container's <i> vertical alignment</i>. This is per-line alignment!





</description></function></member>
<member class="wxHtmlContainerCell" name="SetBackgroundColour"><function type="void" name="SetBackgroundColour"><parameters><parameter type="const wxColour&amp; " name="clr"></parameter></parameters><description>

Sets the background colour for this container.

</description></function></member>
<member class="wxHtmlContainerCell" name="SetBorder"><function type="void" name="SetBorder"><parameters><parameter type="const wxColour&amp; " name="clr1">Colour of top and left lines</parameter><parameter type="const wxColour&amp; " name="clr2">Colour of bottom and right lines</parameter></parameters><description>

Sets the border (frame) colours. A border is a rectangle around the container.







</description></function></member>
<member class="wxHtmlContainerCell" name="SetIndent"><function type="void" name="SetIndent"><parameters><parameter type="int " name="i">Indentation value.</parameter><parameter type="int " name="what"></parameter><parameter type="int " name="units" value="wxHTML_UNITS_PIXELS"></parameter></parameters><description>

Sets the indentation (free space between borders of container and subcells).









</description></function></member>
<member class="wxHtmlContainerCell" name="SetMinHeight"><function type="void" name="SetMinHeight"><parameters><parameter type="int " name="h">The minimal height.</parameter><parameter type="int " name="align" value="wxHTML_ALIGN_TOP">If height of the container is lower than the minimum height, empty space must be inserted
somewhere in order to ensure minimal height. This parameter is one of <b> wxHTML_ALIGN_TOP,
wxHTML_ALIGN_BOTTOM, wxHTML_ALIGN_CENTER</b>. It refers to the <i> contents</i>, not to the
empty place.</parameter></parameters><description>

Sets minimal height of the container.

When container's <ref target="wxhtmlcelllayout">Layout</ref> is called, m_Height
is set depending on layout of subcells to the height of area covered
by layed-out subcells. Calling this method guarantees you that the height
of container is never smaller than <i> h</i> - even if the subcells cover
much smaller area.







</description></function></member>
<member class="wxHtmlContainerCell" name="SetWidthFloat"><function type="void" name="SetWidthFloat"><parameters><parameter type="int " name="w">Width of the container. If the value is negative it means
complement to full width of parent container (e.g.
<tt> SetWidthFloat(-50, wxHTML_UNITS_PIXELS)</tt> sets the width
of container to parent's width minus 50 pixels. This is useful when
creating tables - you can call SetWidthFloat(50) and SetWidthFloat(-50))</parameter><parameter type="int " name="units"></parameter></parameters><description>

</description></function>
<function type="void" name="SetWidthFloat"><parameters><parameter type="const wxHtmlTag&amp; " name="tag">In the second version of method, <i> w</i> and <i> units</i>
info is extracted from tag's <tt> WIDTH</tt> parameter.</parameter><parameter type="double " name="pixel_scale" value="1.0"></parameter></parameters><description>

Sets floating width adjustment.

The normal behaviour of container is that its width is the same as the width of
parent container (and thus you can have only one sub-container per line).
You can change this by setting FWA.

<i> pixel_scale</i> is number of real pixels that equals to 1 HTML pixel.









\pythonnote{The second form of this method is named
SetWidthFloatFromTag in wxPython.}








</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHtmlDCRenderer">
<description>
<p class="classdesc">
This class can render HTML document into a specified area of a DC. You can use it
in your own printing code, although use of <ref target="wxhtmleasyprinting">wxHtmlEasyPrinting</ref> 
or <ref target="wxhtmlprintout">wxHtmlPrintout</ref> is strongly recommended.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/html/htmprint.h"/></includes>
<members>
<member class="wxHtmlDCRenderer" name="wxHtmlDCRenderer"><function type="" name="wxHtmlDCRenderer"><description>

Constructor.

</description></function></member>
<member class="wxHtmlDCRenderer" name="SetDC"><function type="void" name="SetDC"><parameters><parameter type="wxDC&#42; " name="dc"></parameter><parameter type="double " name="pixel_scale" value="1.0"></parameter></parameters><description>

Assign DC instance to the renderer.

<i> pixel_scale</i> can be used when rendering to high-resolution DCs (e.g. printer) to adjust size of pixel metrics.
(Many dimensions in HTML are given in pixels -- e.g. image sizes. 300x300 image would be only one
inch wide on typical printer. With pixel_scale = 3.0 it would be 3 inches.)

</description></function></member>
<member class="wxHtmlDCRenderer" name="SetFonts"><function type="void" name="SetFonts"><parameters><parameter type="wxString " name="normal_face"></parameter><parameter type="wxString " name="fixed_face"></parameter><parameter type="const int " name="&#42;sizes" value="NULL"></parameter></parameters><description>

Sets fonts. See <ref target="wxhtmlwindowsetfonts">wxHtmlWindow::SetFonts</ref> for
detailed description.

See also <ref target="wxhtmldcrenderersetsize">SetSize</ref>.

</description></function></member>
<member class="wxHtmlDCRenderer" name="SetSize"><function type="void" name="SetSize"><parameters><parameter type="int " name="width"></parameter><parameter type="int " name="height"></parameter></parameters><description>

Set size of output rectangle, in pixels. Note that you <b> can't</b> change
width of the rectangle between calls to <ref target="wxhtmldcrendererrender">Render</ref>!
(You can freely change height.)

</description></function></member>
<member class="wxHtmlDCRenderer" name="SetHtmlText"><function type="void" name="SetHtmlText"><parameters><parameter type="const wxString&amp; " name="html">HTML text. This is <i> not</i> a filename.</parameter><parameter type="const wxString&amp; " name="basepath" value="wxEmptyString">base directory (html string would be stored there if it was in
file). It is used to determine path for loading images, for example.</parameter><parameter type="bool " name="isdir" value="true">false if basepath is filename, true if it is directory name
(see <ref target="wxfilesystem">wxFileSystem</ref> for detailed explanation)</parameter></parameters><description>

Assign text to the renderer. <ref target="wxhtmldcrendererrender">Render</ref> then draws 
the text onto DC.









</description></function></member>
<member class="wxHtmlDCRenderer" name="Render"><function type="int" name="Render"><parameters><parameter type="int " name="x"></parameter><parameter type="int " name="y"></parameter><parameter type="int " name="from" value="0">y-coordinate of the very first visible cell</parameter><parameter type="int " name="dont_render" value="false">if true then this method only returns y coordinate of the next page
and does not output anything</parameter></parameters><description>

Renders HTML text to the DC.









Returned value is y coordinate of first cell than didn't fit onto page.
Use this value as <i> from</i> in next call to Render in order to print multipages
document.

\wxheading{Caution!}

The Following three methods <b> must</b> always be called before any call to Render (preferably
in this order):

<ul><li> <ref target="wxhtmldcrenderersetdc">SetDC</ref>
</li>
<li> <ref target="wxhtmldcrenderersetsize">SetSize</ref>
</li>
<li> <ref target="wxhtmldcrenderersethtmltext">SetHtmlText</ref>
</li></ul>

<b> Render() changes the DC's user scale and does NOT restore it.</b>

</description></function></member>
<member class="wxHtmlDCRenderer" name="GetTotalHeight"><function type="int" name="GetTotalHeight"><description>

Returns the height of the HTML text. This is important if area height (see <ref target="wxhtmldcrenderersetsize">SetSize</ref>)
is smaller that total height and thus the page cannot fit into it. In that case you're supposed to
call <ref target="wxhtmldcrendererrender">Render</ref> as long as its return value is smaller than GetTotalHeight's.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHtmlEasyPrinting">
<description>
<p class="classdesc">
This class provides very simple interface to printing 
architecture. It allows you to print HTML documents using
only a few commands. </p>
</description>
<note>

Do not create this class on the stack only. You should create an instance on app 
startup and use this instance for all printing operations. The reason is that
this class stores various settings in it.

</note>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/html/htmprint.h"/></includes>
<members>
<member class="wxHtmlEasyPrinting" name="wxHtmlEasyPrinting"><function type="" name="wxHtmlEasyPrinting"><parameters><parameter type="const wxString&amp; " name="name" value="&quot;Printing&quot;">Name of the printing object. Used by preview frames and setup dialogs.</parameter><parameter type="wxWindow&#42; " name="parentWindow" value="NULL">pointer to the window that will own the preview frame and setup dialogs. May be NULL.</parameter></parameters><description>

Constructor.







</description></function></member>
<member class="wxHtmlEasyPrinting" name="PreviewFile"><function type="bool" name="PreviewFile"><parameters><parameter type="const wxString&amp; " name="htmlfile"></parameter></parameters><description>

Preview HTML file. 

Returns false in case of error -- call
<ref target="wxprintergetlasterror">wxPrinter::GetLastError</ref> to get detailed
information about the kind of the error.


</description></function></member>
<member class="wxHtmlEasyPrinting" name="PreviewText"><function type="bool" name="PreviewText"><parameters><parameter type="const wxString&amp; " name="htmltext">HTML text.</parameter><parameter type="const wxString&amp; " name="basepath" value="wxEmptyString">base directory (html string would be stored there if it was in
file). It is used to determine path for loading images, for example.</parameter></parameters><description>

Preview HTML text (not file!). 

Returns false in case of error -- call
<ref target="wxprintergetlasterror">wxPrinter::GetLastError</ref> to get detailed
information about the kind of the error.







</description></function></member>
<member class="wxHtmlEasyPrinting" name="PrintFile"><function type="bool" name="PrintFile"><parameters><parameter type="const wxString&amp; " name="htmlfile"></parameter></parameters><description>

Print HTML file.

Returns false in case of error -- call
<ref target="wxprintergetlasterror">wxPrinter::GetLastError</ref> to get detailed
information about the kind of the error.

</description></function></member>
<member class="wxHtmlEasyPrinting" name="PrintText"><function type="bool" name="PrintText"><parameters><parameter type="const wxString&amp; " name="htmltext">HTML text.</parameter><parameter type="const wxString&amp; " name="basepath" value="wxEmptyString">base directory (html string would be stored there if it was in
file). It is used to determine path for loading images, for example.</parameter></parameters><description>

Print HTML text (not file!). 

Returns false in case of error -- call
<ref target="wxprintergetlasterror">wxPrinter::GetLastError</ref> to get detailed
information about the kind of the error.







</description></function></member>
<member class="wxHtmlEasyPrinting" name="PrinterSetup"><function type="void" name="PrinterSetup"><description>

Display printer setup dialog and allows the user to modify settings. 

</description></function></member>
<member class="wxHtmlEasyPrinting" name="PageSetup"><function type="void" name="PageSetup"><description>

Display page setup dialog and allows the user to modify settings. 

</description></function></member>
<member class="wxHtmlEasyPrinting" name="SetFonts"><function type="void" name="SetFonts"><parameters><parameter type="wxString " name="normal_face"></parameter><parameter type="wxString " name="fixed_face"></parameter><parameter type="const int " name="&#42;sizes" value="NULL"></parameter></parameters><description>

Sets fonts. See <ref target="wxhtmlwindowsetfonts">wxHtmlWindow::SetFonts</ref> for
detailed description.

</description></function></member>
<member class="wxHtmlEasyPrinting" name="SetHeader"><function type="void" name="SetHeader"><parameters><parameter type="const wxString&amp; " name="header">HTML text to be used as header. You can use macros in it:

<ul><li> @PAGENUM@ is replaced by page number
</li>
<li> @PAGESCNT@ is replaced by total number of pages
</li></ul>
</parameter><parameter type="int " name="pg" value="wxPAGE_ALL">one of wxPAGE_ODD, wxPAGE_EVEN and wxPAGE_ALL constants.</parameter></parameters><description>

Set page header.







</description></function></member>
<member class="wxHtmlEasyPrinting" name="SetFooter"><function type="void" name="SetFooter"><parameters><parameter type="const wxString&amp; " name="footer">HTML text to be used as footer. You can use macros in it:

<ul><li> @PAGENUM@ is replaced by page number
</li>
<li> @PAGESCNT@ is replaced by total number of pages
</li></ul>
</parameter><parameter type="int " name="pg" value="wxPAGE_ALL">one of wxPAGE_ODD, wxPAGE_EVEN and wxPAGE_ALL constants.</parameter></parameters><description>

Set page footer.







</description></function></member>
<member class="wxHtmlEasyPrinting" name="GetPrintData"><function type="wxPrintData&#42;" name="GetPrintData"><description>

Returns pointer to <ref target="wxprintdata">wxPrintData</ref> instance used by this class. You can
set its parameters (via SetXXXX methods).

</description></function></member>
<member class="wxHtmlEasyPrinting" name="GetPageSetupData"><function type="wxPageSetupDialogData&#42;" name="GetPageSetupData"><description>

Returns a pointer to <ref target="wxpagesetupdialogdata">wxPageSetupDialogData</ref> instance used by 
this class. You can set its parameters (via SetXXXX methods).

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHtmlFilter">
<description>
<p class="classdesc">
This class is an input filter for <ref target="wxhtmlwindow">wxHtmlWindow</ref>.
It allows you to read and display files of different file formats.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/html/htmlfilt.h"/></includes>
<seealso>

<ref target="filters">Overview</ref>

</seealso>
<members>
<member class="wxHtmlFilter" name="wxHtmlFilter"><function type="" name="wxHtmlFilter"><description>

Constructor.

</description></function></member>
<member class="wxHtmlFilter" name="CanRead"><function type="bool" name="CanRead"><parameters><parameter type="const wxFSFile&amp; " name="file"></parameter></parameters><description>

Returns true if this filter is capable of reading file <i> file</i>.

Example:

<pre>
bool MyFilter::CanRead(const wxFSFile&amp; file)
{
    return (file.GetMimeType() == &quot;application/x-ugh&quot;);
}
</pre>

</description></function></member>
<member class="wxHtmlFilter" name="ReadFile"><function type="wxString" name="ReadFile"><parameters><parameter type="const wxFSFile&amp; " name="file"></parameter></parameters><description>

Reads the file and returns string with HTML document.

Example:

<pre>
wxString MyImgFilter::ReadFile(const wxFSFile&amp; file)
{
    return &quot;&lt;html&gt;&lt;body&gt;&lt;img src=\&quot;&quot; +
           file.GetLocation() +
	   &quot;\&quot;&gt;&lt;/body&gt;&lt;/html&gt;&quot;;
}
</pre>

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHtmlHelpController">
<description>
<p class="classdesc">
<b> WARNING!</b> Although this class has an API compatible with other wxWindows
help controllers as documented by <ref target="wxhelpcontroller">wxHelpController</ref>, it
is recommended that you use the enhanced capabilities of wxHtmlHelpController's API.</p><p class="classdesc">This help controller provides an easy way of displaying HTML help in your
application (see <i> test</i> sample). The help system is based on <b> books</b> 
(see <ref target="wxhtmlhelpcontrolleraddbook">AddBook</ref>). A book is a logical
section of documentation (for example &quot;User's Guide&quot; or &quot;Programmer's Guide&quot; or
&quot;C++ Reference&quot; or &quot;wxWindows Reference&quot;). The help controller can handle as
many books as you want.</p><p class="classdesc">wxHTML uses Microsoft's HTML Help Workshop project files (.hhp, .hhk, .hhc) as its
native format. The file format is described <ref target="helpformat">here</ref>.
Have a look at docs/html/ directory where sample project files are stored.</p><p class="classdesc">You can use Tex2RTF to produce these files when generating HTML, if you set <b> htmlWorkshopFiles</b> to <b> true</b> in
your tex2rtf.ini file.</p>
</description>
<note>

It is strongly recommended to use preprocessed <b> .hhp.cached</b> version of
projects. It can be either created on-the-fly (see 
<ref target="wxhtmlhelpcontrollersettempdir">SetTempDir</ref>) or you can use 
<b> hhp2cached</b> utility from <i> utils/hhp2cached</i> to create it and
distribute the cached version together with helpfiles. See <i> samples/html/help</i> 
sample for demonstration of its use.

</note>
<parents>

</parents>
<includes>
<header name="wx/html/helpctrl.h"/></includes>
<seealso>

<ref target="wxhelpcontroller">Information about wxBestHelpController</ref>

</seealso>
<members>
<member class="wxHtmlHelpController" name="wxHtmlHelpController"><function type="" name="wxHtmlHelpController"><parameters><parameter type="int " name="style" value="wxHF_DEFAULT_STYLE"></parameter></parameters><description>

Constructor.



<i> style</i> is combination of these flags:

<table>
<tr><td>\windowstyle{wxHF_TOOLBAR}</td><td>Help frame has toolbar.</td></tr>
<tr><td>\windowstyle{wxHF_FLAT_TOOLBAR}</td><td>Help frame has toolbar with flat buttons (aka coolbar).</td></tr>
<tr><td>\windowstyle{wxHF_CONTENTS}</td><td>Help frame has contents panel.</td></tr>
<tr><td>\windowstyle{wxHF_INDEX}</td><td>Help frame has index panel.</td></tr>
<tr><td>\windowstyle{wxHF_SEARCH}</td><td>Help frame has search panel.</td></tr>
<tr><td>\windowstyle{wxHF_BOOKMARKS}</td><td>Help frame has bookmarks controls.</td></tr>
<tr><td>\windowstyle{wxHF_OPEN_FILES}</td><td>Allow user to open arbitrary HTML document.</td></tr>
<tr><td>\windowstyle{wxHF_PRINT}</td><td>Toolbar contains &quot;print&quot; button.</td></tr>
<tr><td>\windowstyle{wxHF_MERGE_BOOKS}</td><td>Contents pane does not show
book nodes. All books are merged together and appear as single book to the
user.</td></tr>
<tr><td>\windowstyle{wxHF_ICONS_BOOK}</td><td>All nodes in contents pane
have a book icon. This is how Microsoft's HTML help viewer behaves.</td></tr>
<tr><td>\windowstyle{wxHF_ICONS_FOLDER}</td><td>Book nodes in contents pane have
a book icon, book's sections have a folder icon. This is the default.</td></tr>
<tr><td>\windowstyle{wxHF_ICONS_BOOK_CHAPTER}</td><td>Both book nodes and
nodes of top-level sections of a book (i.e. chapters) have a book icon,
all other sections (sections, subsections, ...) have a folder icon.</td></tr>
<tr><td>\windowstyle{wxHF_DEFAULT_STYLE}</td><td><tt> wxHF_TOOLBAR | wxHF_CONTENTS
| wxHF_INDEX | wxHF_SEARCH | wxHF_BOOKMARKS | wxHF_PRINT</tt></td></tr>
</table>

</description></function></member>
<member class="wxHtmlHelpController" name="AddBook"><function type="bool" name="AddBook"><parameters><parameter type="const wxFileName&amp; " name="book_file">Help book filename. It is recommended to use this prototype
instead of the one taking URL, because it is less error-prone.</parameter><parameter type="bool " name="show_wait_msg">If true then a decoration-less window with progress message is displayed.</parameter></parameters><description>

</description></function>
<function type="bool" name="AddBook"><parameters><parameter type="const wxString&amp; " name="book_url">Help book URL (note that syntax of filename and URL is 
different on most platforms)</parameter><parameter type="bool " name="show_wait_msg">If true then a decoration-less window with progress message is displayed.</parameter></parameters><note>

Don't forget to install wxFileSystem ZIP handler with
<tt> wxFileSystem::AddHandler(new wxZipFSHandler);</tt> before calling this method
on a .zip or .htb file!

</note><description>

Adds book (<ref target="helpformat">.hhp file</ref> - HTML Help Workshop project file) into the list of loaded books.
This must be called at least once before displaying  any help.

<i> book_file</i> or <i> book_url</i>  may be either .hhp file or ZIP archive
that contains arbitrary number of .hhp files in 
top-level directory. This ZIP archive must have .zip or .htb extension
(the latter stands for &quot;HTML book&quot;). In other words,
<tt> AddBook(wxFileName(&quot;help.zip&quot;))</tt>
is possible and, in fact, recommended way.







</description></function></member>
<member class="wxHtmlHelpController" name="CreateHelpFrame"><function type="virtual wxHtmlHelpFrame&#42;" name="CreateHelpFrame"><parameters><parameter type="wxHtmlHelpData &#42; " name="data"></parameter></parameters><description>

This protected virtual method may be overridden so that the controller
uses slightly different frame. See <i> samples/html/helpview</i> sample for
an example.
</description></function></member>
<member class="wxHtmlHelpController" name="Display"><function type="void" name="Display"><parameters><parameter type="const wxString&amp; " name="x"></parameter></parameters><description>

Displays page <i> x</i>. This is THE important function - it is used to display
the help in application.

You can specify the page in many ways:

<ul><li> as direct filename of HTML document
</li>
<li> as chapter name (from contents) or as a book name
</li>
<li> as some word from index
</li>
<li> even as any word (will be searched)
</li></ul>

Looking for the page runs in these steps:

\begin{enumerate}\itemsep=0pt
\item try to locate file named x (if x is for example &quot;doc/howto.htm&quot;)
\item try to open starting page of book named x
\item try to find x in contents (if x is for example &quot;How To ...&quot;)
\item try to find x in index (if x is for example &quot;How To ...&quot;)
\item switch to Search panel and start searching
\end{enumerate}

</description></function>
<function type="void" name="Display"><parameters><parameter type="const int " name="id"></parameter></parameters><description>

This alternative form is used to search help contents by numeric IDs.

\pythonnote{The second form of this method is named DisplayId in
wxPython.}

</description></function></member>
<member class="wxHtmlHelpController" name="DisplayContents"><function type="void" name="DisplayContents"><description>

Displays help window and focuses contents panel.

</description></function></member>
<member class="wxHtmlHelpController" name="DisplayIndex"><function type="void" name="DisplayIndex"><description>

Displays help window and focuses index panel.

</description></function></member>
<member class="wxHtmlHelpController" name="KeywordSearch"><function type="bool" name="KeywordSearch"><parameters><parameter type="const wxString&amp; " name="keyword"></parameter></parameters><description>

Displays help window, focuses search panel and starts searching.
Returns true if the keyword was found.

<b> Important:</b> KeywordSearch searches only pages listed in .hhc file(s).
You should list all pages in the contents file.

</description></function></member>
<member class="wxHtmlHelpController" name="ReadCustomization"><function type="void" name="ReadCustomization"><parameters><parameter type="wxConfigBase&#42; " name="cfg"></parameter><parameter type="wxString " name="path" value="wxEmptyString"></parameter></parameters><description>

Reads the controller's setting (position of window, etc.)

</description></function></member>
<member class="wxHtmlHelpController" name="SetTempDir"><function type="void" name="SetTempDir"><parameters><parameter type="const wxString&amp; " name="path"></parameter></parameters><description>

Sets the path for storing temporary files - cached binary versions of index and contents files. These binary
forms are much faster to read. Default value is empty string (empty string means
that no cached data are stored). Note that these files are <i> not</i> 
deleted when program exits.

Once created these cached files will be used in all subsequent executions 
of your application. If cached files become older than corresponding .hhp
file (e.g. if you regenerate documentation) it will be refreshed.

</description></function></member>
<member class="wxHtmlHelpController" name="SetTitleFormat"><function type="void" name="SetTitleFormat"><parameters><parameter type="const wxString&amp; " name="format"></parameter></parameters><description>

Sets format of title of the frame. Must contain exactly one &quot;\(for title of displayed HTML page).

</description></function></member>
<member class="wxHtmlHelpController" name="UseConfig"><function type="void" name="UseConfig"><parameters><parameter type="wxConfigBase&#42; " name="config"></parameter><parameter type="const wxString&amp; " name="rootpath" value="wxEmptyString"></parameter></parameters><description>

Associates <i> config</i> object with the controller.

If there is associated config object, wxHtmlHelpController automatically
reads and writes settings (including wxHtmlWindow's settings) when needed.

The only thing you must do is create wxConfig object and call UseConfig.

If you do not use <i> UseConfig</i>, wxHtmlHelpController will use 
default wxConfig object if available (for details see 
<ref target="wxconfigbaseget">wxConfigBase::Get</ref> and 
<ref target="wxconfigbaseset">wxConfigBase::Set</ref>).

</description></function></member>
<member class="wxHtmlHelpController" name="WriteCustomization"><function type="void" name="WriteCustomization"><parameters><parameter type="wxConfigBase&#42; " name="cfg"></parameter><parameter type="wxString " name="path" value="wxEmptyString"></parameter></parameters><description>

Stores controllers setting (position of window etc.)

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class>
<class name="wxHtmlHelpData">
<description>
<p class="classdesc">
This class is used by <ref target="wxhtmlhelpcontroller">wxHtmlHelpController</ref> 
and <ref target="wxhtmlhelpframe">wxHtmlHelpFrame</ref> to access HTML help items.
It is internal class and should not be used directly - except for the case 
you're writing your own HTML help controller.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/html/helpdata.h"/></includes>
<members>
<member class="wxHtmlHelpData" name="wxHtmlHelpData"><function type="" name="wxHtmlHelpData"><description>

Constructor.

</description></function></member>
<member class="wxHtmlHelpData" name="AddBook"><function type="bool" name="AddBook"><parameters><parameter type="const wxString&amp; " name="book_url"></parameter></parameters><description>

Adds new book. <i> book</i> is URL (not filename!) of HTML help project (hhp)
or ZIP file that contains arbitrary number of .hhp projects (this zip
file can have either .zip or .htb extension, htb stands for &quot;html book&quot;).
Returns success.

</description></function></member>
<member class="wxHtmlHelpData" name="FindPageById"><function type="wxString" name="FindPageById"><parameters><parameter type="int " name="id"></parameter></parameters><description>

Returns page's URL based on integer ID stored in project.

</description></function></member>
<member class="wxHtmlHelpData" name="FindPageByName"><function type="wxString" name="FindPageByName"><parameters><parameter type="const wxString&amp; " name="page"></parameter></parameters><description>

Returns page's URL based on its (file)name.

</description></function></member>
<member class="wxHtmlHelpData" name="GetBookRecArray"><function type="const wxHtmlBookRecArray&amp;" name="GetBookRecArray"><description>

Returns array with help books info.

</description></function></member>
<member class="wxHtmlHelpData" name="GetContents"><function type="wxHtmlContentsItem&#42;" name="GetContents"><description>

Returns contents lists pointer.

</description></function></member>
<member class="wxHtmlHelpData" name="GetContentsCnt"><function type="int" name="GetContentsCnt"><description>

Returns size of contents list.

</description></function></member>
<member class="wxHtmlHelpData" name="GetIndex"><function type="wxHtmlContentsItem&#42;" name="GetIndex"><description>

Returns pointer to index items list.

</description></function></member>
<member class="wxHtmlHelpData" name="GetIndexCnt"><function type="int" name="GetIndexCnt"><description>

Returns size of index list.

</description></function></member>
<member class="wxHtmlHelpData" name="SetTempDir"><function type="void" name="SetTempDir"><parameters><parameter type="const wxString&amp; " name="path"></parameter></parameters><description>

Sets temporary directory where binary cached versions of MS HTML Workshop
files will be stored. (This is turned off by default and you can enable
this feature by setting non-empty temp dir.)

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHtmlHelpFrame">
<description>
<p class="classdesc">
This class is used by <ref target="wxhtmlhelpcontroller">wxHtmlHelpController</ref> 
to display help.
It is an internal class and should not be used directly - except for the case
when you're writing your own HTML help controller.</p>
</description>
<parents>
<classref name="wxFrame"/>

</parents>
<includes>
<header name="wx/html/helpfrm.h"/></includes>
<members>
<member class="wxHtmlHelpFrame" name="wxHtmlHelpFrame"><function type="" name="wxHtmlHelpFrame"><parameters><parameter type="wxHtmlHelpData&#42; " name="data" value="NULL"></parameter></parameters><description>

</description></function>
<function type="" name="wxHtmlHelpFrame"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="int " name="wxWindowID"></parameter><parameter type="const wxString&amp; " name="title" value="wxEmptyString"></parameter><parameter type="int " name="style" value="wxHF_DEFAULT_STYLE"></parameter><parameter type="wxHtmlHelpData&#42; " name="data" value="NULL"></parameter></parameters><description>

Constructor.

<i> style</i> is combination of these flags:

<table>
<tr><td>\windowstyle{wxHF_TOOLBAR}</td><td>Help frame has toolbar.</td></tr>
<tr><td>\windowstyle{wxHF_FLAT_TOOLBAR}</td><td>Help frame has toolbar with flat buttons (aka coolbar).</td></tr>
<tr><td>\windowstyle{wxHF_CONTENTS}</td><td>Help frame has contents panel.</td></tr>
<tr><td>\windowstyle{wxHF_INDEX}</td><td>Help frame has index panel.</td></tr>
<tr><td>\windowstyle{wxHF_SEARCH}</td><td>Help frame has search panel.</td></tr>
<tr><td>\windowstyle{wxHF_BOOKMARKS}</td><td>Help frame has bookmarks controls.</td></tr>
<tr><td>\windowstyle{wxHF_OPEN_FILES}</td><td>Allow user to open arbitrary HTML document.</td></tr>
<tr><td>\windowstyle{wxHF_PRINT}</td><td>Toolbar contains &quot;print&quot; button.</td></tr>
<tr><td>\windowstyle{wxHF_MERGE_BOOKS}</td><td>Contents pane does not show
book nodes. All books are merged together and appear as single book to the
user.</td></tr>
<tr><td>\windowstyle{wxHF_ICONS_BOOK}</td><td>All nodes in contents pane
have a book icon. This is how Microsoft's HTML help viewer behaves.</td></tr>
<tr><td>\windowstyle{wxHF_ICONS_FOLDER}</td><td>Book nodes in contents pane have
a book icon, book's sections have a folder icon. This is the default.</td></tr>
<tr><td>\windowstyle{wxHF_ICONS_BOOK_CHAPTER}</td><td>Both book nodes and
nodes of top-level sections of a book (i.e. chapters) have a book icon,
all other sections (sections, subsections, ...) have a folder icon.</td></tr>
<tr><td>\windowstyle{wxHF_DEFAULT_STYLE}</td><td><tt> wxHF_TOOLBAR | wxHF_CONTENTS
| wxHF_INDEX | wxHF_SEARCH | wxHF_BOOKMARKS | wxHF_PRINT</tt></td></tr>
</table>

</description></function></member>
<member class="wxHtmlHelpFrame" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxString&amp; " name="title" value="wxEmptyString"></parameter><parameter type="int " name="style" value="wxHF_DEFAULT_STYLE"></parameter></parameters><description>

Creates the frame. See <ref target="wxhtmlhelpframewxhtmlhelpframe">the constructor</ref>
for parameters description.

</description></function></member>
<member class="wxHtmlHelpFrame" name="CreateContents"><function type="void" name="CreateContents"><parameters><parameter type="bool " name="show_progress" value="false"></parameter></parameters><description>

Creates contents panel. (May take some time.)

</description></function></member>
<member class="wxHtmlHelpFrame" name="CreateIndex"><function type="void" name="CreateIndex"><parameters><parameter type="bool " name="show_progress" value="false"></parameter></parameters><description>

Creates index panel. (May take some time.)

</description></function></member>
<member class="wxHtmlHelpFrame" name="CreateSearch"><function type="void" name="CreateSearch"><description>

Creates search panel.

</description></function></member>
<member class="wxHtmlHelpFrame" name="Display"><function type="bool" name="Display"><parameters><parameter type="const wxString&amp; " name="x"></parameter></parameters><description>

</description></function>
<function type="bool" name="Display"><parameters><parameter type="const int " name="id"></parameter></parameters><description>

Displays page x. If not found it will give the user the choice of
searching books.
Looking for the page runs in these steps:

\begin{enumerate}\itemsep=0pt
\item try to locate file named x (if x is for example &quot;doc/howto.htm&quot;)
\item try to open starting page of book x
\item try to find x in contents (if x is for example &quot;How To ...&quot;)
\item try to find x in index (if x is for example &quot;How To ...&quot;)
\end{enumerate}

The second form takes numeric ID as the parameter.
(uses extension to MS format, &lt;param name=&quot;ID&quot; value=id&gt;)

\pythonnote{The second form of this method is named DisplayId in
wxPython.}

</description></function></member>
<member class="wxHtmlHelpFrame" name="DisplayContents"><function type="bool" name="DisplayContents"><description>

Displays contents panel.

</description></function></member>
<member class="wxHtmlHelpFrame" name="DisplayIndex"><function type="bool" name="DisplayIndex"><description>

Displays index panel.

</description></function></member>
<member class="wxHtmlHelpFrame" name="GetData"><function type="wxHtmlHelpData&#42;" name="GetData"><description>

Return wxHtmlHelpData object.

</description></function></member>
<member class="wxHtmlHelpFrame" name="KeywordSearch"><function type="bool" name="KeywordSearch"><parameters><parameter type="const wxString&amp; " name="keyword"></parameter></parameters><description>

Search for given keyword.

</description></function></member>
<member class="wxHtmlHelpFrame" name="ReadCustomization"><function type="void" name="ReadCustomization"><parameters><parameter type="wxConfigBase&#42; " name="cfg"></parameter><parameter type="const wxString&amp; " name="path" value="wxEmptyString"></parameter></parameters><description>

Reads user's settings for this frame (see <ref target="wxhtmlhelpcontrollerreadcustomization">wxHtmlHelpController::ReadCustomization</ref>)

</description></function></member>
<member class="wxHtmlHelpFrame" name="RefreshLists"><function type="void" name="RefreshLists"><parameters><parameter type="bool " name="show_progress" value="false"></parameter></parameters><description>

Refresh all panels. This is necessary if a new book was added.

</description></function></member>
<member class="wxHtmlHelpFrame" name="SetTitleFormat"><function type="void" name="SetTitleFormat"><parameters><parameter type="const wxString&amp; " name="format"></parameter></parameters><description>

Sets the frame's title format. <i> format</i> must contain exactly one &quot;\(it will be replaced by the page title).

</description></function></member>
<member class="wxHtmlHelpFrame" name="UseConfig"><function type="void" name="UseConfig"><parameters><parameter type="wxConfigBase&#42; " name="config"></parameter><parameter type="const wxString&amp; " name="rootpath" value="wxEmptyString"></parameter></parameters><description>

Add books to search choice panel.

</description></function></member>
<member class="wxHtmlHelpFrame" name="WriteCustomization"><function type="void" name="WriteCustomization"><parameters><parameter type="wxConfigBase&#42; " name="cfg"></parameter><parameter type="const wxString&amp; " name="path" value="wxEmptyString"></parameter></parameters><description>

Saves user's settings for this frame (see <ref target="wxhtmlhelpcontrollerwritecustomization">wxHtmlHelpController::WriteCustomization</ref>).

</description></function></member>
<member class="wxHtmlHelpFrame" name="AddToolbarButtons"><function type="virtual void" name="AddToolbarButtons"><parameters><parameter type="wxToolBar &#42;" name="toolBar"></parameter><parameter type="int " name="style"></parameter></parameters><description> 

You may override this virtual method to add more buttons into help frame's
toolbar. <i> toolBar</i> is a pointer to the toolbar and <i> style</i> is the style
flag as passed to Create method.

wxToolBar::Realize is called immediately after returning from this function.

See <i> samples/html/helpview</i> for an example.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHtmlLinkInfo">
<description>
<p class="classdesc">
This class stores all necessary information about hypertext
links (as represented by <tt> &lt;A&gt;</tt> tag in HTML documents). In 
current implementation it stores URL and target frame name. 
<i> Note that frames are not currently supported by wxHTML!</i></p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/html/htmlcell.h"/></includes>
<members>
<member class="wxHtmlLinkInfo" name="wxHtmlLinkInfo"><function type="" name="wxHtmlLinkInfo"><description>

Default ctor.

</description></function>
<function type="" name="wxHtmlLinkInfo"><parameters><parameter type="const wxString&amp; " name="href"></parameter><parameter type="const wxString&amp; " name="target" value="wxEmptyString"></parameter></parameters><description>

Construct hypertext link from HREF (aka URL) and TARGET (name of target
frame).

</description></function></member>
<member class="wxHtmlLinkInfo" name="GetEvent"><function type="const wxMouseEvent &#42;" name="GetEvent"><description>

Return pointer to event that generated OnLinkClicked event. Valid
only within <ref target="wxhtmlwindowonlinkclicked">wxHtmlWindow::OnLinkClicked</ref>,
NULL otherwise.

</description></function></member>
<member class="wxHtmlLinkInfo" name="GetHtmlCell"><function type="const wxHtmlCell &#42;" name="GetHtmlCell"><description>

Return pointer to the cell that was clicked. Valid
only within <ref target="wxhtmlwindowonlinkclicked">wxHtmlWindow::OnLinkClicked</ref>,
NULL otherwise.


</description></function></member>
<member class="wxHtmlLinkInfo" name="GetHref"><function type="wxString" name="GetHref"><description>

Return <i> HREF</i> value of the <tt> &lt;A&gt;</tt> tag.

</description></function></member>
<member class="wxHtmlLinkInfo" name="GetTarget"><function type="wxString" name="GetTarget"><description>

Return <i> TARGET</i> value of the <tt> &lt;A&gt;</tt> tag (this value
is used to specify in which frame should be the page pointed
by <ref target="wxhtmllinkinfogethref">Href</ref> opened).

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHtmlListBox">
<description>
<p class="classdesc">
wxHtmlListBox is an implementation of <ref target="wxvlistbox">wxVListBox</ref> which
shows HTML content in the listbox rows. This is still an abstract base class
and you will need to derive your own class from it (see htlbox sample for the
example) but you will only need to override a single 
<ref target="wxhtmllistboxongetitem">OnGetItem()</ref> function.</p>
</description>
<parents>
<classref name="wxVListBox"/>

</parents>
<includes>
<header name="wx/htmllbox.h"/></includes>
<members>
<member class="wxHtmlListBox" name="wxHtmlListBox"><function type="" name="wxHtmlListBox"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id" value="wxID_ANY"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="size_t " name="countItems" value="0"></parameter><parameter type="long " name="style" value="0"></parameter><parameter type="const wxString&amp; " name="name" value="wxVListBoxNameStr"></parameter></parameters><description>

Normal constructor which calls <ref target="wxhtmllistboxcreate">Create()</ref>
internally.

</description></function>
<function type="" name="wxHtmlListBox"><description>

Default constructor, you must call <ref target="wxhtmllistboxcreate">Create()</ref>
later.


</description></function></member>
<member class="wxHtmlListBox" name="~wxHtmlListBox"><function type="" name="~wxHtmlListBox"><description>

Destructor cleans up whatever resources we use.


</description></function></member>
<member class="wxHtmlListBox" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id" value="wxID_ANY"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long " name="style" value="0"></parameter><parameter type="const wxString&amp; " name="name" value="wxVListBoxNameStr"></parameter></parameters><description>

Creates the control and optionally sets the initial number of items in it
(it may also be set or changed later with 
<ref target="wxvlistboxsetitemcount">SetItemCount()</ref>).

There are no special styles defined for wxHtmlListBox, in particular the
wxListBox styles can not be used here.

Returns <tt> true</tt> on success or <tt> false</tt> if the control couldn't be created


</description></function></member>
<member class="wxHtmlListBox" name="GetSelectedTextBgColour"><function type="wxColour" name="GetSelectedTextBgColour" suffix="const"><parameters><parameter type="const wxColour&amp; " name="colBg"></parameter></parameters><seealso>

<ref target="wxhtmllistboxgetselectedtextcolour">GetSelectedTextColour</ref>


</seealso><description>

This virtual function may be overridden to change the appearance of the
background of the selected cells in the same way as 
<ref target="wxhtmllistboxgetselectedtextcolour">GetSelectedTextColour</ref>.

It should be rarely, if ever, used because 
<ref target="wxvlistboxsetselectionbackground">SetSelectionBackground</ref> allows to
change the selection background for all cells at once and doing anything more
fancy is probably going to look strangely.

</description></function></member>
<member class="wxHtmlListBox" name="GetSelectedTextColour"><function type="wxColour" name="GetSelectedTextColour" suffix="const"><parameters><parameter type="const wxColour&amp; " name="colFg"></parameter></parameters><seealso>

<ref target="wxhtmllistboxgetselectedtextbgcolour">GetSelectedTextBgColour</ref>,<br/>
<ref target="wxvlistboxsetselectionbackground">SetSelectionBackground</ref>,<br/>
<ref target="wxsystemsettingsgetcolour">wxSystemSettings::GetColour</ref>


</seealso><description>

This virtual function may be overridden to customize the appearance of the
selected cells. It is used to determine how the colour <i> colFg</i> is going to
look inside selection. By default all original colours are completely ignored
and the standard, system-dependent, selection colour is used but the program
may wish to override this to achieve some custom appearance.

</description></function></member>
<member class="wxHtmlListBox" name="OnGetItem"><function type="wxString" name="OnGetItem" suffix="const"><parameters><parameter type="size_t " name="n"></parameter></parameters><description>

This method must be implemented in the derived class and should return
the body (i.e. without <tt> &lt;html&gt;</tt> nor <tt> &lt;body&gt;</tt> tags) of the HTML fragment
for the given item.


</description></function></member>
<member class="wxHtmlListBox" name="OnGetItemMarkup"><function type="wxString" name="OnGetItemMarkup" suffix="const"><parameters><parameter type="size_t " name="n"></parameter></parameters><description>

This function may be overridden to decorate HTML returned by
<ref target="wxhtmllistboxongetitem">OnGetItem()</ref>.

</description></function></member></members>
<supported>
</supported>
</class><class name="wxHtmlParser">
<description>
<p class="classdesc">
This class handles the <b> generic</b> parsing of HTML document: it scans
the document and divide it into blocks of tags (where one block
consists of beginning and ending tag and of text between these
two tags).</p><p class="classdesc">It is independent from wxHtmlWindow and can be used as stand-alone parser
(Julian Smart's idea of speech-only HTML viewer or wget-like utility -
see InetGet sample for example).</p><p class="classdesc">It uses system of tag handlers to parse the HTML document. Tag handlers
are not statically shared by all instances but are created for each
wxHtmlParser instance. The reason is that the handler may contain
document-specific temporary data used during parsing (e.g. complicated
structures like tables).</p><p class="classdesc">Typically the user calls only the <ref target="wxhtmlparserparse">Parse</ref> method.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/html/htmlpars.h"/></includes>
<seealso>

<ref target="cells">Cells Overview</ref>,
<ref target="handlers">Tag Handlers Overview</ref>,
<ref target="wxhtmltag">wxHtmlTag</ref>

</seealso>
<members>
<member class="wxHtmlParser" name="wxHtmlParser"><function type="" name="wxHtmlParser"><description>

Constructor.

</description></function></member>
<member class="wxHtmlParser" name="AddTag"><function type="void" name="AddTag"><parameters><parameter type="const wxHtmlTag&amp; " name="tag"></parameter></parameters><description>

This may (and may not) be overwritten in derived class.

This method is called each time new tag is about to be added. 
<i> tag</i> contains information about the tag. (See <ref target="wxhtmltag">wxHtmlTag</ref>
for details.)

Default (wxHtmlParser) behaviour is this:
First it finds a handler capable of handling this tag and then it calls
handler's HandleTag method.

</description></function></member>
<member class="wxHtmlParser" name="AddTagHandler"><function type="virtual void" name="AddTagHandler"><parameters><parameter type="wxHtmlTagHandler " name="&#42;handler"></parameter></parameters><description>

Adds handler to the internal list (&amp; hash table) of handlers. This
method should not be called directly by user but rather by derived class'
constructor.

This adds the handler to this <b> instance</b> of wxHtmlParser, not to
all objects of this class! (Static front-end to AddTagHandler is provided
by wxHtmlWinParser).

All handlers are deleted on object deletion.

</description></function></member>
<member class="wxHtmlParser" name="AddText"><function type="virtual void" name="AddWord"><parameters><parameter type="const char&#42; " name="txt"></parameter></parameters><description>

Must be overwritten in derived class.

This method is called by <ref target="wxhtmlparserdoparsing">DoParsing</ref>
each time a part of text is parsed. <i> txt</i> is NOT only one word, it is
substring of input. It is not formatted or preprocessed (so white spaces are
unmodified).

</description></function></member>
<member class="wxHtmlParser" name="DoParsing"><function type="void" name="DoParsing"><parameters><parameter type="int " name="begin_pos"></parameter><parameter type="int " name="end_pos"></parameter></parameters><description>

</description></function>
<function type="void" name="DoParsing"><description>

Parses the m_Source from begin_pos to end_pos-1.
(in noparams version it parses whole m_Source)

</description></function></member>
<member class="wxHtmlParser" name="DoneParser"><function type="virtual void" name="DoneParser"><description>

This must be called after DoParsing().

</description></function></member>
<member class="wxHtmlParser" name="GetFS"><function type="wxFileSystem&#42;" name="GetFS" suffix="const"><description>

Returns pointer to the file system. Because each tag handler has
reference to it is parent parser it can easily request the file by
calling

<pre>
wxFSFile &#42;f = m_Parser -&gt; GetFS() -&gt; OpenFile(&quot;image.jpg&quot;);
</pre>

</description></function></member>
<member class="wxHtmlParser" name="GetProduct"><function type="virtual wxObject&#42;" name="GetProduct"><description>

Returns product of parsing. Returned value is result of parsing
of the document. The type of this result depends on internal
representation in derived parser (but it must be derived from wxObject!).

See wxHtmlWinParser for details.

</description></function></member>
<member class="wxHtmlParser" name="GetSource"><function type="wxString&#42;" name="GetSource"><description>

Returns pointer to the source being parsed.


</description></function></member>
<member class="wxHtmlParser" name="InitParser"><function type="virtual void" name="InitParser"><parameters><parameter type="const wxString&amp; " name="source"></parameter></parameters><description>

Setups the parser for parsing the <i> source</i> string. (Should be overridden
in derived class)

</description></function></member>
<member class="wxHtmlParser" name="OpenURL"><function type="virtual wxFSFile&#42;" name="OpenURL"><parameters><parameter type="wxHtmlURLType " name="type"></parameter><parameter type="const wxString&amp; " name="url">URL being opened.</parameter></parameters><note>

Always use this method in tag handlers instead of <tt> GetFS()-&gt;OpenFile()</tt> 
because it can block the URL and is thus more secure.

Default behaviour is to call <ref target="wxhtmlwindowonopeningurl">wxHtmlWindow::OnOpeningURL</ref>
of the associated wxHtmlWindow object (which may decide to block the URL or
redirect it to another one),if there's any, and always open the URL if the 
parser is not used with wxHtmlWindow.

Returned <tt> wxFSFile</tt> object is not guaranteed to point to <i> url</i>, it might
have been redirected!

</note><description>

Opens given URL and returns <tt> wxFSFile</tt> object that can be used to read data
from it. This method may return NULL in one of two cases: either the URL doesn't
point to any valid resource or the URL is blocked by overridden implementation
of <i> OpenURL</i> in derived class.







</description></function></member>
<member class="wxHtmlParser" name="Parse"><function type="wxObject&#42;" name="Parse"><parameters><parameter type="const wxString&amp; " name="source"></parameter></parameters><description>

Proceeds parsing of the document. This is end-user method. You can simply
call it when you need to obtain parsed output (which is parser-specific)

The method does these things:

\begin{enumerate}\itemsep=0pt
\item calls <ref target="wxhtmlparserinitparser">InitParser(source)</ref>
\item calls <ref target="wxhtmlparserdoparsing">DoParsing</ref>
\item calls <ref target="wxhtmlparsergetproduct">GetProduct</ref>
\item calls <ref target="wxhtmlparserdoneparser">DoneParser</ref>
\item returns value returned by GetProduct
\end{enumerate}

You shouldn't use InitParser, DoParsing, GetProduct or DoneParser directly.



</description></function></member>
<member class="wxHtmlParser" name="PushTagHandler"><function type="void" name="PushTagHandler"><parameters><parameter type="wxHtmlTagHandler&#42; " name="handler">the handler</parameter><parameter type="wxString " name="tags">List of tags (in same format as GetSupportedTags's return value). The parser
will redirect these tags to <i> handler</i> (until call to <ref target="wxhtmlparserpoptaghandler">PopTagHandler</ref>). </parameter></parameters><example>

Imagine you want to parse following pseudo-html structure:

<pre>
&lt;myitems&gt;
    &lt;param name=&quot;one&quot; value=&quot;1&quot;&gt;
    &lt;param name=&quot;two&quot; value=&quot;2&quot;&gt;
&lt;/myitems&gt;

&lt;execute&gt;
    &lt;param program=&quot;text.exe&quot;&gt;
&lt;/execute&gt;
</pre>

It is obvious that you cannot use only one tag handler for &lt;param&gt; tag.
Instead you must use context-sensitive handlers for &lt;param&gt; inside &lt;myitems&gt;
and &lt;param&gt; inside &lt;execute&gt;.        

This is the preferred solution:

<pre>
TAG_HANDLER_BEGIN(MYITEM, &quot;MYITEMS&quot;)
    TAG_HANDLER_PROC(tag)
    {
        // ...something...

        m_Parser -&gt; PushTagHandler(this, &quot;PARAM&quot;);
        ParseInner(tag);
        m_Parser -&gt; PopTagHandler();

        // ...something...
     }
TAG_HANDLER_END(MYITEM)
</pre>


</example><description>

Forces the handler to handle additional tags 
(not returned by <ref target="wxhtmltaghandlergetsupportedtags">GetSupportedTags</ref>). 
The handler should already be added to this parser.






</description></function></member>
<member class="wxHtmlParser" name="PopTagHandler"><function type="void" name="PopTagHandler"><description>

Restores parser's state before last call to 
<ref target="wxhtmlparserpushtaghandler">PushTagHandler</ref>.


</description></function></member>
<member class="wxHtmlParser" name="SetFS"><function type="void" name="SetFS"><parameters><parameter type="wxFileSystem " name="&#42;fs"></parameter></parameters><description>

Sets the virtual file system that will be used to request additional
files. (For example <tt> &lt;IMG&gt;</tt> tag handler requests wxFSFile with the
image data.)

</description></function></member>
<member class="wxHtmlParser" name="StopParsing"><function type="void" name="StopParsing"><description>

Call this function to interrupt parsing from a tag handler. No more tags
will be parsed afterward. This function may only be called from
<ref target="wxhtmlparserparse">wxHtmlParser::Parse</ref> or any function called
by it (i.e. from tag handlers).

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class>
<class name="wxHtmlPrintout">
<description>
<p class="classdesc">
This class serves as printout class for HTML documents.</p>
</description>
<parents>
<classref name="wxPrintout"/>


</parents>
<includes>
<header name="wx/html/htmprint.h"/></includes>
<members>
<member class="wxHtmlPrintout" name="wxHtmlPrintout"><function type="" name="wxHtmlPrintout"><parameters><parameter type="const wxString&amp; " name="title" value="&quot;Printout&quot;"></parameter></parameters><description>

Constructor. 


</description></function></member>
<member class="wxHtmlPrintout" name="SetFonts"><function type="void" name="SetFonts"><parameters><parameter type="wxString " name="normal_face"></parameter><parameter type="wxString " name="fixed_face"></parameter><parameter type="const int " name="&#42;sizes" value="NULL"></parameter></parameters><description>

Sets fonts. See <ref target="wxhtmlwindowsetfonts">wxHtmlWindow::SetFonts</ref> for
detailed description.

</description></function></member>
<member class="wxHtmlPrintout" name="SetFooter"><function type="void" name="SetFooter"><parameters><parameter type="const wxString&amp; " name="footer">HTML text to be used as footer. You can use macros in it:
<ul><li> @PAGENUM@ is replaced by page number
</li>
<li> @PAGESCNT@ is replaced by total number of pages
</li></ul>
</parameter><parameter type="int " name="pg" value="wxPAGE_ALL">one of wxPAGE_ODD, wxPAGE_EVEN and wxPAGE_ALL constants.</parameter></parameters><description>

Sets page footer.








</description></function></member>
<member class="wxHtmlPrintout" name="SetHeader"><function type="void" name="SetHeader"><parameters><parameter type="const wxString&amp; " name="header">HTML text to be used as header. You can use macros in it:
<ul><li> @PAGENUM@ is replaced by page number
</li>
<li> @PAGESCNT@ is replaced by total number of pages
</li></ul>
</parameter><parameter type="int " name="pg" value="wxPAGE_ALL">one of wxPAGE_ODD, wxPAGE_EVEN and wxPAGE_ALL constants.</parameter></parameters><description>

Sets page header.








</description></function></member>
<member class="wxHtmlPrintout" name="SetHtmlFile"><function type="void" name="SetHtmlFile"><parameters><parameter type="const wxString&amp; " name="htmlfile"></parameter></parameters><description>

Prepare the class for printing this HTML <b> file</b>. The file may be located on 
any virtual file system or it may be normal file.



</description></function></member>
<member class="wxHtmlPrintout" name="SetHtmlText"><function type="void" name="SetHtmlText"><parameters><parameter type="const wxString&amp; " name="html">HTML text. (NOT file!)</parameter><parameter type="const wxString&amp; " name="basepath" value="wxEmptyString">base directory (html string would be stored there if it was in
file). It is used to determine path for loading images, for example.</parameter><parameter type="bool " name="isdir" value="true">false if basepath is filename, true if it is directory name
(see <ref target="wxfilesystem">wxFileSystem</ref> for detailed explanation)</parameter></parameters><description>

Prepare the class for printing this HTML text.











</description></function></member>
<member class="wxHtmlPrintout" name="SetMargins"><function type="void" name="SetMargins"><parameters><parameter type="float " name="top" value="25.2"></parameter><parameter type="float " name="bottom" value="25.2"></parameter><parameter type="float " name="left" value="25.2"></parameter><parameter type="float " name="right" value="25.2"></parameter><parameter type="float " name="spaces" value="5"></parameter></parameters><description>

Sets margins in millimeters. Defaults to 1 inch for margins and 0.5cm for space
between text and header and/or footer

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHtmlTag">
<description>
<p class="classdesc">
This class represents a single HTML tag. 
It is used by <ref target="handlers">tag handlers</ref>.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/html/htmltag.h"/></includes>
<members>
<member class="wxHtmlTag" name="wxHtmlTag"><function type="" name="wxHtmlTag"><parameters><parameter type="const wxString&amp; " name="source"></parameter><parameter type="int " name="pos"></parameter><parameter type="int " name="end_pos"></parameter><parameter type="wxHtmlTagsCache&#42; " name="cache"></parameter></parameters><description>

Constructor. You will probably never have to construct a wxHtmlTag object
yourself. Feel free to ignore the constructor parameters.
Have a look at src/html/htmlpars.cpp if you're interested in creating it.

</description></function></member>
<member class="wxHtmlTag" name="GetAllParams"><function type="const wxString&amp;" name="GetAllParams" suffix="const"><description>

Returns a string containing all parameters.

Example : tag contains <tt> &lt;FONT SIZE=+2 COLOR=&quot;\#000000&quot;&gt;</tt>. Call to
tag.GetAllParams() would return <tt> SIZE=+2 COLOR=&quot;\#000000&quot;</tt>.


</description></function></member>
<member class="wxHtmlTag" name="GetBeginPos"><function type="int" name="GetBeginPos" suffix="const"><description>

Returns beginning position of the text <i> between</i> this tag and paired
ending tag. 
See explanation (returned position is marked with `|'):

<pre>
bla bla bla &lt;MYTAG&gt; bla bla internal text&lt;/MYTAG&gt; bla bla
                   |
</pre>


</description></function></member>
<member class="wxHtmlTag" name="GetEndPos1"><function type="int" name="GetEndPos1" suffix="const"><description>

Returns ending position of the text <i> between</i> this tag and paired
ending tag.
See explanation (returned position is marked with `|'):

<pre>
bla bla bla &lt;MYTAG&gt; bla bla internal text&lt;/MYTAG&gt; bla bla
                                        |
</pre>


</description></function></member>
<member class="wxHtmlTag" name="GetEndPos2"><function type="int" name="GetEndPos2" suffix="const"><description>

Returns ending position 2 of the text <i> between</i> this tag and paired
ending tag.
See explanation (returned position is marked with `|'):

<pre>
bla bla bla &lt;MYTAG&gt; bla bla internal text&lt;/MYTAG&gt; bla bla
                                               |
</pre>

</description></function></member>
<member class="wxHtmlTag" name="GetName"><function type="wxString" name="GetName" suffix="const"><description>

Returns tag's name. The name is always in uppercase and it doesn't contain
'&lt;' or '/' characters. (So the name of <tt> &lt;FONT SIZE=+2&gt;</tt> tag is &quot;FONT&quot;
and name of <tt> &lt;/table&gt;</tt> is &quot;TABLE&quot;)


</description></function></member>
<member class="wxHtmlTag" name="GetParam"><function type="wxString" name="GetParam" suffix="const"><parameters><parameter type="const wxString&amp; " name="par">The parameter's name.</parameter><parameter type="bool " name="with_commas" value="false">true if you want to get commas as well. See example.</parameter></parameters><example>

<pre>
...
/&#42; you have wxHtmlTag variable tag which is equal to
   HTML tag &lt;FONT SIZE=+2 COLOR=&quot;#0000FF&quot;&gt; &#42;/
dummy = tag.GetParam(&quot;SIZE&quot;);
   // dummy == &quot;+2&quot;
dummy = tag.GetParam(&quot;COLOR&quot;);
   // dummy == &quot;#0000FF&quot;
dummy = tag.GetParam(&quot;COLOR&quot;, true);
   // dummy == &quot;\&quot;#0000FF\&quot;&quot; -- see the difference!!
</pre>

</example><description>

Returns the value of the parameter. You should check whether the
parameter exists or not (use <ref target="wxhtmltaghasparam">HasParam</ref>) first.







</description></function></member>
<member class="wxHtmlTag" name="GetParamAsColour"><function type="bool" name="GetParamAsColour" suffix="const"><parameters><parameter type="const wxString&amp; " name="par"></parameter><parameter type="wxColour &#42;" name="clr"></parameter></parameters><description>

Interprets tag parameter <i> par</i> as colour specification and saves its value
into wxColour variable pointed by <i> clr</i>.

Returns true on success and false if <i> par</i> is not colour specification or
if the tag has no such parameter.

</description></function></member>
<member class="wxHtmlTag" name="GetParamAsInt"><function type="bool" name="GetParamAsInt" suffix="const"><parameters><parameter type="const wxString&amp; " name="par"></parameter><parameter type="int &#42;" name="value"></parameter></parameters><description>

Interprets tag parameter <i> par</i> as an integer and saves its value
into int variable pointed by <i> value</i>.

Returns true on success and false if <i> par</i> is not an integer or
if the tag has no such parameter.

</description></function></member>
<member class="wxHtmlTag" name="HasEnding"><function type="bool" name="HasEnding" suffix="const"><description>

Returns true if this tag is paired with ending tag, false otherwise.

See the example of HTML document:

<pre>
&lt;html&gt;&lt;body&gt;
Hello&lt;p&gt;
How are you?
&lt;p align=center&gt;This is centered...&lt;/p&gt;
Oops&lt;br&gt;Oooops!
&lt;/body&gt;&lt;/html&gt;
</pre>

In this example tags HTML and BODY have ending tags, first P and BR 
doesn't have ending tag while the second P has. The third P tag (which
is ending itself) of course doesn't have ending tag.

</description></function></member>
<member class="wxHtmlTag" name="HasParam"><function type="bool" name="HasParam" suffix="const"><parameters><parameter type="const wxString&amp; " name="par">the parameter you're looking for.</parameter></parameters><description>

Returns true if the tag has a parameter of the given name. 
Example : <tt> &lt;FONT SIZE=+2 COLOR=&quot;\#FF00FF&quot;&gt;</tt> has two parameters named
&quot;SIZE&quot; and &quot;COLOR&quot;.





</description></function></member>
<member class="wxHtmlTag" name="IsEnding"><function type="bool" name="IsEnding" suffix="const"><description>

Returns true if this tag is ending one.
(<tt> &lt;/FONT&gt;</tt> is ending tag, <tt> &lt;FONT&gt;</tt> is not)

</description></function></member>
<member class="wxHtmlTag" name="ScanParam"><function type="wxString" name="ScanParam" suffix="const"><parameters><parameter type="const wxString&amp; " name="par">The name of the tag you want to query</parameter><parameter type="const wxChar &#42;" name="format">scanf()-like format string.</parameter><parameter type="void &#42;" name="value">pointer to a variable to store the value in </parameter></parameters><description>

This method scans the given parameter. Usage is exactly the same as sscanf's 
usage except that you don't pass a string but a parameter name as the first
argument
and you can only retrieve one value (i.e. you can use only one &quot;\in <i> format</i>).










</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class>
<class name="wxHtmlTagHandler">
<description>

</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/html/htmlpars.h"/></includes>
<seealso>

<ref target="handlers">Overview</ref>,
<ref target="wxhtmltag">wxHtmlTag</ref>

</seealso>
<members>
<member class="wxHtmlTagHandler" name="m_Parser"></member>
<member class="wxHtmlTagHandler" name="wxHtmlTagHandler"><function type="" name="wxHtmlTagHandler"><description>

Constructor.

</description></function></member>
<member class="wxHtmlTagHandler" name="GetSupportedTags"><function type="virtual wxString" name="GetSupportedTags"><description>

Returns list of supported tags. The list is in uppercase and tags
are delimited by ','. Example : <tt> &quot;I,B,FONT,P&quot; </tt>

</description></function></member>
<member class="wxHtmlTagHandler" name="HandleTag"><function type="virtual bool" name="HandleTag"><parameters><parameter type="const wxHtmlTag&amp; " name="tag"></parameter></parameters><example>

<pre>
bool MyHandler::HandleTag(const wxHtmlTag&amp; tag)
{
    ...
    // change state of parser (e.g. set bold face)
    ParseInner(tag);
    ...
    // restore original state of parser
}
</pre>

You shouldn't call ParseInner if the tag is not paired with an ending one.

</example><returnvalue>

true if <ref target="wxhtmltaghandlerparseinner">ParseInner</ref> was called,
false otherwise.

</returnvalue><description>

This is the core method of each handler. It is called each time
one of supported tags is detected. <i> tag</i> contains all necessary
info (see <ref target="wxhtmltag">wxHtmlTag</ref> for details).

</description></function></member>
<member class="wxHtmlTagHandler" name="ParseInner"><function type="void" name="ParseInner"><parameters><parameter type="const wxHtmlTag&amp; " name="tag"></parameter></parameters><description>

This method calls parser's <ref target="wxhtmlparserdoparsing">DoParsing</ref> method
for the string between this tag and the paired ending tag:

<pre>
...&lt;A HREF=&quot;x.htm&quot;&gt;Hello, world!&lt;/A&gt;...
</pre>

In this example, a call to ParseInner (with <i> tag</i> pointing to A tag)
will parse 'Hello, world!'.

</description></function></member>
<member class="wxHtmlTagHandler" name="SetParser"><function type="virtual void" name="SetParser"><parameters><parameter type="wxHtmlParser " name="&#42;parser"></parameter></parameters><description>

Assigns <i> parser</i> to this handler. Each <b> instance</b> of handler 
is guaranteed to be called only from the parser.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHtmlTagsModule">
<description>
<p class="classdesc">
This class provides easy way of filling wxHtmlWinParser's table of
tag handlers. It is used almost exclusively together with the set of
<ref target="handlers">TAGS_MODULE_&#42; macros</ref></p>
</description>
<parents>
<classref name="wxModule"/>

</parents>
<includes>
<header name="wx/html/winpars.h"/></includes>
<seealso>

<ref target="handlers">Tag Handlers</ref>,
<ref target="wxhtmltaghandler">wxHtmlTagHandler</ref>,
<ref target="wxhtmlwintaghandler">wxHtmlWinTagHandler</ref>,

</seealso>
<members>
<member class="wxHtmlTagsModule" name="FillHandlersTable"><function type="virtual void" name="FillHandlersTable"><parameters><parameter type="wxHtmlWinParser " name="&#42;parser"></parameter></parameters><description>

You must override this method. In most common case its body consists
only of lines of the following type:

<pre>
parser -&gt; AddTagHandler(new MyHandler);
</pre>

I recommend using the <b> TAGS_MODULE_&#42;</b> macros.

\wxheading{Paremeters}



</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHtmlWidgetCell">
<description>
<p class="classdesc">
wxHtmlWidgetCell is a class that provides a connection between HTML cells and widgets (an object derived
from wxWindow). You can use it to display things like forms, input boxes etc. in an HTML window.</p><p class="classdesc">wxHtmlWidgetCell takes care of resizing and moving window.</p>
</description>
<parents>
<classref name="wxHtmlCell"/>

</parents>
<includes>
<header name="wx/html/htmlcell.h"/></includes>
<members>
<member class="wxHtmlWidgetCell" name="wxHtmlWidgetCell"><function type="" name="wxHtmlWidgetCell"><parameters><parameter type="wxWindow&#42; " name="wnd">Connected window. It is parent window <b> must</b> be the wxHtmlWindow object within
which it is displayed!</parameter><parameter type="int " name="w" value="0">Floating width. If non-zero width of <i> wnd</i> window is adjusted so that it is
always <i> w</i> percents of parent container's width. (For example w = 100 means that the window
will always have same width as parent container)</parameter></parameters><description>

Constructor.







</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHtmlWinParser">
<description>
<p class="classdesc">
This class is derived from <ref target="wxhtmlparser">wxHtmlParser</ref> and
its main goal is to parse HTML input so that it can be displayed in
<ref target="wxhtmlwindow">wxHtmlWindow</ref>. It uses a special 
<ref target="wxhtmlwintaghandler">wxHtmlWinTagHandler</ref>.</p>
</description>
<note>

The product of parsing is a wxHtmlCell (resp. wxHtmlContainer) object.

</note>
<parents>
<classref name="wxHtmlParser"/>

</parents>
<includes>
<header name="wx/html/winpars.h"/></includes>
<seealso>

<ref target="handlers">Handlers overview</ref>

</seealso>
<members>
<member class="wxHtmlWinParser" name="wxHtmlWinParser"><function type="" name="wxHtmlWinParser"><description>

</description></function>
<function type="" name="wxHtmlWinParser"><parameters><parameter type="wxHtmlWindow " name="&#42;wnd"></parameter></parameters><description>

Constructor. Don't use the default one, use constructor with
<i> wnd</i> parameter (<i> wnd</i> is pointer to associated <ref target="wxhtmlwindow">wxHtmlWindow</ref>)

</description></function></member>
<member class="wxHtmlWinParser" name="AddModule"><function type="static void" name="AddModule"><parameters><parameter type="wxHtmlTagsModule " name="&#42;module"></parameter></parameters><description>

Adds <ref target="handlers">module</ref> to the list of wxHtmlWinParser tag handler.

</description></function></member>
<member class="wxHtmlWinParser" name="CloseContainer"><function type="wxHtmlContainerCell&#42;" name="CloseContainer"><description>

Closes the container, sets actual container to the parent one
and returns pointer to it (see <ref target="cells">Overview</ref>).

</description></function></member>
<member class="wxHtmlWinParser" name="CreateCurrentFont"><function type="virtual wxFont&#42;" name="CreateCurrentFont"><description>

Creates font based on current setting (see 
<ref target="wxhtmlwinparsersetfontsize">SetFontSize</ref>, 
<ref target="wxhtmlwinparsersetfontbold">SetFontBold</ref>, 
<ref target="wxhtmlwinparsersetfontitalic">SetFontItalic</ref>, 
<ref target="wxhtmlwinparsersetfontfixed">SetFontFixed</ref>, 
<ref target="wxhtmlwinparsersetfontunderlined">SetFontUnderlined</ref>)
and returns pointer to it.
If the font was already created only a pointer is returned.


</description></function></member>
<member class="wxHtmlWinParser" name="GetActualColor"><function type="const wxColour&amp;" name="GetActualColor" suffix="const"><description>

Returns actual text colour.

</description></function></member>
<member class="wxHtmlWinParser" name="GetAlign"><function type="int" name="GetAlign" suffix="const"><description>

Returns default horizontal alignment.

</description></function></member>
<member class="wxHtmlWinParser" name="GetCharHeight"><function type="int" name="GetCharHeight" suffix="const"><description>

Returns (average) char height in standard font. It is used as DC-independent metrics.

<b> Note:</b> This function doesn't return the <i> actual</i> height. If you want to
know the height of the current font, call <tt> GetDC -&gt; GetCharHeight()</tt>.

</description></function></member>
<member class="wxHtmlWinParser" name="GetCharWidth"><function type="int" name="GetCharWidth" suffix="const"><description>

Returns average char width in standard font. It is used as DC-independent metrics.

<b> Note:</b> This function doesn't return the <i> actual</i> width. If you want to
know the height of the current font, call <tt> GetDC -&gt; GetCharWidth()</tt>

</description></function></member>
<member class="wxHtmlWinParser" name="GetContainer"><function type="wxHtmlContainerCell&#42;" name="GetContainer" suffix="const"><description>

Returns pointer to the currently opened container (see <ref target="cells">Overview</ref>).
Common use:

<pre>
m_WParser -&gt; GetContainer() -&gt; InsertCell(new ...);
</pre>

</description></function></member>
<member class="wxHtmlWinParser" name="GetDC"><function type="wxDC&#42;" name="GetDC"><description>

Returns pointer to the DC used during parsing.

</description></function></member>
<member class="wxHtmlWinParser" name="GetEncodingConverter"><function type="wxEncodingConverter &#42;" name="GetEncodingConverter" suffix="const"><description>

Returns <ref target="wxencodingconverter">wxEncodingConverter</ref> class used
to do conversion between <ref target="wxhtmlwinparsergetinputencoding">input encoding</ref> 
and <ref target="wxhtmlwinparsergetoutputencoding">output encoding</ref>.

</description></function></member>
<member class="wxHtmlWinParser" name="GetFontBold"><function type="int" name="GetFontBold" suffix="const"><description>

Returns true if actual font is bold, false otherwise.

</description></function></member>
<member class="wxHtmlWinParser" name="GetFontFace"><function type="wxString" name="GetFontFace" suffix="const"><description>

Returns actual font face name.

</description></function></member>
<member class="wxHtmlWinParser" name="GetFontFixed"><function type="int" name="GetFontFixed" suffix="const"><description>

Returns true if actual font is fixed face, false otherwise.

</description></function></member>
<member class="wxHtmlWinParser" name="GetFontItalic"><function type="int" name="GetFontItalic" suffix="const"><description>

Returns true if actual font is italic, false otherwise.

</description></function></member>
<member class="wxHtmlWinParser" name="GetFontSize"><function type="int" name="GetFontSize" suffix="const"><description>

Returns actual font size (HTML size varies from -2 to +4)

</description></function></member>
<member class="wxHtmlWinParser" name="GetFontUnderlined"><function type="int" name="GetFontUnderlined" suffix="const"><description>

Returns true if actual font is underlined, false otherwise.

</description></function></member>
<member class="wxHtmlWinParser" name="GetInputEncoding"><function type="wxFontEncoding" name="GetInputEncoding" suffix="const"><description>

Returns input encoding.

</description></function></member>
<member class="wxHtmlWinParser" name="GetLink"><function type="const wxHtmlLinkInfo&amp;" name="GetLink" suffix="const"><description>

Returns actual hypertext link. (This value has a non-empty 
<ref target="wxhtmllinkinfogethref">Href</ref> string
if the parser is between <tt> &lt;A&gt;</tt> and <tt> &lt;/A&gt;</tt> tags,
wxEmptyString otherwise.)

</description></function></member>
<member class="wxHtmlWinParser" name="GetLinkColor"><function type="const wxColour&amp;" name="GetLinkColor" suffix="const"><description>

Returns the colour of hypertext link text.

</description></function></member>
<member class="wxHtmlWinParser" name="GetOutputEncoding"><function type="wxFontEncoding" name="GetOutputEncoding" suffix="const"><description>

Returns output encoding, i.e. closest match to document's input encoding
that is supported by operating system.

</description></function></member>
<member class="wxHtmlWinParser" name="GetWindow"><function type="wxHtmlWindow&#42;" name="GetWindow"><description>

Returns associated window (wxHtmlWindow). This may be NULL! (You should always
test if it is non-NULL. For example <tt> TITLE</tt> handler sets window
title only if some window is associated, otherwise it does nothing)

</description></function></member>
<member class="wxHtmlWinParser" name="OpenContainer"><function type="wxHtmlContainerCell&#42;" name="OpenContainer"><description>

Opens new container and returns pointer to it (see <ref target="cells">Overview</ref>).

</description></function></member>
<member class="wxHtmlWinParser" name="SetActualColor"><function type="void" name="SetActualColor"><parameters><parameter type="const wxColour&amp; " name="clr"></parameter></parameters><description>

Sets actual text colour. Note: this DOESN'T change the colour!
You must create <ref target="wxhtmlcolourcell">wxHtmlColourCell</ref> yourself.

</description></function></member>
<member class="wxHtmlWinParser" name="SetAlign"><function type="void" name="SetAlign"><parameters><parameter type="int " name="a"></parameter></parameters><description>

Sets default horizontal alignment (see 
<ref target="wxhtmlcontainercellsetalignhor">wxHtmlContainerCell::SetAlignHor</ref>.)
Alignment of newly opened container is set to this value.

</description></function></member>
<member class="wxHtmlWinParser" name="SetContainer"><function type="wxHtmlContainerCell&#42;" name="SetContainer"><parameters><parameter type="wxHtmlContainerCell &#42;" name="c"></parameter></parameters><description>

Allows you to directly set opened container. This is not recommended - you should use OpenContainer
wherever possible.

</description></function></member>
<member class="wxHtmlWinParser" name="SetDC"><function type="virtual void" name="SetDC"><parameters><parameter type="wxDC " name="&#42;dc"></parameter><parameter type="double " name="pixel_scale" value="1.0"></parameter></parameters><description>

Sets the DC. This must be called before <ref target="wxhtmlparserparse">Parse</ref>!
<i> pixel_scale</i>  can be used when rendering to high-resolution 
DCs (e.g. printer) to adjust size of pixel metrics. (Many dimensions in 
HTML are given in pixels -- e.g. image sizes. 300x300 image would be only one
inch wide on typical printer. With pixel_scale = 3.0 it would be 3 inches.)

</description></function></member>
<member class="wxHtmlWinParser" name="SetFontBold"><function type="void" name="SetFontBold"><parameters><parameter type="int " name="x"></parameter></parameters><description>

Sets bold flag of actualfont. <i> x</i> is either true of false.

</description></function></member>
<member class="wxHtmlWinParser" name="SetFontFace"><function type="void" name="SetFontFace"><parameters><parameter type="const wxString&amp; " name="face"></parameter></parameters><description>

Sets current font face to <i> face</i>. This affects either fixed size
font or proportional, depending on context (whether the parser is 
inside <tt> &lt;TT&gt;</tt> tag or not).

</description></function></member>
<member class="wxHtmlWinParser" name="SetFontFixed"><function type="void" name="SetFontFixed"><parameters><parameter type="int " name="x"></parameter></parameters><description>

Sets fixed face flag of actualfont. <i> x</i> is either true of false.

</description></function></member>
<member class="wxHtmlWinParser" name="SetFontItalic"><function type="void" name="SetFontItalic"><parameters><parameter type="int " name="x"></parameter></parameters><description>

Sets italic flag of actualfont. <i> x</i> is either true of false.

</description></function></member>
<member class="wxHtmlWinParser" name="SetFontSize"><function type="void" name="SetFontSize"><parameters><parameter type="int " name="s"></parameter></parameters><description>

Sets actual font size (HTML size varies from 1 to 7)

</description></function></member>
<member class="wxHtmlWinParser" name="SetFontUnderlined"><function type="void" name="SetFontUnderlined"><parameters><parameter type="int " name="x"></parameter></parameters><description>

Sets underlined flag of actualfont. <i> x</i> is either true of false.

</description></function></member>
<member class="wxHtmlWinParser" name="SetFonts"><function type="void" name="SetFonts"><parameters><parameter type="wxString " name="normal_face"></parameter><parameter type="wxString " name="fixed_face"></parameter><parameter type="const int " name="&#42;sizes" value="NULL"></parameter></parameters><description>

Sets fonts. See <ref target="wxhtmlwindowsetfonts">wxHtmlWindow::SetFonts</ref> for
detailed description.

</description></function></member>
<member class="wxHtmlWinParser" name="SetInputEncoding"><function type="void" name="SetInputEncoding"><parameters><parameter type="wxFontEncoding " name="enc"></parameter></parameters><description>

Sets input encoding. The parser uses this information to build conversion
tables from document's encoding to some encoding supported by operating
system.

</description></function></member>
<member class="wxHtmlWinParser" name="SetLink"><function type="void" name="SetLink"><parameters><parameter type="const wxHtmlLinkInfo&amp; " name="link"></parameter></parameters><description>

Sets actual hypertext link. Empty link is represented
by <ref target="wxhtmllinkinfo">wxHtmlLinkInfo</ref> with <i> Href</i> equal
to wxEmptyString.

</description></function></member>
<member class="wxHtmlWinParser" name="SetLinkColor"><function type="void" name="SetLinkColor"><parameters><parameter type="const wxColour&amp; " name="clr"></parameter></parameters><description>

Sets colour of hypertext link.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHtmlWinTagHandler">
<description>
<p class="classdesc">
This is basically wxHtmlTagHandler except that
it is extended with protected member m_WParser pointing to
the wxHtmlWinParser object (value of this member is identical
to wxHtmlParser's m_Parser).</p>
</description>
<parents>
<classref name="wxHtmlTagHandler"/>

</parents>
<includes>
<header name="wx/html/winpars.h"/></includes>
<members>
<member class="wxHtmlWinTagHandler" name="m_WParser"></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxHtmlWindow">
<description>
<p class="classdesc">
wxHtmlWindow is probably the only class you will directly use
unless you want to do something special (like adding new tag
handlers or MIME filters).</p><p class="classdesc">The purpose of this class is to display HTML pages (either local
file or downloaded via HTTP protocol) in a window. The width
of the window is constant - given in the constructor - and virtual height
is changed dynamically depending on page size.
Once the window is created you can set its content by calling 
<ref target="wxhtmlwindowsetpage">SetPage(text)</ref>,
<ref target="wxhtmlwindowloadpage">LoadPage(filename)</ref> or
<ref target="wxhtmlwindowloadfile">LoadFile</ref>.</p>
</description>
<note>

wxHtmlWindow uses the <ref target="wximage">wxImage</ref> class for displaying images.
Don't forget to initialize all image formats you need before loading any page!
(See <ref target="wxinitallimagehandlers">wxInitAllImageHandlers</ref> and
<ref target="wximageaddhandler">wxImage::AddHandler</ref>.)

</note>
<parents>
<classref name="wxScrolledWindow"/>

</parents>
<includes>
<header name="wx/html/htmlwin.h"/></includes>
<windowstyles>
<style name="wxHW_SCROLLBAR_NEVER">Never display scrollbars, not
even when the page is larger than the window.</style><style name="wxHP_SCROLLBAR_AUTO">Display scrollbars only if
page's size exceeds window's size.</style><style name="wxHP_NO_SELECTION">Don't allow the user to select
text.</style></windowstyles>
<members>
<member class="wxHtmlWindow" name="wxHtmlWindow"><function type="" name="wxHtmlWindow"><description>

Default constructor.

</description></function>
<function type="" name="wxHtmlWindow"><parameters><parameter type="wxWindow " name="&#42;parent"></parameter><parameter type="wxWindowID " name="id" value="-1"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long " name="style" value="wxHW_SCROLLBAR_AUTO">Window style. See <ref target="wxhtmlwindow">wxHtmlWindow</ref>.</parameter><parameter type="const wxString&amp; " name="name" value="&quot;htmlWindow&quot;"></parameter></parameters><description>

Constructor. The parameters are the same as for the <ref target="wxscrolledwindow">wxScrolledWindow</ref> constructor.





</description></function></member>
<member class="wxHtmlWindow" name="AddFilter"><function type="static void" name="AddFilter"><parameters><parameter type="wxHtmlFilter " name="&#42;filter"></parameter></parameters><description>

Adds <ref target="filters">input filter</ref> to the static list of available
filters. These filters are present by default:

<ul><li> <tt> text/html</tt> MIME type
</li>
<li> <tt> image/&#42;</tt> MIME types
</li>
<li> Plain Text filter (this filter is used if no other filter matches)
</li></ul>

</description></function></member>
<member class="wxHtmlWindow" name="AppendToPage"><function type="bool" name="AppendToPage"><parameters><parameter type="const wxString&amp; " name="source">HTML code fragment</parameter></parameters><returnvalue>

false if an error occurred, true otherwise.

</returnvalue><description>

Appends HTML fragment to currently displayed text and refreshes the window. 





</description></function></member>
<member class="wxHtmlWindow" name="GetInternalRepresentation"><function type="wxHtmlContainerCell&#42;" name="GetInternalRepresentation" suffix="const"><description>

Returns pointer to the top-level container.

See also: <ref target="cells">Cells Overview</ref>, 
<ref target="printing">Printing Overview</ref>

</description></function></member>
<member class="wxHtmlWindow" name="GetOpenedAnchor"><function type="wxString" name="GetOpenedAnchor"><description>

Returns anchor within currently opened page
(see <ref target="wxhtmlwindowgetopenedpage">GetOpenedPage</ref>). 
If no page is opened or if the displayed page wasn't
produced by call to LoadPage, empty string is returned.


</description></function></member>
<member class="wxHtmlWindow" name="GetOpenedPage"><function type="wxString" name="GetOpenedPage"><description>

Returns full location of the opened page. If no page is opened or if the displayed page wasn't
produced by call to LoadPage, empty string is returned.

</description></function></member>
<member class="wxHtmlWindow" name="GetOpenedPageTitle"><function type="wxString" name="GetOpenedPageTitle"><description>

Returns title of the opened page or wxEmptyString if current page does not contain <tt> &lt;TITLE&gt;</tt> tag.

</description></function></member>
<member class="wxHtmlWindow" name="GetRelatedFrame"><function type="wxFrame&#42;" name="GetRelatedFrame" suffix="const"><description>

Returns the related frame.

</description></function></member>
<member class="wxHtmlWindow" name="HistoryBack"><function type="bool" name="HistoryBack"><description>

Moves back to the previous page. (each page displayed using 
<ref target="wxhtmlwindowloadpage">LoadPage</ref> is stored in history list.)

</description></function></member>
<member class="wxHtmlWindow" name="HistoryCanBack"><function type="bool" name="HistoryCanBack"><description>

Returns true if it is possible to go back in the history (i.e. HistoryBack()
won't fail).

</description></function></member>
<member class="wxHtmlWindow" name="HistoryCanForward"><function type="bool" name="HistoryCanForward"><description>

Returns true if it is possible to go forward in the history (i.e. HistoryBack()
won't fail).


</description></function></member>
<member class="wxHtmlWindow" name="HistoryClear"><function type="void" name="HistoryClear"><description>

Clears history.

</description></function></member>
<member class="wxHtmlWindow" name="HistoryForward"><function type="bool" name="HistoryForward"><description>

Moves to next page in history.

</description></function></member>
<member class="wxHtmlWindow" name="LoadFile"><function type="virtual bool" name="LoadFile"><parameters><parameter type="const wxFileName&amp; " name="filename"></parameter></parameters><seealso>

<ref target="wxhtmlwindowloadpage">LoadPage</ref>

</seealso><returnvalue>

false if an error occurred, true otherwise

</returnvalue><description>

Loads HTML page from file and displays it.

</description></function></member>
<member class="wxHtmlWindow" name="LoadPage"><function type="virtual bool" name="LoadPage"><parameters><parameter type="const wxString&amp; " name="location">The address of document. See <ref target="wxfilesystem">wxFileSystem</ref> for details on address format and behaviour of &quot;opener&quot;.</parameter></parameters><seealso>

<ref target="wxhtmlwindowloadfile">LoadFile</ref>

</seealso><returnvalue>

false if an error occurred, true otherwise

</returnvalue><description>

Unlike SetPage this function first loads HTML page from <i> location</i> 
and then displays it. See example:

<pre>
htmlwin-&gt;LoadPage(&quot;help/myproject/index.htm&quot;);
</pre>





</description></function></member>
<member class="wxHtmlWindow" name="OnCellClicked"><function type="virtual void" name="OnCellClicked"><parameters><parameter type="wxHtmlCell " name="&#42;cell"></parameter><parameter type="wxCoord " name="x"></parameter><parameter type="wxCoord " name="y"></parameter><parameter type="const wxMouseEvent&amp; " name="event">The mouse event containing other information about the click</parameter></parameters><description>

This method is called when a mouse button is clicked inside wxHtmlWindow.
The default behaviour is to call 
<ref target="wxhtmlwindowonlinkclicked">OnLinkClicked</ref> if the cell contains a
hypertext link.









</description></function></member>
<member class="wxHtmlWindow" name="OnCellMouseHover"><function type="virtual void" name="OnCellMouseHover"><parameters><parameter type="wxHtmlCell " name="&#42;cell"></parameter><parameter type="wxCoord " name="x"></parameter><parameter type="wxCoord " name="y"></parameter></parameters><description>

This method is called when a mouse moves over an HTML cell.







</description></function></member>
<member class="wxHtmlWindow" name="OnLinkClicked"><function type="virtual void" name="OnLinkClicked"><parameters><parameter type="const wxHtmlLinkInfo&amp; " name="link"></parameter></parameters><description>

Called when user clicks on hypertext link. Default behaviour is to call 
<ref target="wxhtmlwindowloadpage">LoadPage</ref> and do nothing else.

Also see <ref target="wxhtmllinkinfo">wxHtmlLinkInfo</ref>.

</description></function></member>
<member class="wxHtmlWindow" name="OnOpeningURL"><function type="virtual wxHtmlOpeningStatus" name="OnOpeningURL"><parameters><parameter type="wxHtmlURLType " name="type"></parameter><parameter type="const wxString&amp; " name="url">URL being opened.</parameter><parameter type="wxString &#42;" name="redirect">Pointer to wxString variable that must be filled with an
URL if OnOpeningURL returns <tt> wxHTML_REDIRECT</tt>.</parameter></parameters><returnvalue>
<table>
<tr><td><b> wxHTML_OPEN</b></td><td>Open the URL.</td></tr>
<tr><td><b> wxHTML_BLOCK</b></td><td>Deny access to the URL, <ref target="wxhtmlparseropenurl">wxHtmlParser::OpenURL</ref> will return NULL.</td></tr>
<tr><td><b> wxHTML_REDIRECT</b></td><td>Don't open <i> url</i>, redirect to another
URL. OnOpeningURL must fill <i> &#42;redirect</i> with the new URL. OnOpeningURL will
be called again on returned URL.</td></tr>
</table>

</returnvalue><description>

Called when an URL is being opened (either when the user clicks on a link or
an image is loaded). The URL will be opened only if OnOpeningURL returns 
<tt> wxHTML_OPEN</tt>. This method is called by
<ref target="wxhtmlparseropenurl">wxHtmlParser::OpenURL</ref>.
You can override OnOpeningURL to selectively block some
URLs (e.g. for security reasons) or to redirect them elsewhere. Default
behaviour is to always return <tt> wxHTML_OPEN</tt>.









</description></function></member>
<member class="wxHtmlWindow" name="OnSetTitle"><function type="virtual void" name="OnSetTitle"><parameters><parameter type="const wxString&amp; " name="title"></parameter></parameters><description>

Called on parsing <tt> &lt;TITLE&gt;</tt> tag.


</description></function></member>
<member class="wxHtmlWindow" name="ReadCustomization"><function type="virtual void" name="ReadCustomization"><parameters><parameter type="wxConfigBase " name="&#42;cfg"></parameter><parameter type="wxString " name="path" value="wxEmptyString">Optional path in config tree. If not given current path is used.</parameter></parameters><description>

This reads custom settings from wxConfig. It uses the path 'path'
if given, otherwise it saves info into currently selected path.
The values are stored in sub-path <tt> wxHtmlWindow</tt>

Read values: all things set by SetFonts, SetBorders.







</description></function></member>
<member class="wxHtmlWindow" name="SetBorders"><function type="void" name="SetBorders"><parameters><parameter type="int " name="b">indentation from borders in pixels</parameter></parameters><description>

This function sets the space between border of window and HTML contents. See image:

\helponly{\image{}{border.bmp}}





</description></function></member>
<member class="wxHtmlWindow" name="SetFonts"><function type="void" name="SetFonts"><parameters><parameter type="wxString " name="normal_face">This is face name for normal (i.e. non-fixed) font. 
It can be either empty string (then the default face is chosen) or
platform-specific face name. Examples are &quot;helvetica&quot; under Unix or
&quot;Times New Roman&quot; under Windows.</parameter><parameter type="wxString " name="fixed_face">The same thing for fixed face ( &lt;TT&gt;..&lt;/TT&gt; )</parameter><parameter type="const int " name="&#42;sizes" value="NULL"></parameter></parameters><description>

This function sets font sizes and faces.









\wxheading{Defaults}

Default font sizes are defined by constants wxHTML_FONT_SIZE_1,
wxHTML_FONT_SIZE_2, ..., wxHTML_FONT_SIZE_7. Note that they differ among
platforms. Default face names are empty strings.

</description></function></member>
<member class="wxHtmlWindow" name="SetPage"><function type="bool" name="SetPage"><parameters><parameter type="const wxString&amp; " name="source">The HTML document source to be displayed.</parameter></parameters><returnvalue>

false if an error occurred, true otherwise.

</returnvalue><description>

Sets HTML page and display it. This won't <b> load</b> the page!!
It will display the <i> source</i>. See example:

<pre>
htmlwin -&gt; SetPage(&quot;&lt;html&gt;&lt;body&gt;Hello, world!&lt;/body&gt;&lt;/html&gt;&quot;);
</pre>

If you want to load a document from some location use 
<ref target="wxhtmlwindowloadpage">LoadPage</ref> instead.





</description></function></member>
<member class="wxHtmlWindow" name="SetRelatedFrame"><function type="void" name="SetRelatedFrame"><parameters><parameter type="wxFrame&#42; " name="frame"></parameter><parameter type="const wxString&amp; " name="format"></parameter></parameters><description>

Sets the frame in which page title will be displayed. <i> format</i> is format of
frame title, e.g. &quot;HtmlHelp : <br/>
</description></function></member>
<member class="wxHtmlWindow" name="SetRelatedStatusBar"><function type="void" name="SetRelatedStatusBar"><parameters><parameter type="int " name="bar">statusbar slot number (0..n)</parameter></parameters><description>

<b> After</b> calling <ref target="wxhtmlwindowsetrelatedframe">SetRelatedFrame</ref>,
this sets statusbar slot where messages will be displayed.
(Default is -1 = no messages.)






</description></function></member>
<member class="wxHtmlWindow" name="WriteCustomization"><function type="virtual void" name="WriteCustomization"><parameters><parameter type="wxConfigBase " name="&#42;cfg"></parameter><parameter type="wxString " name="path" value="wxEmptyString">Optional path in config tree. If not given, the current path is used.</parameter></parameters><description>

Saves custom settings into wxConfig. It uses the path 'path'
if given, otherwise it saves info into currently selected path.
Regardless of whether the path is given or not, the function creates sub-path 
<tt> wxHtmlWindow</tt>.

Saved values: all things set by SetFonts, SetBorders.







</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxIPV4address">
<description>

</description>
<parents>
<classref name="wxSockAddress"/>

</parents>
<includes>
<header name="wx/socket.h"/></includes>
<members>
<member class="wxIPV4address" name="Hostname"><function type="bool" name="Hostname"><parameters><parameter type="const wxString&amp;" name=" hostname"></parameter></parameters><returnvalue>

Returns true on success, false if something goes wrong
(invalid hostname or invalid IP address).


</returnvalue><description>

Set the address to <i> hostname</i>, which can be a host name
or an IP-style address in dot notation (a.b.c.d)

</description></function></member>
<member class="wxIPV4address" name="Hostname"><function type="wxString" name="Hostname"><description>

Returns the hostname which matches the IP address.


</description></function></member>
<member class="wxIPV4address" name="Service"><function type="bool" name="Service"><parameters><parameter type="const wxString&amp;" name=" service"></parameter></parameters><returnvalue>

Returns true on success, false if something goes wrong
(invalid service).


</returnvalue><description>

Set the port to that corresponding to the specified <i> service</i>.

</description></function></member>
<member class="wxIPV4address" name="Service"><function type="bool" name="Service"><parameters><parameter type="unsigned short" name=" service"></parameter></parameters><returnvalue>

Returns true on success, false if something goes wrong
(invalid service).


</returnvalue><description>

Set the port to that corresponding to the specified <i> service</i>.

</description></function></member>
<member class="wxIPV4address" name="Service"><function type="unsigned short" name="Service"><description>

Returns the current service.


</description></function></member>
<member class="wxIPV4address" name="AnyAddress"><function type="bool" name="AnyAddress"><returnvalue>

Returns true on success, false if something went wrong.


</returnvalue><description>

Set address to any of the addresses of the current machine. Whenever
possible, use this function instead of <ref target="wxipv4addresslocalhost">wxIPV4address::LocalHost</ref>,
as this correctly handles multi-homed hosts and avoids other small
problems. Internally, this is the same as setting the IP address
to <b> INADDR_ANY</b>.

</description></function></member>
<member class="wxIPV4address" name="LocalHost"><function type="bool" name="LocalHost"><returnvalue>

Returns true on success, false if something went wrong.

</returnvalue><description>

Set address to localhost (127.0.0.1). Whenever possible, use the 
<ref target="wxipv4addressanyaddress">wxIPV4address::AnyAddress</ref>,
function instead of this one, as this will correctly handle multi-homed
hosts and avoid other small problems.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxIcon">
<description>
<p class="classdesc">
An icon is a small rectangular bitmap usually used for denoting a
minimized application. It differs from a wxBitmap in always
having a mask associated with it for transparent drawing. On some platforms,
icons and bitmaps are implemented identically, since there is no real distinction between
a wxBitmap with a mask and an icon; and there is no specific icon format on
some platforms (X-based applications usually standardize on XPMs for small bitmaps
and icons). However, some platforms (such as Windows) make the distinction, so
a separate class is provided.</p>
</description>
<remarks>

It is usually desirable to associate a pertinent icon with a frame. Icons
can also be used for other purposes, for example with <ref target="wxtreectrl">wxTreeCtrl</ref> 
and <ref target="wxlistctrl">wxListCtrl</ref>.

Icons have different formats on different platforms.
Therefore, separate icons will usually be created for the different
environments.  Platform-specific methods for creating a <b> wxIcon</b>
structure are catered for, and this is an occasion where conditional
compilation will probably be required.

Note that a new icon must be created for every time the icon is to be
used for a new window. In Windows, the icon will not be
reloaded if it has already been used. An icon allocated to a frame will
be deleted when the frame is deleted.

For more information please see <ref target="wxbitmapoverview">Bitmap and icon overview</ref>.

</remarks>
<parents>
<classref name="wxBitmap"/>
<classref name="wxGDIObject"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/icon.h"/></includes>
<predefs>

Objects:

<b> wxNullIcon</b>

</predefs>
<seealso>

<ref target="wxbitmapoverview">Bitmap and icon overview</ref><ref target="supportedbitmapformats">supported bitmap file formats</ref>
<ref target="wxdcdrawicon">wxDC::DrawIcon</ref><ref target="wxcursor">wxCursor</ref>

</seealso>
<members>
<member class="wxIcon" name="wxIcon"><function type="" name="wxIcon"><description>

Default constructor.

</description></function>
<function type="" name="wxIcon"><parameters><parameter type="const wxIcon&amp; " name="icon"></parameter></parameters><description>

Copy constructor.

</description></function>
<function type="" name="wxIcon"><parameters><parameter type="void&#42;" name=" data"></parameter><parameter type="int" name=" type"></parameter><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter><parameter type="int" name="depth" value="-1">Specifies the depth of the icon. If this is omitted, the display depth of the
screen is used.</parameter></parameters><description>

Creates an icon from the given data, which can be of arbitrary type.

</description></function>
<function type="" name="wxIcon"><parameters><parameter type="const char" name=" bits&#91;]"></parameter><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter><parameter type="int" name="depth" value="1">Specifies the depth of the icon. If this is omitted, the display depth of the
screen is used.</parameter></parameters><description>

Creates an icon from an array of bits.

</description></function>
<function type="" name="wxIcon"><parameters><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter><parameter type="int" name="depth" value="-1">Specifies the depth of the icon. If this is omitted, the display depth of the
screen is used.</parameter></parameters><description>

Creates a new icon.

</description></function>
<function type="" name="wxIcon"><parameters><parameter type="char&#42;&#42;" name=" bits"></parameter></parameters><description>

</description></function>
<function type="" name="wxIcon"><parameters><parameter type="const char&#42;&#42;" name=" bits"></parameter></parameters><description>

Creates an icon from XPM data.

</description></function>
<function type="" name="wxIcon"><parameters><parameter type="const wxString&amp; " name="name">This can refer to a resource name under MS Windows, or a filename under MS Windows and X.
Its meaning is determined by the <i> flags</i> parameter.</parameter><parameter type="long" name=" type"></parameter><parameter type="int" name="desiredWidth" value="-1">Specifies the desired width of the icon. This
parameter only has an effect in Windows (32-bit) where icon resources can contain
several icons of different sizes.</parameter><parameter type="int" name="desiredHeight" value="-1">Specifies the desired height of the icon. This
parameter only has an effect in Windows (32-bit) where icon resources can contain
several icons of different sizes.</parameter></parameters><description>

Loads an icon from a file or resource.

</description></function>
<function type="" name="wxIcon"><parameters><parameter type="const wxIconLocation&amp; " name="loc">The object describing the location of the native icon, see 
<ref target="wxiconlocation">wxIconLocation</ref>.</parameter></parameters><seealso>


</seealso><remarks>

The first form constructs an icon object with no data; an assignment or another member function such as Create
or LoadFile must be called subsequently.

The second and third forms provide copy constructors. Note that these do not copy the
icon data, but instead a pointer to the data, keeping a reference count. They are therefore
very efficient operations.

The fourth form constructs an icon from data whose type and value depends on
the value of the <i> type</i> argument.

The fifth form constructs a (usually monochrome) icon from an array of pixel values, under both
X and Windows.

The sixth form constructs a new icon.

The seventh form constructs an icon from pixmap (XPM) data, if wxWindows has been configured
to incorporate this feature.

To use this constructor, you must first include an XPM file. For
example, assuming that the file <tt> mybitmap.xpm</tt> contains an XPM array
of character pointers called mybitmap:

<pre>
#include &quot;mybitmap.xpm&quot;

...

wxIcon &#42;icon = new wxIcon(mybitmap);
</pre>

A macro, wxICON, is available which creates an icon using an XPM
on the appropriate platform, or an icon resource on Windows.

<pre>
wxIcon icon(wxICON(mondrian));

// Equivalent to:

#if defined(__WXGTK__) || defined(__WXMOTIF__)
wxIcon icon(mondrian_xpm);
#endif

#if defined(__WXMSW__)
wxIcon icon(&quot;mondrian&quot;);
#endif
</pre>

The eighth form constructs an icon from a file or resource. <i> name</i> can refer
to a resource name under MS Windows, or a filename under MS Windows and X.

Under Windows, <i> type</i> defaults to wxBITMAP_TYPE_ICO_RESOURCE.
Under X, <i> type</i> defaults to wxBITMAP_TYPE_XPM.

</remarks><description>

Loads an icon from the specified <ref target="wxiconlocation">location</ref>.





















</description></function></member>
<member class="wxIcon" name="CopyFromBitmap"><function type="void" name="CopyFromBitmap"><parameters><parameter type="const wxBitmap&amp;" name=" bmp"></parameter></parameters><description>

Copies <i> bmp</i> bitmap to this icon. Under MS Windows the bitmap
must have mask colour set.


<ref target="wxiconloadfile">wxIcon::LoadFile</ref>

\perlnote{Constructors supported by wxPerl are:\par
<ul><li>{Wx::Icon-&gt;new( width, height, depth = -1 )}
</li>
<li>{Wx::Icon-&gt;new( name, type, desiredWidth = -1, desiredHeight = -1 )}
</li>
<li>{Wx::Icon-&gt;newFromBits( bits, width, height, depth = 1 )}
</li>
<li>{Wx::Icon-&gt;newFromXPM( data )}
</li></ul>
}

</description></function></member>
<member class="wxIcon" name="~wxIcon"><function type="" name="~wxIcon"><description>

Destroys the wxIcon object and possibly the underlying icon data.
Because reference counting is used, the icon may not actually be
destroyed at this point - only when the reference count is zero will the
data be deleted.

If the application omits to delete the icon explicitly, the icon will be
destroyed automatically by wxWindows when the application exits.

Do not delete an icon that is selected into a memory device context.

</description></function></member>
<member class="wxIcon" name="GetDepth"><function type="int" name="GetDepth" suffix="const"><description>

Gets the colour depth of the icon. A value of 1 indicates a
monochrome icon.

</description></function></member>
<member class="wxIcon" name="GetHeight"><function type="int" name="GetHeight" suffix="const"><description>

Gets the height of the icon in pixels.

</description></function></member>
<member class="wxIcon" name="GetWidth"><function type="int" name="GetWidth" suffix="const"><seealso>

<ref target="wxicongetheight">wxIcon::GetHeight</ref>

</seealso><description>

Gets the width of the icon in pixels.

</description></function></member>
<member class="wxIcon" name="LoadFile"><function type="bool" name="LoadFile"><parameters><parameter type="const wxString&amp;" name=" name"></parameter><parameter type="long" name=" type"></parameter></parameters><seealso>

<ref target="wxiconconstr">wxIcon::wxIcon</ref>

</seealso><returnvalue>

true if the operation succeeded, false otherwise.

</returnvalue><description>

Loads an icon from a file or resource.







</description></function></member>
<member class="wxIcon" name="Ok"><function type="bool" name="Ok" suffix="const"><description>

Returns true if icon data is present.

\begin{comment}
</description></function></member>
<member class="wxIcon" name="SaveFile"><function type="bool" name="SaveFile"><parameters><parameter type="const wxString&amp; " name="name">A filename. The meaning of <i> name</i> is determined by the <i> type</i> parameter.</parameter><parameter type="int" name=" type"></parameter><parameter type="wxPalette&#42; " name="palette" value="NULL">An optional palette used for saving the icon.</parameter></parameters><seealso>

<ref target="wxiconloadfile">wxIcon::LoadFile</ref>
\end{comment}

</seealso><remarks>

Depending on how wxWindows has been configured, not all formats may be available.

</remarks><returnvalue>

true if the operation succeeded, false otherwise.

</returnvalue><description>

Saves an icon in the named file.









</description></function></member>
<member class="wxIcon" name="SetDepth"><function type="void" name="SetDepth"><parameters><parameter type="int " name="depth">Icon depth.</parameter></parameters><description>

Sets the depth member (does not affect the icon data).





</description></function></member>
<member class="wxIcon" name="SetHeight"><function type="void" name="SetHeight"><parameters><parameter type="int " name="height">Icon height in pixels.</parameter></parameters><description>

Sets the height member (does not affect the icon data).





</description></function></member>
<member class="wxIcon" name="SetOk"><function type="void" name="SetOk"><parameters><parameter type="int " name="isOk">Validity flag.</parameter></parameters><description>

Sets the validity member (does not affect the icon data).





</description></function></member>
<member class="wxIcon" name="SetWidth"><function type="void" name="SetWidth"><parameters><parameter type="int " name="width">Icon width in pixels.</parameter></parameters><description>

Sets the width member (does not affect the icon data).





</description></function></member>
<member class="wxIcon" name="operator $=$"><function type="wxIcon&amp; " name="operator $=$"><parameters><parameter type="const wxIcon&amp; " name="icon">Icon to assign.</parameter></parameters><returnvalue>

Returns 'this' object.

</returnvalue><description>

Assignment operator. This operator does not copy any data, but instead
passes a pointer to the data in <i> icon</i> and increments a reference
counter. It is a fast operation.





</description></function></member>
<member class="wxIcon" name="operator $==$"><function type="bool" name="operator $==$"><parameters><parameter type="const wxIcon&amp; " name="icon">Icon to compare with 'this'</parameter></parameters><returnvalue>

Returns true if the icons were effectively equal, false otherwise.

</returnvalue><description>

Equality operator. This operator tests whether the internal data pointers are
equal (a fast test).





</description></function></member>
<member class="wxIcon" name="operator $!=$"><function type="bool" name="operator $!=$"><parameters><parameter type="const wxIcon&amp; " name="icon">Icon to compare with 'this'</parameter></parameters><returnvalue>

Returns true if the icons were unequal, false otherwise.


</returnvalue><description>

Inequality operator. This operator tests whether the internal data pointers are
unequal (a fast test).





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxIconBundle">
<description>
<p class="classdesc">
This class contains multiple copies of an icon in different sizes,
see also <ref target="wxdialogseticons">wxDialog::SetIcons</ref> and
<ref target="wxframeseticons">wxFrame::SetIcons</ref>.</p>
</description>
<parents></parents>
<members>
<member class="wxIconBundle" name="wxIconBundle"><function type="" name="wxIconBundle"><description>

Default constructor.

</description></function>
<function type="" name="wxIconBundle"><parameters><parameter type="const wxString&amp; " name="file"></parameter><parameter type="long " name="type"></parameter></parameters><description>

Initializes the bundle with the icon(s) found in the file.

</description></function>
<function type="" name="wxIconBundle"><parameters><parameter type="const wxIcon&amp; " name="icon"></parameter></parameters><description>

Initializes the bundle with a single icon.

</description></function>
<function type="" name="wxIconBundle"><parameters><parameter type="const wxIconBundle&amp; " name="ic"></parameter></parameters><description>

Copy constructor.

</description></function></member>
<member class="wxIconBundle" name="~wxIconBundle"><function type="" name="~wxIconBundle"><description>

Destructor.

</description></function></member>
<member class="wxIconBundle" name="AddIcon"><function type="void" name="AddIcon"><parameters><parameter type="const wxString&amp; " name="file"></parameter><parameter type="long " name="type"></parameter></parameters><description>

Adds all the icons contained in the file to the bundle;
if the collection already contains icons with the same
width and height, they are replaced by the new ones.

</description></function>
<function type="void" name="AddIcon"><parameters><parameter type="const wxIcon&amp; " name="icon"></parameter></parameters><description>

Adds the icon to the collection; if the collection already
contains an icon with the same width and height, it is
replaced by the new one.

</description></function></member>
<member class="wxIconBundle" name="GetIcon"><function type="const wxIcon&amp;" name="GetIcon" suffix="const"><parameters><parameter type="const wxSize&amp; " name="size"></parameter></parameters><description>

Returns the icon with the given size; if no such icon exists,
returns the icon with size wxSYS_ICON_X/wxSYS_ICON_Y;
if no such icon exists,
returns the first icon in the bundle. If size = wxSize( -1, -1 ),
returns the icon with size wxSYS_ICON_X/wxSYS_ICON_Y.

</description></function>
<function type="const wxIcon&amp;" name="GetIcon" suffix="const"><parameters><parameter type="wxCoord " name="size" value="-1"></parameter></parameters><description>

Same as GetIcon( wxSize( size, size ) ).

</description></function></member>
<member class="wxIconBundle" name="operator="><function type="const wxIconBundle&amp;" name="operator="><parameters><parameter type="const wxIconBundle&amp; " name="ic"></parameter></parameters><description>

Assignment operator.

</description></function></member></members>
<supported>
</supported>
</class><class name="wxIconLocation">
<description>
<p class="classdesc">
wxIconLocation is a tiny class describing the location of an (external, i.e.
not embedded into the application resources) icon. For most platforms it simply
contains the file name but under some others (notably Windows) the same file
may contain multiple icons and so this class also stores the index of the icon
inside the file.</p><p class="classdesc">In any case, its details should be of no interest to the application code and
most of them are not even documented here (on purpose) as it is only meant to
be used as an opaque class: the application may get the object of this class
from somewhere and the only reasonable thing to do with it later is to create
a <ref target="wxicon">wxIcon</ref> from it.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/iconloc.h"/></includes>
<seealso>

<ref target="wxicon">wxIcon</ref><ref target="wxfiletypegeticon">wxFileType::GetIcon()</ref>


</seealso>
<members>
<member class="wxIconLocation" name="IsOk"><function type="bool" name="IsOk" suffix="const"><description>

Returns <tt> true</tt> if the object is valid, i.e. was properly initialized, and 
<tt> false</tt> otherwise.

</description></function></member></members>
<supported>
</supported>
</class><class name="wxIconizeEvent">
<description>
<p class="classdesc">
An event being sent when the frame is iconized (minimized) or restored.</p><p class="classdesc">Currently only wxMSW and wxGTK generate such events.</p>
</description>
<parents>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_ICONIZE(func)">Process a wxEVT_ICONIZE event.</event></events>
<seealso>

<ref target="eventhandlingoverview">Event handling overview</ref>,
<ref target="wxframeiconize">wxFrame::Iconize</ref>,
<ref target="wxframeisiconized">wxFrame::IsIconized</ref>

</seealso>
<members>
<member class="wxIconizeEvent" name="wxIconizeEvent"><function type="" name="wxIconizeEvent"><parameters><parameter type="int " name="id" value="0"></parameter><parameter type="bool " name="iconized" value="true"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxIconizeEvent" name="Iconized"><function type="bool" name="Iconized" suffix="const"><description>

Returns <tt> true</tt> if the frame has been iconized, <tt> false</tt> if it has been
restored.

</description></function></member></members>
<supported>
<platform name="gtk" status="N"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="N"/><platform name="os2" status="Y"/></supported>
</class><class name="wxIdleEvent">
<description>
<p class="classdesc">
This class is used for idle events, which are generated when the system is idle.</p>
</description>
<remarks>

Idle events can be caught by the wxApp class, or by top-level window classes.

</remarks>
<parents>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_IDLE(func)">Process a wxEVT_IDLE event.</event></events>
<seealso>

<ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxIdleEvent" name="wxIdleEvent"><function type="" name="wxIdleEvent"><description>

Constructor.

</description></function></member>
<member class="wxIdleEvent" name="RequestMore"><function type="void" name="RequestMore"><parameters><parameter type="bool" name="needMore" value="true"></parameter></parameters><seealso>

<ref target="wxidleeventmorerequested">wxIdleEvent::MoreRequested</ref>

</seealso><description>

Tells wxWindows that more processing is required. This function can be called by an OnIdle
handler for a window or window event handler to indicate that wxApp::OnIdle should
forward the OnIdle event once more to the application windows. If no window calls this function
during OnIdle, then the application will remain in a passive event loop (not calling OnIdle) until a
new event is posted to the application by the windowing system.

</description></function></member>
<member class="wxIdleEvent" name="MoreRequested"><function type="bool" name="MoreRequested" suffix="const"><seealso>

<ref target="wxidleeventrequestmore">wxIdleEvent::RequestMore</ref>

</seealso><description>

Returns true if the OnIdle function processing this event requested more processing time.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxImage">
<description>
<p class="classdesc">
This class encapsulates a platform-independent image. An image can be created
from data, or using <ref target="wxbitmapconverttoimage">wxBitmap::ConvertToImage</ref>. An image
can be loaded from a file in a variety of formats, and is extensible to new formats
via image format handlers. Functions are available to set and get image bits, so
it can be used for basic image manipulation.</p><p class="classdesc">A wxImage cannot (currently) be drawn directly to a <ref target="wxdc">wxDC</ref>. Instead, 
a platform-specific <ref target="wxbitmap">wxBitmap</ref> object must be created from it using
the <ref target="wxbitmapconstr">wxBitmap::wxBitmap(wxImage,int depth)</ref> constructor. 
This bitmap can then
be drawn in a device context, using <ref target="wxdcdrawbitmap">wxDC::DrawBitmap</ref>.</p><p class="classdesc">One colour value of the image may be used as a mask colour which will lead to the automatic
creation of a <ref target="wxmask">wxMask</ref> object associated to the bitmap object.</p><p class="classdesc"><heading>Alpha channel support</heading></p><p class="classdesc">Starting from wxWindows 2.5.0 wxImage supports alpha channel data, that is in
addition to a byte for the red, green and blue colour components for each pixel
it also stores a byte representing the pixel opacity. The alpha value of 0
corresponds to a transparent pixel (null opacity) while the value of 255
means that the pixel is 100\
Unlike the RGB data, not all images have the alpha channel and before using 
<ref target="wximagegetalpha">GetAlpha</ref> you should check if this image contains
alpha value with <ref target="wximagehasalpha">HasAlpha</ref>. In fact, currently only
images loaded from PNG files with transparency information will have alpha
channel but support for it will be added to the other formats as well (as well
as support for saving images with alpha channel which is not still implemented
either).</p><p class="classdesc"><heading>Available image handlers</heading></p><p class="classdesc">The following image handlers are available. <b> wxBMPHandler</b> is always
installed by default. To use other image formats, install the appropriate
handler with <ref target="wximageaddhandler">wxImage::AddHandler</ref> or 
<ref target="wxinitallimagehandlers">wxInitAllImageHandlers</ref>.</p><p class="classdesc">\twocolwidtha{5cm}<table>
<tr><td>\indexit{wxBMPHandler}</td><td>For loading and saving, always installed.</td></tr>
<tr><td>\indexit{wxPNGHandler}</td><td>For loading (including alpha support) and saving.</td></tr>
<tr><td>\indexit{wxJPEGHandler}</td><td>For loading and saving.</td></tr>
<tr><td>\indexit{wxGIFHandler}</td><td>Only for loading, due to legal issues.</td></tr>
<tr><td>\indexit{wxPCXHandler}</td><td>For loading and saving (see below).</td></tr>
<tr><td>\indexit{wxPNMHandler}</td><td>For loading and saving (see below).</td></tr>
<tr><td>\indexit{wxTIFFHandler}</td><td>For loading and saving.</td></tr>
<tr><td>\indexit{wxIFFHandler}</td><td>For loading only.</td></tr>
<tr><td>\indexit{wxXPMHandler}</td><td>For loading and saving.</td></tr>
<tr><td>\indexit{wxICOHandler}</td><td>For loading and saving.</td></tr>
<tr><td>\indexit{wxCURHandler}</td><td>For loading and saving.</td></tr>
<tr><td>\indexit{wxANIHandler}</td><td>For loading only.</td></tr>
</table></p><p class="classdesc">When saving in PCX format, <b> wxPCXHandler</b> will count the number of
different colours in the image; if there are 256 or less colours, it will
save as 8 bit, else it will save as 24 bit.</p><p class="classdesc">Loading PNMs only works for ASCII or raw RGB images. When saving in
PNM format, <b> wxPNMHandler</b> will always save as raw RGB.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/image.h"/></includes>
<seealso>

<ref target="wxbitmap">wxBitmap</ref>
<ref target="wxinitallimagehandlers">wxInitAllImageHandlers</ref>

</seealso>
<members>
<member class="wxImage" name="wxImage"><function type="" name="wxImage"><description>

Default constructor.

</description></function>
<function type="" name="wxImage"><parameters><parameter type="const wxImage&amp; " name="image"></parameter></parameters><description>

Copy constructor.

</description></function>
<function type="" name="wxImage"><parameters><parameter type="const wxBitmap&amp;" name=" bitmap"></parameter></parameters><description>

(Deprecated form, use <ref target="wxbitmapconverttoimage">wxBitmap::ConvertToImage</ref>
instead.) Constructs an image from a platform-dependent bitmap. This preserves
mask information so that bitmaps and images can be converted back
and forth without loss in that respect.

</description></function>
<function type="" name="wxImage"><parameters><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter><parameter type="bool" name="clear" value="true"></parameter></parameters><description>

Creates an image with the given width and height.  If <i> clear</i> is true, the new image will be initialized to black.
Otherwise, the image data will be uninitialized.

</description></function>
<function type="" name="wxImage"><parameters><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter><parameter type="unsigned char&#42;" name=" data"></parameter><parameter type="bool" name="static_data" value="false"></parameter></parameters><description>

Creates an image from given data with the given width and height. If 
<i> static_data</i> is true, then wxImage will not delete the actual
image data in its destructor, otherwise it will free it by calling
<i> free()</i>.

</description></function>
<function type="" name="wxImage"><parameters><parameter type="const wxString&amp; " name="name">Name of the file from which to load the image.</parameter><parameter type="long" name="type" value="wxBITMAP_TYPE_ANY"></parameter><parameter type="int" name="index" value="-1">Index of the image to load in the case that the image file contains multiple images.
This is only used by GIF, ICO and TIFF handlers. The default value (-1) means 
&quot;choose the default image&quot; and is interpreted as the first image (index=0) by 
the GIF and TIFF handler and as the largest and most colourful one by the ICO handler.</parameter></parameters><description>

</description></function>
<function type="" name="wxImage"><parameters><parameter type="const wxString&amp; " name="name">Name of the file from which to load the image.</parameter><parameter type="const wxString&amp;" name=" mimetype"></parameter><parameter type="int" name="index" value="-1">Index of the image to load in the case that the image file contains multiple images.
This is only used by GIF, ICO and TIFF handlers. The default value (-1) means 
&quot;choose the default image&quot; and is interpreted as the first image (index=0) by 
the GIF and TIFF handler and as the largest and most colourful one by the ICO handler.</parameter></parameters><description>

Loads an image from a file.

</description></function>
<function type="" name="wxImage"><parameters><parameter type="wxInputStream&amp; " name="stream">Opened input stream from which to load the image. Currently, the stream must support seeking.</parameter><parameter type="long" name="type" value="wxBITMAP_TYPE_ANY"></parameter><parameter type="int" name="index" value="-1">Index of the image to load in the case that the image file contains multiple images.
This is only used by GIF, ICO and TIFF handlers. The default value (-1) means 
&quot;choose the default image&quot; and is interpreted as the first image (index=0) by 
the GIF and TIFF handler and as the largest and most colourful one by the ICO handler.</parameter></parameters><description>

</description></function>
<function type="" name="wxImage"><parameters><parameter type="wxInputStream&amp; " name="stream">Opened input stream from which to load the image. Currently, the stream must support seeking.</parameter><parameter type="const wxString&amp;" name=" mimetype"></parameter><parameter type="int" name="index" value="-1">Index of the image to load in the case that the image file contains multiple images.
This is only used by GIF, ICO and TIFF handlers. The default value (-1) means 
&quot;choose the default image&quot; and is interpreted as the first image (index=0) by 
the GIF and TIFF handler and as the largest and most colourful one by the ICO handler.</parameter></parameters><seealso>

<ref target="wximageloadfile">wxImage::LoadFile</ref>

\pythonnote{Constructors supported by wxPython are:\par
\indented{2cm}{<table>
<tr><td><b> wxImage(nameflag)</b></td><td>Loads an image from a file</td></tr>
<tr><td><b> wxNullImage()</b></td><td>Create a null image (has no size or
image data)</td></tr>
<tr><td><b> wxEmptyImage(widthheight)</b></td><td>Creates an empty image
of the given size</td></tr>
<tr><td><b> wxImageFromMime(namemimetype</b></td><td>Creates an image from
the given file of the given mimetype</td></tr>
<tr><td><b> wxImageFromBitmap(bitmap)</b></td><td>Creates an image from a
platform-dependent bitmap</td></tr>
</table>}
}

\perlnote{Constructors supported by wxPerl are:\par
<ul><li>{Wx::Image-&gt;new( bitmap )}
</li>
<li>{Wx::Image-&gt;new( widthheight )}
</li>
<li>{Wx::Image-&gt;new( nametype )}
</li>
<li>{Wx::Image-&gt;new( namemimetype )}
</li></ul>
}

</seealso><description></description></function></member>
<member class="wxImage" name="~wxImage"><function type="" name="~wxImage"><description>

Destructor.

</description></function></member>
<member class="wxImage" name="AddHandler"><function type="static void" name="AddHandler"><parameters><parameter type="wxImageHandler&#42;" name=" handler"></parameter></parameters><seealso>

<ref target="wximagehandler">wxImageHandler</ref>

</seealso><description>

Adds a handler to the end of the static list of format handlers.



</description></function>
<function type="bool" name="CanRead"><parameters><parameter type="const wxString&amp;" name=" filename"></parameter></parameters><description>

returns true if the current image handlers can read this file

\pythonnote{In wxPython this static method is named <tt> wxImage_AddHandler</tt>.}
</description></function></member>
<member class="wxImage" name="CleanUpHandlers"><function type="static void" name="CleanUpHandlers"><description>

Deletes all image handlers.

This function is called by wxWindows on exit.

</description></function></member>
<member class="wxImage" name="ComputeHistogram"><function type="unsigned long" name="ComputeHistogram" suffix="const"><parameters><parameter type="wxImageHistogram&amp; " name="histogram"></parameter></parameters><returnvalue>

Returns number of colours in the histogram.

</returnvalue><description>

Computes the histogram of the image. <i> histogram</i> is a reference to 
wxImageHistogram object. wxImageHistogram is a specialization of 
<ref target="wxhashmap">wxHashMap</ref> &quot;template&quot; and is defined as follows:

<pre>
class WXDLLEXPORT wxImageHistogramEntry
{
public:
    wxImageHistogramEntry() : index(0), value(0) {}
    unsigned long index;
    unsigned long value;
};

WX_DECLARE_EXPORTED_HASH_MAP(unsigned long, wxImageHistogramEntry,
                             wxIntegerHash, wxIntegerEqual,
                             wxImageHistogram);
</pre>

</description></function></member>
<member class="wxImage" name="ConvertToBitmap"><function type="wxBitmap" name="ConvertToBitmap" suffix="const"><description>

Deprecated, use equivalent <ref target="wxbitmapconstr">wxBitmap constructor</ref>
(which takes wxImage and depth as its arguments) instead.

</description></function></member>
<member class="wxImage" name="ConvertToMono"><function type="wxImage" name="ConvertToMono" suffix="const"><parameters><parameter type="unsigned char" name=" r"></parameter><parameter type="unsigned char" name=" g"></parameter><parameter type="unsigned char" name=" b"></parameter></parameters><description>

Returns monochromatic version of the image. The returned image has white
colour where the original has <i> (r,g,b)</i> colour and black colour 
everywhere else.

</description></function></member>
<member class="wxImage" name="Copy"><function type="wxImage" name="Copy" suffix="const"><description>

Returns an identical copy of the image.

</description></function></member>
<member class="wxImage" name="Create"><function type="bool" name="Create"><parameters><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter><parameter type="bool" name="clear" value="true"></parameter></parameters><returnvalue>

true if the call succeeded, false otherwise.

</returnvalue><description>

Creates a fresh image.  If <i> clear</i> is true, the new image will be initialized to black.
Otherwise, the image data will be uninitialized.







</description></function></member>
<member class="wxImage" name="Destroy"><function type="bool" name="Destroy"><description>

Destroys the image data.

</description></function></member>
<member class="wxImage" name="FindFirstUnusedColour"><function type="bool" name="FindFirstUnusedColour"><parameters><parameter type="unsigned char &#42;" name=" r"></parameter><parameter type="unsigned char &#42;" name=" g"></parameter><parameter type="unsigned char &#42;" name=" b"></parameter><parameter type="unsigned char" name="startR" value="1"></parameter><parameter type="unsigned char" name="startG" value="0"></parameter><parameter type="unsigned char" name="startB" value="0"></parameter></parameters><note>

Note that this method involves computing the histogram, which is
computationally intensive operation.

</note><returnvalue>

Returns false if there is no unused colour left, true on success.

</returnvalue><description>







Finds the first colour that is never used in the image. The search begins at
given initial colour and continues by increasing R, G and B components (in this
order) by 1 until an unused colour is found or the colour space exhausted.

</description></function></member>
<member class="wxImage" name="FindHandler"><function type="static wxImageHandler&#42;" name="FindHandler"><parameters><parameter type="const wxString&amp; " name="name">The handler name.</parameter></parameters><description>

Finds the handler with the given name.

</description></function>
<function type="static wxImageHandler&#42;" name="FindHandler"><parameters><parameter type="const wxString&amp; " name="extension">The file extension, such as ``bmp&quot;.</parameter><parameter type="long" name=" imageType"></parameter></parameters><description>

Finds the handler associated with the given extension and type.

</description></function>
<function type="static wxImageHandler&#42;" name="FindHandler"><parameters><parameter type="long " name="imageType">The image type, such as wxBITMAP_TYPE_BMP.</parameter></parameters><description>

Finds the handler associated with the given image type.

</description></function>
<function type="static wxImageHandler&#42;" name="FindHandlerMime"><parameters><parameter type="const wxString&amp; " name="mimetype">MIME type.</parameter></parameters><seealso>

<ref target="wximagehandler">wxImageHandler</ref>

</seealso><returnvalue>

A pointer to the handler if found, NULL otherwise.

</returnvalue><description>

Finds the handler associated with the given MIME type.









</description></function></member>
<member class="wxImage" name="GetImageExtWildcard"><function type="static wxString" name="GetImageExtWildcard"><seealso>

<ref target="wximagehandler">wxImageHandler</ref>

</seealso><returnvalue>

The format of the returned string is &quot;(&#42;.ext1;&#42;.ext2)|&#42;.ext1;&#42;.ext2&quot;.

It is usually a good idea to prepend a description before passing the result to the dialog.

Example:

<pre>
    wxFileDialog FileDlg( this, &quot;Choose Image&quot;, ::wxGetWorkingDirectory(), &quot;&quot;, _(&quot;Image Files &quot;) + wxImage::GetImageExtWildcard(), wxOPEN );
</pre>

</returnvalue><description>

Iterates all registered wxImageHandler objects, and returns a string containing file extension masks
suitable for passing to file open/save dialog boxes.

</description></function></member>
<member class="wxImage" name="GetAlpha"><function type="unsigned char" name="GetAlpha" suffix="const"><parameters><parameter type="int" name=" x"></parameter><parameter type="int" name=" y"></parameter></parameters><description>

Returns the alpha value for the given pixel. This function may only be called
for the images with alpha channel, use <ref target="wximagehasalpha">HasAlpha</ref> to
check for this.

The returned value is the <i> opacity</i> of the image, i.e. the value of 0
corresponds to the transparent pixels while the value of 255 -- to the opaque
ones.

</description></function>
<function type="unsigned char &#42;" name="GetAlpha" suffix="const"><description>

Returns pointer to the array storing the alpha values for this image. This
pointer is <tt> NULL</tt> for the images without the alpha channel. If the image
does have it, this pointer may be used to directly manipulate the alpha values
which are stored as the <ref target="wximagegetdata">RGB</ref> ones.

</description></function></member>
<member class="wxImage" name="GetBlue"><function type="unsigned char" name="GetBlue" suffix="const"><parameters><parameter type="int" name=" x"></parameter><parameter type="int" name=" y"></parameter></parameters><description>

Returns the blue intensity at the given coordinate.

</description></function></member>
<member class="wxImage" name="GetData"><function type="unsigned char&#42;" name="GetData" suffix="const"><description>

Returns the image data as an array. This is most often used when doing
direct image manipulation. The return value points to an array of
characters in RGBRGBRGB$\ldots$ format in the top-to-bottom, left-to-right
order, that is the first RGB triplet corresponds to the pixel $(0, 0)$, the
second one --- to $(0, 1)$ and so on.

You should not delete the returned pointer nor pass it to
<ref target="wximagesetdata">wxImage::SetData</ref>.

</description></function></member>
<member class="wxImage" name="GetGreen"><function type="unsigned char" name="GetGreen" suffix="const"><parameters><parameter type="int" name=" x"></parameter><parameter type="int" name=" y"></parameter></parameters><description>

Returns the green intensity at the given coordinate.

</description></function></member>
<member class="wxImage" name="GetImageCount"><function type="static int" name="GetImageCount"><parameters><parameter type="const wxString&amp;" name=" filename"></parameter><parameter type="long" name="type" value="wxBITMAP_TYPE_ANY"></parameter></parameters><description>

</description></function>
<function type="static int" name="GetImageCount"><parameters><parameter type="wxInputStream&amp;" name=" stream"></parameter><parameter type="long" name="type" value="wxBITMAP_TYPE_ANY"></parameter></parameters><returnvalue>

Number of available images. For most image handlers, this is 1 (exceptions
are TIFF and ICO formats).

</returnvalue><description>

If the image file contains more than one image and the image handler is capable 
of retrieving these individually, this function will return the number of
available images.







</description></function></member>
<member class="wxImage" name="GetHandlers"><function type="static wxList&amp;" name="GetHandlers"><seealso>

<ref target="wximagehandler">wxImageHandler</ref>

</seealso><description>

Returns the static list of image format handlers.

</description></function></member>
<member class="wxImage" name="GetHeight"><function type="int" name="GetHeight" suffix="const"><description>

Gets the height of the image in pixels.

</description></function></member>
<member class="wxImage" name="GetMaskBlue"><function type="unsigned char" name="GetMaskBlue" suffix="const"><description>

Gets the blue value of the mask colour.

</description></function></member>
<member class="wxImage" name="GetMaskGreen"><function type="unsigned char" name="GetMaskGreen" suffix="const"><description>

Gets the green value of the mask colour.

</description></function></member>
<member class="wxImage" name="GetMaskRed"><function type="unsigned char" name="GetMaskRed" suffix="const"><description>

Gets the red value of the mask colour.

</description></function></member>
<member class="wxImage" name="GetPalette"><function type="const wxPalette&amp;" name="GetPalette" suffix="const"><description>

Returns the palette associated with the image. Currently the palette is only
used when converting to wxBitmap under Windows.

Eventually wxImage handlers will set the palette if one exists in the image file.

</description></function></member>
<member class="wxImage" name="GetRed"><function type="unsigned char" name="GetRed" suffix="const"><parameters><parameter type="int" name=" x"></parameter><parameter type="int" name=" y"></parameter></parameters><description>

Returns the red intensity at the given coordinate.

</description></function></member>
<member class="wxImage" name="GetSubImage"><function type="wxImage" name="GetSubImage" suffix="const"><parameters><parameter type="const wxRect&amp;" name=" rect"></parameter></parameters><description>

Returns a sub image of the current one as long as the rect belongs entirely to 
the image.

</description></function></member>
<member class="wxImage" name="GetWidth"><function type="int" name="GetWidth" suffix="const"><seealso>

<ref target="wximagegetheight">wxImage::GetHeight</ref>

</seealso><description>

Gets the width of the image in pixels.

</description></function></member>
<member class="wxImage" name="HasAlpha"><function type="bool" name="HasAlpha" suffix="const"><seealso>

<ref target="wximagegetalpha">GetAlpha</ref><ref target="wximagesetalpha">SetAlpha</ref>

</seealso><description></description></function></member>
<member class="wxImage" name="HasMask"><function type="bool" name="HasMask" suffix="const"><description>

Returns true if there is a mask active, false otherwise.

</description></function></member>
<member class="wxImage" name="GetOption"><function type="wxString" name="GetOption" suffix="const"><parameters><parameter type="const wxString&amp;" name=" name"></parameter></parameters><seealso>

<ref target="wximagesetoption">wxImage::SetOption</ref>,
<ref target="wximagegetoptionint">wxImage::GetOptionInt</ref>,
<ref target="wximagehasoption">wxImage::HasOption</ref>

</seealso><description>

Gets a user-defined option. The function is case-insensitive to <i> name</i>.

For example, when saving as a JPEG file, the option <b> quality</b> is
used, which is a number between 0 and 100 (0 is terrible, 100 is very good).

</description></function></member>
<member class="wxImage" name="GetOptionInt"><function type="int" name="GetOptionInt" suffix="const"><parameters><parameter type="const wxString&amp;" name=" name"></parameter></parameters><seealso>

<ref target="wximagesetoption">wxImage::SetOption</ref>,
<ref target="wximagegetoption">wxImage::GetOption</ref>,
<ref target="wximagehasoption">wxImage::HasOption</ref>

</seealso><description>

Gets a user-defined option as an integer. The function is case-insensitive to <i> name</i>.

</description></function></member>
<member class="wxImage" name="HasOption"><function type="bool" name="HasOption" suffix="const"><parameters><parameter type="const wxString&amp;" name=" name"></parameter></parameters><seealso>

<ref target="wximagesetoption">wxImage::SetOption</ref>,
<ref target="wximagegetoption">wxImage::GetOption</ref>,
<ref target="wximagegetoptionint">wxImage::GetOptionInt</ref>

</seealso><description>

Returns true if the given option is present. The function is case-insensitive to <i> name</i>.

</description></function></member>
<member class="wxImage" name="InitStandardHandlers"><function type="static void" name="InitStandardHandlers"><seealso>

<ref target="wximagehandler">wxImageHandler</ref>
<ref target="wxinitallimagehandlers">wxInitAllImageHandlers</ref>

</seealso><description></description></function></member>
<member class="wxImage" name="InsertHandler"><function type="static void" name="InsertHandler"><parameters><parameter type="wxImageHandler&#42;" name=" handler"></parameter></parameters><seealso>

<ref target="wximagehandler">wxImageHandler</ref>

</seealso><description>

Adds a handler at the start of the static list of format handlers.



</description></function></member>
<member class="wxImage" name="LoadFile"><function type="bool" name="LoadFile"><parameters><parameter type="const wxString&amp;" name=" name"></parameter><parameter type="long" name="type" value="wxBITMAP_TYPE_ANY"></parameter><parameter type="int" name="index" value="-1">Index of the image to load in the case that the image file contains multiple images.
This is only used by GIF, ICO and TIFF handlers. The default value (-1) means 
&quot;choose the default image&quot; and is interpreted as the first image (index=0) by 
the GIF and TIFF handler and as the largest and most colourful one by the ICO handler.</parameter></parameters><description>

</description></function>
<function type="bool" name="LoadFile"><parameters><parameter type="const wxString&amp;" name=" name"></parameter><parameter type="const wxString&amp;" name=" mimetype"></parameter><parameter type="int" name="index" value="-1">Index of the image to load in the case that the image file contains multiple images.
This is only used by GIF, ICO and TIFF handlers. The default value (-1) means 
&quot;choose the default image&quot; and is interpreted as the first image (index=0) by 
the GIF and TIFF handler and as the largest and most colourful one by the ICO handler.</parameter></parameters><description>

Loads an image from a file. If no handler type is provided, the library will
try to autodetect the format.

</description></function>
<function type="bool" name="LoadFile"><parameters><parameter type="wxInputStream&amp;" name=" stream"></parameter><parameter type="long" name=" type"></parameter><parameter type="int" name="index" value="-1">Index of the image to load in the case that the image file contains multiple images.
This is only used by GIF, ICO and TIFF handlers. The default value (-1) means 
&quot;choose the default image&quot; and is interpreted as the first image (index=0) by 
the GIF and TIFF handler and as the largest and most colourful one by the ICO handler.</parameter></parameters><description>

</description></function>
<function type="bool" name="LoadFile"><parameters><parameter type="wxInputStream&amp;" name=" stream"></parameter><parameter type="const wxString&amp;" name=" mimetype"></parameter><parameter type="int" name="index" value="-1">Index of the image to load in the case that the image file contains multiple images.
This is only used by GIF, ICO and TIFF handlers. The default value (-1) means 
&quot;choose the default image&quot; and is interpreted as the first image (index=0) by 
the GIF and TIFF handler and as the largest and most colourful one by the ICO handler.</parameter></parameters><seealso>

<ref target="wximagesavefile">wxImage::SaveFile</ref>

\pythonnote{In place of a single overloaded method namewxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> LoadFile(filenametype)</b></td><td>Loads an image of the given
type from a file</td></tr>
<tr><td><b> LoadMimeFile(filenamemimetype)</b></td><td>Loads an image of the given
mimetype from a file</td></tr>
</table>}
}

\perlnote{Methods supported by wxPerl are:\par
<ul><li>{bitmap-&gt;LoadFile( nametype )}
</li>
<li>{bitmap-&gt;LoadFile( namemimetype )}
</li></ul>
}


</seealso><description></description></function></member>
<member class="wxImage" name="Ok"><function type="bool" name="Ok" suffix="const"><description>

Returns true if image data is present.

</description></function></member>
<member class="wxImage" name="RemoveHandler"><function type="static bool" name="RemoveHandler"><parameters><parameter type="const wxString&amp; " name="name">The handler name.</parameter></parameters><seealso>

<ref target="wximagehandler">wxImageHandler</ref>

</seealso><returnvalue>

true if the handler was found and removed, false otherwise.

</returnvalue><description>

Finds the handler with the given name, and removes it. The handler
is not deleted.



</description></function></member>
<member class="wxImage" name="SaveFile"><function type="bool" name="SaveFile" suffix="const"><parameters><parameter type="const wxString&amp; " name="name">Name of the file to save the image to.</parameter><parameter type="int" name=" type"></parameter></parameters><description>

</description></function>
<function type="bool" name="SaveFile" suffix="const"><parameters><parameter type="const wxString&amp; " name="name">Name of the file to save the image to.</parameter><parameter type="const wxString&amp;" name=" mimetype"></parameter></parameters><description>

Saves an image in the named file.

</description></function>
<function type="bool" name="SaveFile" suffix="const"><parameters><parameter type="const wxString&amp; " name="name">Name of the file to save the image to.</parameter></parameters><description>

Saves an image in the named file. File type is determined from the extension of the
file name. Note that this function may fail if the extension is not recognized! You
can use one of the forms above to save images to files with non-standard extensions.

</description></function>
<function type="bool" name="SaveFile" suffix="const"><parameters><parameter type="wxOutputStream&amp; " name="stream">Opened output stream to save the image to.</parameter><parameter type="int" name=" type"></parameter></parameters><description>

</description></function>
<function type="bool" name="SaveFile" suffix="const"><parameters><parameter type="wxOutputStream&amp; " name="stream">Opened output stream to save the image to.</parameter><parameter type="const wxString&amp;" name=" mimetype"></parameter></parameters><seealso>

<ref target="wximageloadfile">wxImage::LoadFile</ref>

\pythonnote{In place of a single overloaded method namewxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> SaveFile(filenametype)</b></td><td>Saves the image using the given
type to the named file</td></tr>
<tr><td><b> SaveMimeFile(filenamemimetype)</b></td><td>Saves the image using the given
mimetype to the named file</td></tr>
</table>}
}

\perlnote{Methods supported by wxPerl are:\par
<ul><li>{bitmap-&gt;SaveFile( nametype )}
</li>
<li>{bitmap-&gt;SaveFile( namemimetype )}
</li></ul>
}

</seealso><description></description></function></member>
<member class="wxImage" name="Mirror"><function type="wxImage" name="Mirror" suffix="const"><parameters><parameter type="bool" name="horizontally" value="true"></parameter></parameters><description>

Returns a mirrored copy of the image. The parameter <i> horizontally</i>
indicates the orientation.

</description></function></member>
<member class="wxImage" name="Replace"><function type="void" name="Replace"><parameters><parameter type="unsigned char" name=" r1"></parameter><parameter type="unsigned char" name=" g1"></parameter><parameter type="unsigned char" name=" b1"></parameter><parameter type="unsigned char" name=" r2"></parameter><parameter type="unsigned char" name=" g2"></parameter><parameter type="unsigned char" name=" b2"></parameter></parameters><description>

Replaces the colour specified by <i> r1,g1,b1</i> by the colour <i> r2,g2,b2</i>.

</description></function></member>
<member class="wxImage" name="Rescale"><function type="wxImage &amp;" name="Rescale"><parameters><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter></parameters><seealso>

<ref target="wximagescale">Scale</ref>

</seealso><description>

Changes the size of the image in-place: after a call to this function, the
image will have the given width and height.

Returns the (modified) image itself.

</description></function></member>
<member class="wxImage" name="Rotate"><function type="wxImage" name="Rotate"><parameters><parameter type="double" name=" angle"></parameter><parameter type="const wxPoint&amp; " name="rotationCentre"></parameter><parameter type="bool" name="interpolating" value="true"></parameter><parameter type="wxPoint&#42;" name="offsetAfterRotation" value="NULL"></parameter></parameters><description>

Rotates the image about the given point, by <i> angle</i> radians. Passing true
to <i> interpolating</i> results in better image quality, but is slower. If the
image has a mask, then the mask colour is used for the uncovered pixels in the
rotated image background. Else, black (rgb 0, 0, 0) will be used.

Returns the rotated image, leaving this image intact.

</description></function></member>
<member class="wxImage" name="Rotate90"><function type="wxImage" name="Rotate90" suffix="const"><parameters><parameter type="bool" name="clockwise" value="true"></parameter></parameters><description>

Returns a copy of the image rotated 90 degrees in the direction
indicated by <i> clockwise</i>.

</description></function></member>
<member class="wxImage" name="Scale"><function type="wxImage" name="Scale" suffix="const"><parameters><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter></parameters><seealso>

<ref target="wximagerescale">Rescale</ref>

</seealso><description>

Returns a scaled version of the image. This is also useful for
scaling bitmaps in general as the only other way to scale bitmaps
is to blit a wxMemoryDC into another wxMemoryDC.

It may be mentioned that the GTK port uses this function internally
to scale bitmaps when using mapping modes in wxDC. 

Example:

<pre>
    // get the bitmap from somewhere
    wxBitmap bmp = ...;

    // rescale it to have size of 32&#42;32
    if ( bmp.GetWidth() != 32 || bmp.GetHeight() != 32 )
    {
        wxImage image = bmp.ConvertToImage();
        bmp = wxBitmap(image.Scale(32, 32));

        // another possibility:
        image.Rescale(32, 32);
        bmp = image;
    }

</pre>

</description></function></member>
<member class="wxImage" name="SetAlpha"><function type="void" name="SetAlpha"><parameters><parameter type="unsigned char &#42;" name="alpha" value="NULL"></parameter></parameters><description>

This function is similar to <ref target="wximagesetdata">SetData</ref> and has similar
restrictions. The pointer passed to it may however be <tt> NULL</tt> in which case
the function will allocate the alpha array internally -- this is useful to add
alpha channel data to an image which doesn't have any. If the pointer is not 
<tt> NULL</tt>, it must have one byte for each image pixel and be allocated with 
<tt> malloc()</tt>. wxImage takes ownership of the pointer and will free it.

</description></function>
<function type="void" name="SetAlpha"><parameters><parameter type="int " name="x"></parameter><parameter type="int " name="y"></parameter><parameter type="unsigned char " name="alpha"></parameter></parameters><description>

Sets the alpha value for the given pixel. This function should only be called
if the image has alpha channel data, use <ref target="wximagehasalpha">HasAlpha</ref> to
check for this.

</description></function></member>
<member class="wxImage" name="SetData"><function type="void" name="SetData"><parameters><parameter type="unsigned char&#42;" name="data"></parameter></parameters><description>

Sets the image data without performing checks. The data given must have
the size (width&#42;height&#42;3) or results will be unexpected. Don't use this
method if you aren't sure you know what you are doing.

The data must have been allocated with <tt> malloc()</tt>, {\large <b> NOT</b>} with
<tt> operator new</tt>.

After this call the pointer to the data is owned by the wxImage object,
that will be responsible for deleting it.
Do not pass to this function a pointer obtained through
<ref target="wximagegetdata">wxImage::GetData</ref>.

</description></function></member>
<member class="wxImage" name="SetMask"><function type="void" name="SetMask"><parameters><parameter type="bool" name="hasMask" value="true"></parameter></parameters><description>

Specifies whether there is a mask or not. The area of the mask is determined by the current mask colour.

</description></function></member>
<member class="wxImage" name="SetMaskColour"><function type="void" name="SetMaskColour"><parameters><parameter type="unsigned char " name="red"></parameter><parameter type="unsigned char " name="green"></parameter><parameter type="unsigned char " name="blue"></parameter></parameters><description>

Sets the mask colour for this image (and tells the image to use the mask).

</description></function></member>
<member class="wxImage" name="SetMaskFromImage"><function type="bool" name="SetMaskFromImage"><parameters><parameter type="const wxImage&amp;" name=" mask"></parameter><parameter type="unsigned char" name=" mr"></parameter><parameter type="unsigned char" name=" mg"></parameter><parameter type="unsigned char" name=" mb"></parameter></parameters><note>

Note that this method involves computing the histogram, which is
computationally intensive operation.

</note><returnvalue>

Returns false if <i> mask</i> does not have same dimensions as the image or if
there is no unused colour left. Returns true if the mask was successfully 
applied.

</returnvalue><description>







Sets image's mask so that the pixels that have RGB value of <i> mr,mg,mb</i>
in <i> mask</i> will be masked in the image. This is done by first finding an
unused colour in the image, setting this colour as the mask colour and then
using this colour to draw all pixels in the image who corresponding pixel 
in <i> mask</i> has given RGB value.

</description></function></member>
<member class="wxImage" name="SetOption"><function type="void" name="SetOption"><parameters><parameter type="const wxString&amp;" name=" name"></parameter><parameter type="const wxString&amp;" name=" value"></parameter></parameters><description>

</description></function>
<function type="void" name="SetOption"><parameters><parameter type="const wxString&amp;" name=" name"></parameter><parameter type="int" name=" value"></parameter></parameters><seealso>

<ref target="wximagegetoption">wxImage::GetOption</ref>,
<ref target="wximagegetoptionint">wxImage::GetOptionInt</ref>,
<ref target="wximagehasoption">wxImage::HasOption</ref>

</seealso><description>

Sets a user-defined option. The function is case-insensitive to <i> name</i>.

For example, when saving as a JPEG file, the option <b> quality</b> is
used, which is a number between 0 and 100 (0 is terrible, 100 is very good).

</description></function></member>
<member class="wxImage" name="SetPalette"><function type="void" name="SetPalette"><parameters><parameter type="const wxPalette&amp;" name=" palette"></parameter></parameters><description>

Associates a palette with the image. The palette may be used when converting
wxImage to wxBitmap (MSW only at present) or in file save operations (none as yet).

</description></function></member>
<member class="wxImage" name="SetRGB"><function type="void" name="SetRGB"><parameters><parameter type="int " name="x"></parameter><parameter type="int " name="y"></parameter><parameter type="unsigned char " name="red"></parameter><parameter type="unsigned char " name="green"></parameter><parameter type="unsigned char " name="blue"></parameter></parameters><description>

Sets the pixel at the given coordinate. This routine performs bounds-checks
for the coordinate so it can be considered a safe way to manipulate the
data, but in some cases this might be too slow so that the data will have to
be set directly. In that case you will have to get access to the image data 
using the <ref target="wximagegetdata">GetData</ref> method.

</description></function></member>
<member class="wxImage" name="operator $=$"><function type="wxImage&amp; " name="operator $=$"><parameters><parameter type="const wxImage&amp; " name="image">Image to assign.</parameter></parameters><returnvalue>

Returns 'this' object.

</returnvalue><description>

Assignment operator. This operator does not copy any data, but instead
passes a pointer to the data in <i> image</i> and increments a reference
counter. It is a fast operation.





</description></function></member>
<member class="wxImage" name="operator $==$"><function type="bool" name="operator $==$" suffix="const"><parameters><parameter type="const wxImage&amp; " name="image">Image to compare with 'this'</parameter></parameters><returnvalue>

Returns true if the images were effectively equal, false otherwise.

</returnvalue><description>

Equality operator. This operator tests whether the internal data pointers are
equal (a fast test).





</description></function></member>
<member class="wxImage" name="operator $!=$"><function type="bool" name="operator $!=$" suffix="const"><parameters><parameter type="const wxImage&amp; " name="image">Image to compare with 'this'</parameter></parameters><returnvalue>

Returns true if the images were unequal, false otherwise.
</returnvalue><description>

Inequality operator. This operator tests whether the internal data pointers are
unequal (a fast test).





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxImageHandler">
<description>
<p class="classdesc">
This is the base class for implementing image file loading/saving, and image creation from data.
It is used within wxImage and is not normally seen by the application.</p><p class="classdesc">If you wish to extend the capabilities of wxImage, derive a class from wxImageHandler
and add the handler using <ref target="wximageaddhandler">wxImage::AddHandler</ref> in your
application initialisation.</p>
</description>
<note>

Legal Issue: This software is based in part on the work of the Independent 
JPEG Group.

(Applies when wxWindows is linked with JPEG support. wxJPEGHandler uses libjpeg
created by IJG.)

</note>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/image.h"/></includes>
<seealso>

<ref target="wximage">wxImage</ref>
<ref target="wxinitallimagehandlers">wxInitAllImageHandlers</ref>

</seealso>
<members>
<member class="wxImageHandler" name="wxImageHandler"><function type="" name="wxImageHandler"><description>

Default constructor. In your own default constructor, initialise the members
m_name, m_extension and m_type.

</description></function></member>
<member class="wxImageHandler" name="~wxImageHandler"><function type="" name="~wxImageHandler"><description>

Destroys the wxImageHandler object.

</description></function></member>
<member class="wxImageHandler" name="GetName"><function type="wxString" name="GetName" suffix="const"><description>

Gets the name of this handler.

</description></function></member>
<member class="wxImageHandler" name="GetExtension"><function type="wxString" name="GetExtension" suffix="const"><description>

Gets the file extension associated with this handler.

</description></function></member>
<member class="wxImageHandler" name="GetImageCount"><function type="int" name="GetImageCount"><parameters><parameter type="wxInputStream&amp;" name=" stream"></parameter></parameters><returnvalue>

Number of available images. For most image handlers, this is 1 (exceptions
are TIFF and ICO formats).

</returnvalue><description>

If the image file contains more than one image and the image handler is capable 
of retrieving these individually, this function will return the number of
available images.



</description></function></member>
<member class="wxImageHandler" name="GetType"><function type="long" name="GetType" suffix="const"><description>

Gets the image type associated with this handler.

</description></function></member>
<member class="wxImageHandler" name="GetMimeType"><function type="wxString" name="GetMimeType" suffix="const"><description>

Gets the MIME type associated with this handler.

</description></function></member>
<member class="wxImageHandler" name="LoadFile"><function type="bool" name="LoadFile"><parameters><parameter type="wxImage&#42; " name="image">The image object which is to be affected by this operation.</parameter><parameter type="wxInputStream&amp;" name=" stream"></parameter><parameter type="bool" name="verbose" value="true">If set to true, errors reported by the image handler will produce wxLogMessages.</parameter><parameter type="int" name="index" value="0">The index of the image in the file (starting from zero).</parameter></parameters><seealso>

<ref target="wximageloadfile">wxImage::LoadFile</ref>
<ref target="wximagesavefile">wxImage::SaveFile</ref>
<ref target="wximagehandlersavefile">wxImageHandler::SaveFile</ref>

</seealso><description></description></function></member>
<member class="wxImageHandler" name="SaveFile"><function type="bool" name="SaveFile"><parameters><parameter type="wxImage&#42; " name="image">The image object which is to be affected by this operation.</parameter><parameter type="wxOutputStream&amp; " name="stream">Opened output stream for writing the data.</parameter></parameters><seealso>

<ref target="wximageloadfile">wxImage::LoadFile</ref>
<ref target="wximagesavefile">wxImage::SaveFile</ref>
<ref target="wximagehandlerloadfile">wxImageHandler::LoadFile</ref>

</seealso><description></description></function></member>
<member class="wxImageHandler" name="SetName"><function type="void" name="SetName"><parameters><parameter type="const wxString&amp; " name="name">Handler name.</parameter></parameters><description>

Sets the handler name.





</description></function></member>
<member class="wxImageHandler" name="SetExtension"><function type="void" name="SetExtension"><parameters><parameter type="const wxString&amp; " name="extension">Handler extension.</parameter></parameters><description>

Sets the handler extension.





</description></function></member>
<member class="wxImageHandler" name="SetMimeType"><function type="void" name="SetMimeType"><parameters><parameter type="const wxString&amp; " name="mimetype"></parameter></parameters><description>

Sets the handler MIME type.





</description></function></member>
<member class="wxImageHandler" name="SetType"><function type="void" name="SetType"><parameters><parameter type="long " name="type"></parameter></parameters><description>

Sets the handler type.





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxImageList">
<description>
<p class="classdesc">
A wxImageList contains a list of images, which are stored in
an unspecified form. Images can have masks for transparent
drawing, and can be made from a variety of sources including bitmaps
and icons.</p><p class="classdesc">wxImageList is used principally in conjunction with <ref target="wxtreectrl">wxTreeCtrl</ref> and
<ref target="wxlistctrl">wxListCtrl</ref> classes.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/imaglist.h"/></includes>
<seealso>

<ref target="wxtreectrl">wxTreeCtrl</ref><ref target="wxlistctrl">wxListCtrl</ref>

</seealso>
<members>
<member class="wxImageList" name="wxImageList"><function type="" name="wxImageList"><description>

Default constructor.

</description></function>
<function type="" name="wxImageList"><parameters><parameter type="int " name="width">Width of the images in the list.</parameter><parameter type="int " name="height">Height of the images in the list.</parameter><parameter type="const bool " name="mask" value="true">true if masks should be created for all images.</parameter><parameter type="int " name="initialCount" value="1">The initial size of the list.</parameter></parameters><seealso>

<ref target="wximagelistcreate">wxImageList::Create</ref>

</seealso><description>

Constructor specifying the image size, whether image masks should be created, and the initial size of the list.











</description></function></member>
<member class="wxImageList" name="Add"><function type="int" name="Add"><parameters><parameter type="const wxBitmap&amp;" name=" bitmap"></parameter><parameter type="const wxBitmap&amp;" name="mask" value="wxNullBitmap">Monochrome mask bitmap, representing the transparent areas of the image.</parameter></parameters><description>

Adds a new image using a bitmap and optional mask bitmap.

</description></function>
<function type="int" name="Add"><parameters><parameter type="const wxBitmap&amp;" name=" bitmap"></parameter><parameter type="const wxColour&amp;" name=" maskColour"></parameter></parameters><description>

Adds a new image using a bitmap and mask colour.

</description></function>
<function type="int" name="Add"><parameters><parameter type="const wxIcon&amp;" name=" icon"></parameter></parameters><remarks>

The original bitmap or icon is not affected by the <b> Add</b> operation, and can be deleted afterwards.

\pythonnote{In place of a single overloaded method name, wxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> Add(bitmap, mask=wxNullBitmap)</b></td><td></td></tr>
<tr><td><b> AddWithColourMask(bitmap, colour)</b></td><td></td></tr>
<tr><td><b> AddIcon(icon)</b></td><td></td></tr>
</table>}
}
</remarks><returnvalue>

The new zero-based image index.

</returnvalue><description>

Adds a new image using an icon.











</description></function></member>
<member class="wxImageList" name="Create"><function type="bool" name="Create"><parameters><parameter type="int " name="width"></parameter><parameter type="int " name="height"></parameter><parameter type="const bool " name="mask" value="true"></parameter><parameter type="int " name="initialCount" value="1"></parameter></parameters><description>

Initializes the list. See <ref target="wximagelistconstr">wxImageList::wxImageList</ref> for details.

</description></function></member>
<member class="wxImageList" name="Draw"><function type="bool" name="Draw"><parameters><parameter type="int" name=" index"></parameter><parameter type="wxDC&amp;" name=" dc"></parameter><parameter type="int " name="x">X position on the device context.</parameter><parameter type="int " name="x">X position on the device context.</parameter><parameter type="int " name="flags" value="wxIMAGELIST_DRAW_NORMAL"></parameter><parameter type="const bool " name="solidBackground" value="false">For optimisation - drawing can be faster if the function is told
that the background is solid.</parameter></parameters><description>

Draws a specified image onto a device context.















</description></function></member>
<member class="wxImageList" name="GetImageCount"><function type="int" name="GetImageCount" suffix="const"><description>

Returns the number of images in the list.

</description></function></member>
<member class="wxImageList" name="GetSize"><function type="bool" name="GetSize" suffix="const"><parameters><parameter type="int " name="index">currently unused, should be 0</parameter><parameter type="int&amp; " name="width">receives the width of the images in the list</parameter><parameter type="int &amp;" name="height">receives the height of the images in the list</parameter></parameters><returnvalue>

true if the function succeeded, false if it failed (for example, if the image
list was not yet initialized).

</returnvalue><description>

Retrieves the size of the images in the list. Currently, the <i> index</i> 
parameter is ignored as all images in the list have the same size.









</description></function></member>
<member class="wxImageList" name="Remove"><function type="bool" name="Remove"><parameters><parameter type="int" name=" index"></parameter></parameters><description>

Removes the image at the given position.

</description></function></member>
<member class="wxImageList" name="RemoveAll"><function type="bool" name="RemoveAll"><description>

Removes all the images in the list.

</description></function></member>
<member class="wxImageList" name="Replace"><function type="bool" name="Replace"><parameters><parameter type="int" name=" index"></parameter><parameter type="const wxBitmap&amp;" name=" bitmap"></parameter><parameter type="const wxBitmap&amp;" name="mask" value="wxNullBitmap">Monochrome mask bitmap, representing the transparent areas of the image.</parameter></parameters><description>

Replaces the existing image with the new image.

</description></function>
<function type="bool" name="Replace"><parameters><parameter type="int" name=" index"></parameter><parameter type="const wxIcon&amp;" name=" icon"></parameter></parameters><remarks>

The original bitmap or icon is not affected by the <b> Replace</b> operation, and can be deleted afterwards.

\pythonnote{The second form is called <tt> ReplaceIcon</tt> in wxPython.}


</remarks><returnvalue>

true if the replacement was successful, false otherwise.

</returnvalue><description>

Replaces the existing image with the new image.









</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxIndividualLayoutConstraint">
<description>
<p class="classdesc">
Objects of this class are stored in the wxLayoutConstraint class
as one of eight possible constraints that a window can be involved in.</p><p class="classdesc">Constraints are initially set to have the relationship wxUnconstrained,
which means that their values should be calculated by looking at known constraints.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/layout.h"/></includes>
<seealso>

<ref target="constraintsoverview">Overview and examples</ref>,
<ref target="wxlayoutconstraints">wxLayoutConstraints</ref><ref target="wxwindowsetconstraints">wxWindow::SetConstraints</ref>.

</seealso>
<members>
<member class="wxIndividualLayoutConstraint" name="wxIndividualLayoutConstraint"><function type="void" name="wxIndividualLayoutConstraint"><description>

Constructor. Not used by the end-user.

</description></function></member>
<member class="wxIndividualLayoutConstraint" name="Above"><function type="void" name="Above"><parameters><parameter type="wxWindow &#42;" name="otherWin"></parameter><parameter type="int" name="margin" value="0"></parameter></parameters><description>

Constrains this edge to be above the given window, with an
optional margin. Implicitly, this is relative to the top edge of the other window.

</description></function></member>
<member class="wxIndividualLayoutConstraint" name="Absolute"><function type="void" name="Absolute"><parameters><parameter type="int" name=" value"></parameter></parameters><description>

Constrains this edge or dimension to be the given absolute value.

</description></function></member>
<member class="wxIndividualLayoutConstraint" name="AsIs"><function type="void" name="AsIs"><description>

Sets this edge or constraint to be whatever the window's value is
at the moment. If either of the width and height constraints
are <i> as is</i>, the window will not be resized, but moved instead.
This is important when considering panel items which are intended
to have a default size, such as a button, which may take its size
from the size of the button label.

</description></function></member>
<member class="wxIndividualLayoutConstraint" name="Below"><function type="void" name="Below"><parameters><parameter type="wxWindow &#42;" name="otherWin"></parameter><parameter type="int" name="margin" value="0"></parameter></parameters><description>

Constrains this edge to be below the given window, with an
optional margin. Implicitly, this is relative to the bottom edge of the other window.

</description></function></member>
<member class="wxIndividualLayoutConstraint" name="Unconstrained"><function type="void" name="Unconstrained"><description>

Sets this edge or dimension to be unconstrained, that is, dependent on
other edges and dimensions from which this value can be deduced.

</description></function></member>
<member class="wxIndividualLayoutConstraint" name="LeftOf"><function type="void" name="LeftOf"><parameters><parameter type="wxWindow &#42;" name="otherWin"></parameter><parameter type="int" name="margin" value="0"></parameter></parameters><description>

Constrains this edge to be to the left of the given window, with an
optional margin. Implicitly, this is relative to the left edge of the other window.

</description></function></member>
<member class="wxIndividualLayoutConstraint" name="PercentOf"><function type="void" name="PercentOf"><parameters><parameter type="wxWindow &#42;" name="otherWin"></parameter><parameter type="wxEdge" name=" edge"></parameter><parameter type="int" name=" per"></parameter></parameters><description>

Constrains this edge or dimension to be to a percentage of the given window, with an
optional margin.

</description></function></member>
<member class="wxIndividualLayoutConstraint" name="RightOf"><function type="void" name="RightOf"><parameters><parameter type="wxWindow &#42;" name="otherWin"></parameter><parameter type="int" name="margin" value="0"></parameter></parameters><description>

Constrains this edge to be to the right of the given window, with an
optional margin. Implicitly, this is relative to the right edge of the other window.

</description></function></member>
<member class="wxIndividualLayoutConstraint" name="SameAs"><function type="void" name="SameAs"><parameters><parameter type="wxWindow &#42;" name="otherWin"></parameter><parameter type="wxEdge" name=" edge"></parameter><parameter type="int" name="margin" value="0"></parameter></parameters><description>

Constrains this edge or dimension to be to the same as the edge of the given window, with an
optional margin.

</description></function></member>
<member class="wxIndividualLayoutConstraint" name="Set"><function type="void" name="Set"><parameters><parameter type="wxRelationship" name=" rel"></parameter><parameter type="wxWindow &#42;" name="otherWin"></parameter><parameter type="wxEdge" name=" otherEdge"></parameter><parameter type="int" name="value" value="0"></parameter><parameter type="int" name="margin" value="0"></parameter></parameters><description>

Sets the properties of the constraint. Normally called by one of the convenience
functions such as Above, RightOf, SameAs.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxInitDialogEvent">
<description>
<p class="classdesc">
A wxInitDialogEvent is sent as a dialog or panel is being initialised.
Handlers for this event can transfer data to the window.
The default handler calls <ref target="wxwindowtransferdatatowindow">wxWindow::TransferDataToWindow</ref>.</p>
</description>
<parents>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_INIT_DIALOG(func)">Process a wxEVT_INIT_DIALOG event.</event></events>
<seealso>

<ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxInitDialogEvent" name="wxInitDialogEvent"><function type="" name="wxInitDialogEvent"><parameters><parameter type="int " name="id" value="0"></parameter></parameters><description>

Constructor.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxInputStream">
<description>
<p class="classdesc">
wxInputStream is an abstract base class which may not be used directly.</p>
</description>
<parents>
<classref name="wxStreamBase"/>

</parents>
<includes>
<header name="wx/stream.h"/></includes>
<members>
<member class="wxInputStream" name="wxInputStream"><function type="" name="wxInputStream"><description>

Creates a dummy input stream.

</description></function></member>
<member class="wxInputStream" name="~wxInputStream"><function type="" name="~wxInputStream"><description>

Destructor.

</description></function></member>
<member class="wxInputStream" name="GetC"><function type="char" name="GetC"><description>

Returns the first character in the input queue and removes it.

</description></function></member>
<member class="wxInputStream" name="Eof"><function type="wxInputStream" name="Eof" suffix="const"><description>

Returns true if the end of stream has been reached.

</description></function></member>
<member class="wxInputStream" name="LastRead"><function type="size_t" name="LastRead" suffix="const"><description>

Returns the last number of bytes read.

</description></function></member>
<member class="wxInputStream" name="Peek"><function type="char" name="Peek"><description>

Returns the first character in the input queue without removing it.

</description></function></member>
<member class="wxInputStream" name="Read"><function type="wxInputStream&amp;" name="Read"><parameters><parameter type="void &#42;" name="buffer"></parameter><parameter type="size_t" name=" size"></parameter></parameters><returnvalue>

This function returns a reference on the current object, so the user can test
any states of the stream right away.

</returnvalue><description>

Reads the specified amount of bytes and stores the data in <i> buffer</i>.

\wxheading{Warning}

The buffer absolutely needs to have at least the specified size.

</description></function>
<function type="wxInputStream&amp;" name="Read"><parameters><parameter type="wxOutputStream&amp;" name=" stream_out"></parameter></parameters><returnvalue>

This function returns a reference on the current object, so the user can test
any states of the stream right away.

</returnvalue><description>

Reads data from the input queue and stores it in the specified output stream.
The data is read until an error is raised by one of the two streams.

</description></function></member>
<member class="wxInputStream" name="SeekI"><function type="off_t" name="SeekI"><parameters><parameter type="off_t" name=" pos"></parameter><parameter type="wxSeekMode" name="mode" value="wxFromStart"></parameter></parameters><description>

Changes the stream current position.

</description></function></member>
<member class="wxInputStream" name="TellI"><function type="off_t" name="TellI" suffix="const"><description>

Returns the current stream position.

</description></function></member>
<member class="wxInputStream" name="Ungetch"><function type="size_t" name="Ungetch"><parameters><parameter type="const char&#42;" name=" buffer"></parameter><parameter type="size_t" name=" size"></parameter></parameters><returnvalue>

Returns the amount of bytes saved in the Write-Back buffer.

</returnvalue><description>

This function is only useful in <i> read</i> mode. It is the manager of the &quot;Write-Back&quot;
buffer. This buffer acts like a temporary buffer where data which has to be
read during the next read IO call are put. This is useful when you get a big
block of data which you didn't want to read: you can replace them at the top
of the input queue by this way.

Be very careful about this call in connection with calling SeekI() on the same
stream. Any call to SeekI() will invalidate any previous call to this method
(otherwise you could SeekI() to one position, &quot;unread&quot; a few bytes there, SeekI()
to another position and data would be either lost or corrupted).

</description></function>
<function type="bool" name="Ungetch"><parameters><parameter type="char " name="c"></parameter></parameters><description>

This function acts like the previous one except that it takes only one
character: it is sometimes shorter to use than the generic function.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxJoystick">
<description>
<p class="classdesc">
wxJoystick allows an application to control one or more joysticks.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/joystick.h"/></includes>
<seealso>

<ref target="wxjoystickevent">wxJoystickEvent</ref>

</seealso>
<members>
<member class="wxJoystick" name="wxJoystick"><function type="" name="wxJoystick"><parameters><parameter type="int" name="joystick" value="wxJOYSTICK1"></parameter></parameters><description>

Constructor. <i> joystick</i> may be one of wxJOYSTICK1, wxJOYSTICK2, indicating the joystick
controller of interest.

</description></function></member>
<member class="wxJoystick" name="~wxJoystick"><function type="" name="~wxJoystick"><description>

Destroys the wxJoystick object.

</description></function></member>
<member class="wxJoystick" name="GetButtonState"><function type="int" name="GetButtonState" suffix="const"><description>

Returns the state of the joystick buttons. Every button is mapped to a single
bit in the returned integer, with the first button being mapped to the least
significant bit, and so on.
A bitlist of wxJOY_BUTTONn identifiers, where n is 1, 2, 3 or 4 
is available for historical reasons.

</description></function></member>
<member class="wxJoystick" name="GetManufacturerId"><function type="int" name="GetManufacturerId" suffix="const"><description>

Returns the manufacturer id.

</description></function></member>
<member class="wxJoystick" name="GetMovementThreshold"><function type="int" name="GetMovementThreshold" suffix="const"><description>

Returns the movement threshold, the number of steps outside which the joystick is deemed to have
moved.

</description></function></member>
<member class="wxJoystick" name="GetNumberAxes"><function type="int" name="GetNumberAxes" suffix="const"><description>

Returns the number of axes for this joystick.

</description></function></member>
<member class="wxJoystick" name="GetNumberButtons"><function type="int" name="GetNumberButtons" suffix="const"><description>

Returns the number of buttons for this joystick.

</description></function></member>
<member class="wxJoystick" name="GetNumberJoysticks"><function type="int" name="GetNumberJoysticks" suffix="const"><description>

Returns the number of joysticks currently attached to the computer.

</description></function></member>
<member class="wxJoystick" name="GetPollingMax"><function type="int" name="GetPollingMax" suffix="const"><description>

Returns the maximum polling frequency.

</description></function></member>
<member class="wxJoystick" name="GetPollingMin"><function type="int" name="GetPollingMin" suffix="const"><description>

Returns the minimum polling frequency.

</description></function></member>
<member class="wxJoystick" name="GetProductId"><function type="int" name="GetProductId" suffix="const"><description>

Returns the product id for the joystick.

</description></function></member>
<member class="wxJoystick" name="GetProductName"><function type="wxString" name="GetProductName" suffix="const"><description>

Returns the product name for the joystick.

</description></function></member>
<member class="wxJoystick" name="GetPosition"><function type="wxPoint" name="GetPosition" suffix="const"><description>

Returns the x, y position of the joystick.

</description></function></member>
<member class="wxJoystick" name="GetPOVPosition"><function type="int" name="GetPOVPosition" suffix="const"><description>

Returns the point-of-view position, expressed in continuous, one-hundredth of a degree units,
but limited to return 0, 9000, 18000 or 27000.
Returns -1 on error.

</description></function></member>
<member class="wxJoystick" name="GetPOVCTSPosition"><function type="int" name="GetPOVCTSPosition" suffix="const"><description>

Returns the point-of-view position, expressed in continuous, one-hundredth of a degree units.
Returns -1 on error.

</description></function></member>
<member class="wxJoystick" name="GetRudderMax"><function type="int" name="GetRudderMax" suffix="const"><description>

Returns the maximum rudder position.

</description></function></member>
<member class="wxJoystick" name="GetRudderMin"><function type="int" name="GetRudderMin" suffix="const"><description>

Returns the minimum rudder position.

</description></function></member>
<member class="wxJoystick" name="GetRudderPosition"><function type="int" name="GetRudderPosition" suffix="const"><description>

Returns the rudder position.

</description></function></member>
<member class="wxJoystick" name="GetUMax"><function type="int" name="GetUMax" suffix="const"><description>

Returns the maximum U position.

</description></function></member>
<member class="wxJoystick" name="GetUMin"><function type="int" name="GetUMin" suffix="const"><description>

Returns the minimum U position.

</description></function></member>
<member class="wxJoystick" name="GetUPosition"><function type="int" name="GetUPosition" suffix="const"><description>

Gets the position of the fifth axis of the joystick, if it exists.

</description></function></member>
<member class="wxJoystick" name="GetVMax"><function type="int" name="GetVMax" suffix="const"><description>

Returns the maximum V position.

</description></function></member>
<member class="wxJoystick" name="GetVMin"><function type="int" name="GetVMin" suffix="const"><description>

Returns the minimum V position.

</description></function></member>
<member class="wxJoystick" name="GetVPosition"><function type="int" name="GetVPosition" suffix="const"><description>

Gets the position of the sixth axis of the joystick, if it exists.

</description></function></member>
<member class="wxJoystick" name="GetXMax"><function type="int" name="GetXMax" suffix="const"><description>

Returns the maximum x position.

</description></function></member>
<member class="wxJoystick" name="GetXMin"><function type="int" name="GetXMin" suffix="const"><description>

Returns the minimum x position.

</description></function></member>
<member class="wxJoystick" name="GetYMax"><function type="int" name="GetYMax" suffix="const"><description>

Returns the maximum y position.

</description></function></member>
<member class="wxJoystick" name="GetYMin"><function type="int" name="GetYMin" suffix="const"><description>

Returns the minimum y position.

</description></function></member>
<member class="wxJoystick" name="GetZMax"><function type="int" name="GetZMax" suffix="const"><description>

Returns the maximum z position.

</description></function></member>
<member class="wxJoystick" name="GetZMin"><function type="int" name="GetXMin" suffix="const"><description>

Returns the minimum z position.

</description></function></member>
<member class="wxJoystick" name="GetZPosition"><function type="int" name="GetZPosition" suffix="const"><description>

Returns the z position of the joystick.

</description></function></member>
<member class="wxJoystick" name="HasPOV"><function type="bool" name="HasPOV" suffix="const"><description>

Returns true if the joystick has a point of view control.

</description></function></member>
<member class="wxJoystick" name="HasPOV4Dir"><function type="bool" name="HasPOV4Dir" suffix="const"><description>

Returns true if the joystick point-of-view supports discrete values (centered, forward, backward, left, and right).

</description></function></member>
<member class="wxJoystick" name="HasPOVCTS"><function type="bool" name="HasPOVCTS" suffix="const"><description>

Returns true if the joystick point-of-view supports continuous degree bearings.

</description></function></member>
<member class="wxJoystick" name="HasRudder"><function type="bool" name="HasRudder" suffix="const"><description>

Returns true if there is a rudder attached to the computer.

</description></function></member>
<member class="wxJoystick" name="HasU"><function type="bool" name="HasU" suffix="const"><description>

Returns true if the joystick has a U axis.

</description></function></member>
<member class="wxJoystick" name="HasV"><function type="bool" name="HasV" suffix="const"><description>

Returns true if the joystick has a V axis.

</description></function></member>
<member class="wxJoystick" name="HasZ"><function type="bool" name="HasZ" suffix="const"><description>

Returns true if the joystick has a Z axis.

</description></function></member>
<member class="wxJoystick" name="IsOk"><function type="bool" name="IsOk" suffix="const"><description>

Returns true if the joystick is functioning.

</description></function></member>
<member class="wxJoystick" name="ReleaseCapture"><function type="bool" name="ReleaseCapture"><seealso>

<ref target="wxjoysticksetcapture">wxJoystick::SetCapture</ref><ref target="wxjoystickevent">wxJoystickEvent</ref>

</seealso><description></description></function></member>
<member class="wxJoystick" name="SetCapture"><function type="bool" name="SetCapture"><parameters><parameter type="wxWindow&#42;" name=" win"></parameter><parameter type="int" name="pollingFreq" value="0">If zero, movement events are sent when above the
threshold. If greater than zero, events are received every <i> pollingFreq</i> milliseconds.</parameter></parameters><seealso>

<ref target="wxjoystickreleasecapture">wxJoystick::ReleaseCapture</ref><ref target="wxjoystickevent">wxJoystickEvent</ref>

</seealso><description></description></function></member>
<member class="wxJoystick" name="SetMovementThreshold"><function type="void" name="SetMovementThreshold"><parameters><parameter type="int" name=" threshold"></parameter></parameters><description>

Sets the movement threshold, the number of steps outside which the joystick is deemed to have
moved.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="N"/><platform name="os2" status="N"/></supported>
</class><class name="wxJoystickEvent">
<description>
<p class="classdesc">
This event class contains information about mouse events, particularly
events received by windows.</p>
</description>
<parents>
<classref name="wxEvent"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_JOY_BUTTON_DOWN(func)">Process a wxEVT_JOY_BUTTON_DOWN event.</event><event name="EVT_JOY_BUTTON_UP(func)">Process a wxEVT_JOY_BUTTON_UP event.</event><event name="EVT_JOY_MOVE(func)">Process a wxEVT_JOY_MOVE event.</event><event name="EVT_JOY_ZMOVE(func)">Process a wxEVT_JOY_ZMOVE event.</event></events>
<seealso>

<ref target="wxjoystick">wxJoystick</ref>

</seealso>
<members>
<member class="wxJoystickEvent" name="wxJoystickEvent"><function type="" name="wxJoystickEvent"><parameters><parameter type="WXTYPE" name="eventType" value="0"></parameter><parameter type="int" name="state" value="0"></parameter><parameter type="int" name="joystick" value="wxJOYSTICK1"></parameter><parameter type="int " name="change" value="0"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxJoystickEvent" name="ButtonDown"><function type="bool" name="ButtonDown" suffix="const"><parameters><parameter type="int" name="button" value="wxJOY_BUTTON_ANY">Can be wxJOY_BUTTONn where n is 1, 2, 3 or 4; or wxJOY_BUTTON_ANY to
indicate any button down event.</parameter></parameters><description>

Returns true if the event was a down event from the specified button (or any button).





</description></function></member>
<member class="wxJoystickEvent" name="ButtonIsDown"><function type="bool" name="ButtonIsDown" suffix="const"><parameters><parameter type="int" name="button" value="wxJOY_BUTTON_ANY">Can be wxJOY_BUTTONn where n is 1, 2, 3 or 4; or wxJOY_BUTTON_ANY to
indicate any button down event.</parameter></parameters><description>

Returns true if the specified button (or any button) was in a down state.





</description></function></member>
<member class="wxJoystickEvent" name="ButtonUp"><function type="bool" name="ButtonUp" suffix="const"><parameters><parameter type="int" name="button" value="wxJOY_BUTTON_ANY">Can be wxJOY_BUTTONn where n is 1, 2, 3 or 4; or wxJOY_BUTTON_ANY to
indicate any button down event.</parameter></parameters><description>

Returns true if the event was an up event from the specified button (or any button).





</description></function></member>
<member class="wxJoystickEvent" name="GetButtonChange"><function type="int" name="GetButtonChange" suffix="const"><description>

Returns the identifier of the button changing state. This is a wxJOY_BUTTONn identifier, where
n is one of 1, 2, 3, 4.

</description></function></member>
<member class="wxJoystickEvent" name="GetButtonState"><function type="int" name="GetButtonState" suffix="const"><description>

Returns the down state of the buttons. This is a bitlist of wxJOY_BUTTONn identifiers, where
n is one of 1, 2, 3, 4.

</description></function></member>
<member class="wxJoystickEvent" name="GetJoystick"><function type="int" name="GetJoystick" suffix="const"><description>

Returns the identifier of the joystick generating the event - one of wxJOYSTICK1 and wxJOYSTICK2.

</description></function></member>
<member class="wxJoystickEvent" name="GetPosition"><function type="wxPoint" name="GetPosition" suffix="const"><description>

Returns the x, y position of the joystick event.

</description></function></member>
<member class="wxJoystickEvent" name="GetZPosition"><function type="int" name="GetZPosition" suffix="const"><description>

Returns the z position of the joystick event.

</description></function></member>
<member class="wxJoystickEvent" name="IsButton"><function type="bool" name="IsButton" suffix="const"><description>

Returns true if this was a button up or down event (<i> not</i> 'is any button down?').

</description></function></member>
<member class="wxJoystickEvent" name="IsMove"><function type="bool" name="IsMove" suffix="const"><description>

Returns true if this was an x, y move event.

</description></function></member>
<member class="wxJoystickEvent" name="IsZMove"><function type="bool" name="IsZMove" suffix="const"><description>

Returns true if this was a z move event.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="N"/><platform name="os2" status="N"/></supported>
</class><class name="wxKeyEvent">
<description>
<p class="classdesc">
This event class contains information about keypress (character) events.</p><p class="classdesc">Notice that there are three different kinds of keyboard events in wxWindows:
key down and up events and char events. The difference between the first two
is clear - the first corresponds to a key press and the second to a key
release - otherwise they are identical. Just note that if the key is
maintained in a pressed state you will typically get a lot of (automatically
generated) down events but only one up so it is wrong to assume that there is
one up event corresponding to each down one.</p><p class="classdesc">Both key events provide untranslated key codes while the char event carries
the translated one. The untranslated code for alphanumeric keys is always
an upper case value. For the other keys it is one of <tt> WXK_XXX</tt> values
from the <ref target="keycodes">keycodes table</ref>. The translated key is, in
general, the character the user expects to appear as the result of the key
combination when typing the text into a text entry zone, for example.</p><p class="classdesc">A few examples to clarify this (all assume that {\sc Caps Lock} is unpressed
and the standard US keyboard): when the <tt> 'A'</tt> key is pressed, the key down
event key code is equal to <tt> ASCII A</tt> $== 65$. But the char event key code
is <tt> ASCII a</tt> $== 97$. On the other hand, if you press both {\sc Shift} and
<tt> 'A'</tt> keys simultaneously , the key code in key down event will still be
just <tt> 'A'</tt> while the char event key code parameter will now be <tt> 'A'</tt>
as well.</p><p class="classdesc">Although in this simple case it is clear that the correct key code could be
found in the key down event handler by checking the value returned by
<ref target="wxkeyeventshiftdown">ShiftDown()</ref>, in general you should use
<tt> EVT_CHAR</tt> for this as for non alphanumeric keys the translation is
keyboard-layout dependent and can only be done properly by the system itself.</p><p class="classdesc">Another kind of translation is done when the control key is pressed: for
example, for {\sc Ctrl-A} key press the key down event still carries the
same key code <tt> 'a'</tt> as usual but the char event will have key code of
1, the ASCII value of this key combination.</p><p class="classdesc">You may discover how the other keys on your system behave interactively by
running the <ref target="sampletext">text</ref> wxWindows sample and pressing some keys
in any of the text controls shown in it.</p><p class="classdesc"><b> Note:</b> If a key down (<tt> EVT_KEY_DOWN</tt>) event is caught and
the event handler does not call <tt> event.Skip()</tt> then the coresponding
char event (<tt> EVT_CHAR</tt>) will not happen.  This is by design and
enables the programs that handle both types of events to be a bit
simpler.</p><p class="classdesc"><b> Note for Windows programmers:</b> The key and char events in wxWindows are
similar to but slightly different from Windows <tt> WM_KEYDOWN</tt> and
<tt> WM_CHAR</tt> events. In particular, Alt-x combination will generate a char
event in wxWindows (unless it is used as an accelerator).</p><p class="classdesc"><b> Tip:</b> be sure to call <tt> event.Skip()</tt> for events that you don't process in
key event function, otherwise menu shortcuts may cease to work under Windows.</p>
</description>
<parents>
<classref name="wxEvent"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_KEY_DOWN(func)">Process a wxEVT_KEY_DOWN event (any key has been pressed).</event><event name="EVT_KEY_UP(func)">Process a wxEVT_KEY_UP event (any key has been released).</event><event name="EVT_CHAR(func)">Process a wxEVT_CHAR event.</event></events>
<members>
<member class="wxKeyEvent" name="m_altDown"></member>
<member class="wxKeyEvent" name="m_controlDown"></member>
<member class="wxKeyEvent" name="m_keyCode"></member>
<member class="wxKeyEvent" name="m_metaDown"></member>
<member class="wxKeyEvent" name="m_shiftDown"></member>
<member class="wxKeyEvent" name="m_x"></member>
<member class="wxKeyEvent" name="m_y"></member>
<member class="wxKeyEvent" name="wxKeyEvent"><function type="" name="wxKeyEvent"><parameters><parameter type="WXTYPE" name=" keyEventType"></parameter></parameters><description>

Constructor. Currently, the only valid event types are wxEVT_CHAR and wxEVT_CHAR_HOOK.

</description></function></member>
<member class="wxKeyEvent" name="AltDown"><function type="bool" name="AltDown" suffix="const"><description>

Returns true if the Alt key was down at the time of the key event.

</description></function></member>
<member class="wxKeyEvent" name="ControlDown"><function type="bool" name="ControlDown" suffix="const"><description>

Returns true if the control key was down at the time of the key event.

</description></function></member>
<member class="wxKeyEvent" name="GetKeyCode"><function type="int" name="GetKeyCode" suffix="const"><description>

Returns the virtual key code. ASCII events return normal ASCII values,
while non-ASCII events return values such as <b> WXK_LEFT</b> for the
left cursor key. See <ref target="keycodes">Keycodes</ref> for a full list of the virtual key codes.

</description></function></member>
<member class="wxKeyEvent" name="GetRawKeyCode"><function type="wxUint32" name="GetRawKeyCode" suffix="const"><description>

Returns the raw key code for this event. This is a platform-dependent scan code
which should only be used in advanced applications.

<b> NB:</b> Currently the raw key codes are not supported by all ports, use
<tt>\#ifdef wxHAS_RAW_KEY_CODES</tt> to determine if this feature is available.

</description></function></member>
<member class="wxKeyEvent" name="GetRawKeyFlags"><function type="wxUint32" name="GetRawKeyFlags" suffix="const"><description>

Returns the low level key flags for this event. The flags are
platform-dependent and should only be used in advanced applications.

<b> NB:</b> Currently the raw key flags are not supported by all ports, use
<tt> \#ifdef wxHAS_RAW_KEY_CODES</tt> to determine if this feature is available.

</description></function></member>
<member class="wxKeyEvent" name="GetX"><function type="long" name="GetX" suffix="const"><description>

Returns the X position (in client coordinates) of the event.

</description></function></member>
<member class="wxKeyEvent" name="GetY"><function type="long" name="GetY" suffix="const"><description>

Returns the Y (in client coordinates) position of the event.

</description></function></member>
<member class="wxKeyEvent" name="MetaDown"><function type="bool" name="MetaDown" suffix="const"><description>

Returns true if the Meta key was down at the time of the key event.

</description></function></member>
<member class="wxKeyEvent" name="GetPosition"><function type="wxPoint" name="GetPosition" suffix="const"><description>

</description></function>
<function type="void" name="GetPosition" suffix="const"><parameters><parameter type="long &#42;" name="x"></parameter><parameter type="long &#42;" name="y"></parameter></parameters><description>

Obtains the position (in client coordinates) at which the key was pressed.

</description></function></member>
<member class="wxKeyEvent" name="HasModifiers"><function type="bool" name="HasModifiers" suffix="const"><description>

Returns true if either {\sc Ctrl} or {\sc Alt} keys was down
at the time of the key event. Note that this function does not take into
account neither {\sc Shift} nor {\sc Meta} key states (the reason for ignoring
the latter is that it is common for {\sc NumLock} key to be configured as
{\sc Meta} under X but the key presses even while {\sc NumLock} is on should
be still processed normally).

</description></function></member>
<member class="wxKeyEvent" name="ShiftDown"><function type="bool" name="ShiftDown" suffix="const"><description>

Returns true if the shift key was down at the time of the key event.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxLayoutAlgorithm">
<description>
<p class="classdesc">
wxLayoutAlgorithm implements layout of subwindows in MDI or SDI frames.
It sends a wxCalculateLayoutEvent event
to children of the frame, asking them for information about
their size. For MDI parent frames, the algorithm allocates
the remaining space to the MDI client window (which contains the MDI child frames).
For SDI (normal) frames, a 'main' window is specified as taking up the
remaining space.</p><p class="classdesc">Because the event system is used, this technique can be applied to any windows,
which are not necessarily 'aware' of the layout classes (no virtual functions
in wxWindow refer to wxLayoutAlgorithm or its events). However, you
may wish to use <ref target="wxsashlayoutwindow">wxSashLayoutWindow</ref> for your subwindows
since this class provides handlers for the required events, and accessors
to specify the desired size of the window. The sash behaviour in the base class
can be used, optionally, to make the windows user-resizable.</p><p class="classdesc">wxLayoutAlgorithm is typically used in IDE (integrated development environment) applications,
where there are several resizable windows in addition to the MDI client window, or
other primary editing window. Resizable windows might include toolbars, a project
window, and a window for displaying error and warning messages.</p><p class="classdesc">When a window receives an OnCalculateLayout event, it should call SetRect in
the given event object, to be the old supplied rectangle minus whatever space the
window takes up. It should also set its own size accordingly.
wxSashLayoutWindow::OnCalculateLayout generates an OnQueryLayoutInfo event
which it sends to itself to determine the orientation, alignment and size of the window,
which it gets from internal member variables set by the application.</p><p class="classdesc">The algorithm works by starting off with a rectangle equal to the whole frame client area.
It iterates through the frame children, generating OnCalculateLayout events which subtract
the window size and return the remaining rectangle for the next window to process. It
is assumed (by wxSashLayoutWindow::OnCalculateLayout) that a window stretches the full dimension
of the frame client, according to the orientation it specifies. For example, a horizontal window
will stretch the full width of the remaining portion of the frame client area.
In the other orientation, the window will be fixed to whatever size was specified by
OnQueryLayoutInfo. An alignment setting will make the window 'stick' to the left, top, right or
bottom of the remaining client area. This scheme implies that order of window creation is important.
Say you wish to have an extra toolbar at the top of the frame, a project window to the left of
the MDI client window, and an output window above the status bar. You should therefore create
the windows in this order: toolbar, output window, project window. This ensures that the toolbar and
output window take up space at the top and bottom, and then the remaining height in-between is used for
the project window.</p><p class="classdesc">wxLayoutAlgorithm is quite independent of the way in which
OnCalculateLayout chooses to interpret a window's size and alignment. Therefore you
could implement a different window class with a new OnCalculateLayout event handler,
that has a more sophisticated way of laying out the windows. It might allow
specification of whether stretching occurs in the specified orientation, for example,
rather than always assuming stretching. (This could, and probably should, be added to the existing
implementation).</p><p class="classdesc"><i> Note:</i> wxLayoutAlgorithm has nothing to do with wxLayoutConstraints. It is an alternative
way of specifying layouts for which the normal constraint system is unsuitable.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/laywin.h"/></includes>
<events>
<event name="EVT_QUERY_LAYOUT_INFO(func)">Process a wxEVT_QUERY_LAYOUT_INFO event,
to get size, orientation and alignment from a window. See \helpref{wxQueryLayoutInfoEvent</event><event name="EVT_CALCULATE_LAYOUT(func)">Process a wxEVT_CALCULATE_LAYOUT event,
which asks the window to take a 'bite' out of a rectangle provided by the algorithm.
See \helpref{wxCalculateLayoutEvent</event></events>
<types>

<pre>
enum wxLayoutOrientation {
    wxLAYOUT_HORIZONTAL,
    wxLAYOUT_VERTICAL
};

enum wxLayoutAlignment {
    wxLAYOUT_NONE,
    wxLAYOUT_TOP,
    wxLAYOUT_LEFT,
    wxLAYOUT_RIGHT,
    wxLAYOUT_BOTTOM,
};
</pre>

</types>
<seealso>

<ref target="wxsashevent">wxSashEvent</ref><ref target="wxsashlayoutwindow">wxSashLayoutWindow</ref><ref target="eventhandlingoverview">Event handling overview</ref>

<ref target="wxcalculatelayoutevent">wxCalculateLayoutEvent</ref>,
<ref target="wxquerylayoutinfoevent">wxQueryLayoutInfoEvent</ref>,
<ref target="wxsashlayoutwindow">wxSashLayoutWindow</ref>,
<ref target="wxsashwindow">wxSashWindow</ref>

</seealso>
<members>
<member class="wxLayoutAlgorithm" name="wxLayoutAlgorithm"><function type="" name="wxLayoutAlgorithm"><description>

Default constructor.

</description></function></member>
<member class="wxLayoutAlgorithm" name="~wxLayoutAlgorithm"><function type="" name="~wxLayoutAlgorithm"><description>

Destructor.

</description></function></member>
<member class="wxLayoutAlgorithm" name="LayoutFrame"><function type="bool" name="LayoutFrame" suffix="const"><parameters><parameter type="wxFrame&#42; " name="frame"></parameter><parameter type="wxWindow&#42;" name="mainWindow" value="NULL"></parameter></parameters><description>

Lays out the children of a normal frame. <i> mainWindow</i> is set to occupy the remaining space.

This function simply calls <ref target="wxlayoutalgorithmlayoutwindow">wxLayoutAlgorithm::LayoutWindow</ref>.

</description></function></member>
<member class="wxLayoutAlgorithm" name="LayoutMDIFrame"><function type="bool" name="LayoutMDIFrame" suffix="const"><parameters><parameter type="wxMDIParentFrame&#42; " name="frame"></parameter><parameter type="wxRect&#42;" name="rect" value="NULL"></parameter></parameters><description>

Lays out the children of an MDI parent frame. If <i> rect</i> is non-NULL, the
given rectangle will be used as a starting point instead of the frame's client area.

The MDI client window is set to occupy the remaining space.

</description></function></member>
<member class="wxLayoutAlgorithm" name="LayoutWindow"><function type="bool" name="LayoutWindow" suffix="const"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindow&#42;" name="mainWindow" value="NULL"></parameter></parameters><description>

Lays out the children of a normal frame or other window.

<i> mainWindow</i> is set to occupy the remaining space. If this is not specified, then
the last window that responds to a calculate layout event in query mode will get the remaining space
(that is, a non-query OnCalculateLayout event will not be sent to this window and the window will be set
to the remaining size).

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxLayoutConstraints">
<description>
<p class="classdesc">
<b> Note:</b> constraints are now deprecated and you should use <ref target="sizeroverview">sizers</ref> instead.</p><p class="classdesc">Objects of this class can be associated with a window to define its
layout constraints, with respect to siblings or its parent.</p><p class="classdesc">The class consists of the following eight constraints of class wxIndividualLayoutConstraint,
some or all of which should be accessed directly to set the appropriate
constraints.</p><p class="classdesc"><ul><li> <b> left:</b> represents the left hand edge of the window
</li>
<li> <b> right:</b> represents the right hand edge of the window
</li>
<li> <b> top:</b> represents the top edge of the window
</li>
<li> <b> bottom:</b> represents the bottom edge of the window
</li>
<li> <b> width:</b> represents the width of the window
</li>
<li> <b> height:</b> represents the height of the window
</li>
<li> <b> centreX:</b> represents the horizontal centre point of the window
</li>
<li> <b> centreY:</b> represents the vertical centre point of the window
</li></ul></p><p class="classdesc">Most constraints are initially set to have the relationship wxUnconstrained,
which means that their values should be calculated by looking at known constraints.
The exceptions are <i> width</i> and <i> height</i>, which are set to wxAsIs to
ensure that if the user does not specify a constraint, the existing
width and height will be used, to be compatible with panel items which often
have take a default size. If the constraint is wxAsIs, the dimension will
not be changed.</p>
</description>

<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/layout.h"/></includes>
<seealso>

<ref target="constraintsoverview">Overview and examples</ref>,
<ref target="wxindividuallayoutconstraint">wxIndividualLayoutConstraint</ref><ref target="wxwindowsetconstraints">wxWindow::SetConstraints</ref>

</seealso>
<members>
<member class="wxLayoutConstraints" name="wxLayoutConstraints"><function type="" name="wxLayoutConstraints"><description>

Constructor.

</description></function></member>
<member class="wxLayoutConstraints" name="bottom"></member>
<member class="wxLayoutConstraints" name="centreX"></member>
<member class="wxLayoutConstraints" name="centreY"></member>
<member class="wxLayoutConstraints" name="height"></member>
<member class="wxLayoutConstraints" name="left"></member>
<member class="wxLayoutConstraints" name="right"></member>
<member class="wxLayoutConstraints" name="top"></member>
<member class="wxLayoutConstraints" name="width"></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxList">
<description>
<p class="classdesc">
wxList classes provide linked list functionality for wxWindows, and for an
application if it wishes.  Depending on the form of constructor used, a list
can be keyed on integer or string keys to provide a primitive look-up ability.
See <ref target="wxhashmap">wxHashMap</ref> for a faster method of storage
when random access is required.</p><p class="classdesc">While wxList class in the previous versions of wxWindows only could contain
elements of type wxObject and had essentially untyped interface (thus allowing
you to put apples in the list and read back oranges from it), the new wxList
classes family may contain elements of any type and has much more strict type
checking. Unfortunately, it also requires an additional line to be inserted in
your program for each list class you use (which is the only solution short of
using templates which is not done in wxWindows because of portability issues).</p><p class="classdesc">The general idea is to have the base class wxListBase working with <i> void &#42;</i>
data but make all of its dangerous (because untyped) functions protected, so
that they can only be used from derived classes which, in turn, expose a type
safe interface. With this approach a new wxList-like class must be defined for
each list type (i.e. list of ints, of wxStrings or of MyObjects). This is done
with <i> WX_DECLARE_LIST</i> and <i> WX_DEFINE_LIST</i> macros like this
(notice the similarity with WX_DECLARE_OBJARRAY and WX_IMPLEMENT_OBJARRAY
macros):</p>
</description>
<example>

<pre>
    // this part might be in a header or source (.cpp) file
    class MyListElement
    {
        ... // whatever
    };

    // declare our list class: this macro declares and partly implements MyList
    // class (which derives from wxListBase)
    WX_DECLARE_LIST(MyListElement, MyList);

    ...

    // the only requirement for the rest is to be AFTER the full declaration of
    // MyListElement (for WX_DECLARE_LIST forward declaration is enough), but
    // usually it will be found in the source file and not in the header

    #include &lt;wx/listimpl.cpp&gt;
    WX_DEFINE_LIST(MyList);

    // now MyList class may be used as a usual wxList, but all of its methods
    // will take/return the objects of the right (i.e. MyListElement) type. You
    // also have MyList::Node type which is the type-safe version of wxNode.
    MyList list;
    MyListElement element;
    list.Append(element);      // ok
    list.Append(17);           // error: incorrect type

    // let's iterate over the list
    for ( MyList::Node &#42;node = list.GetFirst(); node; node = node-&gt;GetNext() )
    {
        MyListElement &#42;current = node-&gt;GetData();

        ...process the current element...
    }
</pre>

For compatibility with previous versions wxList and wxStringList classes are
still defined, but their usage is deprecated and they will disappear in the
future versions completely. The use of the latter is especially discouraged as
it is not only unsafe but is also much less efficient than 
<ref target="wxarraystring">wxArrayString</ref> class.

In the documentation of the list classes below, the template notations are
used even though these classes are not really templates at all -- but it helps
to think about them as if they were. You should replace wxNode&lt;T&gt; with
wxListName::Node and T itself with the list element type (i.e. the first
parameter of WX_DECLARE_LIST).

<heading>It is very common to iterate on a list as follows:</heading>

<pre>
  ...
  wxWindow &#42;win1 = new wxWindow(...);
  wxWindow &#42;win2 = new wxWindow(...);

  wxList SomeList;
  SomeList.Append(win1);
  SomeList.Append(win2);

  ...

  wxNode &#42;node = SomeList.GetFirst();
  while (node)
  {
    wxWindow &#42;win = node-&gt;GetData();
    ...
    node = node-&gt;GetNext();
  }
</pre>

To delete nodes in a list as the list is being traversed, replace

<pre>
    ...
    node = node-&gt;GetNext();
    ...
</pre>

with

<pre>
    ...
    delete win;
    delete node;
    node = SomeList.GetFirst();
    ...
</pre>

See <ref target="wxnode">wxNode</ref> for members that retrieve the data associated with a node, and
members for getting to the next or previous node.


</example>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/list.h"/></includes>
<seealso>

<ref target="wxnode">wxNode</ref><ref target="wxstringlist">wxStringList</ref>,
<ref target="wxarray">wxArray</ref>

</seealso>
<members>
<member class="wxList" name="wxList"><function type="" name="wxList"><description>

</description></function>
<function type="" name="wxList"><parameters><parameter type="unsigned int" name=" key_type"></parameter></parameters><description>

</description></function>
<function type="" name="wxList"><parameters><parameter type="int" name=" n"></parameter><parameter type="T &#42;" name="objects&#91;]"></parameter></parameters><description>

</description></function>
<function type="" name="wxList"><parameters><parameter type="T &#42;" name="object"></parameter></parameters><description>

Constructors. <i> key_type</i> is one of wxKEY_NONE, wxKEY_INTEGER, or wxKEY_STRING,
and indicates what sort of keying is required (if any).

<i> objects</i> is an array of <i> n</i> objects with which to initialize the list.

The variable-length argument list constructor must be supplied with a
terminating NULL.

</description></function></member>
<member class="wxList" name="~wxList"><function type="" name="~wxList"><description>

Destroys the list.  Also destroys any remaining nodes, but does not destroy
client data held in the nodes.

</description></function></member>
<member class="wxList" name="Append"><function type="wxNode&lt;T&gt; &#42;" name="Append"><parameters><parameter type="T &#42;" name="object"></parameter></parameters><description>

</description></function>
<function type="wxNode&lt;T&gt; &#42;" name="Append"><parameters><parameter type="long" name=" key"></parameter><parameter type="T &#42;" name="object"></parameter></parameters><description>

</description></function>
<function type="wxNode&lt;T&gt; &#42;" name="Append"><parameters><parameter type="const wxString&amp; " name="key"></parameter><parameter type="T &#42;" name="object"></parameter></parameters><description>

Appends a new <ref target="wxnode">wxNode</ref> to the end of the list and puts a
pointer to the <i> object</i> in the node.  The last two forms store a key
with the object for later retrieval using the key. The new node is returned in
each case.

The key string is copied and stored by the list implementation.

</description></function></member>
<member class="wxList" name="Clear"><function type="void" name="Clear"><description>

Clears the list (but does not delete the client data stored with each node
unless you called DeleteContents(<tt> true</tt>), in which case it deletes data).

</description></function></member>
<member class="wxList" name="DeleteContents"><function type="void" name="DeleteContents"><parameters><parameter type="bool" name=" destroy"></parameter></parameters><description>

If <i> destroy</i> is <tt> true</tt>, instructs the list to call <i> delete</i> on the client contents of
a node whenever the node is destroyed. The default is <tt> false</tt>.

</description></function></member>
<member class="wxList" name="DeleteNode"><function type="bool" name="DeleteNode"><parameters><parameter type="wxNode&lt;T&gt; &#42;" name="node"></parameter></parameters><description>

Deletes the given node from the list, returning <tt> true</tt> if successful.

</description></function></member>
<member class="wxList" name="DeleteObject"><function type="bool" name="DeleteObject"><parameters><parameter type="T &#42;" name="object"></parameter></parameters><description>

Finds the given client <i> object</i> and deletes the appropriate node from the list, returning
<tt> true</tt> if successful. The application must delete the actual object separately.

</description></function></member>
<member class="wxList" name="Find"><function type="wxNode&lt;T&gt; &#42;" name="Find"><parameters><parameter type="T &#42;" name=" object"></parameter></parameters><description>

Returns the node whose client date is <i> object</i> or NULL if none found.

</description></function>
<function type="wxNode&lt;T&gt; &#42;" name="Find"><parameters><parameter type="long" name=" key"></parameter></parameters><description>

</description></function>
<function type="wxNode&lt;T&gt; &#42;" name="Find"><parameters><parameter type="const wxString&amp; " name="key"></parameter></parameters><description>

Returns the node whose stored key matches <i> key</i>. Use on a keyed list only.

</description></function></member>
<member class="wxList" name="GetCount"><function type="size_t" name="GetCount" suffix="const"><description>

Returns the number of elements in the list.

</description></function></member>
<member class="wxList" name="GetFirst"><function type="wxNode&lt;T&gt; &#42;" name="GetFirst"><description>

Returns the first node in the list (NULL if the list is empty).

</description></function></member>
<member class="wxList" name="GetLast"><function type="wxNode&lt;T&gt; &#42;" name="GetLast"><description>

Returns the last node in the list (NULL if the list is empty).

</description></function></member>
<member class="wxList" name="IndexOf"><function type="int" name="IndexOf"><parameters><parameter type="T&#42;" name=" obj "></parameter></parameters><description>

Returns the index of <i> obj</i> within the list or wxNOT_FOUND if <i> obj</i> 
is not found in the list.

</description></function></member>
<member class="wxList" name="Insert"><function type="wxNode&lt;T&gt; &#42;" name="Insert"><parameters><parameter type="T &#42;" name="object"></parameter></parameters><description>

Insert object at front of list.

</description></function>
<function type="wxNode&lt;T&gt; &#42;" name="Insert"><parameters><parameter type="size_t " name="position"></parameter><parameter type="T &#42;" name="object"></parameter></parameters><description>

Insert object before <i> position</i>, i.e. the index of the new item in the
list will be equal to <i> position</i>. <i> position</i> should be less than or
equal to <ref target="wxlistgetcount">GetCount</ref>; if it is equal to it, this is the
same as calling <ref target="wxlistappend">Append</ref>.

</description></function>
<function type="wxNode&lt;T&gt; &#42;" name="Insert"><parameters><parameter type="wxNode&lt;T&gt; &#42;" name="node"></parameter><parameter type="T &#42;" name="object"></parameter></parameters><description>

Inserts the object before the given <i> node</i>.

</description></function></member>
<member class="wxList" name="IsEmpty"><function type="bool" name="IsEmpty" suffix="const"><description>

Returns <tt> true</tt> if the list is empty, <tt> false</tt> otherwise.

</description></function></member>
<member class="wxList" name="Item"><function type="wxNode&lt;T&gt; &#42;" name="Item" suffix="const"><parameters><parameter type="size_t " name="index"></parameter></parameters><description>

Returns the node at given position in the list.

</description></function></member>
<member class="wxList" name="Member"><function type="wxNode&lt;T&gt; &#42;" name="Member"><parameters><parameter type="T &#42;" name="object"></parameter></parameters><description>

<b> NB:</b> This function is deprecated, use <ref target="wxlistfind">Find</ref> instead.

Returns the node associated with <i> object</i> if it is in the list, NULL otherwise.

</description></function></member>
<member class="wxList" name="Nth"><function type="wxNode&lt;T&gt; &#42;" name="Nth"><parameters><parameter type="int" name=" n"></parameter></parameters><description>

<b> NB:</b> This function is deprecated, use <ref target="wxlistitemfunc">Item</ref> instead.

Returns the <i> nth</i> node in the list, indexing from zero (NULL if the list is empty
or the nth node could not be found).

</description></function></member>
<member class="wxList" name="Number"><function type="int" name="Number"><description>

<b> NB:</b> This function is deprecated, use <ref target="wxlistgetcount">GetCount</ref> instead.

Returns the number of elements in the list.

</description></function></member>
<member class="wxList" name="Sort"><function type="void" name="Sort"><parameters><parameter type="wxSortCompareFunction" name=" compfunc"></parameter></parameters><description>

<pre>
  // Type of compare function for list sort operation (as in 'qsort')
  typedef int (&#42;wxSortCompareFunction)(const void &#42;elem1, const void &#42;elem2);
</pre>

Allows the sorting of arbitrary lists by giving
a function to compare two list elements. We use the system <b> qsort</b> function
for the actual sorting process.

If you use untyped wxList the sort function receives pointers to wxObject
pointers (wxObject &#42;&#42;), so be careful to dereference appropriately - but,
of course, a better solution is to use list of appropriate type defined with
<tt> WX_DECLARE_LIST</tt>.

Example:

<pre>
  int listcompare(const void &#42;arg1, const void &#42;arg2)
  {
    return(compare(&#42;&#42;(wxString &#42;&#42;)arg1,    // use the wxString 'compare'
                   &#42;&#42;(wxString &#42;&#42;)arg2));  // function 
  }

  void main()
  {
    wxList list;

    list.Append(new wxString(&quot;DEF&quot;));
    list.Append(new wxString(&quot;GHI&quot;));
    list.Append(new wxString(&quot;ABC&quot;));
    list.Sort(listcompare);
  }
</pre>

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxListBox">
<description>
<p class="classdesc">
A listbox is used to select one or more of a list of strings. The
strings are displayed in a scrolling box, with the selected string(s)
marked in reverse video. A listbox can be single selection (if an item
is selected, the previous selection is removed) or multiple selection
(clicking an item toggles the item on or off independently of other
selections).</p><p class="classdesc">List box elements are numbered from zero. Their number is limited in
some platforms (e.g. ca. 2000 on GTK).</p><p class="classdesc">A listbox callback gets an event wxEVT_COMMAND_LISTBOX_SELECT for single clicks, and
wxEVT_COMMAND_LISTBOX_DOUBLE_CLICKED for double clicks.</p>
</description>
<parents>
<classref name="wxControlWithItems"/>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/listbox.h"/></includes>
<windowstyles>
<style name="wxLB_SINGLE">Single-selection list.</style><style name="wxLB_MULTIPLE">Multiple-selection list: the user can toggle multiple
items on and off.</style><style name="wxLB_EXTENDED">Extended-selection list: the user can
select multiple items using the SHIFT key and the mouse or special key combinations.</style><style name="wxLB_HSCROLL">Create horizontal scrollbar if contents are too wide (Windows only).</style><style name="wxLB_ALWAYS_SB">Always show a vertical scrollbar.</style><style name="wxLB_NEEDED_SB">Only create a vertical scrollbar if needed.</style><style name="wxLB_SORT">The listbox contents are sorted in alphabetical order.</style></windowstyles>
<events>
<event name="EVT_LISTBOX(id, func)">Process a wxEVT_COMMAND_LISTBOX_SELECTED event,
when an item on the list is selected.</event><event name="EVT_LISTBOX_DCLICK(id, func)">Process a wxEVT_COMMAND_LISTBOX_DOUBLECLICKED event,
when the listbox is double-clicked.</event></events>
<seealso>

<ref target="wxchoice">wxChoice</ref><ref target="wxcombobox">wxComboBox</ref><ref target="wxlistctrl">wxListCtrl</ref>,
<ref target="wxcommandevent">wxCommandEvent</ref>

</seealso>
<members>
<member class="wxListBox" name="wxListBox"><function type="" name="wxListBox"><description>

Default constructor.

</description></function>
<function type="" name="wxListBox"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition">Window position.</parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize">Window size. If the default size (-1, -1) is specified then the window is sized
appropriately.</parameter><parameter type="int" name=" n"></parameter><parameter type="const wxString " name="choices&#91;]" value="NULL"></parameter><parameter type="long" name="style" value="0">Window style. See <ref target="wxlistbox">wxListBox</ref>.</parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator">Window validator.</parameter><parameter type="const wxString&amp; " name="name" value="``listBox&quot;">Window name.</parameter></parameters><seealso>

<ref target="wxlistboxcreate">wxListBox::Create</ref><ref target="wxvalidator">wxValidator</ref>

\pythonnote{The wxListBox constructor in wxPython reduces the <tt> n</tt>
and <tt> choices</tt> arguments are to a single argumentwhich is
a list of strings.}

\perlnote{In wxPerl there is just an array reference in place of <tt> n</tt>
and <tt> choices</tt>.}

</seealso><description></description></function></member>
<member class="wxListBox" name="~wxListBox"><function type="void" name="~wxListBox"><description>

Destructor, destroying the list box.

</description></function></member>
<member class="wxListBox" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize"></parameter><parameter type="int" name=" n"></parameter><parameter type="const wxString " name="choices&#91;]" value="NULL"></parameter><parameter type="long" name="style" value="0"></parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator"></parameter><parameter type="const wxString&amp; " name="name" value="``listBox&quot;"></parameter></parameters><description>

Creates the listbox for two-step construction. See <ref target="wxlistboxconstr">wxListBox::wxListBox</ref>
for further details.

</description></function></member>
<member class="wxListBox" name="Deselect"><function type="void" name="Deselect"><parameters><parameter type="int" name=" n"></parameter></parameters><remarks>

This applies to multiple selection listboxes only.

</remarks><description>

Deselects an item in the list box.





</description></function></member>
<member class="wxListBox" name="GetSelections"><function type="int" name="GetSelections" suffix="const"><parameters><parameter type="wxArrayInt&amp; " name="selections">A reference to an wxArrayInt instance that is used to store the result of the query.</parameter></parameters><seealso>

<ref target="wxcontrolwithitemsgetselection">wxControlWithItems::GetSelection</ref>,
<ref target="wxcontrolwithitemsgetstringselection">wxControlWithItems::GetStringSelection</ref>,
<ref target="wxcontrolwithitemssetselection">wxControlWithItems::SetSelection</ref>

\pythonnote{The wxPython version of this method takes no parameters
and returns a tuple of the selected items.}

\perlnote{In wxPerl this method takes no parameters and return the
selected items as a list.}

</seealso><remarks>

Use this with a multiple selection listbox.

</remarks><returnvalue>

The number of selections.

</returnvalue><description>

Fill an array of ints with the positions of the currently selected items.





</description></function></member>
<member class="wxListBox" name="InsertItems"><function type="void" name="InsertItems"><parameters><parameter type="int" name=" nItems"></parameter><parameter type="const wxString" name=" &#42;items"></parameter><parameter type="int" name=" pos"></parameter></parameters><description>

Insert the given number of strings before the specified position.









\pythonnote{The first two parameters are collapsed into a single
parameter for wxPython, which is a list of strings.}

\perlnote{In wxPerl there is just an array reference in place of <tt> nItems</tt>
and <tt> items</tt>.}

</description></function></member>
<member class="wxListBox" name="Selected"><function type="bool" name="Selected" suffix="const"><parameters><parameter type="int" name=" n"></parameter></parameters><returnvalue>

true if the given item is selected, false otherwise.

</returnvalue><description>

Determines whether an item is selected.





</description></function></member>
<member class="wxListBox" name="Set"><function type="void" name="Set"><parameters><parameter type="int" name=" n"></parameter><parameter type="const wxString&#42;" name=" choices"></parameter><parameter type="void" name="&#42;&#42;clientData" value="NULL"></parameter></parameters><description>

</description></function>
<function type="void" name="Set"><parameters><parameter type="const wxArrayString&amp;" name=" choices"></parameter><parameter type="void" name="&#42;&#42;clientData" value="NULL"></parameter></parameters><remarks>

You may free the array from the calling program after this function has been
called.

</remarks><description>

Clears the list box and adds the given strings to it.









</description></function></member>
<member class="wxListBox" name="SetFirstItem"><function type="void" name="SetFirstItem"><parameters><parameter type="int" name=" n"></parameter></parameters><description>

</description></function>
<function type="void" name="SetFirstItem"><parameters><parameter type="const wxString&amp; " name="string">The string that should be visible.</parameter></parameters><description>

Set the specified item to be the first visible item. Windows only.







</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxListCtrl">
<description>
<p class="classdesc">
A list control presents lists in a number of formats: list view, report view,
icon view and small icon view. In any case, elements are numbered from zero.
For all these modes, the items are stored in the control and must be added to
it using <ref target="wxlistctrlinsertitem">InsertItem</ref> method.</p><p class="classdesc">A special case of report view quite different from the other modes of the list
control is a virtual control in which the items data (including text, images
and attributes) is managed by the main program and is requested by the control
itself only when needed which allows to have controls with millions of items
without consuming much memory. To use virtual list control you must use 
<ref target="wxlistctrlsetitemcount">SetItemCount</ref> first and overload at least 
<ref target="wxlistctrlongetitemtext">OnGetItemText</ref> (and optionally 
<ref target="wxlistctrlongetitemimage">OnGetItemImage</ref> and 
<ref target="wxlistctrlongetitemattr">OnGetItemAttr</ref>) to return the information
about the items when the control requests it. Virtual list control can be used
as a normal one except that no operations which can take time proportional to
the number of items in the control happen -- this is required to allow having a
practically infinite number of items. For example, in a multiple selection
virtual list control, the selections won't be sent when many items are selected
at once because this could mean iterating over all the items.</p><p class="classdesc">Using many of wxListCtrl features is shown in the
<ref target="samplelistctrl">corresponding sample</ref>.</p><p class="classdesc">To intercept events from a list control, use the event table macros described
in <ref target="wxlistevent">wxListEvent</ref>.</p>
</description>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/listctrl.h"/></includes>
<windowstyles>
<style name="wxLC_LIST">multicolumn list view, with optional small icons.
Columns are computed automatically, i.e. you don't set columns as in wxLC_REPORT. In other words,
the list wraps, unlike a wxListBox.</style><style name="wxLC_REPORT">single or multicolumn report view, with optional header.</style><style name="wxLC_VIRTUAL">virtual control, may only be used with wxLC_REPORT</style><style name="wxLC_ICON">Large icon view, with optional labels.</style><style name="wxLC_SMALL_ICON">Small icon view, with optional labels.</style><style name="wxLC_ALIGN_TOP">Icons align to the top. Win32 default, Win32 only. </style><style name="wxLC_ALIGN_LEFT">Icons align to the left. </style><style name="wxLC_AUTOARRANGE">Icons arrange themselves. Win32 only. </style><style name="wxLC_USER_TEXT">The application provides label text on demand, except for column headers. Win32 only. </style><style name="wxLC_EDIT_LABELS">Labels are editable: the application will be notified when editing starts.</style><style name="wxLC_NO_HEADER">No header in report mode. Win32 only. </style><style name="wxLC_SINGLE_SEL">Single selection.</style><style name="wxLC_SORT_ASCENDING">Sort in ascending order (must still supply a comparison callback in SortItems.</style><style name="wxLC_SORT_DESCENDING">Sort in descending order (must still supply a comparison callback in SortItems.</style><style name="wxLC_HRULES">Draws light horizontal rules between rows in report mode.</style><style name="wxLC_VRULES">Draws light vertical rules between columns in report mode.</style></windowstyles>
<events>
<event name="EVT_LIST_BEGIN_DRAG(id, func)">Begin dragging with the left mouse button.</event><event name="EVT_LIST_BEGIN_RDRAG(id, func)">Begin dragging with the right mouse button.</event><event name="EVT_LIST_BEGIN_LABEL_EDIT(id, func)">Begin editing a label. This can be prevented by calling \helpref{Veto()</event><event name="EVT_LIST_END_LABEL_EDIT(id, func)">Finish editing a label. This can be prevented by calling \helpref{Veto()</event><event name="EVT_LIST_DELETE_ITEM(id, func)">Delete an item.</event><event name="EVT_LIST_DELETE_ALL_ITEMS(id, func)">Delete all items.</event><event name="EVT_LIST_ITEM_SELECTED(id, func)">The item has been selected.</event><event name="EVT_LIST_ITEM_DESELECTED(id, func)">The item has been deselected.</event><event name="EVT_LIST_ITEM_ACTIVATED(id, func)">The item has been activated (ENTER or double click).</event><event name="EVT_LIST_ITEM_FOCUSED(id, func)">The currently focused item has changed.</event><event name="EVT_LIST_ITEM_MIDDLE_CLICK(id, func)">The middle mouse button has been clicked on an item.</event><event name="EVT_LIST_ITEM_RIGHT_CLICK(id, func)">The right mouse button has been clicked on an item.</event><event name="EVT_LIST_KEY_DOWN(id, func)">A key has been pressed.</event><event name="EVT_LIST_INSERT_ITEM(id, func)">An item has been inserted.</event><event name="EVT_LIST_COL_CLICK(id, func)">A column ({\bf m_col</event><event name="EVT_LIST_COL_RIGHT_CLICK(id, func)">A column ({\bf m_col</event><event name="EVT_LIST_COL_BEGIN_DRAG(id, func)">The user started resizing a column - can be vetoed.</event><event name="EVT_LIST_COL_DRAGGING(id, func)">The divider between columns is being dragged.</event><event name="EVT_LIST_COL_END_DRAG(id, func)">A column has been resized by the user.</event><event name="EVT_LIST_CACHE_HINT(id, func)">Prepare cache for a virtual list control</event></events>
<seealso>

<ref target="wxlistctrloverview">wxListCtrl overview</ref><ref target="wxlistbox">wxListBox</ref><ref target="wxtreectrl">wxTreeCtrl</ref>,
<ref target="wximagelist">wxImageList</ref><ref target="wxlistevent">wxListEvent</ref>,
<ref target="wxlistitem">wxListItem</ref>

</seealso>
<members>
<member class="wxListCtrl" name="wxListCtrl"><function type="" name="wxListCtrl"><description>

Default constructor.

</description></function>
<function type="" name="wxListCtrl"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition">Window position.</parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize">Window size. If the default size (-1, -1) is specified then the window is sized
appropriately.</parameter><parameter type="long" name="style" value="wxLC_ICON">Window style. See <ref target="wxlistctrl">wxListCtrl</ref>.</parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator">Window validator.</parameter><parameter type="const wxString&amp; " name="name" value="``listCtrl&quot;">Window name.</parameter></parameters><seealso>

<ref target="wxlistctrlcreate">wxListCtrl::Create</ref><ref target="wxvalidator">wxValidator</ref>

</seealso><description></description></function></member>
<member class="wxListCtrl" name="~wxListCtrl"><function type="void" name="~wxListCtrl"><description>

Destructor, destroying the list control.

</description></function></member>
<member class="wxListCtrl" name="Arrange"><function type="bool" name="Arrange"><parameters><parameter type="int " name="flag" value="wxLIST_ALIGN_DEFAULT"></parameter></parameters><description>

Arranges the items in icon or small icon view. This only has effect on Win32. <i> flag</i> is one of:

\twocolwidtha{5cm}
<table>
<tr><td>wxLIST_ALIGN_DEFAULT</td><td>Default alignment.</td></tr>
<tr><td>wxLIST_ALIGN_LEFT</td><td>Align to the left side of the control.</td></tr>
<tr><td>wxLIST_ALIGN_TOP</td><td>Align to the top side of the control.</td></tr>
<tr><td>wxLIST_ALIGN_SNAP_TO_GRID</td><td>Snap to grid.</td></tr>
</table>

</description></function></member>
<member class="wxListCtrl" name="AssignImageList"><function type="void" name="AssignImageList"><parameters><parameter type="wxImageList&#42;" name=" imageList"></parameter><parameter type="int " name="which"></parameter></parameters><seealso>

<ref target="wxlistctrlsetimagelist">wxListCtrl::SetImageList</ref>

</seealso><description>

Sets the image list associated with the control and 
takes ownership of it (i.e. the control will, unlike when using
SetImageList, delete the list when destroyed). <i> which</i> is one of
wxIMAGE_LIST_NORMAL, wxIMAGE_LIST_SMALL, wxIMAGE_LIST_STATE (the last is unimplemented).

</description></function></member>
<member class="wxListCtrl" name="ClearAll"><function type="void" name="ClearAll"><parameters></parameters><description>

Deletes all items and all columns.

</description></function></member>
<member class="wxListCtrl" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="wxLC_ICON"></parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator"></parameter><parameter type="const wxString&amp; " name="name" value="``listCtrl&quot;"></parameter></parameters><description>

Creates the list control. See <ref target="wxlistctrlconstr">wxListCtrl::wxListCtrl</ref> for further details.

</description></function></member>
<member class="wxListCtrl" name="DeleteAllItems"><function type="bool" name="DeleteAllItems"><parameters></parameters><description>

Deletes all the items in the list control.

<b> NB:</b> This function does <i> not</i> send the
<tt> wxEVT_COMMAND_LIST_DELETE_ITEM</tt> event because deleting many items
from the control would be too slow then (unlike <ref target="wxlistctrldeleteitem">DeleteItem</ref>).

</description></function></member>
<member class="wxListCtrl" name="DeleteColumn"><function type="bool" name="DeleteColumn"><parameters><parameter type="int " name="col"></parameter></parameters><description>

Deletes a column.

</description></function></member>
<member class="wxListCtrl" name="DeleteItem"><function type="bool" name="DeleteItem"><parameters><parameter type="long " name="item"></parameter></parameters><description>

Deletes the specified item. This function sends the
<tt> wxEVT_COMMAND_LIST_DELETE_ITEM</tt> event for the item being deleted.

See also: <ref target="wxlistctrldeleteallitems">DeleteAllItems</ref>

</description></function></member>
<member class="wxListCtrl" name="EditLabel"><function type="void" name="EditLabel"><parameters><parameter type="long " name="item"></parameter></parameters><description>

Starts editing the label of the given item. This function generates a
EVT_LIST_BEGIN_LABEL_EDIT event which can be vetoed so that no
text control will appear for in-place editing.

If the user changed the label (i.e. s/he does not press ESC or leave
the text control without changes, a EVT_LIST_END_LABEL_EDIT event
will be sent which can be vetoed as well.

</description></function></member>
<member class="wxListCtrl" name="EnsureVisible"><function type="bool" name="EnsureVisible"><parameters><parameter type="long " name="item"></parameter></parameters><description>

Ensures this item is visible.

</description></function></member>
<member class="wxListCtrl" name="FindItem"><function type="long" name="FindItem"><parameters><parameter type="long " name="start"></parameter><parameter type="const wxString&amp; " name="str"></parameter><parameter type="const bool " name="partial" value="false"></parameter></parameters><description>

Find an item whose label matches this string, starting from the item after <i> start</i> or
the beginning if <i> start</i> is -1.

</description></function>
<function type="long" name="FindItem"><parameters><parameter type="long " name="start"></parameter><parameter type="long " name="data"></parameter></parameters><description>

Find an item whose data matches this data, starting from the item after <i> start</i> or
the beginning if 'start' is -1.

</description></function>
<function type="long" name="FindItem"><parameters><parameter type="long " name="start"></parameter><parameter type="const wxPoint&amp; " name="pt"></parameter><parameter type="int " name="direction"></parameter></parameters><description>

Find an item nearest this position in the specified direction, starting from
the item after <i> start</i> or the beginning if <i> start</i> is -1.

\pythonnote{In place of a single overloaded method name, wxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> FindItem(start, str, partial=false)</b></td><td></td></tr>
<tr><td><b> FindItemData(start, data)</b></td><td></td></tr>
<tr><td><b> FindItemAtPos(start, point, direction)</b></td><td></td></tr>
</table>}
}

\perlnote{In wxPerl there are three methods instead of a single overloaded
method:\par
\indented{2cm}{<table>
<tr><td><b> FindItem( start, str, partial = false ) </b></td><td></td></tr>
<tr><td><b> FindItemData( start, data ) </b></td><td></td></tr>
<tr><td><b> FindItemAtPos( start, point, direction )</b></td><td></td></tr>
</table>
}}

</description></function></member>
<member class="wxListCtrl" name="GetColumn"><function type="bool" name="GetColumn" suffix="const"><parameters><parameter type="int " name="col"></parameter><parameter type="wxListItem&amp; " name="item"></parameter></parameters><description>

Gets information about this column. See <ref target="wxlistctrlsetitem">wxListCtrl::SetItem</ref> for more
information.

\perlnote{In wxPerl this method takes only the <b> col</b> parameter and
  returns a Wx::ListItem ( or undef ).}

</description></function></member>
<member class="wxListCtrl" name="GetColumnCount"><function type="int" name="GetColumnCount" suffix="const"><description>

Returns the number of columns.

</description></function></member>
<member class="wxListCtrl" name="GetColumnWidth"><function type="int" name="GetColumnWidth" suffix="const"><parameters><parameter type="int " name="col"></parameter></parameters><description>

Gets the column width (report view only).

</description></function></member>
<member class="wxListCtrl" name="GetCountPerPage"><function type="int" name="GetCountPerPage" suffix="const"><description>

Gets the number of items that can fit vertically in the
visible area of the list control (list or report view)
or the total number of items in the list control (icon
or small icon view).

</description></function></member>
<member class="wxListCtrl" name="GetEditControl"><function type="wxTextCtrl &#42;" name="GetEditControl" suffix="const"><description>

Returns the edit control being currently used to edit a label. Returns <tt> NULL</tt>
if no label is being edited.

<b> NB:</b> It is currently only implemented for wxMSW.

</description></function></member>
<member class="wxListCtrl" name="GetImageList"><function type="wxImageList&#42;" name="GetImageList" suffix="const"><parameters><parameter type="int " name="which"></parameter></parameters><description>

Returns the specified image list. <i> which</i> may be one of:

\twocolwidtha{5cm}
<table>
<tr><td>\windowstyle{wxIMAGE_LIST_NORMAL}</td><td>The normal (large icon) image list.</td></tr>
<tr><td>\windowstyle{wxIMAGE_LIST_SMALL}</td><td>The small icon image list.</td></tr>
<tr><td>\windowstyle{wxIMAGE_LIST_STATE}</td><td>The user-defined state image list (unimplemented).</td></tr>
</table>

</description></function></member>
<member class="wxListCtrl" name="GetItem"><function type="bool" name="GetItem" suffix="const"><parameters><parameter type="wxListItem&amp; " name="info"></parameter></parameters><description>

Gets information about the item. See <ref target="wxlistctrlsetitem">wxListCtrl::SetItem</ref> for more
information.

You must call <i> info.SetId()</i> to the ID of item you're interested in
before calling this method.

\pythonnote{The wxPython version of this method takes an integer parameter
for the item ID, an optional integer for the column number, and
returns the wxListItem object.}

\perlnote{In wxPerl this method takes as parameter the <b> ID</b> of the item
and ( optionally ) the column, and returns a Wx::ListItem object.}

</description></function></member>
<member class="wxListCtrl" name="GetItemCount"><function type="int" name="GetItemCount" suffix="const"><description>

Returns the number of items in the list control.

</description></function></member>
<member class="wxListCtrl" name="GetItemData"><function type="long" name="GetItemData" suffix="const"><parameters><parameter type="long " name="item"></parameter></parameters><description>

Gets the application-defined data associated with this item.

</description></function></member>
<member class="wxListCtrl" name="GetItemPosition"><function type="bool" name="GetItemPosition" suffix="const"><parameters><parameter type="long " name="item"></parameter><parameter type="wxPoint&amp; " name="pos"></parameter></parameters><description>

Returns the position of the item, in icon or small icon view.

\pythonnote{The wxPython version of this method accepts only the item
ID and returns the wxPoint.}

\perlnote{In wxPerl this method takes only the <b> item</b> parameter and
returns a Wx::Point ( or undef ).}

</description></function></member>
<member class="wxListCtrl" name="GetItemRect"><function type="bool" name="GetItemRect" suffix="const"><parameters><parameter type="long " name="item"></parameter><parameter type="wxRect&amp; " name="rect"></parameter><parameter type="int " name="code" value="wxLIST_RECT_BOUNDS"></parameter></parameters><description>

Returns the rectangle representing the item's size and position, in client coordinates.

<i> code</i> is one of wxLIST_RECT_BOUNDS, wxLIST_RECT_ICON, wxLIST_RECT_LABEL.

\pythonnote{The wxPython version of this method accepts only the item
ID and code and returns the wxRect.}

\perlnote{In wxPerl this method takes only the <b> item</b> parameter and
returns a Wx::Rect ( or undef ).}

</description></function></member>
<member class="wxListCtrl" name="GetItemSpacing"><function type="int" name="GetItemSpacing" suffix="const"><parameters><parameter type="bool " name="isSmall"></parameter></parameters><description>

Retrieves the spacing between icons in pixels.
If <i> small</i> is true, gets the spacing for the small icon
view, otherwise the large icon view.

</description></function></member>
<member class="wxListCtrl" name="GetItemState"><function type="int" name="GetItemState" suffix="const"><parameters><parameter type="long " name="item"></parameter><parameter type="long " name="stateMask"></parameter></parameters><description>

Gets the item state. For a list of state flags, see <ref target="wxlistctrlsetitem">wxListCtrl::SetItem</ref>.

The <b> stateMask</b> indicates which state flags are of interest.

</description></function></member>
<member class="wxListCtrl" name="GetItemText"><function type="wxString" name="GetItemText" suffix="const"><parameters><parameter type="long " name="item"></parameter></parameters><description>

Gets the item text for this item.

</description></function></member>
<member class="wxListCtrl" name="GetNextItem"><function type="long" name="GetNextItem" suffix="const"><parameters><parameter type="long " name="item"></parameter><parameter type="int " name="geometry" value="wxLIST_NEXT_ALL"></parameter><parameter type="int " name="state" value="wxLIST_STATE_DONTCARE"></parameter></parameters><description>

Searches for an item with the given geometry or state, starting from
<i> item</i> but excluding the <i> item</i> itself. If <i> item</i> is -1,
the first item that matches the specified flags will be returned.

Returns the first item with given state following <i> item</i> or -1 if
no such item found.

This function may be used to find all selected items in the control like this:

<pre>
    long item = -1;
    for ( ;; )
    {
        item = listctrl-&gt;GetNextItem(item,
                                     wxLIST_NEXT_ALL,
                                     wxLIST_STATE_SELECTED);
        if ( item == -1 )
            break;

        // this item is selected - do whatever is needed with it
        wxLogMessage(&quot;Item     }
</pre>

<i> geometry</i> can be one of:

\twocolwidtha{5cm}
<table>
<tr><td>wxLIST_NEXT_ABOVE</td><td>Searches for an item above the specified item.</td></tr>
<tr><td>wxLIST_NEXT_ALL</td><td>Searches for subsequent item by index.</td></tr>
<tr><td>wxLIST_NEXT_BELOW</td><td>Searches for an item below the specified item.</td></tr>
<tr><td>wxLIST_NEXT_LEFT</td><td>Searches for an item to the left of the specified item.</td></tr>
<tr><td>wxLIST_NEXT_RIGHT</td><td>Searches for an item to the right of the specified item.</td></tr>
</table>

<b> NB:</b> this parameters is only supported by wxMSW currently and ignored on
other platforms.

<i> state</i> can be a bitlist of the following:

\twocolwidtha{5cm}
<table>
<tr><td>wxLIST_STATE_DONTCARE</td><td>Don't care what the state is.</td></tr>
<tr><td>wxLIST_STATE_DROPHILITED</td><td>The item indicates it is a drop target.</td></tr>
<tr><td>wxLIST_STATE_FOCUSED</td><td>The item has the focus.</td></tr>
<tr><td>wxLIST_STATE_SELECTED</td><td>The item is selected.</td></tr>
<tr><td>wxLIST_STATE_CUT</td><td>The item is selected as part of a cut and paste operation.</td></tr>
</table>

</description></function></member>
<member class="wxListCtrl" name="GetSelectedItemCount"><function type="int" name="GetSelectedItemCount" suffix="const"><description>

Returns the number of selected items in the list control.

</description></function></member>
<member class="wxListCtrl" name="GetTextColour"><function type="wxColour" name="GetTextColour" suffix="const"><description>

Gets the text colour of the list control.

</description></function></member>
<member class="wxListCtrl" name="GetTopItem"><function type="long" name="GetTopItem" suffix="const"><description>

Gets the index of the topmost visible item when in
list or report view.

</description></function></member>
<member class="wxListCtrl" name="HitTest"><function type="long" name="HitTest"><parameters><parameter type="const wxPoint&amp; " name="point"></parameter><parameter type="int&amp; " name="flags"></parameter></parameters><description>

Determines which item (if any) is at the specified point,
giving details in <i> flags</i>. <i> flags</i> will be a combination of the following flags:

\twocolwidtha{5cm}
<table>
<tr><td>wxLIST_HITTEST_ABOVE</td><td>Above the client area.</td></tr>
<tr><td>wxLIST_HITTEST_BELOW</td><td>Below the client area.</td></tr>
<tr><td>wxLIST_HITTEST_NOWHERE</td><td>In the client area but below the last item.</td></tr>
<tr><td>wxLIST_HITTEST_ONITEMICON</td><td>On the bitmap associated with an item.</td></tr>
<tr><td>wxLIST_HITTEST_ONITEMLABEL</td><td>On the label (string) associated with an item.</td></tr>
<tr><td>wxLIST_HITTEST_ONITEMRIGHT</td><td>In the area to the right of an item.</td></tr>
<tr><td>wxLIST_HITTEST_ONITEMSTATEICON</td><td>On the state icon for a tree view item that is in a user-defined state.</td></tr>
<tr><td>wxLIST_HITTEST_TOLEFT</td><td>To the right of the client area.</td></tr>
<tr><td>wxLIST_HITTEST_TORIGHT</td><td>To the left of the client area.</td></tr>
<tr><td>wxLIST_HITTEST_ONITEM</td><td>Combination of wxLIST_HITTEST_ONITEMICON, wxLIST_HITTEST_ONITEMLABEL,
wxLIST_HITTEST_ONITEMSTATEICON.</td></tr>
</table>

\pythonnote{A tuple of values is returned in the wxPython version of
this method. The first value is the item id and the second is the
flags value mentioned above.}

\perlnote{In wxPerl this method only takes the <b> point</b> parameter
  and returns a 2-element list <tt> ( item, flags )</tt>.}

</description></function></member>
<member class="wxListCtrl" name="InsertColumn"><function type="long" name="InsertColumn"><parameters><parameter type="long " name="col"></parameter><parameter type="wxListItem&amp; " name="info"></parameter></parameters><description>

For list view mode (only), inserts a column. For more details, see <ref target="wxlistctrlsetitem">wxListCtrl::SetItem</ref>.

</description></function>
<function type="long" name="InsertColumn"><parameters><parameter type="long " name="col"></parameter><parameter type="const wxString&amp; " name="heading"></parameter><parameter type="int " name="format" value="wxLIST_FORMAT_LEFT"></parameter><parameter type="int " name="width" value="-1"></parameter></parameters><description>

For list view mode (only), inserts a column. For more details, see <ref target="wxlistctrlsetitem">wxListCtrl::SetItem</ref>.

\pythonnote{In place of a single overloaded method name, wxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> InsertColumn(col, heading, format=wxLIST_FORMAT_LEFT,
width=-1)</b></td><td>Creates a column using a header string only.</td></tr>
<tr><td><b> InsertColumnInfo(col, item)</b></td><td>Creates a column using a
wxListInfo.</td></tr>
</table>}
}

</description></function></member>
<member class="wxListCtrl" name="InsertItem"><function type="long" name="InsertItem"><parameters><parameter type="wxListItem&amp; " name="info">wxListItem object</parameter></parameters><description>

Inserts an item, returning the index of the new item if successful,
-1 otherwise.

</description></function>
<function type="long" name="InsertItem"><parameters><parameter type="long " name="index">Index of the new item, supplied by the application</parameter><parameter type="const wxString&amp; " name="label">String label</parameter></parameters><description>

Inserts a string item.

</description></function>
<function type="long" name="InsertItem"><parameters><parameter type="long " name="index">Index of the new item, supplied by the application</parameter><parameter type="int " name="imageIndex">index into the image list associated with this control and view style</parameter></parameters><description>

Inserts an image item.

</description></function>
<function type="long" name="InsertItem"><parameters><parameter type="long " name="index">Index of the new item, supplied by the application</parameter><parameter type="const wxString&amp; " name="label">String label</parameter><parameter type="int " name="imageIndex">index into the image list associated with this control and view style</parameter></parameters><description>

Insert an image/string item.











\pythonnote{In place of a single overloaded method name, wxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> InsertItem(item)</b></td><td>Inserts an item using a wxListItem.</td></tr>
<tr><td><b> InsertStringItem(index, label)</b></td><td>Inserts a string item.</td></tr>
<tr><td><b> InsertImageItem(index, imageIndex)</b></td><td>Inserts an image item.</td></tr>
<tr><td><b> InsertImageStringItem(index, label, imageIndex)</b></td><td>Insert an image/string item.</td></tr>
</table>}
}

\perlnote{In wxPerl there are four methods instead of a single overloaded
method:\par
\indented{2cm}{<table>
<tr><td><b> InsertItem( item )</b></td><td>Inserts a Wx::ListItem</td></tr>
<tr><td><b> InsertStringItem( index, label )</b></td><td>Inserts a string item</td></tr>
<tr><td><b> InsertImageItem( index, imageIndex )</b></td><td>Inserts an image item</td></tr>
<tr><td><b> InsertImageStringItem( index, label, imageIndex )</b></td><td>Inserts
 an item with a string and an image</td></tr>
</table>
}}

</description></function></member>
<member class="wxListCtrl" name="OnGetItemAttr"><function type="virtual wxListItemAttr &#42;" name="OnGetItemAttr"><parameters><parameter type="long " name="item"></parameter></parameters><seealso>

<ref target="wxlistctrlongetitemimage">OnGetItemImage</ref>,<br/>
<ref target="wxlistctrlongetitemtext">OnGetItemText</ref>

</seealso><description>

This function may be overloaded in the derived class for a control with 
<tt> wxLC_VIRTUAL</tt> style. It should return the attribute for the
for the specified <tt> item</tt> or <tt> NULL</tt> to use the default appearance
parameters.

The base class version always returns <tt> NULL</tt>.

</description></function></member>
<member class="wxListCtrl" name="OnGetItemImage"><function type="virtual int" name="OnGetItemImage"><parameters><parameter type="long " name="item"></parameter></parameters><seealso>

<ref target="wxlistctrlongetitemtext">OnGetItemText</ref>,<br/>
<ref target="wxlistctrlongetitemattr">OnGetItemAttr</ref>

</seealso><description>

This function must be overloaded in the derived class for a control with 
<tt> wxLC_VIRTUAL</tt> style having an <ref target="wxlistctrlsetimagelist">image list</ref> 
(if the control doesn't have an image list, it is not necessary to overload
 it). It should return the index of the items image in the controls image list
or $-1$ for no image.

The base class version always returns $-1$.

</description></function></member>
<member class="wxListCtrl" name="OnGetItemText"><function type="virtual wxString" name="OnGetItemText"><parameters><parameter type="long " name="item"></parameter><parameter type="long " name="column"></parameter></parameters><seealso>

<ref target="wxlistctrlsetitemcount">SetItemCount</ref>,<br/>
<ref target="wxlistctrlongetitemimage">OnGetItemImage</ref>,<br/>
<ref target="wxlistctrlongetitemattr">OnGetItemAttr</ref>

</seealso><description>

This function <b> must</b> be overloaded in the derived class for a control with 
<tt> wxLC_VIRTUAL</tt> style. It should return the string containing the text of
the given <i> column</i> for the specified <tt> item</tt>.

</description></function></member>
<member class="wxListCtrl" name="ScrollList"><function type="bool" name="ScrollList"><parameters><parameter type="int " name="dx"></parameter><parameter type="int " name="dy"></parameter></parameters><description>

Scrolls the list control. If in icon, small icon or report view mode, 
<i> dx</i> specifies the number of pixels to scroll. If in list view mode, 
<i> dx</i> specifies the number of columns to scroll. <i> dy</i> always specifies
the number of pixels to scroll vertically.

<b> NB:</b> This method is currently only implemented in the Windows version.

</description></function></member>
<member class="wxListCtrl" name="SetBackgroundColour"><function type="void" name="SetBackgroundColour"><parameters><parameter type="const wxColour&amp; " name="col"></parameter></parameters><description>

Sets the background colour (GetBackgroundColour already implicit in
wxWindow class).

</description></function></member>
<member class="wxListCtrl" name="SetColumn"><function type="bool" name="SetColumn"><parameters><parameter type="int " name="col"></parameter><parameter type="wxListItem&amp; " name="item"></parameter></parameters><description>

Sets information about this column. See <ref target="wxlistctrlsetitem">wxListCtrl::SetItem</ref> for more
information.

</description></function></member>
<member class="wxListCtrl" name="SetColumnWidth"><function type="bool" name="SetColumnWidth"><parameters><parameter type="int " name="col"></parameter><parameter type="int " name="width"></parameter></parameters><description>

Sets the column width.

<i> width</i> can be a width in pixels or wxLIST_AUTOSIZE (-1) or wxLIST_AUTOSIZE_USEHEADER (-2).
wxLIST_AUTOSIZE will resize the column to the length of its longest item. wxLIST_AUTOSIZE_USEHEADER
will resize the column to the length of the header (Win32) or 80 pixels (other platforms).

In small or normal icon view, <i> col</i> must be -1, and the column width is set for all columns.

</description></function></member>
<member class="wxListCtrl" name="SetImageList"><function type="void" name="SetImageList"><parameters><parameter type="wxImageList&#42;" name=" imageList"></parameter><parameter type="int " name="which"></parameter></parameters><seealso>

<ref target="wxlistctrlassignimagelist">wxListCtrl::AssignImageList</ref>


</seealso><description>

Sets the image list associated with the control. <i> which</i> is one of
wxIMAGE_LIST_NORMAL, wxIMAGE_LIST_SMALL, wxIMAGE_LIST_STATE (the last is unimplemented).

This method does not take ownership of the image list, you have to
delete it yourself.

</description></function></member>
<member class="wxListCtrl" name="SetItem"><function type="bool" name="SetItem"><parameters><parameter type="wxListItem&amp; " name="info"></parameter></parameters><description>

</description></function>
<function type="long" name="SetItem"><parameters><parameter type="long " name="index"></parameter><parameter type="int " name="col"></parameter><parameter type="const " name="wxString&amp; label"></parameter><parameter type="int " name="imageId" value="-1"></parameter></parameters><description>

Sets information about the item.

wxListItem is a class with the following members:

\twocolwidtha{5cm}
<table>
<tr><td>long m_mask</td><td>Indicates which fields are valid. See the list of valid mask flags below.</td></tr>
<tr><td>long m_itemId</td><td>The zero-based item position.</td></tr>
<tr><td>int m_col</td><td>Zero-based column, if in report mode.</td></tr>
<tr><td>long m_state</td><td>The state of the item. See the list of valid state flags below.</td></tr>
<tr><td>long m_stateMask</td><td>A mask indicating which state flags are valid. See the list of valid state flags below.</td></tr>
<tr><td>wxString m_text</td><td>The label/header text.</td></tr>
<tr><td>int m_image</td><td>The zero-based index into an image list.</td></tr>
<tr><td>long m_data</td><td>Application-defined data.</td></tr>
<tr><td>int m_format</td><td>For columns only: the format. Can be wxLIST_FORMAT_LEFT, wxLIST_FORMAT_RIGHT or
wxLIST_FORMAT_CENTRE.</td></tr>
<tr><td>int m_width</td><td>For columns only: the column width.</td></tr>
</table>

The <b> m_mask</b> member contains a bitlist specifying which of the other fields are valid. The flags are:

\twocolwidtha{5cm}
<table>
<tr><td>wxLIST_MASK_STATE</td><td>The <b> m_state</b> field is valid.</td></tr>
<tr><td>wxLIST_MASK_TEXT</td><td>The <b> m_text</b> field is valid.</td></tr>
<tr><td>wxLIST_MASK_IMAGE</td><td>The <b> m_image</b> field is valid.</td></tr>
<tr><td>wxLIST_MASK_DATA</td><td>The <b> m_data</b> field is valid.</td></tr>
<tr><td>wxLIST_MASK_WIDTH</td><td>The <b> m_width</b> field is valid.</td></tr>
<tr><td>wxLIST_MASK_FORMAT</td><td>The <b> m_format</b> field is valid.</td></tr>
</table>

The <b> m_stateMask</b> and <b> m_state</b> members take flags from the following:

The wxListItem object can also contain item-specific colour and font
information: for this you need to call one of SetTextColour(),
SetBackgroundColour() or SetFont() functions on it passing it the colour/font
to use. If the colour/font is not specified, the default list control
colour/font is used.

\twocolwidtha{5cm}
<table>
<tr><td>wxLIST_STATE_DONTCARE</td><td>Don't care what the state is. Win32 only. </td></tr>
<tr><td>wxLIST_STATE_DROPHILITED</td><td>The item is highlighted to receive a drop event. Win32 only. </td></tr>
<tr><td>wxLIST_STATE_FOCUSED</td><td>The item has the focus.</td></tr>
<tr><td>wxLIST_STATE_SELECTED</td><td>The item is selected.</td></tr>
<tr><td>wxLIST_STATE_CUT</td><td>The item is in the cut state. Win32 only. </td></tr>
</table>

</description></function>
<function type="long" name="SetItem"><parameters><parameter type="long " name="index"></parameter><parameter type="int " name="col"></parameter><parameter type="const wxString&amp; " name="label"></parameter><parameter type="int " name="imageId" value="-1"></parameter></parameters><description>

Sets a string field at a particular column.

\pythonnote{In place of a single overloaded method name, wxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> SetItem(item)</b></td><td>Sets information about the given wxListItem.</td></tr>
<tr><td><b> SetStringItem(index, col, label, imageId)</b></td><td>Sets a
string or image at a given location.</td></tr>
</table>}
}

</description></function></member>
<member class="wxListCtrl" name="SetItemCount"><function type="void" name="SetItemCount"><parameters><parameter type="long " name="count"></parameter></parameters><description>

This method can only be used with virtual list controls. It is used to indicate
to the control the number of items it contains. After calling it, the main
program should be ready to handle calls to various item callbacks (such as
<ref target="wxlistctrlongetitemtext">OnGetItemText</ref>) for all items in the range
from 0 to <i> count</i>.

</description></function></member>
<member class="wxListCtrl" name="SetItemData"><function type="bool" name="SetItemData"><parameters><parameter type="long " name="item"></parameter><parameter type="long " name="data"></parameter></parameters><description>

Associates application-defined data with this item.

</description></function></member>
<member class="wxListCtrl" name="SetItemImage"><function type="bool" name="SetItemImage"><parameters><parameter type="long " name="item"></parameter><parameter type="int " name="image"></parameter><parameter type="int " name="selImage"></parameter></parameters><description>

Sets the unselected and selected images associated with the item. The images are indices into the
image list associated with the list control.

</description></function></member>
<member class="wxListCtrl" name="SetItemPosition"><function type="bool" name="SetItemPosition"><parameters><parameter type="long " name="item"></parameter><parameter type="const wxPoint&amp; " name="pos"></parameter></parameters><description>

Sets the position of the item, in icon or small icon view.

</description></function></member>
<member class="wxListCtrl" name="SetItemState"><function type="bool" name="SetItemState"><parameters><parameter type="long " name="item"></parameter><parameter type="long " name="state"></parameter><parameter type="long " name="stateMask"></parameter></parameters><description>

Sets the item state. For a list of state flags, see <ref target="wxlistctrlsetitem">wxListCtrl::SetItem</ref>.

The <b> stateMask</b> indicates which state flags are valid.

</description></function></member>
<member class="wxListCtrl" name="SetItemText"><function type="void" name="SetItemText"><parameters><parameter type="long " name="item"></parameter><parameter type="const wxString&amp; " name="text"></parameter></parameters><description>

Sets the item text for this item.

</description></function></member>
<member class="wxListCtrl" name="SetSingleStyle"><function type="void" name="SetSingleStyle"><parameters><parameter type="long " name="style"></parameter><parameter type="const bool " name="add" value="true"></parameter></parameters><description>

Adds or removes a single window style.

</description></function></member>
<member class="wxListCtrl" name="SetTextColour"><function type="void" name="SetTextColour"><parameters><parameter type="const wxColour&amp; " name="col"></parameter></parameters><description>

Sets the text colour of the list control.

</description></function></member>
<member class="wxListCtrl" name="SetWindowStyleFlag"><function type="void" name="SetWindowStyleFlag"><parameters><parameter type="long " name="style"></parameter></parameters><description>

Sets the whole window style.

</description></function></member>
<member class="wxListCtrl" name="SortItems"><function type="bool" name="SortItems"><parameters><parameter type="wxListCtrlCompare " name="fnSortCallBack"></parameter><parameter type="long " name="data">the value passed to SortItems() itself.</parameter></parameters><description>

Call this function to sort the items in the list control. Sorting is done
using the specified <i> fnSortCallBack</i> function. This function must have the
following prototype:

<pre>
int wxCALLBACK wxListCompareFunction(long item1, long item2, long sortData)
</pre>

It is called each time when the two items must be compared and should return 0
if the items are equal, negative value if the first item is less than the
second one and positive value if the first one is greater than the second one
(the same convention as used by <tt> qsort(3)</tt>).









Notice that the control may only be sorted on client data associated with the
items, so you <b> must</b> use <ref target="wxlistctrlsetitemdata">SetItemData</ref> if
you want to be able to sort the items in the control.

Please see the <ref target="samplelistctrl">listctrl sample</ref> for an example of
using this function.

\pythonnote{wxPython uses the sortData parameter to pass the Python
function to call, so it is not available for programmer use.  Call
SortItems with a reference to a callable object that expects two
parameters.}

\perlnote{In wxPerl the comparison function must take just two parameters;
 however, you may use a closure to achieve an effect similar to the
 SortItems third parameter.}

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxListEvent">
<description>
<p class="classdesc">
A list event holds information about events associated with wxListCtrl objects.</p>
</description>
<parents>
<classref name="wxNotifyEvent"/>
<classref name="wxCommandEvent"/>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/listctrl.h"/></includes>
<events>
<event name="EVT_LIST_BEGIN_DRAG(id, func)">Begin dragging with the left mouse button.</event><event name="EVT_LIST_BEGIN_RDRAG(id, func)">Begin dragging with the right mouse button.</event><event name="EVT_LIST_BEGIN_LABEL_EDIT(id, func)">Begin editing a label. This can be prevented by calling \helpref{Veto()</event><event name="EVT_LIST_END_LABEL_EDIT(id, func)">Finish editing a label. This can be prevented by calling \helpref{Veto()</event><event name="EVT_LIST_DELETE_ITEM(id, func)">Delete an item.</event><event name="EVT_LIST_DELETE_ALL_ITEMS(id, func)">Delete all items.</event><event name="EVT_LIST_ITEM_SELECTED(id, func)">The item has been selected.</event><event name="EVT_LIST_ITEM_DESELECTED(id, func)">The item has been deselected.</event><event name="EVT_LIST_ITEM_ACTIVATED(id, func)">The item has been activated (ENTER or double click).</event><event name="EVT_LIST_ITEM_FOCUSED(id, func)">The currently focused item has changed.</event><event name="EVT_LIST_ITEM_MIDDLE_CLICK(id, func)">The middle mouse button has been clicked on an item.</event><event name="EVT_LIST_ITEM_RIGHT_CLICK(id, func)">The right mouse button has been clicked on an item.</event><event name="EVT_LIST_KEY_DOWN(id, func)">A key has been pressed.</event><event name="EVT_LIST_INSERT_ITEM(id, func)">An item has been inserted.</event><event name="EVT_LIST_COL_CLICK(id, func)">A column ({\bf m_col</event><event name="EVT_LIST_COL_RIGHT_CLICK(id, func)">A column ({\bf m_col</event><event name="EVT_LIST_COL_BEGIN_DRAG(id, func)">The user started resizing a column - can be vetoed.</event><event name="EVT_LIST_COL_DRAGGING(id, func)">The divider between columns is being dragged.</event><event name="EVT_LIST_COL_END_DRAG(id, func)">A column has been resized by the user.</event><event name="EVT_LIST_CACHE_HINT(id, func)">Prepare cache for a virtual list control</event></events>
<seealso>

<ref target="wxlistctrl">wxListCtrl</ref>

</seealso>
<members>
<member class="wxListEvent" name="wxListEvent"><function type="" name="wxListEvent"><parameters><parameter type="WXTYPE " name="commandType" value="0"></parameter><parameter type="int " name="id" value="0"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxListEvent" name="GetCacheFrom"><function type="long" name="GetCacheFrom" suffix="const"><description>

For <tt> EVT_LIST_CACHE_HINT</tt> event only: return the first item which the
list control advises us to cache.

</description></function></member>
<member class="wxListEvent" name="GetCacheTo"><function type="long" name="GetCacheTo" suffix="const"><description>

For <tt> EVT_LIST_CACHE_HINT</tt> event only: return the last item (inclusive)
which the list control advises us to cache.

</description></function></member>
<member class="wxListEvent" name="GetKeyCode"><function type="int" name="GetKeyCode" suffix="const"><description>

Key code if the event is a keypress event.

</description></function></member>
<member class="wxListEvent" name="GetIndex"><function type="long" name="GetIndex" suffix="const"><description>

The item index.

</description></function></member>
<member class="wxListEvent" name="GetColumn"><function type="int" name="GetColumn" suffix="const"><description>

The column position: it is only used with <tt> COL</tt> events. For the column
dragging events, it is the column to the left of the divider being dragged, for
the column click events it may be $-1$ if the user clicked in the list control
header outside any column.

</description></function></member>
<member class="wxListEvent" name="GetPoint"><function type="wxPoint" name="GetPoint" suffix="const"><description>

The position of the mouse pointer if the event is a drag event.


</description></function></member>
<member class="wxListEvent" name="GetLabel"><function type="const wxString&amp;" name="GetLabel" suffix="const"><description>

The label.

</description></function></member>
<member class="wxListEvent" name="GetText"><function type="const wxString&amp;" name="GetText" suffix="const"><description>

The text.

</description></function></member>
<member class="wxListEvent" name="GetImage"><function type="int" name="GetImage" suffix="const"><description>

The image.

</description></function></member>
<member class="wxListEvent" name="GetData"><function type="long" name="GetData" suffix="const"><description>

The data.

</description></function></member>
<member class="wxListEvent" name="GetMask"><function type="long" name="GetMask" suffix="const"><description>

The mask.

</description></function></member>
<member class="wxListEvent" name="GetItem"><function type="const wxListItem&amp;" name="GetItem" suffix="const"><description>

An item object, used by some events. See also <ref target="wxlistctrlsetitem">wxListCtrl::SetItem</ref>.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxListItem">
<description>
<p class="classdesc">
This class stores information about a wxListCtrl item or column.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/listctrl.h"/></includes>
<members>
<member class="wxListItem" name="wxListItem"><function type="" name="wxListItem"><description>

Constructor.

</description></function></member>
<member class="wxListItem" name="Clear"><function type="void" name="Clear"><description>

Resets the item state to the default.

</description></function></member>
<member class="wxListItem" name="GetAlign"><function type="wxListColumnFormat" name="GetAlign" suffix="const"><description>

Returns the alignment for this item. Can be one of
wxLIST_FORMAT_LEFT, wxLIST_FORMAT_RIGHT or wxLIST_FORMAT_CENTRE.

</description></function></member>
<member class="wxListItem" name="GetBackgroundColour"><function type="wxColour" name="GetBackgroundColour" suffix="const"><description>

Returns the background colour for this item.

</description></function></member>
<member class="wxListItem" name="GetColumn"><function type="int" name="GetColumn" suffix="const"><description>

Returns the zero-based column; meaningful only in report mode.

</description></function></member>
<member class="wxListItem" name="GetData"><function type="long" name="GetData" suffix="const"><description>

Returns client data associated with the control.

</description></function></member>
<member class="wxListItem" name="GetFont"><function type="wxFont" name="GetFont" suffix="const"><description>

Returns the font used to display the item.

</description></function></member>
<member class="wxListItem" name="GetId"><function type="long" name="GetId" suffix="const"><description>

Returns the zero-based item position.

</description></function></member>
<member class="wxListItem" name="GetImage"><function type="int" name="GetImage" suffix="const"><description>

Returns the zero-based index of the image
associated with the item into the image list.

</description></function></member>
<member class="wxListItem" name="GetMask"><function type="long" name="GetMask" suffix="const"><description>

Returns a bit mask indicating which fields of the structure are valid;
can be any combination of the following values:

\twocolwidtha{5cm}
<table>
<tr><td>wxLIST_MASK_STATE</td><td>The <b> GetState</b> is valid.</td></tr>
<tr><td>wxLIST_MASK_TEXT</td><td>The <b> GetText</b> is valid.</td></tr>
<tr><td>wxLIST_MASK_IMAGE</td><td>The <b> GetImage</b> is valid.</td></tr>
<tr><td>wxLIST_MASK_DATA</td><td>The <b> GetData</b> is valid.</td></tr>
<tr><td>wxLIST_MASK_WIDTH</td><td>The <b> GetWidth</b> is valid.</td></tr>
<tr><td>wxLIST_MASK_FORMAT</td><td>The <b> GetAlign</b> is valid.</td></tr>
</table>

</description></function></member>
<member class="wxListItem" name="GetState"><function type="long" name="GetState" suffix="const"><description>

Returns a bit field representing the state of the item. Can be any
combination of:

\twocolwidtha{5cm}
<table>
<tr><td>wxLIST_STATE_DONTCARE</td><td>Don't care what the state is. Win32 only. </td></tr>
<tr><td>wxLIST_STATE_DROPHILITED</td><td>The item is highlighted to receive a drop event. Win32 only. </td></tr>
<tr><td>wxLIST_STATE_FOCUSED</td><td>The item has the focus.</td></tr>
<tr><td>wxLIST_STATE_SELECTED</td><td>The item is selected.</td></tr>
<tr><td>wxLIST_STATE_CUT</td><td>The item is in the cut state. Win32 only. </td></tr>
</table>

</description></function></member>
<member class="wxListItem" name="GetText"><function type="const wxString&amp;" name="GetText" suffix="const"><description>

Returns the label/header text.

</description></function></member>
<member class="wxListItem" name="GetTextColour"><function type="wxColour" name="GetTextColour" suffix="const"><description>

Returns the text colour.

</description></function></member>
<member class="wxListItem" name="GetWidth"><function type="int" name="GetWidth" suffix="const"><description>

Meaningful only for column headers in report mode. Returns the column width.

</description></function></member>
<member class="wxListItem" name="SetAlign"><function type="void" name="SetAlign"><parameters><parameter type="wxListColumnFormat " name="align"></parameter></parameters><description>

Sets the alignment for the item. See also
<ref target="wxlistitemsetalign">wxListItem::SetAlign</ref>

</description></function></member>
<member class="wxListItem" name="SetBackgroundColour"><function type="void" name="SetBackgroundColour"><parameters><parameter type="const wxColour&amp; " name="colBack"></parameter></parameters><description>

Sets the background colour for the item.

</description></function></member>
<member class="wxListItem" name="SetColumn"><function type="void" name="SetColumn"><parameters><parameter type="int " name="col"></parameter></parameters><description>

Sets the zero-based column. Meaningful only in report mode.

</description></function></member>
<member class="wxListItem" name="SetData"><function type="void" name="SetData"><parameters><parameter type="long " name="data"></parameter></parameters><description>

</description></function>
<function type="void" name="SetData"><parameters><parameter type="void&#42; " name="data"></parameter></parameters><description>

Sets client data for the item.

</description></function></member>
<member class="wxListItem" name="SetFont"><function type="void" name="SetFont"><parameters><parameter type="const wxFont&amp; " name="font"></parameter></parameters><description>

Sets the font for the item.

</description></function></member>
<member class="wxListItem" name="SetId"><function type="void" name="SetId"><parameters><parameter type="long " name="id"></parameter></parameters><description>

Sets the zero-based item position.

</description></function></member>
<member class="wxListItem" name="SetImage"><function type="void" name="SetImage"><parameters><parameter type="int " name="image"></parameter></parameters><description>

Returns the zero-based index of the image associated with the item
into the image list.

</description></function></member>
<member class="wxListItem" name="SetMask"><function type="void" name="SetMask"><parameters><parameter type="long " name="mask"></parameter></parameters><description>

Sets the mask of valid fields. See <ref target="wxlistitemgetmask">wxListItem::GetMask</ref>.

</description></function></member>
<member class="wxListItem" name="SetState"><function type="void" name="SetState"><parameters><parameter type="long " name="state"></parameter></parameters><description>

Sets the item state flags (note that the valid state flags are influenced
by the value of the state mask, see
<ref target="wxlistitemsetstatemask">wxListItem::SetStateMask</ref>).
See <ref target="wxlistitemsetstate">wxListItem::GetState</ref> for valid flag
values.

</description></function></member>
<member class="wxListItem" name="SetStateMask"><function type="void" name="SetStateMask"><parameters><parameter type="long " name="stateMask"></parameter></parameters><description>

Sets the bitmask that is used to determine which of the state flags
are to be set. See also <ref target="wxlistitemsetstate">wxListItem::SetState</ref>.

</description></function></member>
<member class="wxListItem" name="SetText"><function type="void" name="SetText"><parameters><parameter type="const wxString&amp; " name="text"></parameter></parameters><description>

Sets the text label for the item.

</description></function></member>
<member class="wxListItem" name="SetTextColour"><function type="void" name="SetTextColour"><parameters><parameter type="const wxColour&amp; " name="colText"></parameter></parameters><description>

Sets the text colour for the item.

</description></function></member>
<member class="wxListItem" name="SetWidth"><function type="void" name="SetWidth"><parameters><parameter type="int " name="width"></parameter></parameters><description>

Meaningful only for column headers in report mode. Sets the column width.

</description></function></member></members>
<supported>
</supported>
</class><class name="wxListView">
<description>
<p class="classdesc">
This class currently simply presents a simpler to use interface for the 
<ref target="wxlistctrl">wxListCtrl</ref> -- it can be thought of as a <i> fa\c{c</i>ade}
for that complicated class. Using it is preferable to using 
<ref target="wxlistctrl">wxListCtrl</ref> directly whenever possible because in the
future some ports might implement wxListView but not the full set of wxListCtrl
features.</p><p class="classdesc">Other than different interface, this class is identical to wxListCtrl. In
particular, it uses the same events, same windows styles and so on.</p>
</description>
<parents>
<classref name="wxListCtrl"/>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/listctrl.h"/></includes>
<members>
<member class="wxListView" name="ClearColumnImage"><function type="void" name="ClearColumnImage"><parameters><parameter type="int " name="col">the column to clear image for</parameter></parameters><seealso>

<ref target="wxlistviewsetcolumnimage">SetColumnImage</ref>


</seealso><description>

Resets the column image -- after calling this function, no image will be shown.





</description></function></member>
<member class="wxListView" name="Focus"><function type="void" name="Focus"><parameters><parameter type="long " name="index"></parameter></parameters><description>

Sets focus to the item with the given <i> index</i>.


</description></function></member>
<member class="wxListView" name="GetFirstSelected"><function type="long" name="GetFirstSelected" suffix="const"><returnvalue>

The fisrt selected item, if any, $-1$ otherwise.


</returnvalue><description>

Returns the first selected item in a (presumably) multiple selection control.
Tigether with <ref target="wxlistviewgetnextselected">GetNextSelected</ref> it can be
used to iterate over all selected items in the control.

</description></function></member>
<member class="wxListView" name="GetFocusedItem"><function type="long" name="GetFocusedItem" suffix="const"><seealso>

<ref target="wxlistviewisselected">IsSelected</ref>,<br/>
<ref target="wxlistviewfocus">Focus</ref>


</seealso><description>

Returns the currently focused item or $-1$ if none.

</description></function></member>
<member class="wxListView" name="GetNextSelected"><function type="long" name="GetNextSelected" suffix="const"><parameters><parameter type="long " name="item"></parameter></parameters><returnvalue>

Returns the next selected item or $-1$ if there are no more of them.


</returnvalue><description>

Used together with <ref target="wxlistviewgetfirstselected">GetFirstSelected</ref> to
iterate oevr all selected items in the control.

</description></function></member>
<member class="wxListView" name="IsSelected"><function type="bool" name="IsSelected"><parameters><parameter type="long " name="index"></parameter></parameters><seealso>

<ref target="wxlistviewgetfirstselected">GetFirstSelected</ref>,<br/>
<ref target="wxlistviewgetnextselected">GetNextSelected</ref>


</seealso><description>

Returns <tt> true</tt> if the item with the given <i> index</i> is selected, 
<tt> false</tt> otherwise.

</description></function></member>
<member class="wxListView" name="Select"><function type="void" name="Select"><parameters><parameter type="bool " name="on" value="true">if <tt> true</tt> (default), selects the item, otherwise unselects it</parameter></parameters><seealso>

<ref target="wxlistctrlsetitemstate">SetItemState</ref>


</seealso><description>

Selects or unselects the given item.







</description></function></member>
<member class="wxListView" name="SetColumnImage"><function type="void" name="SetColumnImage"><parameters><parameter type="int " name="col">the column to set image for</parameter><parameter type="int " name="image">the index of the column image in the controls image list</parameter></parameters><seealso>

<ref target="wxlistviewclearcolumnimage">ClearColumnImage</ref>,<br/>
<ref target="wxlistctrlsetimagelist">SetImageList</ref>

</seealso><description>

Sets the column image for the specified column. To use the column images, the
control must have a valid image list with at least one image.







</description></function></member></members>
<supported>
</supported>
</class><class name="wxLocale">
<description>
<p class="classdesc">
wxLocale class encapsulates all language-dependent settings and is a
generalization of the C locale concept.</p><p class="classdesc">In wxWindows this class manages message catalogs which contain the translations
of the strings used to the current language.</p>
</description>

<parents></parents>
<includes>
<header name="wx/intl.h"/></includes>
<seealso>

<ref target="internationalization">Internationalization overview</ref>,<br/>
<ref target="sampleinternat">Internat sample</ref>

</seealso>
<members>
<member class="wxLocale" name=""></member>
<member class="wxLocale" name="wxLocale"><function type="" name="wxLocale"><description>

This is the default constructor and it does nothing to initialize the object: 
<ref target="wxlocaleinit">Init()</ref> must be used to do that.

</description></function>
<function type="" name="wxLocale"><parameters><parameter type="int " name="language"></parameter><parameter type="int " name="flags" value="wxLOCALE_LOAD_DEFAULT"></parameter></parameters><description>

See <ref target="wxlocaleinit">Init()</ref> for parameters description.

</description></function>
<function type="" name="wxLocale"><parameters><parameter type="const char " name="&#42;szName"></parameter><parameter type="const char " name="&#42;szShort" value="NULL"></parameter><parameter type="const char " name="&#42;szLocale" value="NULL"></parameter><parameter type="bool " name="bLoadDefault" value="true"></parameter><parameter type="bool " name="bConvertEncoding" value="false"></parameter></parameters><description>

See <ref target="wxlocaleinit">Init()</ref> for parameters description.

The call of this function has several global side effects which you should
understand: first of all, the application locale is changed - note that this
will affect many of standard C library functions such as printf() or strftime().
Second, this wxLocale object becomes the new current global locale for the
application and so all subsequent calls to wxGetTranslation() will try to
translate the messages using the message catalogs for this locale.


</description></function></member>
<member class="wxLocale" name="~wxLocale"><function type="" name="~wxLocale"><description>

The destructor, like the constructor, also has global side effects: the previously
set locale is restored and so the changes described in 
<ref target="wxlocaleinit">Init</ref> documentation are rolled back.

</description></function></member>
<member class="wxLocale" name="AddCatalog"><function type="bool" name="AddCatalog"><parameters><parameter type="const char " name="&#42;szDomain"></parameter></parameters><description>

Add a catalog for use with the current locale: it is searched for in standard
places (current directory first, then the system one), but you may also prepend
additional directories to the search path with 
<ref target="wxlocaleaddcataloglookuppathprefix">AddCatalogLookupPathPrefix()</ref>.

All loaded catalogs will be used for message lookup by GetString() for the
current locale.

Returns true if catalog was successfully loaded, false otherwise (which might
mean that the catalog is not found or that it isn't in the correct format).

</description></function></member>
<member class="wxLocale" name="AddCatalogLookupPathPrefix"><function type="void" name="AddCatalogLookupPathPrefix"><parameters><parameter type="const wxString&amp; " name="prefix"></parameter></parameters><description>

Add a prefix to the catalog lookup path: the message catalog files will be
looked up under prefix/&lt;lang&gt;/LC_MESSAGES, prefix/LC_MESSAGES and prefix
(in this order).

This only applies to subsequent invocations of AddCatalog()!

</description></function></member>
<member class="wxLocale" name="AddLanguage"><function type="static void" name="AddLanguage"><parameters><parameter type="const wxLanguageInfo&amp; " name="info"></parameter></parameters><description>

Adds custom, user-defined language to the database of known languages. This
database is used in conjunction with the first form of 
<ref target="wxlocaleinit">Init</ref>. 

wxLanguageInfo is defined as follows:

<pre>
struct WXDLLEXPORT wxLanguageInfo
{
    int Language;                   // wxLanguage id
    wxString CanonicalName;         // Canonical name, e.g. fr_FR
#ifdef __WIN32__
    wxUint32 WinLang, WinSublang;   // Win32 language identifiers
                                    // (LANG_xxxx, SUBLANG_xxxx)
#endif
    wxString Description;           // human-readable name of the language
};
</pre>


<i> Language</i> should be greater than wxLANGUAGE_USER_DEFINED.

\perlnote{In wxPerl Wx::LanguageInfo has only one method:\par
Wx::LanguageInfo-&gt;new( language, canonicalName, WinLang, WinSubLang, Description )}

</description></function></member>
<member class="wxLocale" name="FindLanguageInfo"><function type="static wxLanguageInfo &#42;" name="FindLanguageInfo" suffix="const"><parameters><parameter type="const wxString&amp; " name="locale"></parameter></parameters><seealso>

<ref target="wxlocalegetlanguageinfo">GetLanguageInfo</ref>

</seealso><description>

This function may be used to find the language description structure for the
given locale, specified either as a two letter ISO language code (for example,
&quot;pt&quot;), a language code followed by the country code (&quot;pt_BR&quot;) or a full, human
readable, language description (&quot;Portuguese-Brazil&quot;).

Returns the information for the given language or <tt> NULL</tt> if this language
is unknown. Note that even if the returned pointer is valid, the caller should
<i> not</i> delete it.

</description></function></member>
<member class="wxLocale" name="GetCanonicalName"><function type="wxString" name="GetSysName" suffix="const"><description>

Returns the canonical form of current locale name. Canonical form is the
one that is used on UNIX systems: it is a two- or five-letter string in xx or
xx_YY format, where xx is ISO 639 code of language and YY is ISO 3166 code of
the country. Examples are &quot;en&quot;, &quot;en_GB&quot;, &quot;en_US&quot; or &quot;fr_FR&quot;.

This form is internally used when looking up message catalogs.

Compare <ref target="wxlocalegetsysname">GetSysName</ref>.



</description></function></member>
<member class="wxLocale" name="GetLanguage"><function type="int" name="GetLanguage" suffix="const"><description>

Returns <ref target="wxlanguage">wxLanguage</ref> constant of current language.
Note that you can call this function only if you used the form of
<ref target="wxlocaleinit">Init</ref> that takes wxLanguage argument.

</description></function></member>
<member class="wxLocale" name="GetLanguageInfo"><function type="static wxLanguageInfo &#42;" name="GetLanguageInfo" suffix="const"><parameters><parameter type="int " name="lang"></parameter></parameters><description>

Returns a pointer to wxLanguageInfo structure containing information about the
given language or <tt> NULL</tt> if this language is unknown. Note that even if the
returned pointer is valid, the caller should <i> not</i> delete it.

See <ref target="wxlocaleaddlanguage">AddLanguage</ref> for the wxLanguageInfo
description.

</description></function></member>
<member class="wxLocale" name="GetLanguageName"><function type="static wxString" name="GetLanguageName" suffix="const"><parameters><parameter type="int " name="lang"></parameter></parameters><description>

Returns English name of the given language or empty string if this
language is unknown.


</description></function></member>
<member class="wxLocale" name="GetLocale"><function type="const char&#42;" name="GetLocale" suffix="const"><description>

Returns the locale name as passed to the constructor or 
<ref target="wxlocaleinit">Init()</ref>. This is full, human-readable name,
e.g. &quot;English&quot; or &quot;French&quot;.


</description></function></member>
<member class="wxLocale" name="GetName"><function type="const wxString&amp;" name="GetName" suffix="const"><description>

Returns the current short name for the locale (as given to the constructor or
the Init() function).

</description></function></member>
<member class="wxLocale" name="GetString"><function type="const char&#42;" name="GetString" suffix="const"><parameters><parameter type="const char " name="&#42;szOrigString"></parameter><parameter type="const char " name="&#42;szDomain" value="NULL"></parameter></parameters><remarks>

Domains are searched in the last to first order, i.e. catalogs
added later override those added before.

</remarks><description>

Retrieves the translation for a string in all loaded domains unless the szDomain
parameter is specified (and then only this catalog/domain is searched).

Returns original string if translation is not available
(in this case an error message is generated the first time
a string is not found; use <ref target="wxlogoverview">wxLogNull</ref> to suppress it).

</description></function></member>
<member class="wxLocale" name="GetSysName"><function type="wxString" name="GetSysName" suffix="const"><description>

Returns current platform-specific locale name as passed to setlocale().

Compare <ref target="wxlocalegetcanonicalname">GetCanonicalName</ref>.


</description></function></member>
<member class="wxLocale" name="GetSystemEncoding"><function type="static wxFontEncoding" name="GetSystemEncoding" suffix="const"><description>

Tries to detect the user's default font encoding.
Returns <ref target="wxfont">wxFontEncoding</ref> value or 
<b> wxFONTENCODING_SYSTEM</b> if it couldn't be determined.

</description></function></member>
<member class="wxLocale" name="GetSystemEncodingName"><function type="static wxString" name="GetSystemEncodingName" suffix="const"><description>

Tries to detect the name of the user's default font encoding. This string isn't
particularly useful for the application as its form is platform-dependent and
so you should probably use 
<ref target="wxlocalegetsystemencoding">GetSystemEncoding</ref> instead.

Returns a user-readable string value or an empty string if it couldn't be
determined.

</description></function></member>
<member class="wxLocale" name="GetSystemLanguage"><function type="static int" name="GetSystemLanguage" suffix="const"><description>

Tries to detect the user's default language setting.
Returns <ref target="wxlanguage">wxLanguage</ref> value or 
 <b> wxLANGUAGE_UNKNOWN</b> if the language-guessing algorithm failed.


</description></function></member>
<member class="wxLocale" name="Init"><function type="bool" name="Init"><parameters><parameter type="int " name="language" value="wxLANGUAGE_DEFAULT"><ref target="wxlanguage">wxLanguage</ref> identifier of the locale. 
wxLANGUAGE_DEFAULT has special meaning -- wxLocale will use system's default 
language (see <ref target="wxlocalegetsystemlanguage">GetSystemLanguage</ref>).</parameter><parameter type="int " name="flags" value="wxLOCALE_LOAD_DEFAULT"></parameter></parameters><description>

</description></function>
<function type="bool" name="Init"><parameters><parameter type="const char " name="&#42;szName"></parameter><parameter type="const char " name="&#42;szShort" value="NULL"></parameter><parameter type="const char " name="&#42;szLocale" value="NULL"></parameter><parameter type="bool " name="bLoadDefault" value="true">May be set to false to prevent loading of the message catalog
for the given locale containing the translations of standard wxWindows messages.
This parameter would be rarely used in normal circumstances.</parameter><parameter type="bool " name="bConvertEncoding" value="false">May be set to true to do automatic conversion of message
catalogs to platform's native encoding. Note that it will do only basic 
conversion between well-known pair like iso8859-1 and windows-1252 or
iso8859-2 and windows-1250. 
See <ref target="nonenglishoverview">Writing non-English applications</ref> for detailed
description of this behaviour.</parameter></parameters><description>

The second form is deprecated, use the first one unless you know what you are
doing. 



















The call of this function has several global side effects which you should
understand: first of all, the application locale is changed - note that this
will affect many of standard C library functions such as printf() or strftime().
Second, this wxLocale object becomes the new current global locale for the
application and so all subsequent calls to wxGetTranslation() will try to
translate the messages using the message catalogs for this locale.

Returns true on success or false if the given locale couldn't be set.

</description></function></member>
<member class="wxLocale" name="IsLoaded"><function type="bool" name="IsLoaded" suffix="const"><parameters><parameter type="const char&#42; " name="domain"></parameter></parameters><description>

Check if the given catalog is loaded, and returns true if it is.

According to GNU gettext tradition, each catalog
normally corresponds to 'domain' which is more or less the application name.

See also: <ref target="wxlocaleaddcatalog">AddCatalog</ref>

</description></function></member>
<member class="wxLocale" name="IsOk"><function type="bool" name="IsOk" suffix="const"><description>

Returns true if the locale could be set successfully.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxLog">
<description>
<p class="classdesc">
wxLog class defines the interface for the <i> log targets</i> used by wxWindows
logging functions as explained in the <ref target="wxlogoverview">wxLog overview</ref>.
The only situations when you need to directly use this class is when you want
to derive your own log target because the existing ones don't satisfy your
needs. Another case is if you wish to customize the behaviour of the standard
logging classes (all of which respect the wxLog settings): for example, set
which trace messages are logged and which are not or change (or even remove
completely) the timestamp on the messages.</p><p class="classdesc">Otherwise, it is completely hidden behind the <i> wxLogXXX()</i> functions and
you may not even know about its existence.</p><p class="classdesc">See <ref target="wxlogoverview">log overview</ref> for the descriptions of wxWindows
logging facilities.</p>
</description>
<parents></parents>
<includes>
<header name="wx/log.h"/></includes>
<members>
<member class="" name=""></member>
<member class="" name=""></member>
<member class="verbatim}
will do something only if the current trace mask contains both
{\tt wxTraceRefCount} and {\tt wxTraceOle}, but

\begin{verbatim}
// wxTRACE_OleCalls is one of standard string masks
wxLogTrace(wxTRACE_OleCalls, &quot;IFoo" name="Bar() called&quot;);
\end{verbatim"></member>
<member class="wxLog" name="AddTraceMask"><function type="static void" name="AddTraceMask"><parameters><parameter type="const wxString&amp; " name="mask"></parameter></parameters><seealso>
<ref target="wxlogremovetracemask">RemoveTraceMask</ref>
<ref target="wxloggettracemasks">GetTraceMasks</ref>

</seealso><description>

Add the <i> mask</i> to the list of allowed masks for
<ref target="wxlogtrace">wxLogTrace</ref>.

</description></function></member>
<member class="wxLog" name="ClearTraceMasks"><function type="static void" name="ClearTraceMasks"><seealso>
<ref target="wxlogremovetracemask">RemoveTraceMask</ref>

</seealso><description>

Removes all trace masks previously set with
<ref target="wxlogaddtracemask">AddTraceMask</ref>.

</description></function></member>
<member class="wxLog" name="GetTraceMasks"><function type="static const wxArrayString &amp;" name="GetTraceMasks"><seealso>
<ref target="wxlogaddtracemask">AddTraceMask</ref>.

</seealso><description>

Returns the currently allowed list of string trace masks.

</description></function></member>
<member class="wxLog" name="OnLog"><function type="static void" name="OnLog"><parameters><parameter type="wxLogLevel " name=" level"></parameter><parameter type="const char &#42; " name=" message"></parameter></parameters><description>

Forwards the message at specified level to the <i> DoLog()</i> function of the
active log target if there is any, does nothing otherwise.

</description></function></member>
<member class="wxLog" name="GetActiveTarget"><function type="static wxLog &#42;" name="GetActiveTarget"><description>

Returns the pointer to the active log target (may be NULL).

</description></function></member>
<member class="wxLog" name="SetActiveTarget"><function type="static wxLog &#42;" name="SetActiveTarget"><parameters><parameter type="wxLog &#42; " name=" logtarget"></parameter></parameters><description>

Sets the specified log target as the active one. Returns the pointer to the
previous active log target (may be NULL).

</description></function></member>
<member class="wxLog" name="Suspend"><function type="static void" name="Suspend"><description>

Suspends the logging until <ref target="wxlogresume">Resume</ref> is called. Note that
the latter must be called the same number of times as the former to undo it,
i.e. if you call Suspend() twice you must call Resume() twice as well.

Note that suspending the logging means that the log sink won't be be flushed
periodically, it doesn't have any effect if the current log target does the
logging immediately without waiting for <ref target="wxlogflush">Flush</ref> to be
called (the standard GUI log target only shows the log dialog when it is
flushed, so Suspend() works as expected with it).

\wxheading{See also:}

<ref target="wxlogresume">Resume</ref>,<br/>
<ref target="wxlogoverview">wxLogNull</ref>

</description></function></member>
<member class="wxLog" name="Resume"><function type="static void" name="Resume"><description>

Resumes logging previously suspended by a call to
<ref target="wxlogsuspend">Suspend</ref>. All messages logged in the meanwhile will be
flushed soon.

</description></function></member>
<member class="wxLog" name="DoLog"><function type="virtual void" name="DoLog"><parameters><parameter type="wxLogLevel " name="level"></parameter><parameter type="const wxChar " name="&#42;msg"></parameter><parameter type="time_t " name="timestamp"></parameter></parameters><description>

Called to process the message of the specified severity. <i> msg</i> is the text
of the message as specified in the call of <i> wxLogXXX()</i> function which
generated it and <i> timestamp</i> is the moment when the message was generated.

The base class version prepends the timestamp to the message, adds a prefix
corresponding to the log level and then calls
<ref target="wxlogdologstring">DoLogString</ref> with the resulting string.

</description></function></member>
<member class="wxLog" name="DoLogString"><function type="virtual void" name="DoLogString"><parameters><parameter type="const wxChar " name="&#42;msg"></parameter><parameter type="time_t " name="timestamp"></parameter></parameters><description>

Called to log the specified string. The timestamp is already included into the
string but still passed to this function.

A simple implementation may just send the string to <tt> stdout</tt> or, better,
<tt> stderr</tt>.

</description></function></member>
<member class="wxLog" name="DontCreateOnDemand"><function type="static void" name="DontCreateOnDemand"><description>

Instructs wxLog to not create new log targets on the fly if there is none
currently. (Almost) for internal use only: it is supposed to be called by the
application shutdown code.

Note that this function also calls
<ref target="wxlogcleartracemasks">ClearTraceMasks</ref>.

</description></function></member>
<member class="wxLog" name="Flush"><function type="virtual void" name="Flush"><description>

Shows all the messages currently in buffer and clears it. If the buffer
is already empty, nothing happens.

</description></function></member>
<member class="wxLog" name="FlushActive"><function type="static void" name="FlushActive"><description>

Flushes the current log target if any, does nothing if there is none.

See also:

<ref target="wxlogflush">Flush</ref>

</description></function></member>
<member class="wxLog" name="SetVerbose"><function type="static void" name="SetVerbose"><parameters><parameter type="bool " name="verbose" value="true"></parameter></parameters><description>

Activates or deactivates verbose mode in which the verbose messages are
logged as the normal ones instead of being silently dropped.

</description></function></member>
<member class="wxLog" name="GetVerbose"><function type="static bool" name="GetVerbose"><description>

Returns whether the verbose mode is currently active.

</description></function></member>
<member class="wxLog" name="SetLogLevel"><function type="static void" name="SetLogLevel"><parameters><parameter type="wxLogLevel " name=" logLevel"></parameter></parameters><description>

Specifies that log messages with $level &gt; logLevel$ should be ignored
and not sent to the active log target.

</description></function></member>
<member class="wxLog" name="GetLogLevel"><function type="static wxLogLevel" name="GetLogLevel"><description>

Returns the current log level limit.

</description></function></member>
<member class="wxLog" name="SetTimestamp"><function type="void" name="SetTimestamp"><parameters><parameter type="const char &#42; " name=" format"></parameter></parameters><description>

Sets the timestamp format prepended by the default log targets to all
messages. The string may contain any normal characters as well as \prefixed format specificators, see <i> strftime()</i> manual for details.
Passing a NULL value (not empty string) to this function disables message timestamping.

</description></function></member>
<member class="wxLog" name="GetTimestamp"><function type="const char &#42;" name="GetTimestamp" suffix="const"><description>

Returns the current timestamp format string.

</description></function></member>
<member class="wxLog" name="SetTraceMask"><function type="static void" name="SetTraceMask"><parameters><parameter type="wxTraceMask " name=" mask"></parameter></parameters><description>

Sets the trace mask, see <ref target="wxlogcustomization">Customization</ref>
section for details.

</description></function></member>
<member class="wxLog" name="GetTraceMask"></member>
<member class="wxLog" name="IsAllowedTraceMask"><function type="static bool" name="IsAllowedTraceMask"><parameters><parameter type="const wxChar &#42;" name="mask"></parameter></parameters><description>

Returns true if the <i> mask</i> is one of allowed masks for
<ref target="wxlogtrace">wxLogTrace</ref>.

See also: <ref target="wxlogaddtracemask">AddTraceMask</ref>,
<ref target="wxlogremovetracemask">RemoveTraceMask</ref>

</description></function></member>
<member class="wxLog" name="RemoveTraceMask"><function type="static void" name="RemoveTraceMask"><parameters><parameter type="const wxString&amp; " name="mask"></parameter></parameters><description>

Remove the <i> mask</i> from the list of allowed masks for
<ref target="wxlogtrace">wxLogTrace</ref>.

See also: <ref target="wxlogaddtracemask">AddTraceMask</ref>
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxLogChain">
<description>
<p class="classdesc">
This simple class allows to chain log sinks, that is to install a new sink but
keep passing log messages to the old one instead of replacing it completely as
<ref target="wxlogsetactivetarget">SetActiveTarget</ref> does.</p><p class="classdesc">It is especially useful when you want to divert the logs somewhere (for
example to a file or a log window) but also keep showing the error messages
using the standard dialogs as <ref target="wxlogoverview">wxLogGui</ref> does by default.</p><p class="classdesc">Example of usage:</p><p class="classdesc"><pre>
wxLogChain &#42;logChain = new wxLogChain(new wxLogStderr);

// all the log messages are sent to stderr and also processed as usually
...

// don't delete logChain directly as this would leave a dangling
// pointer as active log target, use SetActiveTarget() instead
delete wxLog::SetActiveTarget(...something else or NULL...);

</pre></p>
</description>
<parents>
<classref name="wxLog"/>

</parents>
<includes>
<header name="wx/log.h"/></includes>
<members>
<member class="wxLogChain" name="wxLogChain"><function type="" name="wxLogChain"><parameters><parameter type="wxLog &#42;" name="logger"></parameter></parameters><description>

Sets the specified <tt> logger</tt> (which may be <tt> NULL</tt>) as the default log
target but the log messages are also passed to the previous log target if any.

</description></function></member>
<member class="wxLogChain" name="~wxLogChain"><function type="" name="~wxLogChain"><description>

Destroys the previous log target.

</description></function></member>
<member class="wxLogChain" name="GetOldLog"><function type="wxLog &#42;" name="GetOldLog" suffix="const"><description>

Returns the pointer to the previously active log target (which may be <tt>
NULL</tt>).

</description></function></member>
<member class="wxLogChain" name="IsPassingMessages"><function type="bool" name="IsPassingMessages" suffix="const"><description>

Returns <tt> true</tt> if the messages are passed to the previously active log
target (default) or <tt> false</tt> if <ref target="wxlogchainpassmessages">PassMessages</ref>
had been called.

</description></function></member>
<member class="wxLogChain" name="PassMessages"><function type="void" name="PassMessages"><parameters><parameter type="bool " name="passMessages"></parameter></parameters><description>

By default, the log messages are passed to the previously active log target.
Calling this function with <tt> false</tt> parameter disables this behaviour
(presumably temporarily, as you shouldn't use wxLogChain at all otherwise) and
it can be reenabled by calling it again with <i> passMessages</i> set to <tt>
true</tt>.

</description></function></member>
<member class="wxLogChain" name="SetLog"><function type="void" name="SetLog"><parameters><parameter type="wxLog &#42;" name="logger"></parameter></parameters><description>

Sets another log target to use (may be <tt> NULL</tt>). The log target specified
in the <ref target="wxlogchainwxlogchain">constructor</ref> or in a previous call to
this function is deleted.

This doesn't change the old log target value (the one the messages are
forwarded to) which still remains the same as was active when wxLogChain
object was created.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxLogGui">
<description>
<p class="classdesc">
This is the default log target for the GUI wxWindows applications. It is passed
to <ref target="wxlogsetactivetarget">wxLog::SetActiveTarget</ref> at the program
startup and is deleted by wxWindows during the program shut down.</p>
</description>
<parents>
<classref name="wxLog"/>

</parents>
<includes>
<header name="wx/log.h"/></includes>
<members>
<member class="wxLogGui" name="wxLogGui"><function type="" name="wxLogGui"><description>

Default constructor.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxLogNull">
<description>
<p class="classdesc">
This class allows to temporarily suspend logging. All calls to the log
functions during the life time of an object of this class are just ignored.</p><p class="classdesc">In particular, it can be used to suppress the log messages given by wxWindows
itself but it should be noted that it is rarely the best way to cope with this
problem as <b> all</b> log messages are suppressed, even if they indicate a
completely different error than the one the programmer wanted to suppress.</p><p class="classdesc">For instance, the example of the overview:</p><p class="classdesc"><pre>
  wxFile file;

  // wxFile.Open() normally complains if file can't be opened, we don't want it
  {
    wxLogNull logNo;
    if ( !file.Open(&quot;bar&quot;) )
      ... process error ourselves ...
  } // ~wxLogNull called, old log sink restored

  wxLogMessage(&quot;...&quot;); // ok
</pre></p><p class="classdesc">would be better written as:</p><p class="classdesc"><pre>
  wxFile file;

  // don't try to open file if it doesn't exist, we are prepared to deal with
  // this ourselves - but all other errors are not expected
  if ( wxFile::Exists(&quot;bar&quot;) )
  {
      // gives an error message if the file couldn't be opened
      file.Open(&quot;bar&quot;);
  }
  else
  {
      ...
  }
</pre></p>
</description>
<parents>
<classref name="wxLog"/>

</parents>
<includes>
<header name="wx/log.h"/></includes>
<members>
<member class="wxLogNull" name="wxLogNull"><function type="" name="wxLogNull"><description>

Suspends logging.

</description></function></member>
<member class="wxLogNull" name="~wxLogNull"></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxLogPassThrough">
<description>
<p class="classdesc">
A special version of <ref target="wxlogchain">wxLogChain</ref> which uses itself as the
new log target. Maybe more clearly, it means that this is a log target which
forwards the log messages to the previously installed one in addition to
processing them itself.</p><p class="classdesc">Unlike <ref target="wxlogchain">wxLogChain</ref> which is usually used directly as is,
this class must be derived from to implement <ref target="wxlogdolog">DoLog</ref>
and/or <ref target="wxlogdologstring">DoLogString</ref> methods.</p>
</description>
<parents>
<classref name="wxLogChain"/>

</parents>
<includes>
<header name="wx/log.h"/></includes>
<members>
<member class="wxLogPassThrough" name="wxLogPassThrough"></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxLogStderr">
<description>
<p class="classdesc">
This class can be used to redirect the log messages to a C file stream (not to
be confused with C++ streams). It is the default log target for the non-GUI
wxWindows applications which send all the output to <tt> stderr</tt>.</p>
</description>
<parents>
<classref name="wxLog"/>

</parents>
<includes>
<header name="wx/log.h"/></includes>
<seealso>

<ref target="wxlogstream">wxLogStream</ref>

</seealso>
<members>
<member class="wxLogStderr" name="wxLogStderr"><function type="" name="wxLogStderr"><parameters><parameter type="FILE " name="&#42;fp" value="NULL"></parameter></parameters><description>

Constructs a log target which sends all the log messages to the given
<tt> FILE</tt>. If it is <tt> NULL</tt>, the messages are sent to <tt> stderr</tt>.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxLogStream">
<description>
<p class="classdesc">
This class can be used to redirect the log messages to a C++ stream.</p><p class="classdesc">Please note that this class is only available if wxWindows was compiled with
the standard iostream library support (<tt> wxUSE_STD_IOSTREAM</tt> must be on).</p>
</description>
<parents>
<classref name="wxLog"/>

</parents>
<includes>
<header name="wx/log.h"/></includes>
<seealso>

<ref target="wxlogstderr">wxLogStderr</ref>,<br/>
<ref target="wxstreamtotextredirector">wxStreamToTextRedirector</ref>

</seealso>
<members>
<member class="wxLogStream" name="wxLogStream"><function type="" name="wxLogStream"><parameters><parameter type="std::ostream " name="&#42;ostr" value="NULL"></parameter></parameters><description>

Constructs a log target which sends all the log messages to the given
output stream. If it is <tt> NULL</tt>, the messages are sent to <tt> cerr</tt>.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxLogTextCtrl">
<description>
<p class="classdesc">
Using these target all the log messages can be redirected to a text control.
The text control must have been created with <tt> wxTE_MULTILINE</tt> style by the
caller previously.</p>
</description>
<parents>
<classref name="wxLog"/>

</parents>
<includes>
<header name="wx/log.h"/></includes>
<seealso>

<ref target="wxlogtextctrl">wxLogTextCtrl</ref>,<br/>
<ref target="wxstreamtotextredirector">wxStreamToTextRedirector</ref>

</seealso>
<members>
<member class="wxLogTextCtrl" name="wxLogTextCtrl"><function type="" name="wxLogTextCtrl"><parameters><parameter type="wxTextCtrl " name="&#42;textctrl"></parameter></parameters><description>

Constructs a log target which sends all the log messages to the given text
control. The <i> textctrl</i> parameter cannot be <tt> NULL</tt>.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxLogWindow">
<description>
<p class="classdesc">
This class represents a background log window: to be precise, it collects all
log messages in the log frame which it manages but also passes them on to the
log target which was active at the moment of its creation. This allows, for
example, to show all the log messages in a frame but still continue to process
them normally by showing the standard log dialog.</p>
</description>
<parents>
<classref name="wxLogPassThrough"/>

</parents>
<includes>
<header name="wx/log.h"/></includes>
<seealso>

<ref target="wxlogtextctrl">wxLogTextCtrl</ref>

</seealso>
<members>
<member class="wxLogWindow" name="wxLogWindow"><function type="" name="wxLogWindow"><parameters><parameter type="wxFrame " name="&#42;parent"></parameter><parameter type="const wxChar " name="&#42;title"></parameter><parameter type="bool " name="show" value="true"><tt> true</tt> to show the frame initially (default), otherwise
<ref target="wxlogwindowshow">wxLogWindow::Show</ref> must be called later.</parameter><parameter type="bool " name="passToOld" value="true"><tt> true</tt> to process the log messages normally in addition to
logging them in the log frame (default), <tt> false</tt> to only log them in the
log frame.</parameter></parameters><description>

Creates the log frame window and starts collecting the messages in it.











</description></function></member>
<member class="wxLogWindow" name="Show"><function type="void" name="Show"><parameters><parameter type="bool " name="show" value="true"></parameter></parameters><description>

Shows or hides the frame.

</description></function></member>
<member class="wxLogWindow" name="GetFrame"><function type="wxFrame &#42;" name="GetFrame" suffix="const"><description>

Returns the associated log frame window. This may be used to position or resize
it but use <ref target="wxlogwindowshow">wxLogWindow::Show</ref> to show or hide it.

</description></function></member>
<member class="wxLogWindow" name="OnFrameCreate"><function type="virtual void" name="OnFrameCreate"><parameters><parameter type="wxFrame " name="&#42;frame"></parameter></parameters><description>

Called immediately after the log frame creation allowing for
any extra initializations.

</description></function></member>
<member class="wxLogWindow" name="OnFrameClose"><function type="virtual void" name="OnFrameClose"><parameters><parameter type="wxFrame " name="&#42;frame"></parameter></parameters><seealso>

<ref target="wxlogwindowonframedelete">wxLogWindow::OnFrameDelete</ref>

</seealso><description>

Called if the user closes the window interactively, will not be
called if it is destroyed for another reason (such as when program
exits).

Return <tt> true</tt> from here to allow the frame to close, <tt> false</tt> to
prevent this from happening.

</description></function></member>
<member class="wxLogWindow" name="OnFrameDelete"><function type="virtual void" name="OnFrameDelete"><parameters><parameter type="wxFrame " name="&#42;frame"></parameter></parameters><description>

Called right before the log frame is going to be deleted: will
always be called unlike <ref target="wxlogwindowonframeclose">OnFrameClose()</ref>.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxLongLong">
<description>
<p class="classdesc">
This class represents a signed 64 bit long number. It is implemented using the
native 64 bit type where available (machines with 64 bit longs or compilers
which have (an analog of) <i> long long</i> type) and uses the emulation code in
the other cases which ensures that it is the most efficient solution for
working with 64 bit integers independently of the architecture.</p><p class="classdesc">wxLongLong defines all usual arithmetic operations such as addition,
subtraction, bitwise shifts and logical operations as well as multiplication
and division (not yet for the machines without native <i> long long</i>). It
also has operators for implicit construction from and conversion to the native 
<i> long long</i> type if it exists and <i> long</i>.</p><p class="classdesc">You would usually use this type in exactly the same manner as any other
(built-in) arithmetic type. Note that wxLongLong is a signed type, if you
want unsigned values use wxULongLong which has exactly the same API as
wxLongLong except when explicitly mentioned otherwise.</p><p class="classdesc">If a native (i.e. supported directly by the compiler) 64 bit integer type was
found to exist, <i> wxLongLong_t</i> macro will be defined to correspond to it.
Also, in this case only, two additional macros will be defined: 
<ref target="wxlonglongfmtspec">wxLongLongFmtSpec</ref> for printing 64 bit integers
using the standard <tt> printf()</tt> function (but see also 
<ref target="wxlonglongtostring">ToString()</ref> for a more portable solution) and
<ref target="wxll">wxLL</ref> for defining 64 bit integer compile-time constants.</p>
</description>
<parents></parents>
<includes>
<header name="wx/longlong.h"/></includes>
<members>
<member class="wxLongLong" name="wxLongLong"><function type="" name="wxLongLong"><description>

Default constructor initializes the object to 0.

</description></function></member>
<member class="wxLongLong" name="wxLongLong"><function type="" name="wxLongLong"><parameters><parameter type="wxLongLong_t " name="ll"></parameter></parameters><description>

Constructor from native long long (only for compilers supporting it).

</description></function></member>
<member class="wxLongLong" name="wxLongLong"><function type="" name="wxLongLong"><parameters><parameter type="long " name="hi"></parameter><parameter type="unsigned long " name="lo"></parameter></parameters><description>

Constructor from 2 longs: the high and low part are combined into one
wxLongLong.

</description></function></member>
<member class="wxLongLong" name="operator="><function type="wxLongLong&amp; operator" name="operator="><parameters><parameter type="wxLongLong_t " name="ll"></parameter></parameters><description>

Assignment operator from native long long (only for compilers supporting it).

</description></function></member>
<member class="wxLongLong" name="Abs"><function type="wxLongLong" name="Abs" suffix="const"><description>

</description></function>
<function type="wxLongLong&amp;" name="Abs"><description>

Returns an absolute value of wxLongLong - either making a copy (const version)
or modifying it in place (the second one).  Not in wxULongLong.

</description></function></member>
<member class="wxLongLong" name="Assign"><function type="wxLongLong&amp;" name="Assign"><parameters><parameter type="double " name="d"></parameter></parameters><description>

This allows to convert a double value to wxLongLong type. Such conversion is
not always possible in which case the result will be silently truncated in a
platform-dependent way.  Not in wxULongLong.

</description></function></member>
<member class="wxLongLong" name="GetHi"><function type="long" name="GetHi" suffix="const"><description>

Returns the high 32 bits of 64 bit integer.

</description></function></member>
<member class="wxLongLong" name="GetLo"><function type="unsigned long" name="GetLo" suffix="const"><description>

Returns the low 32 bits of 64 bit integer.

</description></function></member>
<member class="wxLongLong" name="GetValue"><function type="wxLongLong_t" name="GetValue" suffix="const"><description>

Convert to native long long (only for compilers supporting it)

</description></function></member>
<member class="wxLongLong" name="ToLong"><function type="long" name="ToLong" suffix="const"><description>

Truncate wxLongLong to long. If the conversion loses data (i.e. the wxLongLong
value is outside the range of built-in long type), an assert will be triggered
in debug mode.

</description></function></member>
<member class="wxLongLong" name="ToString"><function type="wxString" name="ToString" suffix="const"><description>

Returns the string representation of a wxLongLong.

</description></function></member>
<member class="wxLongLong" name="operator$+$"><function type="wxLongLong" name="operator$+$" suffix="const"><parameters><parameter type="const wxLongLong&amp; " name="ll"></parameter></parameters><description>

Adds 2 wxLongLongs together and returns the result.

</description></function></member>
<member class="wxLongLong" name="operator$+=$"><function type="wxLongLong&amp;" name="operator+"><parameters><parameter type="const wxLongLong&amp; " name="ll"></parameter></parameters><description>

Add another wxLongLong to this one.

</description></function></member>
<member class="wxLongLong" name="operator$++$"><function type="wxLongLong&amp;" name="operator$++$"><description>

</description></function>
<function type="wxLongLong&amp;" name="operator$++$"><parameters><parameter type="int" name=""></parameter></parameters><description>

Pre/post increment operator.

</description></function></member>
<member class="wxLongLong" name="operator$-$"><function type="wxLongLong" name="operator$-$" suffix="const"><description>

Returns the value of this wxLongLong with opposite sign.  Not in wxULongLong.

</description></function></member>
<member class="wxLongLong" name="operator$-$"><function type="wxLongLong" name="operator$-$" suffix="const"><parameters><parameter type="const wxLongLong&amp; " name="ll"></parameter></parameters><description>

Substracts 2 wxLongLongs and returns the result.

</description></function></member>
<member class="wxLongLong" name="operator$-=$"><function type="wxLongLong&amp;" name="operator-"><parameters><parameter type="const wxLongLong&amp; " name="ll"></parameter></parameters><description>

Substracts another wxLongLong from this one.

</description></function></member>
<member class="wxLongLong" name="operator$--$"><function type="wxLongLong&amp;" name="operator$--$"><description>

</description></function>
<function type="wxLongLong&amp;" name="operator$--$"><parameters><parameter type="int" name=""></parameter></parameters><description>

Pre/post decrement operator.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMBConv">
<description>
<p class="classdesc">
This class is the base class of a hierarchy of classes capable of converting
text strings between multibyte (SBCS or DBCS) encodings and Unicode. It is itself
a wrapper around the standard libc mbstowcs() and wcstombs() routines, and has
one predefined instance, <b> wxConvLibc</b>.</p>
</description>
<parents></parents>
<includes>
<header name="wx/strconv.h"/></includes>
<seealso>

<ref target="wxcsconv">wxCSConv</ref>
<ref target="wxencodingconverter">wxEncodingConverter</ref>
<ref target="mbconvclasses">wxMBConv classes overview</ref>

</seealso>
<members>
<member class="wxMBConv" name="wxMBConv"><function type="" name="wxMBConv"><description>

Constructor.

</description></function></member>
<member class="wxMBConv" name="MB2WC"><function type="virtual size_t" name="MB2WC" suffix="const"><parameters><parameter type="wchar_t&#42; " name="buf">the output buffer, may be <tt> NULL</tt> if the caller is only
interested in the length of the resulting string</parameter><parameter type="const char&#42; " name="psz">the <tt> NUL</tt>-terminated input string, cannot be <tt> NULL</tt></parameter><parameter type="size_t " name="n">the size of the output buffer, ignored if <i> buf</i> is <tt> NULL</tt></parameter></parameters><returnvalue>

The length of the converted string.

</returnvalue><description>

Converts from a string <i> psz</i> in multibyte encoding to Unicode putting the
output into the buffer <i> buf</i> of the size <i> n</i> (in wide characters, not
bytes). If <i> buf</i> is <tt> NULL</tt>, nothing is written to it but the length of
the string which would result from the conversion is calculated and returned.
Note that this is the length and not size, i.e. the returned value does 
<b> not</b> include the trailing NUL. But when the function is called with a
non-<tt> NULL</tt> buffer, the <i> n</i> parameter should be the size of the buffer
and so it <b> should</b> take into account the trailing NUL.









</description></function></member>
<member class="wxMBConv" name="WC2MB"><function type="virtual size_t" name="WC2MB" suffix="const"><parameters><parameter type="char&#42; " name="buf"></parameter><parameter type="const wchar_t&#42; " name="psz"></parameter><parameter type="size_t " name="n"></parameter></parameters><description>

Converts from Unicode to multibyte encoding. The semantics of this function
(including the return value meaning) is the same as for 
<ref target="wxmbconvmb2wc">MB2WC</ref>.


</description></function></member>
<member class="wxMBConv" name="cMB2WC"><function type="const wxWCharBuffer" name="cMB2WC" suffix="const"><parameters><parameter type="const char&#42; " name="psz"></parameter></parameters><description>

Converts from multibyte encoding to Unicode by calling MB2WC,
allocating a temporary wxWCharBuffer to hold the result.

</description></function></member>
<member class="wxMBConv" name="cWC2MB"><function type="const wxCharBuffer" name="cWC2MB" suffix="const"><parameters><parameter type="const wchar_t&#42; " name="psz"></parameter></parameters><description>

Converts from Unicode to multibyte encoding by calling WC2MB,
allocating a temporary wxCharBuffer to hold the result.

</description></function></member>
<member class="wxMBConv" name="cMB2WX"><function type="const char&#42;" name="cMB2WX" suffix="const"><parameters><parameter type="const char&#42; " name="psz"></parameter></parameters><description>

</description></function>
<function type="const wxWCharBuffer" name="cMB2WX" suffix="const"><parameters><parameter type="const char&#42; " name="psz"></parameter></parameters><description>

Converts from multibyte encoding to the current wxChar type
(which depends on whether wxUSE_UNICODE is set to 1). If wxChar is char,
it returns the parameter unaltered. If wxChar is wchar_t, it returns the
result in a wxWCharBuffer. The macro wxMB2WXbuf is defined as the correct
return type (without const).

</description></function></member>
<member class="wxMBConv" name="cWX2MB"><function type="const char&#42;" name="cWX2MB" suffix="const"><parameters><parameter type="const wxChar&#42; " name="psz"></parameter></parameters><description>

</description></function>
<function type="const wxCharBuffer" name="cWX2MB" suffix="const"><parameters><parameter type="const wxChar&#42; " name="psz"></parameter></parameters><description>

Converts from the current wxChar type to multibyte encoding. If wxChar is char,
it returns the parameter unaltered. If wxChar is wchar_t, it returns the
result in a wxCharBuffer. The macro wxWX2MBbuf is defined as the correct
return type (without const).

</description></function></member>
<member class="wxMBConv" name="cWC2WX"><function type="const wchar_t&#42;" name="cWC2WX" suffix="const"><parameters><parameter type="const wchar_t&#42; " name="psz"></parameter></parameters><description>

</description></function>
<function type="const wxCharBuffer" name="cWC2WX" suffix="const"><parameters><parameter type="const wchar_t&#42; " name="psz"></parameter></parameters><description>

Converts from Unicode to the current wxChar type. If wxChar is wchar_t,
it returns the parameter unaltered. If wxChar is char, it returns the
result in a wxCharBuffer. The macro wxWC2WXbuf is defined as the correct
return type (without const).

</description></function></member>
<member class="wxMBConv" name="cWX2WC"><function type="const wchar_t&#42;" name="cWX2WC" suffix="const"><parameters><parameter type="const wxChar&#42; " name="psz"></parameter></parameters><description>

</description></function>
<function type="const wxWCharBuffer" name="cWX2WC" suffix="const"><parameters><parameter type="const wxChar&#42; " name="psz"></parameter></parameters><description>

Converts from the current wxChar type to Unicode. If wxChar is wchar_t,
it returns the parameter unaltered. If wxChar is char, it returns the
result in a wxWCharBuffer. The macro wxWX2WCbuf is defined as the correct
return type (without const).

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMBConvFile">
<description>
<p class="classdesc">
This class converts file names between filesystem multibyte encoding and
Unicode. It has one predefined instance, <b> wxConvFile</b>.
Since some platforms (e.g. Win32) use Unicode in the filenames,
and others (e.g. Unix) use multibyte encodings, this class should only
be used directly if wxMBFILES is defined to 1. A convenience macro,
wxFNCONV, is defined to wxConvFile.cWX2MB in this case. You could use it
like this:</p><p class="classdesc"><pre>
wxChar &#42;name = wxT(&quot;rawfile.doc&quot;);
FILE &#42;fil = fopen(wxFNCONV(name), &quot;r&quot;);
</pre></p><p class="classdesc">(although it would be better to use wxFopen(name, wxT(&quot;r&quot;)) in this case.)</p>
</description>
<parents>
<classref name="wxMBConv"/>

</parents>
<includes>
<header name="wx/strconv.h"/></includes>
<seealso>

<ref target="mbconvclasses">wxMBConv classes overview</ref>

</seealso>
<members>
<member class="wxMBConvFile" name="MB2WC"><function type="size_t" name="MB2WC" suffix="const"><parameters><parameter type="wchar_t&#42; " name="buf"></parameter><parameter type="const char&#42; " name="psz"></parameter><parameter type="size_t " name="n"></parameter></parameters><description>

Converts from multibyte filename encoding to Unicode. Returns the size of the destination buffer.

</description></function></member>
<member class="wxMBConvFile" name="WC2MB"><function type="size_t" name="WC2MB" suffix="const"><parameters><parameter type="char&#42; " name="buf"></parameter><parameter type="const wchar_t&#42; " name="psz"></parameter><parameter type="size_t " name="n"></parameter></parameters><description>

Converts from Unicode to multibyte filename encoding. Returns the size of the destination buffer.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMBConvUTF7">
<description>
<p class="classdesc">
This class converts between the UTF-7 encoding and Unicode.
It has one predefined instance, <b> wxConvUTF7</b>.
Unfortunately, this class is not quite implemented yet.</p>
</description>
<parents>
<classref name="wxMBConv"/>

</parents>
<includes>
<header name="wx/strconv.h"/></includes>
<seealso>

<ref target="wxmbconvutf8">wxMBConvUTF8</ref>
<ref target="mbconvclasses">wxMBConv classes overview</ref>

</seealso>
<members>
<member class="wxMBConvUTF7" name="MB2WC"><function type="size_t" name="MB2WC" suffix="const"><parameters><parameter type="wchar_t&#42; " name="buf"></parameter><parameter type="const char&#42; " name="psz"></parameter><parameter type="size_t " name="n"></parameter></parameters><description>

Converts from UTF-7 encoding to Unicode. Returns the size of the destination buffer.

</description></function></member>
<member class="wxMBConvUTF7" name="WC2MB"><function type="size_t" name="WC2MB" suffix="const"><parameters><parameter type="char&#42; " name="buf"></parameter><parameter type="const wchar_t&#42; " name="psz"></parameter><parameter type="size_t " name="n"></parameter></parameters><description>

Converts from Unicode to UTF-7 encoding. Returns the size of the destination buffer.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMBConvUTF8">
<description>
<p class="classdesc">
This class converts between the UTF-8 encoding and Unicode.
It has one predefined instance, <b> wxConvUTF8</b>.</p>
</description>
<remarks>

UTF-8 is a compatibility encoding used to encode Unicode text into anything that was
originally written for 8-bit strings, including (but not limited to) filenames, transfer
protocols, and database fields. Notable properties include:

<ul><li> Variable-length encoding able to encode up to 31 bits per character
</li>
<li> ASCII characters (character values under 128) are encoded as plain ASCII
(1 byte per character)
</li>
<li> Null bytes do not occur in the encoding, except when there's an actual Unicode
null character
</li>
<li> Preserves sort ordering for plain 8-bit comparison routines like strcmp()
</li>
<li> High bit patterns disambiguates character boundaries, and makes it easy to
detect whether a string is encoded with UTF-8 or not
</li></ul>

All of these properties make UTF-8 a very favorable solution in any situation
where full Unicode character support is desired while remaining compatible with
code written with only 8-bit extended-ASCII characters in mind.

</remarks>
<parents>
<classref name="wxMBConv"/>

</parents>
<includes>
<header name="wx/strconv.h"/></includes>
<seealso>

<ref target="wxmbconvutf7">wxMBConvUTF7</ref>
<ref target="mbconvclasses">wxMBConv classes overview</ref>

</seealso>
<members>
<member class="wxMBConvUTF8" name="MB2WC"><function type="size_t" name="MB2WC" suffix="const"><parameters><parameter type="wchar_t&#42; " name="buf"></parameter><parameter type="const char&#42; " name="psz"></parameter><parameter type="size_t " name="n"></parameter></parameters><description>

Converts from UTF-8 encoding to Unicode. Returns the size of the destination buffer.

</description></function></member>
<member class="wxMBConvUTF8" name="WC2MB"><function type="size_t" name="WC2MB" suffix="const"><parameters><parameter type="char&#42; " name="buf"></parameter><parameter type="const wchar_t&#42; " name="psz"></parameter><parameter type="size_t " name="n"></parameter></parameters><description>

Converts from Unicode to UTF-8 encoding. Returns the size of the destination buffer.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMDIChildFrame">
<description>
<p class="classdesc">
An MDI child frame is a frame that can only exist on a <ref target="wxmdiclientwindow">wxMDIClientWindow</ref>,
which is itself a child of <ref target="wxmdiparentframe">wxMDIParentFrame</ref>.</p>
</description>
<remarks>

Although internally an MDI child frame is a child of the MDI client window, in wxWindows
you create it as a child of <ref target="wxmdiparentframe">wxMDIParentFrame</ref>. You can usually
forget that the client window exists.

MDI child frames are clipped to the area of the MDI client window, and may be iconized
on the client window.

You can associate a menubar with a child frame as usual, although an MDI child doesn't display
its menubar under its own title bar. The MDI parent frame's menubar will be changed to
reflect the currently active child frame. If there are currently no children, the parent
frame's own menubar will be displayed.

</remarks>
<parents>
<classref name="wxFrame"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/mdi.h"/></includes>
<windowstyles>
<style name="wxCAPTION">Puts a caption on the frame.</style><style name="wxDEFAULT_FRAME_STYLE">Defined as {\bf wxMINIMIZE_BOX \pipe wxMAXIMIZE_BOX \pipe wxTHICK_FRAME \pipe wxSYSTEM_MENU \pipe wxCAPTION</style><style name="wxICONIZE">Display the frame iconized (minimized) (Windows only).</style><style name="wxMAXIMIZE">Displays the frame maximized (Windows only).</style><style name="wxMAXIMIZE_BOX">Displays a maximize box on the frame (Windows and Motif only).</style><style name="wxMINIMIZE">Identical to {\bf wxICONIZE</style><style name="wxMINIMIZE_BOX">Displays a minimize box on the frame (Windows and Motif only).</style><style name="wxRESIZE_BORDER">Displays a resizeable border around the window (Motif only;
for Windows, it is implicit in wxTHICK_FRAME).</style><style name="wxSTAY_ON_TOP">Stay on top of other windows (Windows only).</style><style name="wxSYSTEM_MENU">Displays a system menu (Windows and Motif only).</style><style name="wxTHICK_FRAME">Displays a thick frame around the window (Windows and Motif only).</style></windowstyles>
<seealso>

<ref target="wxmdiclientwindow">wxMDIClientWindow</ref><ref target="wxmdiparentframe">wxMDIParentFrame</ref>,
<ref target="wxframe">wxFrame</ref>

</seealso>
<members>
<member class="wxMDIChildFrame" name="wxMDIChildFrame"><function type="" name="wxMDIChildFrame"><description>

Default constructor.

</description></function>
<function type="" name="wxMDIChildFrame"><parameters><parameter type="wxMDIParentFrame&#42; " name="parent">The window parent. This should not be NULL.</parameter><parameter type="wxWindowID " name="id">The window identifier. It may take a value of -1 to indicate a default value.</parameter><parameter type="const wxString&amp; " name="title">The caption to be displayed on the frame's title bar.</parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition">The window position. A value of (-1, -1) indicates a default position, chosen by
either the windowing system or wxWindows, depending on platform.</parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize">The window size. A value of (-1, -1) indicates a default size, chosen by
either the windowing system or wxWindows, depending on platform.</parameter><parameter type="long" name="style" value="wxDEFAULT_FRAME_STYLE">The window style. See <ref target="wxmdichildframe">wxMDIChildFrame</ref>.</parameter><parameter type="const wxString&amp; " name="name" value="``frame&quot;">The name of the window. This parameter is used to associate a name with the item,
allowing the application user to set Motif resource values for
individual windows.</parameter></parameters><seealso>

<ref target="wxmdichildframecreate">wxMDIChildFrame::Create</ref>

</seealso><remarks>

None.

</remarks><description>

Constructor, creating the window.

















</description></function></member>
<member class="wxMDIChildFrame" name="~wxMDIChildFrame"><function type="" name="~wxMDIChildFrame"><description>

Destructor. Destroys all child windows and menu bar if present.

</description></function></member>
<member class="wxMDIChildFrame" name="Activate"><function type="void" name="Activate"><seealso>

<ref target="wxmdichildframemaximize">wxMDIChildFrame::Maximize</ref>,
<ref target="wxmdichildframerestore">wxMDIChildFrame::Restore</ref>

</seealso><description>

Activates this MDI child frame.

</description></function></member>
<member class="wxMDIChildFrame" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxString&amp; " name="title"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="wxDEFAULT_FRAME_STYLE"></parameter><parameter type="const wxString&amp; " name="name" value="``frame&quot;"></parameter></parameters><description>

Used in two-step frame construction. See <ref target="wxmdichildframeconstr">wxMDIChildFrame::wxMDIChildFrame</ref>
for further details.

</description></function></member>
<member class="wxMDIChildFrame" name="Maximize"><function type="void" name="Maximize"><seealso>

<ref target="wxmdichildframeactivate">wxMDIChildFrame::Activate</ref>,
<ref target="wxmdichildframerestore">wxMDIChildFrame::Restore</ref>

</seealso><description>

Maximizes this MDI child frame.

</description></function></member>
<member class="wxMDIChildFrame" name="Restore"><function type="void" name="Restore"><seealso>

<ref target="wxmdichildframeactivate">wxMDIChildFrame::Activate</ref>,
<ref target="wxmdichildframemaximize">wxMDIChildFrame::Maximize</ref>
</seealso><description>

Restores this MDI child frame (unmaximizes).

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="P"/><platform name="os2" status="N"/></supported>
</class><class name="wxMDIClientWindow">
<description>
<p class="classdesc">
An MDI client window is a child of <ref target="wxmdiparentframe">wxMDIParentFrame</ref>, and manages zero or
more <ref target="wxmdichildframe">wxMDIChildFrame</ref> objects.</p>
</description>
<remarks>

The client window is the area where MDI child windows exist. It doesn't have to cover the whole
parent frame; other windows such as toolbars and a help window might coexist with it.
There can be scrollbars on a client window, which are controlled by the parent window style.

The <b> wxMDIClientWindow</b> class is usually adequate without further derivation, and it is created
automatically when the MDI parent frame is created. If the application needs to derive a new class,
the function <ref target="wxmdiparentframeoncreateclient">wxMDIParentFrame::OnCreateClient</ref> must be
overridden in order to give an opportunity to use a different class of client window.

Under Windows 95, the client window will automatically have a sunken border style when
the active child is not maximized, and no border style when a child is maximized.

</remarks>
<parents>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/mdi.h"/></includes>
<seealso>

<ref target="wxmdichildframe">wxMDIChildFrame</ref><ref target="wxmdiparentframe">wxMDIParentFrame</ref>,
<ref target="wxframe">wxFrame</ref>

</seealso>
<members>
<member class="wxMDIClientWindow" name="wxMDIClientWindow"><function type="" name="wxMDIClientWindow"><description>

Default constructor.

</description></function>
<function type="" name="wxMDIClientWindow"><parameters><parameter type="wxMDIParentFrame&#42; " name="parent">The window parent.</parameter><parameter type="long" name="style" value="0">The window style. Currently unused.</parameter></parameters><seealso>

<ref target="wxmdiparentframeconstr">wxMDIParentFrame::wxMDIParentFrame</ref>,
<ref target="wxmdiparentframeoncreateclient">wxMDIParentFrame::OnCreateClient</ref>

</seealso><remarks>

The second style of constructor is called within <ref target="wxmdiparentframeoncreateclient">wxMDIParentFrame::OnCreateClient</ref>.

</remarks><description>

Constructor, creating the window.







</description></function></member>
<member class="wxMDIClientWindow" name="~wxMDIClientWindow"><function type="" name="~wxMDIClientWindow"><description>

Destructor.

</description></function></member>
<member class="wxMDIClientWindow" name="CreateClient"><function type="bool" name="CreateClient"><parameters><parameter type="wxMDIParentFrame&#42; " name="parent"></parameter><parameter type="long" name="style" value="0"></parameter></parameters><description>

Used in two-step frame construction. See <ref target="wxmdiclientwindowconstr">wxMDIClientWindow::wxMDIClientWindow</ref>
for further details.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="P"/><platform name="os2" status="N"/></supported>
</class><class name="wxMDIParentFrame">
<description>
<p class="classdesc">
An MDI (Multiple Document Interface) parent frame is a window which can contain
MDI child frames in its own `desktop'. It is a convenient way to avoid window clutter,
and is used in many popular Windows applications, such as Microsoft Word(TM).</p>
</description>
<remarks>

There may be multiple MDI parent frames in a single application, but this probably only makes sense
within programming development environments.

Child frames may be either <ref target="wxmdichildframe">wxMDIChildFrame</ref>, or <ref target="wxframe">wxFrame</ref>.

An MDI parent frame always has a <ref target="wxmdiclientwindow">wxMDIClientWindow</ref> associated with it, which
is the parent for MDI client frames.
This client window may be resized to accommodate non-MDI windows, as seen in Microsoft Visual C++ (TM) and
Microsoft Publisher (TM), where a documentation window is placed to one side of the workspace.

MDI remains popular despite dire warnings from Microsoft itself that MDI is an obsolete
user interface style.

The implementation is native in Windows, and simulated under Motif. Under Motif,
the child window frames will often have a different appearance from other frames
because the window decorations are simulated.

</remarks>
<parents>
<classref name="wxFrame"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/mdi.h"/></includes>
<windowstyles>
<style name="wxCAPTION">Puts a caption on the frame.</style><style name="wxDEFAULT_FRAME_STYLE">Defined as {\bf wxMINIMIZE_BOX \pipe wxMAXIMIZE_BOX \pipe wxTHICK_FRAME \pipe wxSYSTEM_MENU \pipe wxCAPTION</style><style name="wxHSCROLL">Displays a horizontal scrollbar in the {\it client window</style><style name="wxICONIZE">Display the frame iconized (minimized) (Windows only).</style><style name="wxMAXIMIZE">Displays the frame maximized (Windows only).</style><style name="wxMAXIMIZE_BOX">Displays a maximize box on the frame (Windows and Motif only).</style><style name="wxMINIMIZE">Identical to {\bf wxICONIZE</style><style name="wxMINIMIZE_BOX">Displays a minimize box on the frame (Windows and Motif only).</style><style name="wxRESIZE_BORDER">Displays a resizeable border around the window (Motif only;
for Windows, it is implicit in wxTHICK_FRAME).</style><style name="wxSTAY_ON_TOP">Stay on top of other windows (Windows only).</style><style name="wxSYSTEM_MENU">Displays a system menu (Windows and Motif only).</style><style name="wxTHICK_FRAME">Displays a thick frame around the window (Windows and Motif only).</style><style name="wxVSCROLL">Displays a vertical scrollbar in the {\it client window</style><style name="wxFRAME_NO_WINDOW_MENU">Under Windows, removes the Window menu that is normally
added automatically.</style></windowstyles>
<seealso>

<ref target="wxmdichildframe">wxMDIChildFrame</ref><ref target="wxmdiclientwindow">wxMDIClientWindow</ref>,
<ref target="wxframe">wxFrame</ref><ref target="wxdialog">wxDialog</ref>

</seealso>
<members>
<member class="wxMDIParentFrame" name="wxMDIParentFrame"><function type="" name="wxMDIParentFrame"><description>

Default constructor.

</description></function>
<function type="" name="wxMDIParentFrame"><parameters><parameter type="wxWindow&#42; " name="parent">The window parent. This should be NULL.</parameter><parameter type="wxWindowID " name="id">The window identifier. It may take a value of -1 to indicate a default value.</parameter><parameter type="const wxString&amp; " name="title">The caption to be displayed on the frame's title bar.</parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition">The window position. A value of (-1, -1) indicates a default position, chosen by
either the windowing system or wxWindows, depending on platform.</parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize">The window size. A value of (-1, -1) indicates a default size, chosen by
either the windowing system or wxWindows, depending on platform.</parameter><parameter type="long" name="style" value="wxDEFAULT_FRAME_STYLE">The window style. See <ref target="wxmdiparentframe">wxMDIParentFrame</ref>.</parameter><parameter type="const wxString&amp; " name="name" value="``frame&quot;">The name of the window. This parameter is used to associate a name with the item,
allowing the application user to set Motif resource values for
individual windows.</parameter></parameters><seealso>

<ref target="wxmdiparentframecreate">wxMDIParentFrame::Create</ref>,
<ref target="wxmdiparentframeoncreateclient">wxMDIParentFrame::OnCreateClient</ref>

</seealso><remarks>

During the construction of the frame, the client window will be created. To use a different class
from <ref target="wxmdiclientwindow">wxMDIClientWindow</ref>, override
<ref target="wxmdiparentframeoncreateclient">wxMDIParentFrame::OnCreateClient</ref>.

Under Windows 95, the client window will automatically have a sunken border style when
the active child is not maximized, and no border style when a child is maximized.

</remarks><description>

Constructor, creating the window.

















</description></function></member>
<member class="wxMDIParentFrame" name="~wxMDIParentFrame"><function type="" name="~wxMDIParentFrame"><description>

Destructor. Destroys all child windows and menu bar if present.

</description></function></member>
<member class="wxMDIParentFrame" name="ActivateNext"><function type="void" name="ActivateNext"><seealso>

<ref target="wxmdiparentframeactivateprevious">wxMDIParentFrame::ActivatePrevious</ref>

</seealso><description>

Activates the MDI child following the currently active one.

</description></function></member>
<member class="wxMDIParentFrame" name="ActivatePrevious"><function type="void" name="ActivatePrevious"><seealso>

<ref target="wxmdiparentframeactivatenext">wxMDIParentFrame::ActivateNext</ref>


</seealso><description>

Activates the MDI child preceding the currently active one.

</description></function></member>
<member class="wxMDIParentFrame" name="ArrangeIcons"><function type="void" name="ArrangeIcons"><seealso>

<ref target="wxmdiparentframecascade">wxMDIParentFrame::Cascade</ref>,
<ref target="wxmdiparentframetile">wxMDIParentFrame::Tile</ref>

</seealso><description>

Arranges any iconized (minimized) MDI child windows.

</description></function></member>
<member class="wxMDIParentFrame" name="Cascade"><function type="void" name="Cascade"><seealso>

<ref target="wxmdiparentframetile">wxMDIParentFrame::Tile</ref>,
<ref target="wxmdiparentframearrangeicons">wxMDIParentFrame::ArrangeIcons</ref>

</seealso><description>

Arranges the MDI child windows in a cascade.

</description></function></member>
<member class="wxMDIParentFrame" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxString&amp; " name="title"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="wxDEFAULT_FRAME_STYLE"></parameter><parameter type="const wxString&amp; " name="name" value="``frame&quot;"></parameter></parameters><description>

Used in two-step frame construction. See <ref target="wxmdiparentframeconstr">wxMDIParentFrame::wxMDIParentFrame</ref>
for further details.

</description></function></member>
<member class="wxMDIParentFrame" name="GetClientSize"><function type="virtual void" name="GetClientSize" suffix="const"><parameters><parameter type="int&#42; " name="width">Receives the client width in pixels.</parameter><parameter type="int&#42; " name="height">Receives the client height in pixels.</parameter></parameters><seealso>

<ref target="wxmdiparentframegettoolbar">wxMDIParentFrame::GetToolBar</ref>,
<ref target="wxmdiparentframesettoolbar">wxMDIParentFrame::SetToolBar</ref>,
<ref target="wxmdiclientwindow">wxMDIClientWindow</ref>


\pythonnote{The wxPython version of this method takes no arguments and
returns a tuple containing width and height.}

</seealso><remarks>

The client area is the area which may be drawn on by the programmer, excluding title bar, border, status bar,
and toolbar if present.

If you wish to manage your own toolbar (or perhaps you have more than one),
provide an <b> OnSize</b> event handler. Call <b> GetClientSize</b> to
find how much space there is for your windows and don't forget to set the size and position
of the MDI client window as well as your toolbar and other windows (but not the status bar).

If you have set a toolbar with <ref target="wxmdiparentframesettoolbar">wxMDIParentFrame::SetToolbar</ref>,
the client size returned will have subtracted the toolbar height. However, the available positions
for the client window and other windows of the frame do not start at zero - you must add the toolbar height.

The position and size of the status bar and toolbar (if known to the frame) are always managed
by <b> wxMDIParentFrame</b>, regardless of what behaviour is defined in your <b> OnSize</b> event handler.
However, the client window position and size are always set in <b> OnSize</b>, so if you override this
event handler, make sure you deal with the client window.

You do not have to manage the size and position of MDI child windows, since they are managed
automatically by the client window.

</remarks><description>

This gets the size of the frame `client area' in pixels.







</description></function></member>
<member class="wxMDIParentFrame" name="GetActiveChild"><function type="wxMDIChildFrame&#42;" name="GetActiveChild" suffix="const"><description>

Returns a pointer to the active MDI child, if there is one.

</description></function></member>
<member class="wxMDIParentFrame" name="GetClientWindow"><function type="wxMDIClientWindow&#42;" name="GetClientWindow" suffix="const"><seealso>

<ref target="wxmdiparentframeoncreateclient">wxMDIParentFrame::OnCreateClient</ref>

</seealso><description>

Returns a pointer to the client window.

</description></function></member>
<member class="wxMDIParentFrame" name="GetToolBar"><function type="virtual wxWindow&#42;" name="GetToolBar" suffix="const"><seealso>

<ref target="wxmdiparentframesettoolbar">wxMDIParentFrame::SetToolBar</ref>

</seealso><description>

Returns the window being used as the toolbar for this frame.

</description></function></member>
<member class="wxMDIParentFrame" name="GetWindowMenu"><function type="wxMenu&#42;" name="GetWindowMenu" suffix="const"><description>

Returns the current Window menu (added by wxWindows to the menubar). This function
is available under Windows only.

</description></function></member>
<member class="wxMDIParentFrame" name="OnCreateClient"><function type="virtual wxMDIClientWindow&#42;" name="OnCreateClient"><seealso>

<ref target="wxmdiparentframegetclientwindow">wxMDIParentFrame::GetClientWindow</ref>,
<ref target="wxmdiclientwindow">wxMDIClientWindow</ref>

</seealso><remarks>

You might wish to derive from <ref target="wxmdiclientwindow">wxMDIClientWindow</ref> in order
to implement different erase behaviour, for example, such as painting a bitmap
on the background.

Note that it is probably impossible to have a client window that scrolls as well as painting
a bitmap or pattern, since in <b> OnScroll</b>, the scrollbar positions always return zero.
(Solutions to: <tt> julian.smart@btopenworld.com</tt>).

</remarks><description>

Override this to return a different kind of client window. If you override this function,
you must create your parent frame in two stages, or your function will never be called,
due to the way C++ treats virtual functions called from constructors. For example:

<pre>
  frame = new MyParentFrame;
  frame-&gt;Create(parent, myParentFrameId, wxT(&quot;My Parent Frame&quot;));
</pre>

</description></function></member>
<member class="wxMDIParentFrame" name="SetToolBar"><function type="virtual void" name="SetToolBar"><parameters><parameter type="wxWindow&#42;" name=" toolbar"></parameter></parameters><seealso>

<ref target="wxmdiparentframegettoolbar">wxMDIParentFrame::GetToolBar</ref>,
<ref target="wxmdiparentframegetclientsize">wxMDIParentFrame::GetClientSize</ref>

</seealso><remarks>

When the frame is resized, the toolbar is resized to be the width of
the frame client area, and the toolbar height is kept the same.

The parent of the toolbar must be this frame.

If you wish to manage your own toolbar (or perhaps you have more than one),
don't call this function, and instead manage your subwindows and the MDI client window by
providing an <b> OnSize</b> event handler. Call <ref target="wxmdiparentframegetclientsize">wxMDIParentFrame::GetClientSize</ref> to
find how much space there is for your windows.

Note that SDI (normal) frames and MDI child windows must always have their
toolbars managed by the application.

</remarks><description>

Sets the window to be used as a toolbar for this
MDI parent window. It saves the application having to manage the positioning
of the toolbar MDI client window.





</description></function></member>
<member class="wxMDIParentFrame" name="SetWindowMenu"><function type="void" name="SetWindowMenu"><parameters><parameter type="wxMenu&#42;" name=" menu"></parameter></parameters><description>

Call this to change the current Window menu. Ownership of the menu object passes to
the frame when you call this function.

This call is available under Windows only.

To remove the window completely, use the wxFRAME_NO_WINDOW_MENU window style.

</description></function></member>
<member class="wxMDIParentFrame" name="Tile"><function type="void" name="Tile"><seealso>

<ref target="wxmdiparentframecascade">wxMDIParentFrame::Cascade</ref>,
<ref target="wxmdiparentframearrangeicons">wxMDIParentFrame::ArrangeIcons</ref>


</seealso><description>

Tiles the MDI child windows.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="P"/><platform name="os2" status="N"/></supported>
</class><class name="wxMask">
<description>
<p class="classdesc">
This class encapsulates a monochrome mask bitmap, where the masked area is black and
the unmasked area is white. When associated with a bitmap and drawn in a device context,
the unmasked area of the bitmap will be drawn, and the masked area will not be drawn.</p>
</description>
<remarks>

A mask may be associated with a <ref target="wxbitmap">wxBitmap</ref>. It is used in <ref target="wxdcblit">wxDC::Blit</ref> when
the source device context is a <ref target="wxmemorydc">wxMemoryDC</ref> with wxBitmap selected into it that
contains a mask.

</remarks>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/bitmap.h"/></includes>
<seealso>

<ref target="wxbitmap">wxBitmap</ref><ref target="wxdcblit">wxDC::Blit</ref><ref target="wxmemorydc">wxMemoryDC</ref>

</seealso>
<members>
<member class="wxMask" name="wxMask"><function type="" name="wxMask"><description>

Default constructor.

</description></function>
<function type="" name="wxMask"><parameters><parameter type="const \helpref{wxBitmap" name="wxbitmap"></parameter></parameters><description>

Constructs a mask from a monochrome bitmap.

\pythonnote{This is the default constructor for wxMask in wxPython.}

</description></function>
<function type="" name="wxMask"><parameters><parameter type="const \helpref{wxBitmap" name="wxbitmap"></parameter><parameter type="const \helpref{wxColour" name="wxcolour"></parameter></parameters><description>

Constructs a mask from a bitmap and a colour that indicates the background.

\pythonnote{wxPython has an alternate wxMask constructor matching this
form called <tt> wxMaskColour</tt>.}

</description></function>
<function type="" name="wxMask"><parameters><parameter type="const wxBitmap&amp; " name="bitmap">A valid bitmap.</parameter><parameter type="int" name=" index"></parameter></parameters><description>

Constructs a mask from a bitmap and a palette index that indicates the background. Not
yet implemented for GTK.









</description></function></member>
<member class="wxMask" name="~wxMask"><function type="" name="~wxMask"><description>

Destroys the wxMask object and the underlying bitmap data.

</description></function></member>
<member class="wxMask" name="Create"><function type="bool" name="Create"><parameters><parameter type="const wxBitmap&amp; " name="bitmap">A valid bitmap.</parameter></parameters><description>

Constructs a mask from a monochrome bitmap.

</description></function>
<function type="bool" name="Create"><parameters><parameter type="const wxBitmap&amp; " name="bitmap">A valid bitmap.</parameter><parameter type="const wxColour&amp; " name="colour">A colour specifying the transparency RGB values.</parameter></parameters><description>

Constructs a mask from a bitmap and a colour that indicates the background.

</description></function>
<function type="bool" name="Create"><parameters><parameter type="const wxBitmap&amp; " name="bitmap">A valid bitmap.</parameter><parameter type="int" name=" index"></parameter></parameters><description>

Constructs a mask from a bitmap and a palette index that indicates the background. Not
yet implemented for GTK.










</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMaximizeEvent">
<description>
<p class="classdesc">
An event being sent when the frame is maximized (minimized) or restored.</p>
</description>
<parents>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_MAXIMIZE(func)">Process a wxEVT_MAXIMIZE event.</event></events>
<seealso>

<ref target="eventhandlingoverview">Event handling overview</ref>,
<ref target="wxframemaximize">wxFrame::Maximize</ref>,
<ref target="wxframeismaximized">wxFrame::IsMaximized</ref>

</seealso>
<members>
<member class="wxMaximizeEvent" name="wxMaximizeEvent"><function type="" name="wxMaximizeEvent"><parameters><parameter type="int " name="id" value="0"></parameter></parameters><description>

Constructor.

</description></function></member></members>
<supported>
<platform name="gtk" status="N"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="N"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMemoryDC">
<description>
<p class="classdesc">
A memory device context provides a means to draw graphics onto a bitmap. When
drawing in to a mono-bitmap, using <tt> wxWHITE</tt>, <tt> wxWHITE_PEN</tt> and
<tt> wxWHITE_BRUSH</tt>
will draw the background colour (i.e. 0) whereas all other colours will draw the
foreground colour (i.e. 1).</p>
</description>
<remarks>

A bitmap must be selected into the new memory DC before it may be used
for anything.  Typical usage is as follows:

<pre>
  // Create a memory DC
  wxMemoryDC temp_dc;
  temp_dc.SelectObject(test_bitmap);

  // We can now draw into the memory DC...
  // Copy from this DC to another DC.
  old_dc.Blit(250, 50, BITMAP_WIDTH, BITMAP_HEIGHT, temp_dc, 0, 0);
</pre>

Note that the memory DC <i> must</i> be deleted (or the bitmap selected out of it) before a bitmap
can be reselected into another memory DC.

</remarks>
<parents>
<classref name="wxDC"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/dcmemory.h"/></includes>
<seealso>

<ref target="wxbitmap">wxBitmap</ref><ref target="wxdc">wxDC</ref>

</seealso>
<members>
<member class="wxMemoryDC" name="wxMemoryDC"><function type="" name="wxMemoryDC"><description>

Constructs a new memory device context.

Use the <i> Ok</i> member to test whether the constructor was successful
in creating a usable device context. Don't forget to select a bitmap
into the DC before drawing on it.

</description></function></member>
<member class="wxMemoryDC" name="SelectObject"><function type="" name="SelectObject"><parameters><parameter type="const wxBitmap&amp; " name="bitmap"></parameter></parameters><description>

Selects the given bitmap into the device context, to use as the memory
bitmap. Selecting the bitmap into a memory DC allows you to draw into
the DC (and therefore the bitmap) and also to use <b> Blit</b> to copy
the bitmap to a window. For this purpose, you may find <ref target="wxdcdrawicon">wxDC::DrawIcon</ref>
easier to use instead.

If the argument is wxNullBitmap (or some other uninitialised wxBitmap) the current bitmap is selected out of the device
context, and the original bitmap restored, allowing the current bitmap to
be destroyed safely.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMemoryFSHandler">
<description>
<p class="classdesc">
This <ref target="wxfilesystem">wxFileSystem</ref> handler can store arbitrary 
data in memory stream and make them accessible via URL. It is particularly
suitable for storing bitmaps from resources or included XPM files so that
they can be used with wxHTML.</p><p class="classdesc">Filenames are prefixed with &quot;memory:&quot;, e.g. &quot;memory:myfile.html&quot;.</p><p class="classdesc">Example:</p><p class="classdesc"><pre>
#ifndef __WXMSW__
#include &quot;logo.xpm&quot;
#endif

void MyFrame::OnAbout(wxCommandEvent&amp;)
{
    wxBusyCursor bcur;
    wxFileSystem::AddHandler(new wxMemoryFSHandler);
    wxMemoryFSHandler::AddFile(&quot;logo.pcx&quot;, wxBITMAP(logo), wxBITMAP_TYPE_PCX);
    wxMemoryFSHandler::AddFile(&quot;about.htm&quot;, 
                               &quot;&lt;html&gt;&lt;body&gt;About: &quot;
                               &quot;&lt;img src=\&quot;memory:logo.pcx\&quot;&gt;&lt;/body&gt;&lt;/html&gt;&quot;);

    wxDialog dlg(this, -1, wxString(_(&quot;About&quot;)));
    wxBoxSizer &#42;topsizer;
    wxHtmlWindow &#42;html;
    topsizer = new wxBoxSizer(wxVERTICAL);
    html = new wxHtmlWindow(&amp;dlg, -1, wxDefaultPosition, 
                            wxSize(380, 160), wxHW_SCROLLBAR_NEVER);
    html-&gt;SetBorders(0);
    html-&gt;LoadPage(&quot;memory:about.htm&quot;);
    html-&gt;SetSize(html-&gt;GetInternalRepresentation()-&gt;GetWidth(), 
                  html-&gt;GetInternalRepresentation()-&gt;GetHeight());
    topsizer-&gt;Add(html, 1, wxALL, 10);
    topsizer-&gt;Add(new wxStaticLine(&amp;dlg, -1), 0, wxEXPAND | wxLEFT | wxRIGHT, 10);
    topsizer-&gt;Add(new wxButton(&amp;dlg, wxID_OK, &quot;Ok&quot;), 
                  0, wxALL | wxALIGN_RIGHT, 15);
    dlg.SetAutoLayout(true);
    dlg.SetSizer(topsizer);
    topsizer-&gt;Fit(&amp;dlg);
    dlg.Centre();
    dlg.ShowModal();
    
    wxMemoryFSHandler::RemoveFile(&quot;logo.pcx&quot;);
    wxMemoryFSHandler::RemoveFile(&quot;about.htm&quot;);
}
</pre></p>
</description>
<parents>
<classref name="wxFileSystemHandler"/>

</parents>
<includes>
<header name="wx/fs_mem.h"/></includes>
<members>
<member class="wxMemoryFSHandler" name="wxMemoryFSHandler"><function type="" name="wxMemoryFSHandler"><description>

Constructor.

</description></function></member>
<member class="wxMemoryFSHandler" name="AddFile"><function type="static void" name="AddFile"><parameters><parameter type="const wxString&amp; " name="filename"></parameter><parameter type="wxImage&amp; " name="image"></parameter><parameter type="long " name="type"></parameter></parameters><description>

</description></function>
<function type="static void" name="AddFile"><parameters><parameter type="const wxString&amp; " name="filename"></parameter><parameter type="const wxBitmap&amp; " name="bitmap"></parameter><parameter type="long " name="type"></parameter></parameters><description>

</description></function>
<function type="static void" name="AddFile"><parameters><parameter type="const wxString&amp; " name="filename"></parameter><parameter type="const wxString&amp; " name="textdata"></parameter></parameters><description>

</description></function>
<function type="static void" name="AddFile"><parameters><parameter type="const wxString&amp; " name="filename"></parameter><parameter type="const void&#42; " name="binarydata"></parameter><parameter type="size_t " name="size"></parameter></parameters><description>

Add file to list of files stored in memory. Stored 
data (bitmap, text or raw data)
will be copied into private memory stream and available under 
name &quot;memory:&quot; + filename.

Note that when storing image/bitmap, you must use image format that wxWindows
can write (e.g. JPG, PNG, see <ref target="wximage">wxImage documentation</ref>)!


</description></function></member>
<member class="wxMemoryFSHandler" name="RemoveFile"><function type="static void" name="RemoveFile"><parameters><parameter type="const wxString&amp; " name="filename"></parameter></parameters><description>

Remove file from memory FS and free occupied memory.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMemoryInputStream">
<description>

</description>
<parents>
<classref name="wxInputStream"/>

</parents>
<includes>
<header name="wx/mstream.h"/></includes>
<seealso>

<ref target="wxstreambuffer">wxStreamBuffer</ref><ref target="wxmemoutputstream">wxMemoryOutputStream</ref>

</seealso>
<members>
<member class="wxMemoryInputStream" name="wxMemoryInputStream"><function type="" name="wxMemoryInputStream"><parameters><parameter type="const char &#42;" name=" data"></parameter><parameter type="size_t" name=" len"></parameter></parameters><description>

Initializes a new read-only memory stream which will use the specified buffer
<i> data</i> of length <i> len</i>. The stream does not take ownership of the 
buffer, i.e. that it will not delete in its destructor.

</description></function></member>
<member class="wxMemoryInputStream" name="~wxMemoryInputStream"><function type="" name="~wxMemoryInputStream"><description>

Destructor.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMemoryOutputStream">
<description>

</description>
<parents>
<classref name="wxOutputStream"/>

</parents>
<includes>
<header name="wx/mstream.h"/></includes>
<seealso>

<ref target="wxstreambuffer">wxStreamBuffer</ref>

</seealso>
<members>
<member class="wxMemoryOutputStream" name="wxMemoryOutputStream"><function type="" name="wxMemoryOutputStream"><parameters><parameter type="char &#42;" name="data" value="NULL"></parameter><parameter type="size_t" name="length" value="0"></parameter></parameters><description>

If <i> data</i> is NULL, then it will initialize a new empty buffer which will
grow if required.

\wxheading{Warning}

If the buffer is created, it will be destroyed at the destruction of the
stream.

</description></function></member>
<member class="wxMemoryOutputStream" name="~wxMemoryOutputStream"><function type="" name="~wxMemoryOutputStream"><description>

Destructor.

</description></function></member>
<member class="wxMemoryOutputStream" name="CopyTo"><function type="size_t" name="CopyTo" suffix="const"><parameters><parameter type="char &#42;" name="buffer"></parameter><parameter type="size_t " name="len"></parameter></parameters><description>

CopyTo allowed you to transfer data from the internal buffer of
wxMemoryOutputStream to an external buffer. <i> len</i> specifies the size of
the buffer.

\wxheading{Returned value}

CopyTo returns the number of bytes copied to the buffer. Generally it is either
len or the size of the stream buffer.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMenu">
<description>
<p class="classdesc">
A menu is a popup (or pull down) list of items, one of which may be
selected before the menu goes away (clicking elsewhere dismisses the
menu). Menus may be used to construct either menu bars or popup menus.</p><p class="classdesc">A menu item has an integer ID associated with it which can be used to
identify the selection, or to change the menu item in some way. A menu item
with a special identifier $-1$ is a separator item and doesn't have an
associated command but just makes a separator line appear in the menu.</p><p class="classdesc">Menu items may be either normal items, check items or radio items. Normal items
don't have any special properties while the check items have a boolean flag
associated to them and they show a checkmark in the menu when the flag is set.
wxWindows automatically toggles the flag value when the item is clicked and its
value may be retrieved using either <ref target="wxmenuischecked">IsChecked</ref> method
of wxMenu or wxMenuBar itself or by using 
<ref target="wxcommandeventischecked">wxEvent::IsChecked</ref> when you get the menu
notification for the item in question.</p><p class="classdesc">The radio items are similar to the check items except that all the other items
in the same radio group are unchecked when a radio item is checked. The radio
group is formed by a contiguous range of radio items, i.e. it starts at the
first item of this kind and ends with the first item of a different kind (or
the end of the menu). Notice that because the radio groups are defined in terms
of the item positions inserting or removing the items in the menu containing
the radio items risks to not work correctly. Finally note that the radio items
are only supported under Windows and GTK+ currently.</p><p class="classdesc"><heading>Allocation strategy</heading></p><p class="classdesc">All menus except the popup ones must be created on the heap. All menus
attached to a menubar or to another menu will be deleted by their parent when
it is deleted. As the frame menubar is deleted by the frame itself, it means
that normally all menus used are deleted automatically.</p>
</description>
<parents>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/menu.h"/></includes>
<events>
</events>
<seealso>

<ref target="wxmenubar">wxMenuBar</ref><ref target="wxwindowpopupmenu">wxWindow::PopupMenu</ref>,
<ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxMenu" name="wxMenu"><function type="" name="wxMenu"><parameters><parameter type="const wxString&amp; " name="title" value="&quot;&quot;">A title for the popup menu: the empty string denotes no title.</parameter><parameter type="long" name="style" value="0">If set to <tt> wxMENU_TEAROFF</tt>, the menu will be detachable (wxGTK only).</parameter></parameters><description>

Constructs a wxMenu object.

</description></function>
<function type="" name="wxMenu"><parameters><parameter type="long" name=" style"></parameter></parameters><description>

Constructs a wxMenu object.







</description></function></member>
<member class="wxMenu" name="~wxMenu"><function type="" name="~wxMenu"><description>

Destructor, destroying the menu.

Note: under Motif, a popup menu must have a valid parent (the window
it was last popped up on) when being destroyed. Therefore, make sure
you delete or re-use the popup menu <i> before</i> destroying the
parent window. Re-use in this context means popping up the menu on
a different window from last time, which causes an implicit destruction
and recreation of internal data structures.

</description></function></member>
<member class="wxMenu" name="Append"><function type="void" name="Append"><parameters><parameter type="int" name=" id"></parameter><parameter type="const wxString&amp; " name=" item"></parameter><parameter type="const wxString&amp; " name="helpString" value="&quot;&quot;">An optional help string associated with the item.
By default, <ref target="wxframeonmenuhighlight">wxFrame::OnMenuHighlight</ref> displays
this string in the status line.</parameter><parameter type="wxItemKind" name="kind" value="wxITEM_NORMAL">May be <tt> wxITEM_SEPARATOR</tt>, <tt> wxITEM_NORMAL</tt>, 
<tt> wxITEM_CHECK</tt> or <tt> wxITEM_RADIO</tt></parameter></parameters><description>

Adds a string item to the end of the menu.

</description></function>
<function type="void" name="Append"><parameters><parameter type="int" name=" id"></parameter><parameter type="const wxString&amp; " name=" item"></parameter><parameter type="wxMenu &#42;" name="subMenu"></parameter><parameter type="const wxString&amp; " name="helpString" value="&quot;&quot;">An optional help string associated with the item.
By default, <ref target="wxframeonmenuhighlight">wxFrame::OnMenuHighlight</ref> displays
this string in the status line.</parameter></parameters><description>

Adds a pull-right submenu to the end of the menu. Append the submenu to the parent
menu <i> after</i> you have added your menu items, or accelerators may not be
registered properly.

</description></function>
<function type="void" name="Append"><parameters><parameter type="wxMenuItem&#42;" name=" menuItem"></parameter></parameters><seealso>

<ref target="wxmenuappendseparator">wxMenu::AppendSeparator</ref>,
<ref target="wxmenuappendcheckitem">wxMenu::AppendCheckItem</ref>,
<ref target="wxmenuappendradioitem">wxMenu::AppendRadioItem</ref>,
<ref target="wxmenuinsert">wxMenu::Insert</ref>,
<ref target="wxmenusetlabel">wxMenu::SetLabel</ref><ref target="wxmenugethelpstring">wxMenu::GetHelpString</ref>,
<ref target="wxmenusethelpstring">wxMenu::SetHelpString</ref><ref target="wxmenuitem">wxMenuItem</ref>

\pythonnote{In place of a single overloaded method namewxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> Append(idstringhelpStr=&quot;&quot;checkable=false)</b></td><td></td></tr>
<tr><td><b> AppendMenu(idstringaMenuhelpStr=&quot;&quot;)</b></td><td></td></tr>
<tr><td><b> AppendItem(aMenuItem)</b></td><td></td></tr>
</table>}
}

</seealso><description></description></function></member>
<member class="wxMenu" name="AppendCheckItem"><function type="void" name="AppendCheckItem"><parameters><parameter type="int" name=" id"></parameter><parameter type="const wxString&amp; " name=" item"></parameter><parameter type="const wxString&amp; " name="helpString" value="&quot;&quot;"></parameter></parameters><seealso>

<ref target="wxmenuappend">wxMenu::Append</ref>,
<ref target="wxmenuinsertcheckitem">wxMenu::InsertCheckItem</ref>

</seealso><description>

Adds a checkable item to the end of the menu.

</description></function></member>
<member class="wxMenu" name="AppendRadioItem"><function type="void" name="AppendRadioItem"><parameters><parameter type="int" name=" id"></parameter><parameter type="const wxString&amp; " name=" item"></parameter><parameter type="const wxString&amp; " name="helpString" value="&quot;&quot;"></parameter></parameters><seealso>

<ref target="wxmenuappend">wxMenu::Append</ref>,
<ref target="wxmenuinsertradioitem">wxMenu::InsertRadioItem</ref>

</seealso><description>

Adds a radio item to the end of the menu. All consequent radio items form a
group and when an item in the group is checked, all the others are
automatically unchecked.

<b> NB:</b> Currently only implemented under Windows and GTK, use
<tt>\#if wxHAS_RADIO_MENU_ITEMS</tt> to test for availability of this feature.

</description></function></member>
<member class="wxMenu" name="AppendSeparator"><function type="void" name="AppendSeparator"><seealso>

<ref target="wxmenuappend">wxMenu::Append</ref>,
<ref target="wxmenuinsertseparator">wxMenu::InsertSeparator</ref>

</seealso><description>

Adds a separator to the end of the menu.

</description></function></member>
<member class="wxMenu" name="Break"><function type="void" name="Break"><description>

Inserts a break in a menu, causing the next appended item to appear in a new column.

</description></function></member>
<member class="wxMenu" name="Check"><function type="void" name="Check"><parameters><parameter type="int" name=" id"></parameter><parameter type="const bool" name=" check"></parameter></parameters><seealso>

<ref target="wxmenuischecked">wxMenu::IsChecked</ref>

</seealso><description>

Checks or unchecks the menu item.







</description></function></member>
<member class="wxMenu" name="Delete"><function type="void" name="Delete"><parameters><parameter type="int " name="id">Id of the menu item to be deleted.</parameter></parameters><description>

</description></function>
<function type="void" name="Delete"><parameters><parameter type="wxMenuItem &#42;" name="item">Menu item to be deleted.</parameter></parameters><seealso>

<ref target="wxmenufinditem">wxMenu::FindItem</ref>,
<ref target="wxmenudestroy">wxMenu::Destroy</ref>,
<ref target="wxmenuremove">wxMenu::Remove</ref>

</seealso><description>

Deletes the menu item from the menu. If the item is a submenu, it will
<b> not</b> be deleted. Use <ref target="wxmenudestroy">Destroy</ref> if you want to
delete a submenu.







</description></function></member>
<member class="wxMenu" name="Destroy"><function type="void" name="Destroy"><parameters><parameter type="int " name="id">Id of the menu item to be deleted.</parameter></parameters><description>

</description></function>
<function type="void" name="Destroy"><parameters><parameter type="wxMenuItem &#42;" name="item">Menu item to be deleted.</parameter></parameters><seealso>

<ref target="wxmenufinditem">wxMenu::FindItem</ref>,
<ref target="wxmenudelete">wxMenu::Deletes</ref>,
<ref target="wxmenuremove">wxMenu::Remove</ref>

</seealso><description>

Deletes the menu item from the menu. If the item is a submenu, it will
be deleted. Use <ref target="wxmenuremove">Remove</ref> if you want to keep the submenu
(for example, to reuse it later).







</description></function></member>
<member class="wxMenu" name="Enable"><function type="void" name="Enable"><parameters><parameter type="int" name=" id"></parameter><parameter type="const bool" name=" enable"></parameter></parameters><seealso>

<ref target="wxmenuisenabled">wxMenu::IsEnabled</ref>

</seealso><description>

Enables or disables (greys out) a menu item.







</description></function></member>
<member class="wxMenu" name="FindItem"><function type="int" name="FindItem" suffix="const"><parameters><parameter type="const wxString&amp; " name="itemString">Menu item string to find.</parameter></parameters><description>

Finds the menu item id for a menu item string.

</description></function>
<function type="wxMenuItem &#42;" name="FindItem" suffix="const"><parameters><parameter type="int" name=" id"></parameter><parameter type="wxMenu &#42;&#42;" name="menu" value="NULL">If the pointer is not NULL, it will be filled with the items
parent menu (if the item was found)</parameter></parameters><remarks>

Any special menu codes are stripped out of source and target strings
before matching.

\pythonnote{The name of this method in wxPython is <tt> FindItemById</tt> 
and it does not support the second parameter.}

</remarks><returnvalue>

First form: menu item identifier, or wxNOT_FOUND if none is found.

Second form: returns the menu item object, or NULL if it is not found.

</returnvalue><description>

Finds the menu item object associated with the given menu item identifier and,
optionally, the (sub)menu it belongs to.

\perlnote{In wxPerl this method takes just the <tt> id</tt> parameter;
in scalar context it returns the associated <tt> Wx::MenuItem</tt>, in list
context it returns a 2-element list <tt> ( item, submenu )</tt>}









</description></function></member>
<member class="wxMenu" name="FindItemByPosition"><function type="wxMenuItem&#42;" name="FindItemByPosition" suffix="const"><parameters><parameter type="size_t " name="position"></parameter></parameters><description>

Returns the wxMenuItem given a position in the menu.

</description></function></member>
<member class="wxMenu" name="GetHelpString"><function type="wxString" name="GetHelpString" suffix="const"><parameters><parameter type="int" name=" id"></parameter></parameters><seealso>

<ref target="wxmenusethelpstring">wxMenu::SetHelpString</ref><ref target="wxmenuappend">wxMenu::Append</ref>

</seealso><description></description></function></member>
<member class="wxMenu" name="GetLabel"><function type="wxString" name="GetLabel" suffix="const"><parameters><parameter type="int" name=" id"></parameter></parameters><seealso>

<ref target="wxmenusetlabel">wxMenu::SetLabel</ref>

</seealso><returnvalue>

The item label, or the empty string if the item was not found.

</returnvalue><description>

Returns a menu item label.





</description></function></member>
<member class="wxMenu" name="GetMenuItemCount"><function type="size_t" name="GetMenuItemCount" suffix="const"><description>

Returns the number of items in the menu.

</description></function></member>
<member class="wxMenu" name="GetMenuItems"><function type="wxMenuItemList&amp;" name="GetMenuItems" suffix="const"><description>

Returns the list of items in the menu. wxMenuItemList is a pseudo-template
list class containing wxMenuItem pointers.

</description></function></member>
<member class="wxMenu" name="GetTitle"><function type="wxString" name="GetTitle" suffix="const"><seealso>

<ref target="wxmenusettitle">wxMenu::SetTitle</ref>

</seealso><remarks>

This is relevant only to popup menus, use 
<ref target="wxmenubargetlabeltop">wxMenuBar::GetLabelTop</ref> for the menus in the
menubar.

</remarks><description>

Returns the title of the menu.

</description></function></member>
<member class="wxMenu" name="Insert"><function type="bool" name="Insert"><parameters><parameter type="size_t " name="pos"></parameter><parameter type="wxMenuItem &#42;" name="item"></parameter></parameters><description>

</description></function>
<function type="void" name="Insert"><parameters><parameter type="size_t " name="pos"></parameter><parameter type="int" name=" id"></parameter><parameter type="const wxString&amp; " name=" item"></parameter><parameter type="const wxString&amp; " name="helpString" value="&quot;&quot;"></parameter><parameter type="wxItemKind" name="kind" value="wxITEM_NORMAL"></parameter></parameters><seealso>

<ref target="wxmenuappend">wxMenu::Append</ref>,
<ref target="wxmenuprepend">wxMenu::Prepend</ref>

</seealso><description>

Inserts the given <i> item</i> before the position <i> pos</i>. Inserting the item
at the position <ref target="wxmenugetmenuitemcount">GetMenuItemCount</ref> is the same
as appending it.

</description></function></member>
<member class="wxMenu" name="InsertCheckItem"><function type="void" name="InsertCheckItem"><parameters><parameter type="size_t " name="pos"></parameter><parameter type="int" name=" id"></parameter><parameter type="const wxString&amp; " name=" item"></parameter><parameter type="const wxString&amp; " name="helpString" value="&quot;&quot;"></parameter></parameters><seealso>

<ref target="wxmenuinsert">wxMenu::Insert</ref>,
<ref target="wxmenuappendcheckitem">wxMenu::AppendCheckItem</ref>

</seealso><description>

Inserts a checkable item at the given position.

</description></function></member>
<member class="wxMenu" name="InsertRadioItem"><function type="void" name="InsertRadioItem"><parameters><parameter type="size_t " name="pos"></parameter><parameter type="int" name=" id"></parameter><parameter type="const wxString&amp; " name=" item"></parameter><parameter type="const wxString&amp; " name="helpString" value="&quot;&quot;"></parameter></parameters><seealso>

<ref target="wxmenuinsert">wxMenu::Insert</ref>,
<ref target="wxmenuappendradioitem">wxMenu::AppendRadioItem</ref>

</seealso><description>

Inserts a radio item at the given position.

</description></function></member>
<member class="wxMenu" name="InsertSeparator"><function type="void" name="InsertSeparator"><parameters><parameter type="size_t " name="pos"></parameter></parameters><seealso>

<ref target="wxmenuinsert">wxMenu::Insert</ref>,
<ref target="wxmenuappendseparator">wxMenu::AppendSeparator</ref>

</seealso><description>

Inserts a separator at the given position.

</description></function></member>
<member class="wxMenu" name="IsChecked"><function type="bool" name="IsChecked" suffix="const"><parameters><parameter type="int" name=" id"></parameter></parameters><seealso>

<ref target="wxmenucheck">wxMenu::Check</ref>

</seealso><returnvalue>

true if the menu item is checked, false otherwise.

</returnvalue><description>

Determines whether a menu item is checked.





</description></function></member>
<member class="wxMenu" name="IsEnabled"><function type="bool" name="IsEnabled" suffix="const"><parameters><parameter type="int" name=" id"></parameter></parameters><seealso>

<ref target="wxmenuenable">wxMenu::Enable</ref>

</seealso><returnvalue>

true if the menu item is enabled, false otherwise.

</returnvalue><description>

Determines whether a menu item is enabled.





</description></function></member>
<member class="wxMenu" name="Prepend"><function type="bool" name="Prepend"><parameters><parameter type="wxMenuItem &#42;" name="item"></parameter></parameters><description>

</description></function>
<function type="void" name="Prepend"><parameters><parameter type="int" name=" id"></parameter><parameter type="const wxString&amp; " name=" item"></parameter><parameter type="const wxString&amp; " name="helpString" value="&quot;&quot;"></parameter><parameter type="wxItemKind" name="kind" value="wxITEM_NORMAL"></parameter></parameters><seealso>

<ref target="wxmenuappend">wxMenu::Append</ref>,
<ref target="wxmenuinsert">wxMenu::Inserts</ref>

</seealso><description>

Inserts the given <i> item</i> at the position 0, i.e. before all the other
existing items.

</description></function></member>
<member class="wxMenu" name="PrependCheckItem"><function type="void" name="PrependCheckItem"><parameters><parameter type="int" name=" id"></parameter><parameter type="const wxString&amp; " name=" item"></parameter><parameter type="const wxString&amp; " name="helpString" value="&quot;&quot;"></parameter></parameters><seealso>

<ref target="wxmenuprepend">wxMenu::Prepend</ref>,
<ref target="wxmenuappendcheckitem">wxMenu::AppendCheckItem</ref>

</seealso><description>

Inserts a checkable item at the position 0.

</description></function></member>
<member class="wxMenu" name="PrependRadioItem"><function type="void" name="PrependRadioItem"><parameters><parameter type="int" name=" id"></parameter><parameter type="const wxString&amp; " name=" item"></parameter><parameter type="const wxString&amp; " name="helpString" value="&quot;&quot;"></parameter></parameters><seealso>

<ref target="wxmenuprepend">wxMenu::Prepend</ref>,
<ref target="wxmenuappendradioitem">wxMenu::AppendRadioItem</ref>

</seealso><description>

Inserts a radio item at the position 0.

</description></function></member>
<member class="wxMenu" name="PrependSeparator"><function type="void" name="PrependSeparator"><parameters><parameter type="size_t " name="pos"></parameter></parameters><seealso>

<ref target="wxmenuprepend">wxMenu::Prepend</ref>,
<ref target="wxmenuappendseparator">wxMenu::AppendSeparator</ref>

</seealso><description>

Inserts a separator at the position 0.

</description></function></member>
<member class="wxMenu" name="Remove"><function type="wxMenuItem &#42;" name="Remove"><parameters><parameter type="int " name="id">The identifier of the menu item to remove.</parameter></parameters><description>

</description></function>
<function type="wxMenuItem &#42;" name="Remove"><parameters><parameter type="wxMenuItem &#42;" name="item">The menu item to remove.</parameter></parameters><returnvalue>

The item which was detached from the menu.

</returnvalue><description>

Removes the menu item from the menu but doesn't delete the associated C++
object. This allows to reuse the same item later by adding it back to the menu
(especially useful with submenus).







</description></function></member>
<member class="wxMenu" name="SetHelpString"><function type="void" name="SetHelpString"><parameters><parameter type="int" name=" id"></parameter><parameter type="const wxString&amp; " name="helpString">The help string to set.</parameter></parameters><seealso>

<ref target="wxmenugethelpstring">wxMenu::GetHelpString</ref>

</seealso><description>

Sets an item's help string.







</description></function></member>
<member class="wxMenu" name="SetLabel"><function type="void" name="SetLabel"><parameters><parameter type="int" name=" id"></parameter><parameter type="const wxString&amp; " name="label">The menu item label to set.</parameter></parameters><seealso>

<ref target="wxmenuappend">wxMenu::Append</ref><ref target="wxmenugetlabel">wxMenu::GetLabel</ref>

</seealso><description></description></function></member>
<member class="wxMenu" name="SetTitle"><function type="void" name="SetTitle"><parameters><parameter type="const wxString&amp; " name="title">The title to set.</parameter></parameters><seealso>

<ref target="wxmenugettitle">wxMenu::GetTitle</ref>

</seealso><remarks>

This is relevant only to popup menus, use 
<ref target="wxmenubarsetlabeltop">wxMenuBar::SetLabelTop</ref> for the menus in the
menubar.

</remarks><description>

Sets the title of the menu.





</description></function></member>
<member class="wxMenu" name="UpdateUI"><function type="void" name="UpdateUI" suffix="const"><parameters><parameter type="wxEvtHandler&#42;" name="source" value="NULL"></parameter></parameters><seealso>

<ref target="wxupdateuievent">wxUpdateUIEvent</ref>
</seealso><description>

Sends events to <i> source</i> (or owning window if NULL) to update the
menu UI. This is called just before the menu is popped up with <ref target="wxwindowpopupmenu">wxWindow::PopupMenu</ref>, but
the application may call it at other times if required.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMenuBar">
<description>
<p class="classdesc">
A menu bar is a series of menus accessible from the top of a frame.</p>
</description>
<parents>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/menu.h"/></includes>
<events>
</events>
<seealso>

<ref target="wxmenu">wxMenu</ref><ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxMenuBar" name="wxMenuBar"><function type="void" name="wxMenuBar"><parameters><parameter type="long " name="style" value="0">If <tt> wxMB_DOCKABLE</tt> the menu bar can be detached (wxGTK only).</parameter></parameters><description>

Default constructor.

</description></function>
<function type="void" name="wxMenuBar"><parameters><parameter type="int" name=" n"></parameter><parameter type="wxMenu&#42;" name=" menus&#91;]"></parameter><parameter type="const wxString " name="titles&#91;]"></parameter></parameters><description>

Construct a menu bar from arrays of menus and titles.











\pythonnote{Only the default constructor is supported in wxPython.
Use wxMenuBar.Append instead.}

\perlnote{wxPerl only supports the first constructor: 
use <tt> Append</tt> instead.}

</description></function></member>
<member class="wxMenuBar" name="~wxMenuBar"><function type="void" name="~wxMenuBar"><description>

Destructor, destroying the menu bar and removing it from the parent frame (if any).

</description></function></member>
<member class="wxMenuBar" name="Append"><function type="bool" name="Append"><parameters><parameter type="wxMenu &#42;" name="menu">The menu to add. Do not deallocate this menu after calling <b> Append</b>.</parameter><parameter type="const wxString&amp; " name="title">The title of the menu.</parameter></parameters><seealso>

<ref target="wxmenubarinsert">wxMenuBar::Insert</ref>

</seealso><returnvalue>

true on success, false if an error occurred.

</returnvalue><description>

Adds the item to the end of the menu bar.







</description></function></member>
<member class="wxMenuBar" name="Check"><function type="void" name="Check"><parameters><parameter type="int" name=" id"></parameter><parameter type="const bool" name=" check"></parameter></parameters><remarks>

Only use this when the menu bar has been associated
with a frame; otherwise, use the wxMenu equivalent call.

</remarks><description>

Checks or unchecks a menu item.







</description></function></member>
<member class="wxMenuBar" name="Enable"><function type="void" name="Enable"><parameters><parameter type="int" name=" id"></parameter><parameter type="const bool" name=" enable"></parameter></parameters><remarks>

Only use this when the menu bar has been
associated with a frame; otherwise, use the wxMenu equivalent call.

</remarks><description>

Enables or disables (greys out) a menu item.







</description></function></member>
<member class="wxMenuBar" name="EnableTop"><function type="void" name="EnableTop"><parameters><parameter type="int" name=" pos"></parameter><parameter type="const bool" name=" enable"></parameter></parameters><remarks>

Only use this when the menu bar has been
associated with a frame.

</remarks><description>

Enables or disables a whole menu.







</description></function></member>
<member class="wxMenuBar" name="FindMenu"><function type="int" name="FindMenu" suffix="const"><parameters><parameter type="const wxString&amp; " name="title"></parameter></parameters><description>

Returns the index of the menu with the given <i> title</i> or wxNOT_FOUND if no
such menu exists in this menubar. The <i> title</i> parameter may specify either
the menu title (with accelerator characters, i.e. <tt> &quot;&amp;File&quot;</tt>) or just the
menu label (<tt> &quot;File&quot;</tt>) indifferently.

</description></function></member>
<member class="wxMenuBar" name="FindMenuItem"><function type="int" name="FindMenuItem" suffix="const"><parameters><parameter type="const wxString&amp; " name="menuString">Menu title to find.</parameter><parameter type="const wxString&amp; " name="itemString">Item to find.</parameter></parameters><remarks>

Any special menu codes are stripped out of source and target strings
before matching.

</remarks><returnvalue>

The menu item identifier, or wxNOT_FOUND if none was found.

</returnvalue><description>

Finds the menu item id for a menu name/menu item string pair.







</description></function></member>
<member class="wxMenuBar" name="FindItem"><function type="wxMenuItem &#42;" name="FindItem" suffix="const"><parameters><parameter type="int" name=" id"></parameter><parameter type="wxMenu" name="&#42;&#42;menu" value="NULL"></parameter></parameters><returnvalue>

The found menu item object, or NULL if one was not found.

</returnvalue><description>

Finds the menu item object associated with the given menu item identifier.







</description></function></member>
<member class="wxMenuBar" name="GetHelpString"><function type="wxString" name="GetHelpString" suffix="const"><parameters><parameter type="int" name=" id"></parameter></parameters><seealso>

<ref target="wxmenubarsethelpstring">wxMenuBar::SetHelpString</ref>

</seealso><returnvalue>

The help string, or the empty string if there was no help string or the menu item
was not found.

</returnvalue><description>

Gets the help string associated with the menu item identifier.





</description></function></member>
<member class="wxMenuBar" name="GetLabel"><function type="wxString" name="GetLabel" suffix="const"><parameters><parameter type="int" name=" id"></parameter></parameters><remarks>

Use only after the menubar has been associated with a frame.

</remarks><returnvalue>

The menu item label, or the empty string if the item was not found.

</returnvalue><description>

Gets the label associated with a menu item.





</description></function></member>
<member class="wxMenuBar" name="GetLabelTop"><function type="wxString" name="GetLabelTop" suffix="const"><parameters><parameter type="int" name=" pos"></parameter></parameters><seealso>

<ref target="wxmenubarsetlabeltop">wxMenuBar::SetLabelTop</ref>

</seealso><remarks>

Use only after the menubar has been associated with a frame.

</remarks><returnvalue>

The menu label, or the empty string if the menu was not found.

</returnvalue><description>

Returns the label of a top-level menu. Note that the returned string does not
include the accelerator characters which could have been specified in the menu
title string during its construction.





</description></function></member>
<member class="wxMenuBar" name="GetMenu"><function type="wxMenu&#42;" name="GetMenu" suffix="const"><parameters><parameter type="int" name=" menuIndex"></parameter></parameters><description>

Returns the menu at <i> menuIndex</i> (zero-based).

</description></function></member>
<member class="wxMenuBar" name="GetMenuCount"><function type="int" name="GetMenuCount" suffix="const"><description>

Returns the number of menus in this menubar.

</description></function></member>
<member class="wxMenuBar" name="Insert"><function type="bool" name="Insert"><parameters><parameter type="size_t " name="pos">The position of the new menu in the menu bar</parameter><parameter type="wxMenu &#42;" name="menu">The menu to add. wxMenuBar owns the menu and will free it.</parameter><parameter type="const wxString&amp; " name="title">The title of the menu.</parameter></parameters><seealso>

<ref target="wxmenubarappend">wxMenuBar::Append</ref>

</seealso><returnvalue>

true on success, false if an error occurred.

</returnvalue><description>

Inserts the menu at the given position into the menu bar. Inserting menu at
position 0 will insert it in the very beginning of it, inserting at position 
<ref target="wxmenubargetmenucount">GetMenuCount()</ref> is the same as calling 
<ref target="wxmenubarappend">Append()</ref>.









</description></function></member>
<member class="wxMenuBar" name="IsChecked"><function type="bool" name="IsChecked" suffix="const"><parameters><parameter type="int" name=" id"></parameter></parameters><returnvalue>

true if the item was found and is checked, false otherwise.

</returnvalue><description>

Determines whether an item is checked.





</description></function></member>
<member class="wxMenuBar" name="IsEnabled"><function type="bool" name="IsEnabled" suffix="const"><parameters><parameter type="int" name=" id"></parameter></parameters><returnvalue>

true if the item was found and is enabled, false otherwise.

</returnvalue><description>

Determines whether an item is enabled.





</description></function></member>
<member class="wxMenuBar" name="Refresh"><function type="void" name="Refresh"><description>

Redraw the menu bar

</description></function></member>
<member class="wxMenuBar" name="Remove"><function type="wxMenu &#42;" name="Remove"><parameters><parameter type="size_t " name="pos"></parameter></parameters><seealso>

<ref target="wxmenubarreplace">wxMenuBar::Replace</ref>

</seealso><description>

Removes the menu from the menu bar and returns the menu object - the caller is
responsible for deleting it. This function may be used together with 
<ref target="wxmenubarinsert">wxMenuBar::Insert</ref> to change the menubar
dynamically.

</description></function></member>
<member class="wxMenuBar" name="Replace"><function type="wxMenu &#42;" name="Replace"><parameters><parameter type="size_t " name="pos">The position of the new menu in the menu bar</parameter><parameter type="wxMenu &#42;" name="menu">The menu to add.</parameter><parameter type="const wxString&amp; " name="title">The title of the menu.</parameter></parameters><seealso>

<ref target="wxmenubarinsert">wxMenuBar::Insert</ref>,
<ref target="wxmenubarremove">wxMenuBar::Remove</ref>

</seealso><returnvalue>

The menu which was previously at the position <i> pos</i>. The caller is
responsible for deleting it.

</returnvalue><description>

Replaces the menu at the given position with another one.









</description></function></member>
<member class="wxMenuBar" name="SetHelpString"><function type="void" name="SetHelpString"><parameters><parameter type="int" name=" id"></parameter><parameter type="const wxString&amp; " name="helpString">Help string to associate with the menu item.</parameter></parameters><seealso>

<ref target="wxmenubargethelpstring">wxMenuBar::GetHelpString</ref>

</seealso><description>

Sets the help string associated with a menu item.







</description></function></member>
<member class="wxMenuBar" name="SetLabel"><function type="void" name="SetLabel"><parameters><parameter type="int" name=" id"></parameter><parameter type="const wxString&amp; " name="label">Menu item label.</parameter></parameters><seealso>

<ref target="wxmenubargetlabel">wxMenuBar::GetLabel</ref>

</seealso><remarks>

Use only after the menubar has been associated with a frame.

</remarks><description>

Sets the label of a menu item.







</description></function></member>
<member class="wxMenuBar" name="SetLabelTop"><function type="void" name="SetLabelTop"><parameters><parameter type="int" name=" pos"></parameter><parameter type="const wxString&amp; " name="label">The menu label.</parameter></parameters><seealso>

<ref target="wxmenubargetlabeltop">wxMenuBar::GetLabelTop</ref>

</seealso><remarks>

Use only after the menubar has been associated with a frame.

</remarks><description>

Sets the label of a top-level menu.







</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMenuEvent">
<description>
<p class="classdesc">
This class is used for a variety of menu-related events. Note that
these do not include menu command events, which are
handled using <ref target="wxcommandevent">wxCommandEvent</ref> objects.</p><p class="classdesc">The handler <ref target="wxframeonmenuhighlight">wxFrame::OnMenuHighlight</ref> displays help
text in the first field of the status bar.</p>
</description>
<parents>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_MENU_OPEN(func)">A menu is about to be opened. On Windows,
this is only sent once for each navigation of the menubar (up until all menus have closed).</event><event name="EVT_MENU_CLOSE(func)">A menu has been just closed.</event><event name="EVT_MENU_HIGHLIGHT(id, func)">The menu item with the
specified id has been highlighted: used to show help prompts in the status bar
by \helpref{wxFrame</event><event name="EVT_MENU_HIGHLIGHT_ALL(func)">A menu item has been
highlighted, i.e. the currently selected menu item has changed.</event></events>
<seealso>

<ref target="wxcommandevent">Command events</ref>,<br/>
<ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxMenuEvent" name="wxMenuEvent"><function type="" name="wxMenuEvent"><parameters><parameter type="WXTYPE " name="id" value="0"></parameter><parameter type="int " name="id" value="0"></parameter><parameter type="wxDC&#42; " name="dc" value="NULL"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxMenuEvent" name="m_menuId"></member>
<member class="wxMenuEvent" name="GetMenuId"><function type="int" name="GetMenuId" suffix="const"><description>

Returns the menu identifier associated with the event. This method should be
only used with the <tt> HIGHLIGHT</tt> events.

</description></function></member>
<member class="wxMenuEvent" name="IsPopup"><function type="bool" name="IsPopup" suffix="const"><description>

Returns <tt> true</tt> if the menu which is being opened or closed is a popup menu, 
<tt> false</tt> if it is a normal one.

This method should be only used with the <tt> OPEN</tt> and <tt> CLOSE</tt> events.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMenuItem">
<description>
<p class="classdesc">
A menu item represents an item in a menu. Note that you usually don't have to
deal with it directly as <ref target="wxmenu">wxMenu</ref> methods usually construct an
object of this class for you.</p><p class="classdesc">Also please note that the methods related to fonts and bitmaps are currently
only implemented for Windows.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/menuitem.h"/></includes>
<seealso>

<ref target="wxmenubar">wxMenuBar</ref><ref target="wxmenu">wxMenu</ref>

</seealso>
<members>
<member class="wxMenuItem" name="wxMenuItem"><function type="" name="wxMenuItem"><parameters><parameter type="wxMenu&#42;" name="parentMenu" value="NULL">Menu that the menu item belongs to.</parameter><parameter type="int" name="id" value="ID_SEPARATOR">Identifier for this menu item, or ID_SEPARATOR to indicate a separator.</parameter><parameter type="const wxString&amp; " name="text" value="&quot;&quot;">Text for the menu item, as shown on the menu. An accelerator
key can be specified using the ampersand '&amp;' character. In order to embed an
ampersand character in the menu item text, the ampersand must be doubled.</parameter><parameter type="const wxString&amp; " name="helpString" value="&quot;&quot;">Optional help string that will be shown on the status bar.</parameter><parameter type="wxItemKind " name="kind" value="wxITEM_NORMAL">May be <tt> wxITEM_SEPARATOR</tt>, <tt> wxITEM_NORMAL</tt>, 
<tt> wxITEM_CHECK</tt> or <tt> wxITEM_RADIO</tt></parameter><parameter type="wxMenu&#42;" name="subMenu" value="NULL">If non-NULL, indicates that the menu item is a submenu.</parameter></parameters><description>

Constructs a wxMenuItem object.















</description></function></member>
<member class="wxMenuItem" name="~wxMenuItem"><function type="" name="~wxMenuItem"><description>

Destructor.

</description></function></member>
<member class="wxMenuItem" name="Check"><function type="void" name="Check"><parameters><parameter type="bool" name=" check"></parameter></parameters><description>

Checks or unchecks the menu item.

</description></function></member>
<member class="wxMenuItem" name="DeleteSubMenu"><function type="void" name="DeleteSubMenu"><description>

Deletes the submenu, if any.

</description></function></member>
<member class="wxMenuItem" name="Enable"><function type="void" name="Enable"><parameters><parameter type="bool" name=" enable"></parameter></parameters><description>

Enables or disables the menu item.

</description></function></member>
<member class="wxMenuItem" name="GetBackgroundColour"><function type="wxColour&amp;" name="GetBackgroundColour" suffix="const"><description>

Returns the background colour associated with the menu item (Windows only).

</description></function></member>
<member class="wxMenuItem" name="GetBitmap"><function type="wxBitmap&amp;" name="GetBitmap" suffix="const"><parameters><parameter type="bool" name="checked" value="true"></parameter></parameters><description>

Returns the checked or unchecked bitmap (Windows only).

</description></function></member>
<member class="wxMenuItem" name="GetFont"><function type="wxFont&amp;" name="GetFont" suffix="const"><description>

Returns the font associated with the menu item (Windows only).

</description></function></member>
<member class="wxMenuItem" name="GetHelp"><function type="wxString" name="GetHelp" suffix="const"><description>

Returns the help string associated with the menu item.

</description></function></member>
<member class="wxMenuItem" name="GetId"><function type="int" name="GetId" suffix="const"><description>

Returns the menu item identifier.

</description></function></member>
<member class="wxMenuItem" name="GetKind"><function type="wxItemKind" name="GetKind" suffix="const"><description>

Returns the item kind, one of <tt> wxITEM_SEPARATOR</tt>, <tt> wxITEM_NORMAL</tt>, 
<tt> wxITEM_CHECK</tt> or <tt> wxITEM_RADIO</tt>.

</description></function></member>
<member class="wxMenuItem" name="GetLabel"><function type="wxString" name="GetLabel" suffix="const"><seealso>

<ref target="wxmenuitemgettext">GetText</ref>
<ref target="wxmenuitemgetlabelfromtext">GetLabelFromText</ref>

</seealso><description></description></function></member>
<member class="wxMenuItem" name="GetLabelFromText"><function type="static wxString" name="GetLabelFromText"><parameters><parameter type="const wxString&amp; " name="text"></parameter></parameters><seealso>

<ref target="wxmenuitemgettext">GetText</ref>
<ref target="wxmenuitemgetlabel">GetLabel</ref>

</seealso><description></description></function></member>
<member class="wxMenuItem" name="GetMarginWidth"><function type="int" name="GetMarginWidth" suffix="const"><description>

Gets the width of the menu item checkmark bitmap (Windows only).

</description></function></member>
<member class="wxMenuItem" name="GetName"><function type="wxString" name="GetName" suffix="const"><description>

Returns the text associated with the menu item.

<b> NB:</b> this function is deprecated, please use 
<ref target="wxmenuitemgettext">GetText</ref> or <ref target="wxmenuitemgetlabel">GetLabel</ref> 
instead.

</description></function></member>
<member class="wxMenuItem" name="GetText"><function type="wxString" name="GetText" suffix="const"><seealso>

<ref target="wxmenuitemgetlabel">GetLabel</ref>
<ref target="wxmenuitemgetlabelfromtext">GetLabelFromText</ref>

</seealso><description></description></function></member>
<member class="wxMenuItem" name="GetSubMenu"><function type="wxMenu&#42;" name="GetSubMenu" suffix="const"><description>

Returns the submenu associated with the menu item, or NULL if there isn't one.

</description></function></member>
<member class="wxMenuItem" name="GetTextColour"><function type="wxColour&amp;" name="GetTextColour" suffix="const"><description>

Returns the text colour associated with the menu item (Windows only).

</description></function></member>
<member class="wxMenuItem" name="IsCheckable"><function type="bool" name="IsCheckable" suffix="const"><description>

Returns true if the item is checkable.

</description></function></member>
<member class="wxMenuItem" name="IsChecked"><function type="bool" name="IsChecked" suffix="const"><description>

Returns true if the item is checked.

</description></function></member>
<member class="wxMenuItem" name="IsEnabled"><function type="bool" name="IsEnabled" suffix="const"><description>

Returns true if the item is enabled.

</description></function></member>
<member class="wxMenuItem" name="IsSeparator"><function type="bool" name="IsSeparator" suffix="const"><description>

Returns true if the item is a separator.

</description></function></member>
<member class="wxMenuItem" name="SetBackgroundColour"><function type="void" name="SetBackgroundColour" suffix="const"><parameters><parameter type="const wxColour&amp; " name="colour"></parameter></parameters><description>

Sets the background colour associated with the menu item (Windows only).

</description></function></member>
<member class="wxMenuItem" name="SetBitmap"><function type="void" name="SetBitmap" suffix="const"><parameters><parameter type="const wxBitmap&amp; " name="bmp"></parameter></parameters><description>

Sets the bitmap for the menu item (Windows and GTK+ only). It is
equivalent to <ref target="wxmenuitemsetbitmaps">SetBitmaps</ref>(bmp, wxNullBitmap).

</description></function></member>
<member class="wxMenuItem" name="SetBitmaps"><function type="void" name="SetBitmaps" suffix="const"><parameters><parameter type="const wxBitmap&amp; " name="checked"></parameter><parameter type="const wxBitmap&amp; " name="unchecked" value="wxNullBitmap"></parameter></parameters><description>

Sets the checked/unchecked bitmaps for the menu item (Windows only). The first bitmap
is also used as the single bitmap for uncheckable menu items.

</description></function></member>
<member class="wxMenuItem" name="SetFont"><function type="void" name="SetFont" suffix="const"><parameters><parameter type="const wxFont&amp; " name="font"></parameter></parameters><description>

Sets the font associated with the menu item (Windows only).

</description></function></member>
<member class="wxMenuItem" name="SetHelp"><function type="void" name="SetHelp" suffix="const"><parameters><parameter type="const wxString&amp; " name="helpString"></parameter></parameters><description>

Sets the help string.

</description></function></member>
<member class="wxMenuItem" name="SetMarginWidth"><function type="void" name="SetMarginWidth" suffix="const"><parameters><parameter type="int" name=" width"></parameter></parameters><description>

Sets the width of the menu item checkmark bitmap (Windows only).

</description></function></member>
<member class="wxMenuItem" name="SetText"><function type="void" name="SetText" suffix="const"><parameters><parameter type="const wxString&amp; " name="text"></parameter></parameters><description>

Sets the text associated with the menu item.

</description></function></member>
<member class="wxMenuItem" name="SetTextColour"><function type="void" name="SetTextColour" suffix="const"><parameters><parameter type="const wxColour&amp; " name="colour"></parameter></parameters><description>

Sets the text colour associated with the menu item (Windows only).

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class>
<class name="wxMessageDialog">
<description>
<p class="classdesc">
This class represents a dialog that shows a single or multi-line message,
with a choice of OK, Yes, No and Cancel buttons.</p>
</description>
<parents>
<classref name="wxDialog"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/msgdlg.h"/></includes>
<seealso>

<ref target="wxmessagedialogoverview">wxMessageDialog overview</ref>

</seealso>
<members>
<member class="wxMessageDialog" name="wxMessageDialog"><function type="" name="wxMessageDialog"><parameters><parameter type="wxWindow&#42; " name="parent">Parent window.</parameter><parameter type="const wxString&amp; " name="message">Message to show on the dialog.</parameter><parameter type="const wxString&amp; " name="caption" value="&quot;Message">The dialog caption.</parameter><parameter type="long " name="style" value="wxOK"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Dialog position. Not Windows.</parameter></parameters><description>

Constructor. Use <ref target="wxmessagedialogshowmodal">wxMessageDialog::ShowModal</ref> to show the dialog.













</description></function></member>
<member class="wxMessageDialog" name="~wxMessageDialog"><function type="" name="~wxMessageDialog"><description>

Destructor.

</description></function></member>
<member class="wxMessageDialog" name="ShowModal"><function type="int" name="ShowModal"><description>

Shows the dialog, returning one of wxID_OK, wxID_CANCEL, wxID_YES, wxID_NO.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMetafile">
<description>
<p class="classdesc">
A <b> wxMetafile</b> represents the MS Windows metafile object, so metafile
operations have no effect in X. In wxWindows, only sufficient functionality
has been provided for copying a graphic to the clipboard; this may be extended
in a future version. Presently, the only way of creating a metafile
is to use a wxMetafileDC.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/metafile.h"/></includes>
<seealso>

<ref target="wxmetafiledc">wxMetafileDC</ref>

</seealso>
<members>
<member class="wxMetafile" name="wxMetafile"><function type="" name="wxMetafile"><parameters><parameter type="const wxString&amp; " name="filename" value="&quot;&quot;"></parameter></parameters><description>

Constructor. If a filename is given, the Windows disk metafile is
read in. Check whether this was performed successfully by
using the <ref target="wxmetafileok">wxMetafile::Ok</ref> member.

</description></function></member>
<member class="wxMetafile" name="~wxMetafile"><function type="" name="~wxMetafile"><description>

Destructor.

</description></function></member>
<member class="wxMetafile" name="Ok"><function type="bool" name="Ok"><description>

Returns true if the metafile is valid.

</description></function></member>
<member class="wxMetafile" name="Play"><function type="bool" name="Play"><parameters><parameter type="wxDC &#42;" name="dc"></parameter></parameters><description>

Plays the metafile into the given device context, returning
true if successful.

</description></function></member>
<member class="wxMetafile" name="SetClipboard"><function type="bool" name="SetClipboard"><parameters><parameter type="int" name="width" value="0"></parameter><parameter type="int" name="height" value="0"></parameter></parameters><description>

Passes the metafile data to the clipboard. The metafile can no longer be
used for anything, but the wxMetafile object must still be destroyed by
the application.

Below is a example of metafile, metafile device context and clipboard use
from the <tt> hello.cpp</tt> example. Note the way the metafile dimensions
are passed to the clipboard, making use of the device context's ability
to keep track of the maximum extent of drawing commands.

<pre>
  wxMetafileDC dc;
  if (dc.Ok())
  {
    Draw(dc, false);
    wxMetafile &#42;mf = dc.Close();
    if (mf)
    {
      bool success = mf-&gt;SetClipboard((int)(dc.MaxX() + 10), (int)(dc.MaxY() + 10));
      delete mf;
    }
  }
</pre>
</description></function></member></members>
<supported>
<platform name="gtk" status="N"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMetafileDC">
<description>
<p class="classdesc">
This is a type of device context that allows a metafile object to be
created (Windows only), and has most of the characteristics of a normal
<b> wxDC</b>. The <ref target="wxmetafiledcclose">wxMetafileDC::Close</ref> member must be called after drawing into the
device context, to return a metafile. The only purpose for this at
present is to allow the metafile to be copied to the clipboard (see <ref target="wxmetafile">wxMetafile</ref>).</p><p class="classdesc">Adding metafile capability to an application should be easy if you
already write to a wxDC; simply pass the wxMetafileDC to your drawing
function instead. You may wish to conditionally compile this code so it
is not compiled under X (although no harm will result if you leave it
in).</p><p class="classdesc">Note that a metafile saved to disk is in standard Windows metafile format,
and cannot be imported into most applications. To make it importable,
call the function <ref target="wxmakemetafileplaceable">::wxMakeMetafilePlaceable</ref> after
closing your disk-based metafile device context.</p>
</description>
<parents>
<classref name="wxDC"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/metafile.h"/></includes>
<seealso>

<ref target="wxmetafile">wxMetafile</ref><ref target="wxdc">wxDC</ref>

</seealso>
<members>
<member class="wxMetafileDC" name="wxMetafileDC"><function type="" name="wxMetafileDC"><parameters><parameter type="const wxString&amp; " name="filename" value="&quot;&quot;"></parameter></parameters><description>

Constructor. If no filename is passed, the metafile is created
in memory.

</description></function></member>
<member class="wxMetafileDC" name="~wxMetafileDC"><function type="" name="~wxMetafileDC"><description>

Destructor.

</description></function></member>
<member class="wxMetafileDC" name="Close"><function type="wxMetafile &#42;" name="Close"><description>

This must be called after the device context is finished with. A
metafile is returned, and ownership of it passes to the calling
application (so it should be destroyed explicitly).

</description></function></member></members>
<supported>
<platform name="gtk" status="N"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMimeTypesManager">
<description>
<p class="classdesc">
This class allows the application to retrieve the information about all known
MIME types from a system-specific location and the filename extensions to the
MIME types and vice versa. After initialization the functions
<ref target="wxmimetypesmanagergetfiletypefrommimetype">wxMimeTypesManager::GetFileTypeFromMimeType</ref> 
and <ref target="wxmimetypesmanagergetfiletypefromextension">wxMimeTypesManager::GetFileTypeFromExtension</ref> 
may be called: they will return a <ref target="wxfiletype">wxFileType</ref> object which
may be further queried for file description, icon and other attributes.</p><p class="classdesc"><b> Windows:</b> MIME type information is stored in the registry and no additional
initialization is needed.</p><p class="classdesc"><b> Unix:</b> MIME type information is stored in the files mailcap and mime.types
(system-wide) and .mailcap and .mime.types in the current user's home directory:
all of these files are searched for and loaded if found by default. However,
additional functions 
<ref target="wxmimetypesmanagerreadmailcap">wxMimeTypesManager::ReadMailcap</ref> and 
<ref target="wxmimetypesmanagerreadmimetypes">wxMimeTypesManager::ReadMimeTypes</ref> are
provided to load additional files.</p><p class="classdesc">If GNOME or KDE desktop environment is installed, then wxMimeTypesManager 
gathers MIME information from respective files (e.g. .kdelnk files under KDE).</p><p class="classdesc">NB: Currently, wxMimeTypesManager is limited to reading MIME type information
but it will support modifying it as well in the future versions.</p><p class="classdesc"><heading>Global objects</heading></p><p class="classdesc">Global instance of wxMimeTypesManager is always available. It is defined
as follows:</p><p class="classdesc"><pre>
wxMimeTypesManager &#42;wxTheMimeTypesManager;
</pre></p><p class="classdesc">It is recommended to use this instance instead of creating your own because
gathering MIME information may take quite a long on Unix systems.</p>
</description>
<parents></parents>
<includes>
<header name="wx/mimetype.h"/></includes>
<seealso>

<ref target="wxfiletype">wxFileType</ref>

</seealso>
<members>
<member class="wxMimeTypesManager" name=""></member>
<member class="wxMimeTypesManager" name=""></member>
<member class="wxMimeTypesManager" name=""></member>
<member class="wxMimeTypesManager" name=""></member>
<member class="wxMimeTypesManager" name="wxMimeTypesManager"><function type="" name="wxMimeTypesManager"><description>

Constructor puts the object in the &quot;working&quot; state, no additional initialization
are needed - but <ref target="wxmimetypesmanagerinit">ReadXXX</ref> may be used to load
additional mailcap/mime.types files.

</description></function></member>
<member class="wxMimeTypesManager" name="~wxMimeTypesManager"><function type="" name="~wxMimeTypesManager"><description>

Destructor is not virtual, so this class should not be derived from.

</description></function></member>
<member class="wxMimeTypesManager" name="AddFallbacks"><function type="void" name="AddFallbacks"><parameters><parameter type="const wxFileTypeInfo &#42;" name="fallbacks"></parameter></parameters><description>

This function may be used to provide hard-wired fallbacks for the MIME types
and extensions that might not be present in the system MIME database.


Please see the typetest sample for an example of using it.

</description></function></member>
<member class="wxMimeTypesManager" name="GetFileTypeFromExtension"><function type="wxFileType&#42;" name="GetFileTypeFromExtension"><parameters><parameter type="const wxString&amp;" name=" extension"></parameter></parameters><description>

Gather information about the files with given extension and return the
corresponding <ref target="wxfiletype">wxFileType</ref> object or NULL if the extension
is unknown.

</description></function></member>
<member class="wxMimeTypesManager" name="GetFileTypeFromMimeType"><function type="wxFileType&#42;" name="GetFileTypeFromMimeType"><parameters><parameter type="const wxString&amp;" name=" mimeType"></parameter></parameters><description>

Gather information about the files with given MIME type and return the
corresponding <ref target="wxfiletype">wxFileType</ref> object or NULL if the MIME type
is unknown.

</description></function></member>
<member class="wxMimeTypesManager" name="IsOfType"><function type="bool" name="IsOfType"><parameters><parameter type="const wxString&amp;" name=" mimeType"></parameter><parameter type="const wxString&amp;" name=" wildcard"></parameter></parameters><description>

This function returns true if either the given <i> mimeType</i> is exactly the
same as <i> wildcard</i> or if it has the same category and the subtype of
<i> wildcard</i> is '&#42;'. Note that the '&#42;' wildcard is not allowed in
<i> mimeType</i> itself.

The comparison don by this function is case insensitive so it is not
necessary to convert the strings to the same case before calling it.

</description></function></member>
<member class="wxMimeTypesManager" name="ReadMailcap"><function type="bool" name="ReadMailcap"><parameters><parameter type="const wxString&amp;" name=" filename"></parameter><parameter type="bool" name="fallback" value="false"></parameter></parameters><description>

Load additional file containing information about MIME types and associated
information in mailcap format. See metamail(1) and mailcap(5) for more
information.

<i> fallback</i> parameter may be used to load additional mailcap files without
overriding the settings found in the standard files: normally, entries from
files loaded with ReadMailcap will override the entries from files loaded
previously (and the standard ones are loaded in the very beginning), but this
will not happen if this parameter is set to true (default is false).

The return value is true if there were no errors in the file or false
otherwise.

</description></function></member>
<member class="wxMimeTypesManager" name="ReadMimeTypes"><function type="bool" name="ReadMimeTypes"><parameters><parameter type="const wxString&amp;" name=" filename"></parameter></parameters><description>

Load additional file containing information about MIME types and associated
information in mime.types file format. See metamail(1) and mailcap(5) for more
information.

The return value is true if there were no errors in the file or false
otherwise.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMiniFrame">
<description>
<p class="classdesc">
A miniframe is a frame with a small title bar. It is suitable for floating toolbars that must not
take up too much screen area.</p>
</description>
<remarks>

This class has miniframe functionality under Windows and GTK, i.e. the presence
of mini frame will not be noted in the task bar and focus behaviour is different.
On other platforms, it behaves like a normal frame.

</remarks>
<parents>
<classref name="wxFrame"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/minifram.h"/></includes>
<windowstyles>
<style name="wxICONIZE">Display the frame iconized (minimized) (Windows only).</style><style name="wxCAPTION">Puts a caption on the frame.</style><style name="wxDEFAULT_FRAME_STYLE">Defined as {\bf wxMINIMIZE_BOX \pipe wxMAXIMIZE_BOX \pipe wxTHICK_FRAME \pipe wxSYSTEM_MENU \pipe wxCAPTION \pipe wxCLOSE_BOX</style><style name="wxMINIMIZE">Identical to {\bf wxICONIZE</style><style name="wxMINIMIZE_BOX">Displays a minimize box on the frame (Windows and Motif only).</style><style name="wxMAXIMIZE">Displays the frame maximized (Windows only).</style><style name="wxMAXIMIZE_BOX">Displays a maximize box on the frame (Windows and Motif only).</style><style name="wxCLOSE_BOX">Displays a close box on the frame.</style><style name="wxSTAY_ON_TOP">Stay on top of other windows (Windows only).</style><style name="wxSYSTEM_MENU">Displays a system menu (Windows and Motif only).</style><style name="wxTHICK_FRAME">Displays a thick frame around the window (Windows and Motif only).</style><style name="wxTINY_CAPTION_HORIZ">This style is obsolete and
not used any longer.</style><style name="wxTINY_CAPTION_VERT">This style is obsolete and not
used any longer.</style><style name="wxRESIZE_BORDER">Displays a resizeable border around the window (Motif only;
for Windows, it is implicit in {\bf wxTHICK_FRAME</style></windowstyles>
<seealso>

<ref target="wxmdiparentframe">wxMDIParentFrame</ref><ref target="wxmdichildframe">wxMDIChildFrame</ref>,
<ref target="wxframe">wxFrame</ref><ref target="wxdialog">wxDialog</ref>

</seealso>
<members>
<member class="wxMiniFrame" name="wxMiniFrame"><function type="" name="wxMiniFrame"><description>

Default constructor.

</description></function>
<function type="" name="wxMiniFrame"><parameters><parameter type="wxWindow&#42; " name="parent">The window parent. This may be NULL. If it is non-NULL, the frame will
always be displayed on top of the parent window on Windows.</parameter><parameter type="wxWindowID " name="id">The window identifier. It may take a value of -1 to indicate a default value.</parameter><parameter type="const wxString&amp; " name="title">The caption to be displayed on the frame's title bar.</parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition">The window position. A value of (-1, -1) indicates a default position, chosen by
either the windowing system or wxWindows, depending on platform.</parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize">The window size. A value of (-1, -1) indicates a default size, chosen by
either the windowing system or wxWindows, depending on platform.</parameter><parameter type="long" name="style" value="wxDEFAULT_FRAME_STYLE">The window style. See <ref target="wxminiframe">wxMiniFrame</ref>.</parameter><parameter type="const wxString&amp; " name="name" value="``frame&quot;">The name of the window. This parameter is used to associate a name with the item,
allowing the application user to set Motif resource values for
individual windows.</parameter></parameters><seealso>

<ref target="wxminiframecreate">wxMiniFrame::Create</ref>

</seealso><remarks>

The frame behaves like a normal frame on non-Windows platforms.

</remarks><description>

Constructor, creating the window.

















</description></function></member>
<member class="wxMiniFrame" name="~wxMiniFrame"><function type="void" name="~wxMiniFrame"><description>

Destructor. Destroys all child windows and menu bar if present.

</description></function></member>
<member class="wxMiniFrame" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxString&amp; " name="title"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="wxDEFAULT_FRAME_STYLE"></parameter><parameter type="const wxString&amp; " name="name" value="``frame&quot;"></parameter></parameters><description>

Used in two-step frame construction. See <ref target="wxminiframeconstr">wxMiniFrame::wxMiniFrame</ref>
for further details.



</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="N"/><platform name="os2" status="N"/></supported>
</class><class name="wxModule">
<description>
<p class="classdesc">
The module system is a very simple mechanism to allow applications (and parts of wxWindows itself) to
define initialization and cleanup functions that are automatically called on wxWindows
startup and exit.</p><p class="classdesc">To define a new kind of module, derive a class from wxModule, override the OnInit and OnExit functions,
and add the DECLARE_DYNAMIC_CLASS and IMPLEMENT_DYNAMIC_CLASS to header and implementation files
(which can be the same file). On initialization, wxWindows will find all classes derived from wxModule,
create an instance of each, and call each OnInit function. On exit, wxWindows will call the OnExit
function for each module instance.</p><p class="classdesc">Note that your module class does not have to be in a header file.</p><p class="classdesc">For example:</p><p class="classdesc"><pre>
  // A module to allow DDE initialization/cleanup
  // without calling these functions from app.cpp or from
  // the user's application.

  class wxDDEModule: public wxModule
  {
  DECLARE_DYNAMIC_CLASS(wxDDEModule)
  public:
      wxDDEModule() {}
      bool OnInit() { wxDDEInitialize(); return true; };
      void OnExit() { wxDDECleanUp(); };
  };

  IMPLEMENT_DYNAMIC_CLASS(wxDDEModule, wxModule)
</pre></p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/module.h"/></includes>
<members>
<member class="wxModule" name="wxModule"><function type="" name="wxModule"><description>

Constructs a wxModule object.

</description></function></member>
<member class="wxModule" name="~wxModule"><function type="" name="~wxModule"><description>

Destructor.

</description></function></member>
<member class="wxModule" name="CleanupModules"><function type="static void" name="CleanupModules"><description>

Calls Exit for each module instance. Called by wxWindows on exit, so there is no
need for an application to call it.

</description></function></member>
<member class="wxModule" name="Exit"><function type="void" name="Exit"><description>

Calls OnExit. This function is called by wxWindows and should not need to be called
by an application.

</description></function></member>
<member class="wxModule" name="Init"><function type="bool" name="Init"><description>

Calls OnInit. This function is called by wxWindows and should not need to be called
by an application.

</description></function></member>
<member class="wxModule" name="InitializeModules"><function type="static bool" name="InitializeModules"><description>

Calls Init for each module instance. Called by wxWindows on startup, so there is no
need for an application to call it.

</description></function></member>
<member class="wxModule" name="OnExit"><function type="virtual void" name="OnExit"><description>

Provide this function with appropriate cleanup for your module.

</description></function></member>
<member class="wxModule" name="OnInit"><function type="virtual bool" name="OnInit"><description>

Provide this function with appropriate initialization for your module. If the function
returns false, wxWindows will exit immediately.

</description></function></member>
<member class="wxModule" name="RegisterModule"><function type="static void" name="RegisterModule"><parameters><parameter type="wxModule&#42;" name=" module"></parameter></parameters><description>

Registers this module with wxWindows. Called by wxWindows on startup, so there is no
need for an application to call it.

</description></function></member>
<member class="wxModule" name="RegisterModules"><function type="static bool" name="RegisterModules"><description>

Creates instances of and registers all modules. Called by wxWindows on startup, so there is no
need for an application to call it.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMouseCaptureChangedEvent">
<description>
<p class="classdesc">
An mouse capture changed event is sent to a window that loses its
mouse capture. This is called even if wxWindow::ReleaseCapture
was called by the application code. Handling this event allows
an application to cater for unexpected capture releases which
might otherwise confuse mouse handling code.</p><p class="classdesc">This event is implemented under Windows only.</p>
</description>
<parents>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_MOUSE_CAPTURE_CHANGED(func)">Process a wxEVT_MOUSE_CAPTURE_CHANGED event.</event></events>
<seealso>

<ref target="eventhandlingoverview">Event handling overview</ref>
<ref target="wxwindowcapturemouse">wxWindow::CaptureMouse</ref>
<ref target="wxwindowreleasemouse">wxWindow::ReleaseMouse</ref>
<ref target="wxwindowgetcapture">wxWindow::GetCapture</ref>

</seealso>
<members>
<member class="wxMouseCaptureChangedEvent" name="wxMouseCaptureChangedEvent"><function type="" name="wxMouseCaptureChangedEvent"><parameters><parameter type="wxWindowID " name="windowId" value="0"></parameter><parameter type="wxWindow&#42;" name="gainedCapture" value="NULL"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxActivateEvent" name="GetCapturedWindow"><function type="wxWindow&#42;" name="GetCapturedWindow" suffix="const"><description>

Returns the window that gained the capture, or NULL if it was a non-wxWindows window.

</description></function></member></members>
<supported>
</supported>
</class><class name="wxMouseEvent">
<description>
<p class="classdesc">
This event class contains information about the events generated by the mouse:
they include mouse buttons press and release events and mouse move events.</p><p class="classdesc">All mouse events involving the buttons use <tt> wxMOUSE_BTN_LEFT</tt> for the
left mouse button, <tt> wxMOUSE_BTN_MIDDLE</tt> for the middle one and
<tt> wxMOUSE_BTN_RIGHT</tt> for the right one. Note that not all mice have a
middle button so a portable application should avoid relying on the events from
it.</p><p class="classdesc"><b> NB:</b> Note that under Windows mouse enter and leave events are not natively supported
by the system but are generated by wxWindows itself. This has several
drawbacks: the LEAVE_WINDOW event might be received some time after the mouse
left the window and the state variables for it may have changed during this
time.</p><p class="classdesc"><b> NB:</b> Note the difference between methods like
<ref target="wxmouseeventleftdown">LeftDown</ref> and
<ref target="wxmouseeventleftisdown">LeftIsDown</ref>: the former returns <tt> true</tt>
when the event corresponds to the left mouse button click while the latter
returns <tt> true</tt> if the left mouse button is currently being pressed. For
example, when the user is dragging the mouse you can use
<ref target="wxmouseeventleftisdown">LeftIsDown</ref> to test
whether the left mouse button is (still) depressed. Also, by convention, if
<ref target="wxmouseeventleftdown">LeftDown</ref> returns <tt> true</tt>,
<ref target="wxmouseeventleftisdown">LeftIsDown</ref> will also return <tt> true</tt> in
wxWindows whatever the underlying GUI behaviour is (which is
platform-dependent). The same applies, of course, to other mouse buttons as
well.</p>
</description>
<parents>
<classref name="wxEvent"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_LEFT_DOWN(func)">Process a wxEVT_LEFT_DOWN event.</event><event name="EVT_LEFT_UP(func)">Process a wxEVT_LEFT_UP event.</event><event name="EVT_LEFT_DCLICK(func)">Process a wxEVT_LEFT_DCLICK event.</event><event name="EVT_MIDDLE_DOWN(func)">Process a wxEVT_MIDDLE_DOWN event.</event><event name="EVT_MIDDLE_UP(func)">Process a wxEVT_MIDDLE_UP event.</event><event name="EVT_MIDDLE_DCLICK(func)">Process a wxEVT_MIDDLE_DCLICK event.</event><event name="EVT_RIGHT_DOWN(func)">Process a wxEVT_RIGHT_DOWN event.</event><event name="EVT_RIGHT_UP(func)">Process a wxEVT_RIGHT_UP event.</event><event name="EVT_RIGHT_DCLICK(func)">Process a wxEVT_RIGHT_DCLICK event.</event><event name="EVT_MOTION(func)">Process a wxEVT_MOTION event.</event><event name="EVT_ENTER_WINDOW(func)">Process a wxEVT_ENTER_WINDOW event.</event><event name="EVT_LEAVE_WINDOW(func)">Process a wxEVT_LEAVE_WINDOW event.</event><event name="EVT_MOUSEWHEEL(func)">Process a wxEVT_MOUSEWHEEL event.</event><event name="EVT_MOUSE_EVENTS(func)">Process all mouse events.</event></events>
<members>
<member class="wxMouseEvent" name="m_altDown"></member>
<member class="wxMouseEvent" name="m_controlDown"></member>
<member class="wxMouseEvent" name="m_leftDown"></member>
<member class="wxMouseEvent" name="m_middleDown"></member>
<member class="wxMouseEvent" name="m_rightDown"></member>
<member class="wxMouseEvent" name="m_metaDown"></member>
<member class="wxMouseEvent" name="m_shiftDown"></member>
<member class="wxMouseEvent" name="m_x"></member>
<member class="wxMouseEvent" name="m_y"></member>
<member class="wxMouseEvent" name="m_wheelRotation"></member>
<member class="wxMouseEvent" name="m_wheelDelta"></member>
<member class="wxMouseEvent" name="m_linesPerAction"></member>
<member class="wxMouseEvent" name="wxMouseEvent"><function type="" name="wxMouseEvent"><parameters><parameter type="WXTYPE" name="mouseEventType" value="0"></parameter><parameter type="int" name="id" value="0"></parameter></parameters><description>

Constructor. Valid event types are:

<ul><li> <b> wxEVT_ENTER_WINDOW</b>
</li>
<li> <b> wxEVT_LEAVE_WINDOW</b>
</li>
<li> <b> wxEVT_LEFT_DOWN</b>
</li>
<li> <b> wxEVT_LEFT_UP</b>
</li>
<li> <b> wxEVT_LEFT_DCLICK</b>
</li>
<li> <b> wxEVT_MIDDLE_DOWN</b>
</li>
<li> <b> wxEVT_MIDDLE_UP</b>
</li>
<li> <b> wxEVT_MIDDLE_DCLICK</b>
</li>
<li> <b> wxEVT_RIGHT_DOWN</b>
</li>
<li> <b> wxEVT_RIGHT_UP</b>
</li>
<li> <b> wxEVT_RIGHT_DCLICK</b>
</li>
<li> <b> wxEVT_MOTION</b>
</li>
<li> <b> wxEVT_MOUSEWHEEL</b>
</li></ul>

</description></function></member>
<member class="wxMouseEvent" name="AltDown"><function type="bool" name="AltDown"><description>

Returns true if the Alt key was down at the time of the event.

</description></function></member>
<member class="wxMouseEvent" name="Button"><function type="bool" name="Button"><parameters><parameter type="int" name=" button"></parameter></parameters><description>

Returns true if the identified mouse button is changing state. Valid
values of <i> button</i> are:

<table>
<tr><td><tt> wxMOUSE_BTN_LEFT</tt></td><td>check if left button was pressed</td></tr>
<tr><td><tt> wxMOUSE_BTN_MIDDLE</tt></td><td>check if left button was pressed</td></tr>
<tr><td><tt> wxMOUSE_BTN_RIGHT</tt></td><td>check if left button was pressed</td></tr>
<tr><td><tt> wxMOUSE_BTN_ANY</tt></td><td>check if any button was pressed</td></tr>
</table>

</description></function></member>
<member class="wxMouseEvent" name="ButtonDClick"><function type="bool" name="ButtonDClick"><parameters><parameter type="int" name="but" value="wxMOUSE_BTN_ANY"></parameter></parameters><description>

If the argument is omitted, this returns true if the event was a mouse
double click event. Otherwise the argument specifies which double click event
was generated (see <ref target="wxmouseeventbutton">Button</ref> for the possible
values).

</description></function></member>
<member class="wxMouseEvent" name="ButtonDown"><function type="bool" name="ButtonDown"><parameters><parameter type="int" name="but" value="-1"></parameter></parameters><description>

If the argument is omitted, this returns true if the event was a mouse
button down event. Otherwise the argument specifies which button-down event
was generated (see <ref target="wxmouseeventbutton">Button</ref> for the possible
values).


</description></function></member>
<member class="wxMouseEvent" name="ButtonUp"><function type="bool" name="ButtonUp"><parameters><parameter type="int" name="but" value="-1"></parameter></parameters><description>

If the argument is omitted, this returns true if the event was a mouse
button up event. Otherwise the argument specifies which button-up event
was generated (see <ref target="wxmouseeventbutton">Button</ref> for the possible
values).


</description></function></member>
<member class="wxMouseEvent" name="ControlDown"><function type="bool" name="ControlDown"><description>

Returns true if the control key was down at the time of the event.

</description></function></member>
<member class="wxMouseEvent" name="Dragging"><function type="bool" name="Dragging"><seealso>

<ref target="wxmouseeventmoving">Moving</ref>

</seealso><description>

Returns true if this was a dragging event (motion while a button is depressed).

</description></function></member>
<member class="wxMouseEvent" name="Entering"><function type="bool" name="Entering"><description>

Returns true if the mouse was entering the window.

See also <ref target="wxmouseeventleaving">wxMouseEvent::Leaving</ref>.

</description></function></member>
<member class="wxMouseEvent" name="GetButton"><function type="int" name="GetButton" suffix="const"><description>

Returns the mouse button which generated this event or <tt> wxMOUSE_BTN_NONE</tt> 
if no button is involved (for mouse move, enter or leave event, for example).
Otherwise <tt> wxMOUSE_BTN_LEFT</tt> is returned for the left button down, up and
double click events, <tt> wxMOUSE_BTN_MIDDLE</tt> and <tt> wxMOUSE_BTN_RIGHT</tt> 
for the same events for the middle and the right buttons respectively.

</description></function></member>
<member class="wxMouseEvent" name="GetPosition"><function type="wxPoint" name="GetPosition" suffix="const"><description>

</description></function>
<function type="void" name="GetPosition" suffix="const"><parameters><parameter type="wxCoord&#42;" name=" x"></parameter><parameter type="wxCoord&#42;" name=" y"></parameter></parameters><description>

</description></function>
<function type="void" name="GetPosition" suffix="const"><parameters><parameter type="long&#42;" name=" x"></parameter><parameter type="long&#42;" name=" y"></parameter></parameters><description>

Sets &#42;x and &#42;y to the position at which the event occurred.

Returns the physical mouse position in pixels.

</description></function></member>
<member class="wxMouseEvent" name="GetLogicalPosition"><function type="wxPoint" name="GetLogicalPosition" suffix="const"><parameters><parameter type="const wxDC&amp;" name=" dc"></parameter></parameters><description>

Returns the logical mouse position in pixels (i.e. translated according to the
translation set for the DC, which usually indicates that the window has been scrolled).


</description></function></member>
<member class="wxMouseEvent" name="GetLinesPerAction"><function type="int" name="GetLinesPerAction" suffix="const"><description>

Returns the configured number of lines (or whatever) to be scrolled per
wheel action.  Defaults to three.

</description></function></member>
<member class="wxMouseEvent" name="GetWheelRotation"><function type="int" name="GetWheelRotation" suffix="const"><description>

Get wheel rotation, positive or negative indicates direction of
rotation.  Current devices all send an event when rotation is equal to
+/-WheelDelta, but this allows for finer resolution devices to be
created in the future.  Because of this you shouldn't assume that one
event is equal to 1 line or whatever, but you should be able to either
do partial line scrolling or wait until +/-WheelDelta rotation values
have been accumulated before scrolling.

</description></function></member>
<member class="wxMouseEvent" name="GetWheelDelta"><function type="int" name="GetWheelDelta" suffix="const"><description>

Get wheel delta, normally 120.  This is the threshold for action to be
taken, and one such action (for example, scrolling one increment)
should occur for each delta.

</description></function></member>
<member class="wxMouseEvent" name="GetX"><function type="long" name="GetX" suffix="const"><description>

Returns X coordinate of the physical mouse event position.

</description></function></member>
<member class="wxMouseEvent" name="GetY"><function type="long" name="GetY"><description>

Returns Y coordinate of the physical mouse event position.

</description></function></member>
<member class="wxMouseEvent" name="IsButton"><function type="bool" name="IsButton" suffix="const"><description>

Returns true if the event was a mouse button event (not necessarily a button down event -
that may be tested using <i> ButtonDown</i>).

</description></function></member>
<member class="wxMouseEvent" name="IsPageScroll"><function type="bool" name="IsPageScroll" suffix="const"><description>

Returns true if the system has been setup to do page scrolling with
the mouse wheel instead of line scrolling.

</description></function></member>
<member class="wxMouseEvent" name="Leaving"><function type="bool" name="Leaving" suffix="const"><description>

Returns true if the mouse was leaving the window.

See also <ref target="wxmouseevententering">wxMouseEvent::Entering</ref>.

</description></function></member>
<member class="wxMouseEvent" name="LeftDClick"><function type="bool" name="LeftDClick" suffix="const"><description>

Returns true if the event was a left double click.

</description></function></member>
<member class="wxMouseEvent" name="LeftDown"><function type="bool" name="LeftDown" suffix="const"><description>

Returns true if the left mouse button changed to down.

</description></function></member>
<member class="wxMouseEvent" name="LeftIsDown"><function type="bool" name="LeftIsDown" suffix="const"><description>

Returns true if the left mouse button is currently down, independent
of the current event type.

Please notice that it is <b> not</b> the same as
<ref target="wxmouseeventleftdown">LeftDown</ref> which returns true if the left mouse
button was just pressed. Rather, it describes the state of the mouse button
before the event happened.

This event is usually used in the mouse event handlers which process &quot;move
mouse&quot; messages to determine whether the user is (still) dragging the mouse.

</description></function></member>
<member class="wxMouseEvent" name="LeftUp"><function type="bool" name="LeftUp" suffix="const"><description>

Returns true if the left mouse button changed to up.

</description></function></member>
<member class="wxMouseEvent" name="MetaDown"><function type="bool" name="MetaDown" suffix="const"><description>

Returns true if the Meta key was down at the time of the event.

</description></function></member>
<member class="wxMouseEvent" name="MiddleDClick"><function type="bool" name="MiddleDClick" suffix="const"><description>

Returns true if the event was a middle double click.

</description></function></member>
<member class="wxMouseEvent" name="MiddleDown"><function type="bool" name="MiddleDown" suffix="const"><description>

Returns true if the middle mouse button changed to down.

</description></function></member>
<member class="wxMouseEvent" name="MiddleIsDown"><function type="bool" name="MiddleIsDown" suffix="const"><description>

Returns true if the middle mouse button is currently down, independent
of the current event type.

</description></function></member>
<member class="wxMouseEvent" name="MiddleUp"><function type="bool" name="MiddleUp" suffix="const"><description>

Returns true if the middle mouse button changed to up.

</description></function></member>
<member class="wxMouseEvent" name="Moving"><function type="bool" name="Moving" suffix="const"><description>

Returns true if this was a motion event (whether some buttons are currently
pressed or not, use <ref target="wxmouseeventdragging">Dragging</ref> if you need to
distinguish between these situations).

</description></function></member>
<member class="wxMouseEvent" name="RightDClick"><function type="bool" name="RightDClick" suffix="const"><description>

Returns true if the event was a right double click.

</description></function></member>
<member class="wxMouseEvent" name="RightDown"><function type="bool" name="RightDown" suffix="const"><description>

Returns true if the right mouse button changed to down.

</description></function></member>
<member class="wxMouseEvent" name="RightIsDown"><function type="bool" name="RightIsDown" suffix="const"><description>

Returns true if the right mouse button is currently down, independent
of the current event type.

</description></function></member>
<member class="wxMouseEvent" name="RightUp"><function type="bool" name="RightUp" suffix="const"><description>

Returns true if the right mouse button changed to up.

</description></function></member>
<member class="wxMouseEvent" name="ShiftDown"><function type="bool" name="ShiftDown" suffix="const"><description>

Returns true if the shift key was down at the time of the event.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMoveEvent">
<description>
<p class="classdesc">
A move event holds information about move change events.</p>
</description>
<parents>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_MOVE(func)">Process a wxEVT_MOVE event, which is generated
when a window is moved.</event></events>
<seealso>

<ref target="wxpoint">wxPoint</ref><ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxMoveEvent" name="wxMoveEvent"><function type="" name="wxMoveEvent"><parameters><parameter type="const wxPoint&amp; " name="pt"></parameter><parameter type="int " name="id" value="0"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxMoveEvent" name="GetPosition"><function type="wxPoint" name="GetPosition" suffix="const"><description>

Returns the position of the window generating the move change event.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMultipleChoiceDialog">
<description>
<p class="classdesc">
This class represents a dialog that shows a list of strings, and allows
the user to select one or more.</p><p class="classdesc"><b> NOTE:</b> this class is not yet implemented.</p>
</description>
<parents>
<classref name="wxDialog"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/choicdlg.h"/></includes>
<seealso>

<ref target="wxmultiplechoicedialogoverview">wxMultipleChoiceDialog overview</ref>

</seealso>
<members>
</members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMutex">
<description>
<p class="classdesc">
A mutex object is a synchronization object whose state is set to signaled when
it is not owned by any thread, and nonsignaled when it is owned. Its name comes
from its usefulness in coordinating mutually-exclusive access to a shared
resource. Only one thread at a time can own a mutex object but the mutexes are
recursive in the sense that a thread can lock a mutex which it had already
locked before (instead of dead locking the entire process in this situation by
starting to wait on a mutex which will never be released while the thread is
waiting).</p><p class="classdesc">For example, when several thread use the data stored in the linked list,
modifications to the list should be only allowed to one thread at a time
because during a new node addition the list integrity is temporarily broken
(this is also called <i> program invariant</i>).</p>
</description>
<example>

<pre>
    // this variable has an &quot;s_&quot; prefix because it is static: seeing an &quot;s_&quot; in
    // a multithreaded program is in general a good sign that you should use a
    // mutex (or a critical section)
    static wxMutex &#42;s_mutexProtectingTheGlobalData;

    // we store some numbers in this global array which is presumably used by
    // several threads simultaneously
    wxArrayInt s_data;

    void MyThread::AddNewNode(int num)
    {
        // ensure that no other thread accesses the list
        s_mutexProtectingTheGlobalList-&gt;Lock();

        s_data.Add(num);

        s_mutexProtectingTheGlobalList-&gt;Unlock();
    }

    // return true the given number is greater than all array elements
    bool MyThread::IsGreater(int num)
    {
        // before using the list we must acquire the mutex
        wxMutexLocker lock(s_mutexProtectingTheGlobalData);

        size_t count = s_data.Count();
        for ( size_t n = 0; n &lt; count; n++ )
        {
            if ( s_data&#91;n] &gt; num )
                return false;
        }

        return true;
    }
</pre>

Notice how wxMutexLocker was used in the second function to ensure that the
mutex is unlocked in any case: whether the function returns true or false
(because the destructor of the local object <i> lock</i> is always called). Using
this class instead of directly using wxMutex is, in general safer and is even
more so if your program uses C++ exceptions.

</example>
<parents>


</parents>
<includes>
<header name="wx/thread.h"/></includes>
<seealso>

<ref target="wxthread">wxThread</ref><ref target="wxcondition">wxCondition</ref>
<ref target="wxmutexlocker">wxMutexLocker</ref><ref target="wxcriticalsection">wxCriticalSection</ref>

</seealso>
<members>
<member class="wxMutex" name="wxMutex"><function type="" name="wxMutex"><description>

Default constructor.

</description></function></member>
<member class="wxMutex" name="~wxMutex"><function type="" name="~wxMutex"><description>

Destroys the wxMutex object.

</description></function></member>
<member class="wxMutex" name="Lock"><function type="wxMutexError" name="Lock"><returnvalue>

One of:

\twocolwidtha{7cm}
<table>
<tr><td><b> wxMUTEX_NO_ERROR</b></td><td>There was no error.</td></tr>
<tr><td><b> wxMUTEX_DEAD_LOCK</b></td><td>A deadlock situation was detected.</td></tr>
<tr><td><b> wxMUTEX_BUSY</b></td><td>The mutex is already locked by another thread.</td></tr>
</table>

</returnvalue><description>

Locks the mutex object.

</description></function></member>
<member class="wxMutex" name="TryLock"><function type="wxMutexError" name="TryLock"><returnvalue>

One of:

\twocolwidtha{7cm}
<table>
<tr><td><b> wxMUTEX_NO_ERROR</b></td><td>There was no error.</td></tr>
<tr><td><b> wxMUTEX_DEAD_LOCK</b></td><td>A deadlock situation was detected.</td></tr>
<tr><td><b> wxMUTEX_BUSY</b></td><td>The mutex is already locked by another thread.</td></tr>
</table>

</returnvalue><description>

Tries to lock the mutex object. If it can't, returns immediately with an error.

</description></function></member>
<member class="wxMutex" name="Unlock"><function type="wxMutexError" name="Unlock"><returnvalue>

One of:

\twocolwidtha{7cm}
<table>
<tr><td><b> wxMUTEX_NO_ERROR</b></td><td>There was no error.</td></tr>
<tr><td><b> wxMUTEX_DEAD_LOCK</b></td><td>A deadlock situation was detected.</td></tr>
<tr><td><b> wxMUTEX_BUSY</b></td><td>The mutex is already locked by another thread.</td></tr>
<tr><td><b> wxMUTEX_UNLOCKED</b></td><td>The calling thread tries to unlock an unlocked mutex.</td></tr>
</table>

</returnvalue><description>

Unlocks the mutex object.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxMutexLocker">
<description>
<p class="classdesc">
This is a small helper class to be used with <ref target="wxmutex">wxMutex</ref> 
objects. A wxMutexLocker acquires a mutex lock in the constructor and releases
(or unlocks) the mutex in the destructor making it much more difficult to
forget to release a mutex (which, in general, will promptly lead to the serious
problems). See <ref target="wxmutex">wxMutex</ref> for an example of wxMutexLocker
usage.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/thread.h"/></includes>
<seealso>

<ref target="wxmutex">wxMutex</ref><ref target="wxcriticalsectionlocker">wxCriticalSectionLocker</ref>

</seealso>
<members>
<member class="wxMutexLocker" name="wxMutexLocker"><function type="" name="wxMutexLocker"><parameters><parameter type="wxMutex&amp;" name=" mutex"></parameter></parameters><description>

Constructs a wxMutexLocker object associated with mutex and locks it.
Call <ref target="wxmutexlockerisok">IsLocked</ref> to check if the mutex was
successfully locked.

</description></function></member>
<member class="wxMutexLocker" name="~wxMutexLocker"><function type="" name="~wxMutexLocker"><description>

Destructor releases the mutex if it was successfully acquired in the ctor.

</description></function></member>
<member class="wxMutexLocker" name="IsOk"><function type="bool" name="IsOk" suffix="const"><description>

Returns true if mutex was acquired in the constructor, false otherwise.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxNode">
<description>
<p class="classdesc">
wxNodeBase is the node structure used in linked lists (see 
<ref target="wxlist">wxList</ref>) and derived classes. You should never use wxNodeBase
class directly, however, because it works with untyped (<tt> void &#42;</tt>) data and
this is unsafe. Use wxNodeBase-derived classes which are automatically defined
by WX_DECLARE_LIST and WX_DEFINE_LIST macros instead as described in
<ref target="wxlist">wxList</ref> documentation (see example there). Also note that
although there is a class called wxNode, it is defined for backwards
compatibility only and usage of this class is strongly deprecated.</p><p class="classdesc">In the documentation below, the type <tt> T</tt> should be thought of as a
``template'' parameter: this is the type of data stored in the linked list or,
in other words, the first argument of WX_DECLARE_LIST macro. Also, wxNode is
written as wxNode&lt;T&gt; even though it isn't really a template class -- but it
helps to think of it as if it were.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/list.h"/></includes>
<seealso>

<ref target="wxlist">wxList</ref><ref target="wxhashtable">wxHashTable</ref>

</seealso>
<members>
<member class="wxNode&lt;T&gt;" name="GetData"><function type="T &#42;" name="GetData" suffix="const"><description>

Retrieves the client data pointer associated with the node.

</description></function></member>
<member class="wxNode&lt;T&gt;" name="GetNext"><function type="wxNode&lt;T&gt; &#42;" name="GetNext" suffix="const"><description>

Retrieves the next node or NULL if this node is the last one.

</description></function></member>
<member class="wxNode&lt;T&gt;" name="GetPrevious"><function type="wxNode&lt;T&gt; &#42;" name="GetPrevious"><description>

Retrieves the previous node or NULL if this node is the first one in the list.

</description></function></member>
<member class="wxNode&lt;T&gt;" name="SetData"><function type="void" name="SetData"><parameters><parameter type="T &#42;" name="data"></parameter></parameters><description>

Sets the data associated with the node (usually the pointer will have been
set when the node was created).

</description></function></member>
<member class="wxNode&lt;T&gt;" name="IndexOf"><function type="int" name="IndexOf"><description>

Returns the zero-based index of this node within the list. The return value
will be NOT_FOUND if the node has not been added to a list yet.

</description></function></member></members>
<supported>
</supported>
</class><class name="wxNotebook">
<description>
<p class="classdesc">
This class represents a notebook control, which manages multiple windows with associated tabs.</p><p class="classdesc">To use the class, create a wxNotebook object and call <ref target="wxnotebookaddpage">AddPage</ref> or <ref target="wxnotebookinsertpage">InsertPage</ref>,
passing a window to be used as the page. Do not explicitly delete the window for a page that is currently
managed by wxNotebook.</p><p class="classdesc"><b> wxNotebookPage</b> is a typedef for wxWindow.</p>
</description>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/notebook.h"/></includes>
<windowstyles>
<style name="wxNB_LEFT">Place tabs on the left side. Not supported under Windows XP.</style><style name="wxNB_RIGHT">Place tabs on the right side. Not supported under Windows XP.</style><style name="wxNB_BOTTOM">Place tabs under instead of above the notebook pages. Not supported under Windows XP.</style><style name="wxNB_FIXEDWIDTH">(Windows only) All tabs will have same width.</style><style name="wxNB_MULTILINE">(Windows only) There can be several rows of tabs.</style></windowstyles>
<seealso>

<ref target="wxnotebookevent">wxNotebookEvent</ref><ref target="wximagelist">wxImageList</ref>,
<ref target="wxtabctrl">wxTabCtrl</ref>

</seealso>
<members>
<member class="wxNotebook" name="wxNotebook"><function type="" name="wxNotebook"><description>

Default constructor.

</description></function>
<function type="" name="wxNotebook"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID " name="id">The window identifier.</parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition">The window position.</parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize">The window size.</parameter><parameter type="long" name="style" value="0">The window style. See <ref target="wxnotebook">wxNotebook</ref>.</parameter><parameter type="const wxString&amp; " name="name" value="&quot;notebook&quot;">The name of the control (used only under Motif).</parameter></parameters><description>

Constructs a notebook control.

Note that sometimes you can reduce flicker by passing the wxCLIP_CHILDREN window style.















</description></function></member>
<member class="wxNotebook" name="~wxNotebook"><function type="" name="~wxNotebook"><description>

Destroys the wxNotebook object.

</description></function></member>
<member class="wxNotebook" name="AddPage"><function type="bool" name="AddPage"><parameters><parameter type="wxNotebookPage&#42;" name=" page"></parameter><parameter type="const wxString&amp;" name=" text"></parameter><parameter type="bool" name="select" value="false">Specifies whether the page should be selected.</parameter><parameter type="int" name="imageId" value="-1">Specifies the optional image index for the new page.</parameter></parameters><seealso>

<ref target="wxnotebookinsertpage">wxNotebook::InsertPage</ref>

</seealso><remarks>

Do not delete the page, it will be deleted by the notebook.

</remarks><returnvalue>

true if successful, false otherwise.

</returnvalue><description>

Adds a new page.











</description></function></member>
<member class="wxNotebook" name="AdvanceSelection"><function type="void" name="AdvanceSelection"><parameters><parameter type="bool" name="forward" value="true"></parameter></parameters><description>

Cycles through the tabs.

</description></function></member>
<member class="wxNotebook" name="AssignImageList"><function type="void" name="AssignImageList"><parameters><parameter type="wxImageList&#42;" name=" imageList"></parameter></parameters><seealso>

<ref target="wximagelist">wxImageList</ref>,
<ref target="wxnotebooksetimagelist">SetImageList</ref>

</seealso><description>

Sets the image list for the page control and takes ownership of
the list.

</description></function></member>
<member class="wxNotebook" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp;" name=" size"></parameter><parameter type="long" name="style" value="0"></parameter><parameter type="const wxString&amp; " name="name" value="&quot;notebook&quot;"></parameter></parameters><description>

Creates a notebook control. See <ref target="wxnotebookconstr">wxNotebook::wxNotebook</ref> for a description
of the parameters.

</description></function></member>
<member class="wxNotebook" name="DeleteAllPages"><function type="bool" name="DeleteAllPages"><description>

Deletes all pages.

</description></function></member>
<member class="wxNotebook" name="DeletePage"><function type="bool" name="DeletePage"><parameters><parameter type="int" name=" page"></parameter></parameters><description>

Deletes the specified page, and the associated window.

</description></function></member>
<member class="wxNotebook" name="GetImageList"><function type="wxImageList&#42;" name="GetImageList" suffix="const"><seealso>

<ref target="wximagelist">wxImageList</ref><ref target="wxnotebooksetimagelist">wxNotebook::SetImageList</ref>

</seealso><description></description></function></member>
<member class="wxNotebook" name="GetPage"><function type="wxNotebookPage&#42;" name="GetPage"><parameters><parameter type="int" name=" page"></parameter></parameters><description>

Returns the window at the given page position.

</description></function></member>
<member class="wxNotebook" name="GetPageCount"><function type="int" name="GetPageCount" suffix="const"><description>

Returns the number of pages in the notebook control.

</description></function></member>
<member class="wxNotebook" name="GetPageImage"><function type="int" name="GetPageImage" suffix="const"><parameters><parameter type="int " name="nPage"></parameter></parameters><description>

Returns the image index for the given page.

</description></function></member>
<member class="wxNotebook" name="GetPageText"><function type="wxString" name="GetPageText" suffix="const"><parameters><parameter type="int " name="nPage"></parameter></parameters><description>

Returns the string for the given page.

</description></function></member>
<member class="wxNotebook" name="GetRowCount"><function type="int" name="GetRowCount" suffix="const"><description>

Returns the number of rows in the notebook control.

</description></function></member>
<member class="wxNotebook" name="GetSelection"><function type="int" name="GetSelection" suffix="const"><description>

Returns the currently selected page, or $-1$ if none was selected.

Note that this method may return either the previously or newly selected page
when called from the <tt> EVT_NOTEBOOK_PAGE_CHANGED</tt> handler depending on
the platform and so
<ref target="wxnotebookeventgetselection">wxNotebookEvent::GetSelection</ref> should be
used instead in this case.

</description></function></member>
<member class="wxNotebook" name="InsertPage"><function type="bool" name="InsertPage"><parameters><parameter type="int" name=" index"></parameter><parameter type="wxNotebookPage&#42;" name=" page"></parameter><parameter type="const wxString&amp;" name=" text"></parameter><parameter type="bool" name="select" value="false">Specifies whether the page should be selected.</parameter><parameter type="int" name="imageId" value="-1">Specifies the optional image index for the new page.</parameter></parameters><seealso>

<ref target="wxnotebookaddpage">wxNotebook::AddPage</ref>

</seealso><remarks>

Do not delete the page, it will be deleted by the notebook.

</remarks><returnvalue>

true if successful, false otherwise.

</returnvalue><description>

Inserts a new page at the specified position.













</description></function></member>
<member class="wxNotebook" name="OnSelChange"><function type="void" name="OnSelChange"><parameters><parameter type="wxNotebookEvent&amp;" name=" event"></parameter></parameters><seealso>

<ref target="wxnotebookevent">wxNotebookEvent</ref>

</seealso><description>

An event handler function, called when the page selection is changed.

</description></function></member>
<member class="wxNotebook" name="RemovePage"><function type="bool" name="RemovePage"><parameters><parameter type="int" name=" page"></parameter></parameters><description>

Deletes the specified page, without deleting the associated window.

</description></function></member>
<member class="wxNotebook" name="SetImageList"><function type="void" name="SetImageList"><parameters><parameter type="wxImageList&#42;" name=" imageList"></parameter></parameters><seealso>

<ref target="wximagelist">wxImageList</ref>,
<ref target="wxnotebookassignimagelist">AssignImageList</ref>

</seealso><description>

Sets the image list for the page control. It does not take
ownership of the image list, you must delete it yourself.

</description></function></member>
<member class="wxNotebook" name="SetPadding"><function type="void" name="SetPadding"><parameters><parameter type="const wxSize&amp;" name=" padding"></parameter></parameters><description>

Sets the amount of space around each page's icon and label, in pixels.

<b> NB:</b> The vertical padding cannot be changed in wxGTK.

</description></function></member>
<member class="wxNotebook" name="SetPageSize"><function type="void" name="SetPageSize"><parameters><parameter type="const wxSize&amp;" name=" size"></parameter></parameters><description>

Sets the width and height of the pages.

<b> NB:</b> This method is currently not implemented for wxGTK.

</description></function></member>
<member class="wxNotebook" name="SetPageImage"><function type="bool" name="SetPageImage"><parameters><parameter type="int" name=" page"></parameter><parameter type="int " name="image"></parameter></parameters><description>

Sets the image index for the given page. <i> image</i> is an index into
the image list which was set with <ref target="wxnotebooksetimagelist">wxNotebook::SetImageList</ref>.

</description></function></member>
<member class="wxNotebook" name="SetPageText"><function type="bool" name="SetPageText"><parameters><parameter type="int" name=" page"></parameter><parameter type="const wxString&amp; " name="text"></parameter></parameters><description>

Sets the text for the given page.

</description></function></member>
<member class="wxNotebook" name="SetSelection"><function type="int" name="SetSelection"><parameters><parameter type="int" name=" page"></parameter></parameters><seealso>

<ref target="wxnotebookgetselection">wxNotebook::GetSelection</ref>


</seealso><description>

Sets the selection for the given page, returning the previous selection.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxNotebookEvent">
<description>
<p class="classdesc">
This class represents the events generated by a notebook control: currently,
there are two of them. The PAGE_CHANGING event is sent before the current
page is changed. It allows to the program to examine the current page (which
can be retrieved with 
<ref target="wxnotebookeventgetoldselection">GetOldSelection()</ref>) and to veto the page
change by calling <ref target="wxnotifyeventveto">Veto()</ref> if, for example, the
current values in the controls of the old page are invalid.</p><p class="classdesc">The second event - PAGE_CHANGED - is sent after the page has been changed and
the program cannot veto it any more, it just informs it about the page change.</p><p class="classdesc">To summarize, if the program is interested in validating the page values
before allowing the user to change it, it should process the PAGE_CHANGING
event, otherwise PAGE_CHANGED is probably enough. In any case, it is probably
unnecessary to process both events at once.</p>
</description>
<parents>
<classref name="wxNotifyEvent"/>
<classref name="wxCommandEvent"/>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/notebook.h" comment="\input noteevt.inc"/></includes>
<seealso>

<ref target="wxnotebook">wxNotebook</ref><ref target="wxtabctrl">wxTabCtrl</ref><ref target="wxtabevent">wxTabEvent</ref>

</seealso>
<members>
<member class="wxNotebookEvent" name="wxNotebookEvent"><function type="" name="wxNotebookEvent"><parameters><parameter type="wxEventType" name="eventType" value="wxEVT_NULL"></parameter><parameter type="int" name="id" value="0"></parameter><parameter type="int" name="sel" value="-1"></parameter><parameter type="int" name="oldSel" value="-1"></parameter></parameters><description>

Constructor (used internally by wxWindows only).

</description></function></member>
<member class="wxNotebookEvent" name="GetOldSelection"><function type="int" name="GetOldSelection" suffix="const"><description>

Returns the page that was selected before the change, $-1$ if none was selected.

</description></function></member>
<member class="wxNotebookEvent" name="GetSelection"><function type="int" name="GetSelection" suffix="const"><description>

Returns the currently selected page, or $-1$ if none was selected.

<b> NB:</b> under Windows, GetSelection() will return the same value as
<ref target="wxnotebookeventgetoldselection">GetOldSelection()</ref> when called from
<tt> EVT_NOTEBOOK_PAGE_CHANGING</tt> handler and not the page which is going to
be selected.

</description></function></member>
<member class="wxNotebookEvent" name="SetOldSelection"><function type="void" name="SetOldSelection"><parameters><parameter type="int" name=" page"></parameter></parameters><description>

Sets the id of the page selected before the change.

</description></function></member>
<member class="wxNotebookEvent" name="SetSelection"><function type="void" name="SetSelection"><parameters><parameter type="int" name=" page"></parameter></parameters><seealso>

<ref target="wxnotebookeventgetselection">wxNotebookEvent::GetSelection</ref>


</seealso><description>

Sets the selection member variable.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxNotebookSizer">
<description>
<p class="classdesc">
wxNotebookSizer is a specialized sizer to make sizers work in connection
with using notebooks. This sizer is different from any other sizer as 
you must not add any children to it - instead, it queries the notebook class itself.
The only thing this sizer does is to determine the size of the biggest
page of the notebook and report an adjusted minimal size to a more toplevel
sizer.</p><p class="classdesc">For more information, please see <ref target="notebooksizerprogramming">Programming with wxNotebookSizer</ref>.</p>
</description>
<parents>
<classref name="wxSizer"/>
<classref name="wxObject"/>

</parents>
<seealso>

<ref target="wxsizer">wxSizer</ref><ref target="wxnotebook">wxNotebook</ref><ref target="sizeroverview">Sizer overview</ref>

</seealso>
<members>
<member class="wxNotebookSizer" name="wxNotebookSizer"><function type="" name="wxNotebookSizer"><parameters><parameter type="wxNotebook&#42; " name="notebook"></parameter></parameters><description>

Constructor. It takes an associated notebook as its only parameter.

</description></function></member>
<member class="wxNotebookSizer" name="GetNotebook"><function type="wxNotebook&#42;" name="GetNotebook"><description>

Returns the notebook associated with the sizer.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxNotifyEvent">
<description>
<p class="classdesc">
This class is not used by the event handlers by itself, but is a base class
for other event classes (such as <ref target="wxnotebookevent">wxNotebookEvent</ref>).</p><p class="classdesc">It (or an object of a derived class) is sent when the controls state is being
changed and allows the program to <ref target="wxnotifyeventveto">Veto()</ref> this
change if it wants to prevent it from happening.</p>
</description>
<parents>
<classref name="wxCommandEvent"/>
<classref name="wxEvent"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
</events>
<seealso>

<ref target="wxnotebookevent">wxNotebookEvent</ref>

</seealso>
<members>
<member class="wxNotifyEvent" name="wxNotifyEvent"><function type="" name="wxNotifyEvent"><parameters><parameter type="wxEventType" name="eventType" value="wxEVT_NULL"></parameter><parameter type="int" name="id" value="0"></parameter></parameters><description>

Constructor (used internally by wxWindows only).

</description></function></member>
<member class="wxNotifyEvent" name="Allow"><function type="void" name="Allow"><description>

This is the opposite of <ref target="wxnotifyeventveto">Veto()</ref>: it explicitly
allows the event to be processed. For most events it is not necessary to call
this method as the events are allowed anyhow but some are forbidden by default
(this will be mentioned in the corresponding event description).

</description></function></member>
<member class="wxNotifyEvent" name="IsAllowed"><function type="bool" name="IsAllowed" suffix="const"><description>

Returns true if the change is allowed (<ref target="wxnotifyeventveto">Veto()</ref> 
hasn't been called) or false otherwise (if it was).

</description></function></member>
<member class="wxNotifyEvent" name="Veto"><function type="void" name="Veto"><description>

Prevents the change announced by this event from happening.

It is in general a good idea to notify the user about the reasons for vetoing
the change because otherwise the applications behaviour (which just refuses to
do what the user wants) might be quite surprising.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxObject">
<description>
<p class="classdesc">
This is the root class of all wxWindows classes.
It declares a virtual destructor which ensures that
destructors get called for all derived class objects where necessary.</p><p class="classdesc">wxObject is the hub of a dynamic object creation
scheme, enabling a program to create instances of a class only knowing
its string class name, and to query the class hierarchy.</p><p class="classdesc">The class contains optional debugging versions
of <b> new</b> and <b> delete</b>, which can help trace memory allocation
and deallocation problems.</p><p class="classdesc">wxObject can be used to implement reference counted objects, such as
wxPen, wxBitmap and others.</p>
</description>
<seealso>

<ref target="wxclassinfo">wxClassInfo</ref><ref target="debuggingoverview">Debugging overview</ref>,
<ref target="wxobjectrefdata">wxObjectRefData</ref>

</seealso>
<members>
<member class="wxObject" name="wxObject"><function type="" name="wxObject"><description>

</description></function>
<function type="" name="wxObject"><parameters><parameter type="const wxObject&amp;" name=" other"></parameter></parameters><description>

Default and copy constructors.

</description></function></member>
<member class="wxObject" name="~wxObject"><function type="" name="wxObject"><description>

Destructor. Performs dereferencing, for those objects
that use reference counting.

</description></function></member>
<member class="wxObject" name="m_refData"></member>
<member class="wxObject" name="Dump"><function type="void" name="Dump"><parameters><parameter type="ostream&amp;" name=" stream"></parameter></parameters><remarks>

Currently wxWindows does not define Dump for derived classes, but
programmers may wish to use it for their own applications. Be sure to
call the Dump member of the class's base class to allow all information to be
dumped.

The implementation of this function in wxObject just writes the class name of
the object.

</remarks><description>

A virtual function that may be redefined by derived classes to allow dumping of
memory states.

This function is only defined in debug build and doesn't exist at all if
<tt> __WXDEBUG__</tt> is not defined.





</description></function></member>
<member class="wxObject" name="GetClassInfo"><function type="wxClassInfo &#42;" name="GetClassInfo"><description>

This virtual function is redefined for every class that requires run-time
type information, when using DECLARE_CLASS macros.

</description></function></member>
<member class="wxObject" name="GetRefData"><function type="wxObjectRefData&#42;" name="GetRefData" suffix="const"><seealso>

<ref target="wxobjectref">wxObject::Ref</ref><ref target="wxobjectunref">wxObject::UnRef</ref><ref target="wxobjectmrefdata">wxObject::m_refData</ref>,
<ref target="wxobjectsetrefdata">wxObject::SetRefData</ref>,
<ref target="wxobjectrefdata">wxObjectRefData</ref>

</seealso><description></description></function></member>
<member class="wxObject" name="IsKindOf"><function type="bool" name="IsKindOf"><parameters><parameter type="wxClassInfo &#42;" name="info">A pointer to a class information object, which may be obtained
by using the CLASSINFO macro.</parameter></parameters><example>

<pre>
  bool tmp = obj-&gt;IsKindOf(CLASSINFO(wxFrame));
</pre>

</example><returnvalue>

true if the class represented by <i> info</i> is the same class as
this one or is derived from it.

</returnvalue><description>

Determines whether this class is a subclass of (or the same class as)
the given class.





</description></function></member>
<member class="wxObject" name="Ref"><function type="void" name="Ref"><parameters><parameter type="const wxObject&amp; " name="clone">The object to `clone'.</parameter></parameters><seealso>

<ref target="wxobjectunref">wxObject::UnRef</ref><ref target="wxobjectmrefdata">wxObject::m_refData</ref>,
<ref target="wxobjectsetrefdata">wxObject::SetRefData</ref><ref target="wxobjectgetrefdata">wxObject::GetRefData</ref>,
<ref target="wxobjectrefdata">wxObjectRefData</ref>

</seealso><description></description></function></member>
<member class="wxObject" name="SetRefData"><function type="void" name="SetRefData"><parameters><parameter type="wxObjectRefData&#42;" name=" data"></parameter></parameters><seealso>

<ref target="wxobjectref">wxObject::Ref</ref><ref target="wxobjectunref">wxObject::UnRef</ref><ref target="wxobjectmrefdata">wxObject::m_refData</ref>,
<ref target="wxobjectgetrefdata">wxObject::GetRefData</ref>,
<ref target="wxobjectrefdata">wxObjectRefData</ref>

</seealso><description></description></function></member>
<member class="wxObject" name="UnRef"><function type="void" name="UnRef"><seealso>

<ref target="wxobjectref">wxObject::Ref</ref><ref target="wxobjectmrefdata">wxObject::m_refData</ref>,
<ref target="wxobjectsetrefdata">wxObject::SetRefData</ref><ref target="wxobjectgetrefdata">wxObject::GetRefData</ref>,
<ref target="wxobjectrefdata">wxObjectRefData</ref>

</seealso><description></description></function></member>
<member class="wxObject" name="operator new"><function type="void &#42;" name="new"><parameters><parameter type="size_t " name="size"></parameter><parameter type="const wxString&amp; " name="filename" value="NULL"></parameter><parameter type="int" name="lineNum" value="0"></parameter></parameters><description>

The <i> new</i> operator is defined for debugging versions of the library only, when
the identifier __WXDEBUG__ is defined. It takes over memory allocation, allowing
wxDebugContext operations.

</description></function></member>
<member class="wxObject" name="operator delete"><function type="void" name="delete"><parameters><parameter type="void " name="buf"></parameter></parameters><description>

The <i> delete</i> operator is defined for debugging versions of the library only, when
the identifier __WXDEBUG__ is defined. It takes over memory deallocation, allowing
wxDebugContext operations.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxObjectRefData">
<description>
<p class="classdesc">
This class is used to store reference-counted data. Derive classes from this to
store your own data. When retrieving information from a <b> wxObject</b>'s reference data,
you will need to cast to your own derived class.</p>
</description>
<friends>

<classref name="wxObject"/>

</friends>
<seealso>

<ref target="wxobject">wxObject</ref>

</seealso>
<members>
<member class="wxObjectRefData" name="m_count"></member>
<member class="wxObjectRefData" name="wxObjectRefData"><function type="" name="wxObjectRefData"><description>

Default constructor. Initialises the <b> m_count</b> member to 1.

</description></function></member>
<member class="wxObjectRefData" name="~wxObjectRefData"><function type="" name="wxObjectRefData"><description>

Destructor.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxOutputStream">
<description>
<p class="classdesc">
wxOutputStream is an abstract base class which may not be used directly.</p>
</description>
<parents>
<classref name="wxStreamBase"/>

</parents>
<includes>
<header name="wx/stream.h"/></includes>
<members>
<member class="wxOutputStream" name="wxOutputStream"><function type="" name="wxOutputStream"><description>

Creates a dummy wxOutputStream object.

</description></function></member>
<member class="wxOutputStream" name="~wxOutputStream"><function type="" name="~wxOutputStream"><description>

Destructor.

</description></function></member>
<member class="wxOutputStream" name="LastWrite"><function type="size_t" name="LastWrite" suffix="const"><description>

Returns the number of bytes written during the last Write().

</description></function></member>
<member class="wxOutputStream" name="PutC"><function type="void" name="PutC"><parameters><parameter type="char" name=" c"></parameter></parameters><description>

Puts the specified character in the output queue and increments the
stream position.

</description></function></member>
<member class="wxOutputStream" name="SeekO"><function type="off_t" name="SeekO"><parameters><parameter type="off_t" name=" pos"></parameter><parameter type="wxSeekMode" name=" mode"></parameter></parameters><description>

Changes the stream current position.

</description></function></member>
<member class="wxOutputStream" name="TellO"><function type="off_t" name="TellO" suffix="const"><description>

Returns the current stream position.

</description></function></member>
<member class="wxOutputStream" name="Write"><function type="wxOutputStream&amp;" name="Write"><parameters><parameter type="const void &#42;" name="buffer"></parameter><parameter type="size_t" name=" size"></parameter></parameters><description>

Writes the specified amount of bytes using the data of <i> buffer</i>. 
<i> WARNING!</i> The buffer absolutely needs to have at least the specified size.

This function returns a reference on the current object, so the user can test
any states of the stream right away.

</description></function>
<function type="wxOutputStream&amp;" name="Write"><parameters><parameter type="wxInputStream&amp;" name=" stream_in"></parameter></parameters><description>

Reads data from the specified input stream and stores them 
in the current stream. The data is read until an error is raised
by one of the two streams.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPageSetupDialog">
<description>
<p class="classdesc">
This class represents the page setup common dialog. The page setup dialog is standard from
Windows 95 on, replacing the print setup dialog (which is retained in Windows and wxWindows
for backward compatibility). On Windows 95 and NT 4.0 and above, the page setup dialog is
native to the windowing system, otherwise it is emulated.</p><p class="classdesc">The page setup dialog contains controls for paper size (A4, A5 etc.), orientation (landscape
or portrait), and controls for setting left, top, right and bottom margin sizes in millimetres.</p><p class="classdesc">When the dialog has been closed, you need to query the <ref target="wxpagesetupdialogdata">wxPageSetupDialogData</ref> object
associated with the dialog.</p><p class="classdesc">Note that the OK and Cancel buttons do not destroy the dialog; this must be done by the
application.</p>
</description>
<parents>
<classref name="wxDialog"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/printdlg.h"/></includes>
<seealso>

<ref target="wxprintdialog">wxPrintDialog</ref><ref target="wxpagesetupdialogdata">wxPageSetupDialogData</ref>

</seealso>
<members>
<member class="wxPageSetupDialog" name="wxPageSetupDialog"><function type="" name="wxPageSetupDialog"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxPageSetupDialogData&#42; " name="data" value="NULL"></parameter></parameters><description>

Constructor. Pass a parent window, and optionally a pointer to a block of page setup
data, which will be copied to the print dialog's internal data.

</description></function></member>
<member class="wxPageSetupDialog" name="~wxPageSetupDialog"><function type="" name="~wxPageSetupDialog"><description>

Destructor.

</description></function></member>
<member class="wxPageSetupDialog" name="GetPageSetupData"><function type="wxPageSetupDialogData&amp;" name="GetPageSetupData"><description>

Returns the <ref target="wxpagesetupdialogdata">page setup data</ref> associated with the dialog.


</description></function></member>
<member class="wxPageSetupDialog" name="ShowModal"><function type="int" name="ShowModal"><description>

Shows the dialog, returning wxID_OK if the user pressed OK, and wxID_CANCEL
otherwise.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPageSetupDialogData">
<description>
<p class="classdesc">
This class holds a variety of information related to <ref target="wxpagesetupdialog">wxPageSetupDialog</ref>.</p><p class="classdesc">It contains a <ref target="wxprintdata">wxPrintData</ref> member which is used to hold basic printer configuration data (as opposed to the
user-interface configuration settings stored by wxPageSetupDialogData).</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/cmndata.h"/></includes>
<seealso>

<ref target="wxpagesetupdialog">wxPageSetupDialog</ref>

</seealso>
<members>
<member class="wxPageSetupDialogData" name="wxPageSetupDialogData"><function type="" name="wxPageSetupDialogData"><description>

Default constructor.

</description></function>
<function type="" name="wxPageSetupDialogData"><parameters><parameter type="wxPageSetupDialogData&amp;" name=" data"></parameter></parameters><description>

Copy constructor.

</description></function>
<function type="" name="wxPrintDialogData"><parameters><parameter type="wxPrintData&amp;" name=" printData"></parameter></parameters><description>

Construct an object from a print dialog data object.

</description></function></member>
<member class="wxPageSetupDialogData" name="~wxPageSetupDialogData"><function type="" name="~wxPageSetupDialogData"><description>

Destructor.

</description></function></member>
<member class="wxPageSetupDialogData" name="EnableHelp"><function type="void" name="EnableHelp"><parameters><parameter type="bool " name="flag"></parameter></parameters><description>

Enables or disables the `Help' button (Windows only).

</description></function></member>
<member class="wxPageSetupDialogData" name="EnableMargins"><function type="void" name="EnableMargins"><parameters><parameter type="bool " name="flag"></parameter></parameters><description>

Enables or disables the margin controls (Windows only).

</description></function></member>
<member class="wxPageSetupDialogData" name="EnableOrientation"><function type="void" name="EnableOrientation"><parameters><parameter type="bool " name="flag"></parameter></parameters><description>

Enables or disables the orientation control (Windows only).

</description></function></member>
<member class="wxPageSetupDialogData" name="EnablePaper"><function type="void" name="EnablePaper"><parameters><parameter type="bool " name="flag"></parameter></parameters><description>

Enables or disables the paper size control (Windows only).

</description></function></member>
<member class="wxPageSetupDialogData" name="EnablePrinter"><function type="void" name="EnablePrinter"><parameters><parameter type="bool " name="flag"></parameter></parameters><description>

Enables or disables the <b> Printer</b> button, which invokes a printer setup dialog.

</description></function></member>
<member class="wxPageSetupDialogData" name="GetDefaultMinMargins"><function type="bool" name="GetDefaultMinMargins" suffix="const"><description>

Returns true if the page setup dialog will take its minimum margin values from the currently
selected printer properties. Windows only.

</description></function></member>
<member class="wxPageSetupDialogData" name="GetEnableMargins"><function type="bool" name="GetEnableMargins" suffix="const"><description>

Returns true if the margin controls are enabled (Windows only).

</description></function></member>
<member class="wxPageSetupDialogData" name="GetEnableOrientation"><function type="bool" name="GetEnableOrientation" suffix="const"><description>

Returns true if the orientation control is enabled (Windows only).

</description></function></member>
<member class="wxPageSetupDialogData" name="GetEnablePaper"><function type="bool" name="GetEnablePaper" suffix="const"><description>

Returns true if the paper size control is enabled (Windows only).

</description></function></member>
<member class="wxPageSetupDialogData" name="GetEnablePrinter"><function type="bool" name="GetEnablePrinter" suffix="const"><description>

Returns true if the printer setup button is enabled.

</description></function></member>
<member class="wxPageSetupDialogData" name="GetEnableHelp"><function type="bool" name="GetEnableHelp" suffix="const"><description>

Returns true if the printer setup button is enabled.

</description></function></member>
<member class="wxPageSetupDialogData" name="GetDefaultInfo"><function type="bool" name="GetDefaultInfo" suffix="const"><description>

Returns true if the dialog will simply return default printer information (such as orientation)
instead of showing a dialog. Windows only.

</description></function></member>
<member class="wxPageSetupDialogData" name="GetMarginTopLeft"><function type="wxPoint" name="GetMarginTopLeft" suffix="const"><description>

Returns the left (x) and top (y) margins in millimetres.

</description></function></member>
<member class="wxPageSetupDialogData" name="GetMarginBottomRight"><function type="wxPoint" name="GetMarginBottomRight" suffix="const"><description>

Returns the right (x) and bottom (y) margins in millimetres.

</description></function></member>
<member class="wxPageSetupDialogData" name="GetMinMarginTopLeft"><function type="wxPoint" name="GetMinMarginTopLeft" suffix="const"><description>

Returns the left (x) and top (y) minimum margins the user can enter (Windows only). Units
are in millimetres

</description></function></member>
<member class="wxPageSetupDialogData" name="GetMinMarginBottomRight"><function type="wxPoint" name="GetMinMarginBottomRight" suffix="const"><description>

Returns the right (x) and bottom (y) minimum margins the user can enter (Windows only). Units
are in millimetres

</description></function></member>
<member class="wxPageSetupDialogData" name="GetPaperId"><function type="wxPaperSize" name="GetPaperId" suffix="const"><description>

Returns the paper id (stored in the internal wxPrintData object).

For further information, see <ref target="wxprintdatasetpaperid">wxPrintData::SetPaperId</ref>.

</description></function></member>
<member class="wxPageSetupDialogData" name="GetPaperSize"><function type="wxSize" name="GetPaperSize" suffix="const"><description>

Returns the paper size in millimetres.

</description></function></member>
<member class="wxPageSetupDialogData" name="GetPrintData"><function type="wxPrintData&amp;" name="GetPrintData"><description>

Returns a reference to the <ref target="wxprintdata">print data</ref> associated with this object.

</description></function></member>
<member class="wxPageSetupDialogData" name="Ok"><function type="bool" name="Ok" suffix="const"><description>

Returns true if the print data associated with the dialog data is valid.
This can return false on Windows if the current printer is not set, for example.
On all other platforms, it returns true.

</description></function></member>
<member class="wxPageSetupDialogData" name="SetDefaultInfo"><function type="void" name="SetDefaultInfo"><parameters><parameter type="bool" name=" flag"></parameter></parameters><description>

Pass true if the dialog will simply return default printer information (such as orientation)
instead of showing a dialog. Windows only.

</description></function></member>
<member class="wxPageSetupDialogData" name="SetDefaultMinMargins"><function type="void" name="SetDefaultMinMargins"><parameters><parameter type="bool" name=" flag"></parameter></parameters><description>

Pass true if the page setup dialog will take its minimum margin values from the currently
selected printer properties. Windows only. Units are in millimetres

</description></function></member>
<member class="wxPageSetupDialogData" name="SetMarginTopLeft"><function type="void" name="SetMarginTopLeft"><parameters><parameter type="const wxPoint&amp; " name="pt"></parameter></parameters><description>

Sets the left (x) and top (y) margins in millimetres.

</description></function></member>
<member class="wxPageSetupDialogData" name="SetMarginBottomRight"><function type="void" name="SetMarginBottomRight"><parameters><parameter type="const wxPoint&amp; " name="pt"></parameter></parameters><description>

Sets the right (x) and bottom (y) margins in millimetres.

</description></function></member>
<member class="wxPageSetupDialogData" name="SetMinMarginTopLeft"><function type="void" name="SetMinMarginTopLeft"><parameters><parameter type="const wxPoint&amp; " name="pt"></parameter></parameters><description>

Sets the left (x) and top (y) minimum margins the user can enter (Windows only). Units are
in millimetres.

</description></function></member>
<member class="wxPageSetupDialogData" name="SetMinMarginBottomRight"><function type="void" name="SetMinMarginBottomRight"><parameters><parameter type="const wxPoint&amp; " name="pt"></parameter></parameters><description>

Sets the right (x) and bottom (y) minimum margins the user can enter (Windows only). Units are
in millimetres.

</description></function></member>
<member class="wxPageSetupDialogData" name="SetPaperId"><function type="void" name="SetPaperId"><parameters><parameter type="wxPaperSize&amp; " name="id"></parameter></parameters><description>

Sets the paper size id. For further information, see <ref target="wxprintdatasetpaperid">wxPrintData::SetPaperId</ref>.

Calling this function overrides the explicit paper dimensions passed in <ref target="wxpagesetupdialogdatasetpapersize">wxPageSetupDialogData::SetPaperSize</ref>.

</description></function></member>
<member class="wxPageSetupDialogData" name="SetPaperSize"><function type="void" name="SetPaperSize"><parameters><parameter type="const wxSize&amp; " name="size"></parameter></parameters><description>

Sets the paper size in millimetres. If a corresponding paper id is found, it will be set in the
internal wxPrintData object, otherwise the paper size overrides the paper id.

</description></function></member>
<member class="wxPageSetupDialogData" name="SetPrintData"><function type="void" name="SetPrintData"><parameters><parameter type="const wxPrintData&amp;" name=" printData"></parameter></parameters><description>

Sets the <ref target="wxprintdata">print data</ref> associated with this object.

</description></function></member>
<member class="wxPageSetupDialogData" name="operator $=$"><function type="void" name="operator $=$"><parameters><parameter type="const wxPrintData&amp;" name=" data"></parameter></parameters><description>

Assigns print data to this object.

</description></function>
<function type="void" name="operator $=$"><parameters><parameter type="const wxPageSetupDialogData&amp;" name=" data"></parameter></parameters><description>

Assigns page setup data to this object.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPaintDC">
<description>
<p class="classdesc">
A wxPaintDC must be constructed if an application wishes to paint on the
client area of a window from within an <b> OnPaint</b> event.
This should normally be constructed as a temporary stack object; don't store
a wxPaintDC object. If you have an OnPaint handler, you <i> must</i> create a wxPaintDC
object within it even if you don't actually use it.</p><p class="classdesc">Using wxPaintDC within OnPaint is important because it automatically
sets the clipping area to the damaged area of the window. Attempts to draw
outside this area do not appear.</p><p class="classdesc">To draw on a window from outside <b> OnPaint</b>, construct a <ref target="wxclientdc">wxClientDC</ref> object.</p><p class="classdesc">To draw on the whole window including decorations, construct a <ref target="wxwindowdc">wxWindowDC</ref> object
(Windows only).</p>
</description>
<parents>
<classref name="wxWindowDC"/>
<classref name="wxDC"/>

</parents>
<includes>
<header name="wx/dcclient.h"/></includes>
<seealso>

<ref target="wxdc">wxDC</ref><ref target="wxmemorydc">wxMemoryDC</ref><ref target="wxpaintdc">wxPaintDC</ref>,
<ref target="wxwindowdc">wxWindowDC</ref><ref target="wxscreendc">wxScreenDC</ref>

</seealso>
<members>
<member class="wxPaintDC" name="wxPaintDC"><function type="" name="wxPaintDC"><parameters><parameter type="wxWindow&#42;" name=" window"></parameter></parameters><description>

Constructor. Pass a pointer to the window on which you wish to paint.



</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPaintEvent">
<description>
<p class="classdesc">
A paint event is sent when a window's contents needs to be repainted.</p>
</description>
<remarks>

Note that In a paint event handler, the application must <i> always</i> create a <ref target="wxpaintdc">wxPaintDC</ref> object,
even if you do not use it. Otherwise, under MS Windows, refreshing for this and other windows will go wrong.

For example:

<pre>
  void MyWindow::OnPaint(wxPaintEvent&amp; event)
  {
      wxPaintDC dc(this);

      DrawMyDocument(dc);
  }
</pre>

You can optimize painting by retrieving the rectangles
that have been damaged and only repainting these. The rectangles are in
terms of the client area, and are unscrolled, so you will need to do
some calculations using the current view position to obtain logical,
scrolled units.

Here is an example of using the <ref target="wxregioniterator">wxRegionIterator</ref> class:

<pre>
// Called when window needs to be repainted.
void MyWindow::OnPaint(wxPaintEvent&amp; event)
{
  wxPaintDC dc(this);

  // Find Out where the window is scrolled to
  int vbX,vbY;                     // Top left corner of client
  GetViewStart(&amp;vbX,&amp;vbY);

  int vX,vY,vW,vH;                 // Dimensions of client area in pixels
  wxRegionIterator upd(GetUpdateRegion()); // get the update rect list

  while (upd)
  {
    vX = upd.GetX();
    vY = upd.GetY();
    vW = upd.GetW();
    vH = upd.GetH();

    // Alternatively we can do this:
    // wxRect rect(upd.GetRect());

    // Repaint this rectangle
    ...some code...

    upd ++ ;
  }
}
</pre>

</remarks>
<parents>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_PAINT(func)">Process a wxEVT_PAINT event.</event></events>
<seealso>

<ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxPaintEvent" name="wxPaintEvent"><function type="" name="wxPaintEvent"><parameters><parameter type="int " name="id" value="0"></parameter></parameters><description>

Constructor.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPalette">
<description>
<p class="classdesc">
A palette is a table that maps pixel values to RGB colours. It allows the colours
of a low-depth bitmap, for example, to be mapped to the available colours in a display.</p>
</description>
<parents>
<classref name="wxGDIObject"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/palette.h"/></includes>
<predefs>

Objects:

<b> wxNullPalette</b>

</predefs>
<seealso>

<ref target="wxdcsetpalette">wxDC::SetPalette</ref><ref target="wxbitmap">wxBitmap</ref>

</seealso>
<members>
<member class="wxPalette" name="wxPalette"><function type="" name="wxPalette"><description>

Default constructor.

</description></function>
<function type="" name="wxPalette"><parameters><parameter type="const wxPalette&amp;" name=" palette"></parameter></parameters><description>

Copy constructor. This uses reference counting so is a cheap operation.

</description></function>
<function type="" name="wxPalette"><parameters><parameter type="int" name=" n"></parameter><parameter type="const unsigned char&#42; " name="red">An array of red values.</parameter><parameter type="const unsigned char&#42; " name="green">An array of green values.</parameter><parameter type="const unsigned char&#42; " name="blue">An array of blue values.</parameter></parameters><seealso>

<ref target="wxpalettecreate">wxPalette::Create</ref>

\perlnote{In wxPerl the third constructor form takes as parameters
  3 array references ( they must be of the same length ).}

</seealso><description>

Creates a palette from arrays of size <i> n</i>, one for each
red, blue or green component.













</description></function></member>
<member class="wxPalette" name="~wxPalette"><function type="" name="~wxPalette"><description>

Destructor.

</description></function></member>
<member class="wxPalette" name="Create"><function type="bool" name="Create"><parameters><parameter type="int" name=" n"></parameter><parameter type="const unsigned char&#42; " name="red">An array of red values.</parameter><parameter type="const unsigned char&#42; " name="green">An array of green values.</parameter><parameter type="const unsigned char&#42; " name="blue">An array of blue values.</parameter></parameters><seealso>

<ref target="wxpaletteconstr">wxPalette::wxPalette</ref>

</seealso><returnvalue>

true if the creation was successful, false otherwise.

</returnvalue><description>

Creates a palette from arrays of size <i> n</i>, one for each
red, blue or green component.











</description></function></member>
<member class="wxPalette" name="GetPixel"><function type="int" name="GetPixel" suffix="const"><parameters><parameter type="const unsigned char " name="red">Red value.</parameter><parameter type="const unsigned char " name="green">Green value.</parameter><parameter type="const unsigned char " name="blue">Blue value.</parameter></parameters><seealso>

<ref target="wxpalettegetrgb">wxPalette::GetRGB</ref>

</seealso><returnvalue>

The nearest palette index.

</returnvalue><description>

Returns a pixel value (index into the palette) for the given RGB values.









</description></function></member>
<member class="wxPalette" name="GetRGB"><function type="bool" name="GetPixel" suffix="const"><parameters><parameter type="int" name=" pixel"></parameter><parameter type="const unsigned char&#42; " name="red">Receives the red value.</parameter><parameter type="const unsigned char&#42; " name="green">Receives the green value.</parameter><parameter type="const unsigned char&#42; " name="blue">Receives the blue value.</parameter></parameters><seealso>

<ref target="wxpalettegetpixel">wxPalette::GetPixel</ref>

\perlnote{In wxPerl this method takes only the <tt> pixel</tt> parameter and
  returns a 3-element list ( or the empty list upon failure ).}

</seealso><returnvalue>

true if the operation was successful.

</returnvalue><description>

Returns RGB values for a given palette index.











</description></function></member>
<member class="wxPalette" name="Ok"><function type="bool" name="Ok" suffix="const"><description>

Returns true if palette data is present.

</description></function></member>
<member class="wxPalette" name="operator $=$"><function type="wxPalette&amp;" name="operator $=$"><parameters><parameter type="const wxPalette&amp; " name="palette"></parameter></parameters><description>

Assignment operator, using reference counting. Returns a reference
to `this'.

</description></function></member>
<member class="wxPalette" name="operator $==$"><function type="bool" name="operator $==$"><parameters><parameter type="const wxPalette&amp; " name="palette"></parameter></parameters><description>

Equality operator. Two palettes are equal if they contain pointers
to the same underlying palette data. It does not compare each attribute,
so two independently-created palettes using the same parameters will
fail the test.

</description></function></member>
<member class="wxPalette" name="operator $!=$"><function type="bool" name="operator $!=$"><parameters><parameter type="const wxPalette&amp; " name="palette"></parameter></parameters><description>

Inequality operator. Two palettes are not equal if they contain pointers
to different underlying palette data. It does not compare each attribute.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPanel">
<description>
<p class="classdesc">
A panel is a window on which controls are placed. It is usually placed within a frame.
It contains minimal extra functionality over and above its parent class wxWindow; its main
purpose is to be similar in appearance and functionality to a dialog, but with the flexibility of
having any window as a parent.</p><p class="classdesc"><i> Note:</i> if not all characters are being intercepted by your OnKeyDown or OnChar handler,
it may be because you are using the wxTAB_TRAVERSAL style, which grabs some keypresses for use
by child controls.</p>
</description>
<remarks>

By default, a panel has the same colouring as a dialog.

</remarks>
<parents>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/panel.h"/></includes>
<windowstyles>
</windowstyles>
<seealso>

<ref target="wxdialog">wxDialog</ref>

</seealso>
<members>
<member class="wxPanel" name="wxPanel"><function type="" name="wxPanel"><description>

Default constructor.

</description></function>
<function type="" name="wxPanel"><parameters><parameter type="wxWindow&#42; " name="parent">The parent window.</parameter><parameter type="wxWindowID " name="id" value="-1">An identifier for the panel. A value of -1 is taken to mean a default.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">The panel position. A value of (-1, -1) indicates a default position, chosen by
either the windowing system or wxWindows, depending on platform.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">The panel size. A value of (-1, -1) indicates a default size, chosen by
either the windowing system or wxWindows, depending on platform.</parameter><parameter type="long" name="style" value="wxTAB_TRAVERSAL">The window style. See <ref target="wxpanel">wxPanel</ref>.</parameter><parameter type="const wxString&amp; " name="name" value="``panel&quot;">Used to associate a name with the window,
allowing the application user to set Motif resource values for
individual dialog boxes.</parameter></parameters><seealso>

<ref target="wxpanelcreate">wxPanel::Create</ref>

</seealso><description>

Constructor.















</description></function></member>
<member class="wxPanel" name="~wxPanel"><function type="" name="~wxPanel"><description>

Destructor. Deletes any child windows before deleting the physical window.

</description></function></member>
<member class="wxPanel" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="wxTAB_TRAVERSAL"></parameter><parameter type="const wxString&amp; " name="name" value="``panel&quot;"></parameter></parameters><description>

Used for two-step panel construction. See <ref target="wxpanelconstr">wxPanel::wxPanel</ref>
for details.

</description></function></member>
<member class="wxPanel" name="GetDefaultItem"><function type="wxButton&#42;" name="GetDefaultItem" suffix="const"><description>

Returns a pointer to the button which is the default for this window, or NULL.
The default button is the one activated by pressing the Enter key.

</description></function></member>
<member class="wxPanel" name="InitDialog"><function type="void" name="InitDialog"><seealso>

<ref target="wxinitdialogevent">wxInitDialogEvent</ref>

</seealso><description>

Sends a <ref target="wxinitdialogevent">wxInitDialogEvent</ref>, which
in turn transfers data to the dialog via validators.

</description></function></member>
<member class="wxPanel" name="OnSysColourChanged"><function type="void" name="OnSysColourChanged"><parameters><parameter type="wxSysColourChangedEvent&amp; " name="event">The colour change event.</parameter></parameters><seealso>

<ref target="wxsyscolourchangedevent">wxSysColourChangedEvent</ref>

</seealso><remarks>

Changes the panel's colour to conform to the current settings (Windows only).
Add an event table entry for your panel class if you wish the behaviour
to be different (such as keeping a user-defined
background colour). If you do override this function, call wxEvent::Skip to
propagate the notification to child windows and controls.

</remarks><description>

The default handler for wxEVT_SYS_COLOUR_CHANGED.





</description></function></member>
<member class="wxPanel" name="SetDefaultItem"><function type="void" name="SetDefaultItem"><parameters><parameter type="wxButton " name="&#42;btn"></parameter></parameters><seealso>

<ref target="wxpanelgetdefaultitem">GetDefaultItem</ref>

</seealso><description>

Changes the default button for the panel.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPathList">
<description>
<p class="classdesc">
The path list is a convenient way of storing a number of directories, and
when presented with a filename without a directory, searching for an existing file
in those directories.  Storing the filename only in an application's files and
using a locally-defined list of directories makes the application and its files more
portable.</p><p class="classdesc">Use the <i> wxFileNameFromPath</i> global function to extract the filename
from the path.</p>
</description>
<parents>
<classref name="wxList"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/filefn.h"/></includes>
<seealso>

<ref target="wxlist">wxList</ref>

</seealso>
<members>
<member class="wxPathList" name="wxPathList"><function type="" name="wxPathList"><description>

Constructor.

</description></function></member>
<member class="wxPathList" name="AddEnvList"><function type="void" name="AddEnvList"><parameters><parameter type="const wxString&amp; " name="env_variable"></parameter></parameters><description>

Finds the value of the given environment variable, and adds all paths
to the path list. Useful for finding files in the PATH variable, for
example.

</description></function></member>
<member class="wxPathList" name="Add"><function type="void" name="Add"><parameters><parameter type="const wxString&amp; " name="path"></parameter></parameters><description>

Adds the given directory to the path list, but does not
check if the path was already on the list (use wxPathList::Member)
for this).

</description></function></member>
<member class="wxPathList" name="EnsureFileAccessible"><function type="void" name="EnsureFileAccessible"><parameters><parameter type="const wxString&amp; " name="filename"></parameter></parameters><description>

Given a full filename (with path), ensures that files in the same path
can be accessed using the pathlist. It does this by stripping the
filename and adding the path to the list if not already there.

</description></function></member>
<member class="wxPathList" name="FindAbsoluteValidPath"><function type="wxString" name="FindAbsoluteValidPath"><parameters><parameter type="const wxString&amp; " name="file"></parameter></parameters><description>

Searches for a full path for an existing file by appending <i> file</i> to
successive members of the path list.  If the file exists, a temporary
pointer to the absolute path is returned.

</description></function></member>
<member class="wxPathList" name="FindValidPath"><function type="wxString" name="FindValidPath"><parameters><parameter type="const wxString&amp; " name="file"></parameter></parameters><description>

Searches for a full path for an existing file by appending <i> file</i> to
successive members of the path list.  If the file exists, a temporary
pointer to the full path is returned. This path may be relative to the current
working directory.

</description></function></member>
<member class="wxPathList" name="Member"><function type="bool" name="Member"><parameters><parameter type="const wxString&amp; " name="file"></parameter></parameters><description>

true if the path is in the path list (ignoring case).

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPen">
<description>
<p class="classdesc">
A pen is a drawing tool for drawing outlines. It is used for drawing
lines and painting the outline of rectangles, ellipses, etc. It has a
colour, a width and a style. </p>
</description>
<remarks>

On a monochrome display, wxWindows shows all non-white pens as black.

Do not initialize objects on the stack before the program commences,
since other required structures may not have been set up yet. Instead,
define global pointers to objects and create them in <i> OnInit</i> or
when required.

An application may wish to dynamically create pens with different
characteristics, and there is the consequent danger that a large number
of duplicate pens will be created. Therefore an application may wish to
get a pointer to a pen by using the global list of pens <b>
wxThePenList</b>, and calling the member function <b> FindOrCreatePen</b>.
See the entry for <ref target="wxpenlist">wxPenList</ref>.

wxPen uses a reference counting system, so assignments between brushes are very
cheap. You can therefore use actual wxPen objects instead of pointers without
efficiency problems. Once one wxPen object changes its data it will create its
own pen data internally so that other pens, which previously shared the
data using the reference counting, are not affected.

</remarks>
<parents>
<classref name="wxGDIObject"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/pen.h"/></includes>
<predefs>

Objects:

<b> wxNullPen</b>

Pointers:

<b> wxRED_PEN<br/>
wxCYAN_PEN<br/>
wxGREEN_PEN<br/>
wxBLACK_PEN<br/>
wxWHITE_PEN<br/>
wxTRANSPARENT_PEN<br/>
wxBLACK_DASHED_PEN<br/>
wxGREY_PEN<br/>
wxMEDIUM_GREY_PEN<br/>
wxLIGHT_GREY_PEN</b>

</predefs>
<seealso>

<ref target="wxpenlist">wxPenList</ref><ref target="wxdc">wxDC</ref><ref target="wxdcsetpen">wxDC::SetPen</ref>

</seealso>
<members>
<member class="wxPen" name="wxPen"><function type="" name="wxPen"><description>

Default constructor. The pen will be uninitialised, and <ref target="wxpenok">wxPen::Ok</ref> will
return false.

</description></function>
<function type="" name="wxPen"><parameters><parameter type="const wxColour&amp;" name=" colour"></parameter><parameter type="int" name=" width"></parameter><parameter type="int" name=" style"></parameter></parameters><description>

Constructs a pen from a colour object, pen width and style.

</description></function>
<function type="" name="wxPen"><parameters><parameter type="const wxString&amp; " name="colourName">A colour name.</parameter><parameter type="int" name=" width"></parameter><parameter type="int" name=" style"></parameter></parameters><description>

Constructs a pen from a colour name, pen width and style.

</description></function>
<function type="" name="wxPen"><parameters><parameter type="const wxBitmap&amp;" name=" stipple"></parameter><parameter type="int" name=" width"></parameter></parameters><description>

Constructs a stippled pen from a stipple bitmap and a width.

</description></function>
<function type="" name="wxPen"><parameters><parameter type="const wxPen&amp;" name=" pen"></parameter></parameters><seealso>

<ref target="wxpensetstyle">wxPen::SetStyle</ref><ref target="wxpensetcolour">wxPen::SetColour</ref>,
<ref target="wxpensetwidth">wxPen::SetWidth</ref><ref target="wxpensetstipple">wxPen::SetStipple</ref>

\perlnote{Constructors supported by wxPerl are:\par
<ul><li>{Wx::Pen-&gt;new( colourwidthstyle )}
</li>
<li>{Wx::Pen-&gt;new( colourNamewidthstyle )}
</li>
<li>{Wx::Pen-&gt;new( stipplewidth )}
</li></ul>
}

</seealso><description></description></function></member>
<member class="wxPen" name="~wxPen"><function type="" name="~wxPen"><remarks>

The destructor may not delete the underlying pen object of the native windowing
system, since wxBrush uses a reference counting system for efficiency.

Although all remaining pens are deleted when the application exits,
the application should try to clean up all pens itself. This is because
wxWindows cannot know if a pointer to the pen object is stored in an
application data structure, and there is a risk of double deletion.

</remarks><description>

Destructor.

</description></function></member>
<member class="wxPen" name="GetCap"><function type="int" name="GetCap" suffix="const"><seealso>

<ref target="wxpensetcap">wxPen::SetCap</ref>

</seealso><description>

Returns the pen cap style, which may be one of <b> wxCAP_ROUND</b>, <b> wxCAP_PROJECTING</b> and
<b> wxCAP_BUTT</b>. The default is <b> wxCAP_ROUND</b>.

</description></function></member>
<member class="wxPen" name="GetColour"><function type="wxColour&amp;" name="GetColour" suffix="const"><seealso>

<ref target="wxpensetcolour">wxPen::SetColour</ref>

</seealso><description>

Returns a reference to the pen colour.

</description></function></member>
<member class="wxPen" name="GetDashes"><function type="int" name="GetDashes" suffix="const"><parameters><parameter type="wxDash&#42;&#42;" name=" dashes"></parameter></parameters><seealso>

<ref target="wxpensetdashes">wxPen::SetDashes</ref>

</seealso><description>

Gets an array of dashes (defined as char in X, DWORD under Windows).
<i> dashes</i> is a pointer to the internal array. Do not deallocate or store this pointer.
The function returns the number of dashes associated with this pen.

</description></function></member>
<member class="wxPen" name="GetJoin"><function type="int" name="GetJoin" suffix="const"><seealso>

<ref target="wxpensetjoin">wxPen::SetJoin</ref>

</seealso><description>

Returns the pen join style, which may be one of <b> wxJOIN_BEVEL</b>, <b> wxJOIN_ROUND</b> and
<b> wxJOIN_MITER</b>. The default is <b> wxJOIN_ROUND</b>.

</description></function></member>
<member class="wxPen" name="GetStipple"><function type="wxBitmap&#42; " name="GetStipple" suffix="const"><seealso>

<ref target="wxpensetstipple">wxPen::SetStipple</ref>

</seealso><description>

Gets a pointer to the stipple bitmap.

</description></function></member>
<member class="wxPen" name="GetStyle"><function type="int" name="GetStyle" suffix="const"><seealso>

<ref target="wxpenconstr">wxPen::wxPen</ref><ref target="wxpensetstyle">wxPen::SetStyle</ref>

</seealso><description></description></function></member>
<member class="wxPen" name="GetWidth"><function type="int" name="GetWidth" suffix="const"><seealso>

<ref target="wxpensetwidth">wxPen::SetWidth</ref>

</seealso><description>

Returns the pen width.

</description></function></member>
<member class="wxPen" name="Ok"><function type="bool" name="Ok" suffix="const"><description>

Returns true if the pen is initialised.

</description></function></member>
<member class="wxPen" name="SetCap"><function type="void" name="SetCap"><parameters><parameter type="int" name=" capStyle"></parameter></parameters><seealso>

<ref target="wxpengetcap">wxPen::GetCap</ref>

</seealso><description>

Sets the pen cap style, which may be one of <b> wxCAP_ROUND</b>, <b> wxCAP_PROJECTING</b> and
<b> wxCAP_BUTT</b>. The default is <b> wxCAP_ROUND</b>.

</description></function></member>
<member class="wxPen" name="SetColour"><function type="void" name="SetColour"><parameters><parameter type="wxColour&amp;" name=" colour"></parameter></parameters><description>

</description></function>
<function type="void" name="SetColour"><parameters><parameter type="const wxString&amp; " name="colourName"></parameter></parameters><description>

</description></function>
<function type="void" name="SetColour"><parameters><parameter type="int" name=" red"></parameter><parameter type="int" name=" green"></parameter><parameter type="int" name=" blue"></parameter></parameters><seealso>

<ref target="wxpengetcolour">wxPen::GetColour</ref>

</seealso><description>

The pen's colour is changed to the given colour.

</description></function></member>
<member class="wxPen" name="SetDashes"><function type="void" name="SetDashes"><parameters><parameter type="int " name="n"></parameter><parameter type="wxDash&#42;" name=" dashes"></parameter></parameters><seealso>

<ref target="wxpengetdashes">wxPen::GetDashes</ref>

</seealso><description>

Associates an array of pointers to dashes (defined as char in X, DWORD under Windows)
with the pen. The array is not deallocated by wxPen, but neither must it be
deallocated by the calling application until the pen is deleted or this
function is called with a NULL array.

</description></function></member>
<member class="wxPen" name="SetJoin"><function type="void" name="SetJoin"><parameters><parameter type="int" name="join_style"></parameter></parameters><seealso>

<ref target="wxpengetjoin">wxPen::GetJoin</ref>

</seealso><description>

Sets the pen join style, which may be one of <b> wxJOIN_BEVEL</b>, <b> wxJOIN_ROUND</b> and
<b> wxJOIN_MITER</b>. The default is <b> wxJOIN_ROUND</b>.

</description></function></member>
<member class="wxPen" name="SetStipple"><function type="void" name="SetStipple"><parameters><parameter type="wxBitmap&#42; " name="stipple"></parameter></parameters><seealso>

<ref target="wxpengetstipple">wxPen::GetStipple</ref>

</seealso><description>

Sets the bitmap for stippling.

</description></function></member>
<member class="wxPen" name="SetStyle"><function type="void" name="SetStyle"><parameters><parameter type="int" name=" style"></parameter></parameters><seealso>

<ref target="wxpenconstr">wxPen::wxPen</ref>

</seealso><description>

Set the pen style.

</description></function></member>
<member class="wxPen" name="SetWidth"><function type="void" name="SetWidth"><parameters><parameter type="int" name=" width"></parameter></parameters><seealso>

<ref target="wxpengetwidth">wxPen::GetWidth</ref>

</seealso><description>

Sets the pen width.

</description></function></member>
<member class="wxPen" name="operator $=$"><function type="wxPen&amp;" name="operator $=$"><parameters><parameter type="const wxPen&amp; " name="pen"></parameter></parameters><description>

Assignment operator, using reference counting. Returns a reference
to `this'.

</description></function></member>
<member class="wxPen" name="operator $==$"><function type="bool" name="operator $==$"><parameters><parameter type="const wxPen&amp; " name="pen"></parameter></parameters><description>

Equality operator. Two pens are equal if they contain pointers
to the same underlying pen data. It does not compare each attribute,
so two independently-created pens using the same parameters will
fail the test.

</description></function></member>
<member class="wxPen" name="operator $!=$"><function type="bool" name="operator $!=$"><parameters><parameter type="const wxPen&amp; " name="pen"></parameter></parameters><description>

Inequality operator. Two pens are not equal if they contain pointers
to different underlying pen data. It does not compare each attribute.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPenList">
<description>
<p class="classdesc">
There is only one instance of this class: <b> wxThePenList</b>.  Use
this object to search for a previously created pen of the desired
type and create it if not already found. In some windowing systems,
the pen may be a scarce resource, so it can pay to reuse old
resources if possible. When an application finishes, all pens will
be deleted and their resources freed, eliminating the possibility of
`memory leaks'. However, it is best not to rely on this automatic
cleanup because it can lead to double deletion in some circumstances.</p><p class="classdesc">There are two mechanisms in recent versions of wxWindows which make the
pen list less useful than it once was. Under Windows, scarce resources
are cleaned up internally if they are not being used. Also, a referencing
counting mechanism applied to all GDI objects means that some sharing
of underlying resources is possible. You don't have to keep track of pointers,
working out when it is safe delete a pen, because the referencing counting does
it for you. For example, you can set a pen in a device context, and then
immediately delete the pen you passed, because the pen is `copied'.</p><p class="classdesc">So you may find it easier to ignore the pen list, and instead create
and copy pens as you see fit. If your Windows resource meter suggests
your application is using too many resources, you can resort to using
GDI lists to share objects explicitly.</p><p class="classdesc">The only compelling use for the pen list is for wxWindows to keep
track of pens in order to clean them up on exit. It is also kept for
backward compatibility with earlier versions of wxWindows.</p>
</description>
<seealso>

<ref target="wxpen">wxPen</ref>

</seealso>
<members>
<member class="wxPenList" name="wxPenList"><function type="void" name="wxPenList"><description>

Constructor. The application should not construct its own pen list:
use the object pointer <b> wxThePenList</b>.

</description></function></member>
<member class="wxPenList" name="AddPen"><function type="void" name="AddPen"><parameters><parameter type="wxPen&#42;" name=" pen"></parameter></parameters><description>

Used internally by wxWindows to add a pen to the list.

</description></function></member>
<member class="wxPenList" name="FindOrCreatePen"><function type="wxPen&#42;" name="FindOrCreatePen"><parameters><parameter type="const wxColour&amp; " name="colour">Colour object.</parameter><parameter type="int" name=" width"></parameter><parameter type="int" name=" style"></parameter></parameters><description>

Finds a pen with the specified attributes and returns it, else creates a new pen, adds it
to the pen list, and returns it.

</description></function>
<function type="wxPen&#42;" name="FindOrCreatePen"><parameters><parameter type="const wxString&amp; " name="colourName">Colour name, which should be in the <ref target="wxcolourdatabase">colour database</ref>.</parameter><parameter type="int" name=" width"></parameter><parameter type="int" name=" style"></parameter></parameters><description>

Finds a pen with the specified attributes and returns it, else creates a new pen, adds it
to the pen list, and returns it.











</description></function></member>
<member class="wxPenList" name="RemovePen"><function type="void" name="RemovePen"><parameters><parameter type="wxPen&#42;" name=" pen"></parameter></parameters><description>

Used by wxWindows to remove a pen from the list.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPlotCurve">
<description>
<p class="classdesc">
The wxPlotCurve class represents a curve displayed in a <ref target="wxplotwindow">wxPlotWindow</ref>. It
is a virtual curve, i.e. is acts only as an interface, leaving it to the programmer to care for
how the values pairs are matched. wxPlotWindow and wxPlotCurve are designed to display large
amounts of data, i.e. most typically data measured by some sort of machine.</p><p class="classdesc">This class is abstract, i.e. you have to derive your own class and implement the pure
virtual functions (<ref target="wxplotcurvegetstartx">GetStartX()</ref>, <ref target="wxplotcurvegetendx">GetEndX()</ref>
and <ref target="wxplotcurvegety">GetY()</ref>).</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<members>
<member class="wxPlotCurve" name="wxPlotCurve"><function type="" name="wxPlotCurve"><parameters><parameter type="int " name="offsetY"></parameter><parameter type="double " name="startY"></parameter><parameter type="double " name="endY"></parameter></parameters><description>

Constructor assigning start values. See below for interpretation.

</description></function></member>
<member class="wxPlotCurve" name="GetEndX"><function type="wxInt32" name="GetEndX"><description>

Must be overridden. This function should return the index of the last value
of this curve, typically 99 if 100 values have been measured.

</description></function></member>
<member class="wxPlotCurve" name="GetEndY"><function type="double" name="GetEndY"><description>

See <ref target="wxplotcurvesetendy">SetStartY</ref>.

</description></function></member>
<member class="wxPlotCurve" name="GetOffsetY"><function type="int" name="GetOffsetY"><description>

Returns the vertical offset.
</description></function></member>
<member class="wxPlotCurve" name="GetY"><function type="double" name="GetY"><parameters><parameter type="wxInt32 " name="x"></parameter></parameters><description>

Must be overridden. This function will return the actual Y value corresponding
to the given X value. The x value is of an integer type because it is considered
to be an index in row of measured values.

</description></function></member>
<member class="wxPlotCurve" name="GetStartX"><function type="wxInt32" name="GetStartX"><description>

Must be overridden. This function should return the index of the first value
of this curve, typically zero.

</description></function></member>
<member class="wxPlotCurve" name="GetStartY"><function type="double" name="GetStartY"><description>

See <ref target="wxplotcurvesetstarty">SetStartY</ref>.

</description></function></member>
<member class="wxPlotCurve" name="SetEndY"><function type="void" name="SetEndY"><parameters><parameter type="double " name="endY"></parameter></parameters><description>

The value returned by this function tells the plot window what the highest values
in the curve will be so that a suitable scale can be found for the display. If
the Y values in this curve are in the range of -1.5 to 0.5, this function should
return 0.5 or maybe 1.0 for nicer aesthetics.

</description></function></member>
<member class="wxPlotCurve" name="SetOffsetY"><function type="void" name="SetOffsetY"><parameters><parameter type="int " name="offsetY"></parameter></parameters><description>

When displaying several curves in one window, it is often useful to assign
different offsets to the curves. You should call <ref target="wxplotwindowmove">wxPlotWindow::Move</ref> 
to set this value after you have added the curve to the window.

</description></function></member>
<member class="wxPlotCurve" name="SetStartY"><function type="void" name="SetStartY"><parameters><parameter type="double " name="startY"></parameter></parameters><description>

The value returned by this function tells the plot window what the lowest values
in the curve will be so that a suitable scale can be found for the display. If
the Y values in this curve are in the range of -1.5 to 0.5, this function should
return -1.5 or maybe -2.0 for nicer aesthetics.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPlotWindow">
<description>
<p class="classdesc">
wxPlotWindow is a specialized window designed to display data that typically has
been measured by machines, i.e. that may have thousands of values. One example of
such data would be the well known ECG measuring the electrical activity of your
heart: the measuring device will produce thousands of values per minute, several
measurements are done simultaneously and you might want to have a look at parts
of the curves, enlarging them or scrolling from one position to another. Note
that this window is not useful for real-time measuring or for displaying charts
with error bars etc.</p><p class="classdesc">A single curve in the plot window is represented by the <ref target="wxplotcurve">wxPlotCurve</ref> 
class.</p><p class="classdesc">The wxPlotWindow interacts with program using events, for example when clicking
or double clicking on a curve or when selecting one by clicking on it (which
can be vetoed). Future versions will hopefully feature selecting values or
sections of the displayed curves etc.</p>
</description>
<parents>
<classref name="wxScrolledWindow"/>
<classref name="wxPanel"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<windowstyles>
<style name="wxPLOT_BUTTON_MOVE">Display buttons to allow moving individual curves up or down.</style><style name="wxPLOT_BUTTON_ENLARGE">Display buttons to allow enlarging individual curves vertically.</style><style name="wxPLOT_BUTTON_ZOOM">Display buttons to allow zooming all curves horizontally.</style><style name="wxPLOT_BUTTON_ALL">Display all buttons.</style><style name="wxPLOT_Y_AXIS">Display an Y axis to the left of the drawing area.</style><style name="wxPLOT_X_AXIS">Display a X axis at the bottom of the drawing area.</style><style name="wxPLOT_DEFAULT">All of the above options.</style></windowstyles>
<members>
<member class="wxPlotWindow" name="wxPlotWindow"><function type="" name="wxPlotWindow"><description>

</description></function>
<function type="" name="wxPlotWindow"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxPoint&amp; " name="pos"></parameter><parameter type="const wxSize&amp; " name="size"></parameter><parameter type="int " name="flags" value="wxPLOT_DEFAULT"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxPlotWindow" name="~wxPlotWindow"><function type="" name="~wxPlotWindow"><description>

The destructor will not delete the curves associated to the window.

</description></function></member>
<member class="wxPlotWindow" name="Add"><function type="void" name="Add"><parameters><parameter type="wxPlotCurve&#42; " name="curve"></parameter></parameters><description>

Add a curve to the window.

</description></function></member>
<member class="wxPlotWindow" name="GetCount"><function type="size_t" name="GetCount"><description>

Returns number of curves.

</description></function></member>
<member class="wxPlotWindow" name="GetAt"><function type="wxPlotCurve&#42;" name="GetAt"><parameters><parameter type="size_t " name="n"></parameter></parameters><description>

Get the nth curve.

</description></function></member>
<member class="wxPlotWindow" name="SetCurrent"><function type="void" name="SetCurrent"><parameters><parameter type="wxPlotCurve&#42; " name="current"></parameter></parameters><description>

Make one curve the current curve. This will emit a wxPlotEvent.

</description></function></member>
<member class="wxPlotWindow" name="GetCurrent"><function type="wxPlotCurve&#42;" name="GetCurrent"><description>

Returns a pointer to the current curve, or NULL.

</description></function></member>
<member class="wxPlotWindow" name="Delete"><function type="void" name="Delete"><parameters><parameter type="wxPlotCurve&#42; " name="curve"></parameter></parameters><description>

Removes a curve from the window and delete is on screen. This does not
delete the actual curve. If the curve removed was the current curve,
the current curve will be set to NULL.

</description></function></member>
<member class="wxPlotWindow" name="Move"><function type="void" name="Move"><parameters><parameter type="wxPlotCurve&#42; " name="curve"></parameter><parameter type="int " name="pixels_up"></parameter></parameters><description>

Move the curve <tt> curve</tt> up by <tt> pixels_up</tt> pixels. Down if the
value is negative.

</description></function></member>
<member class="wxPlotWindow" name="Enlarge"><function type="void" name="Enlarge"><parameters><parameter type="wxPlotCurve&#42; " name="curve"></parameter><parameter type="double " name="factor"></parameter></parameters><description>

Changes the representation of the given curve. A <tt> factor</tt> of more than
one will stretch the curve vertically. The Y axis will change accordingly.

</description></function></member>
<member class="wxPlotWindow" name="SetUnitsPerValue"><function type="void" name="SetUnitsPerValue"><parameters><parameter type="double " name="upv"></parameter></parameters><description>

This sets the virtual units per value. Normally, you will not be interested in
what measured value you see, but what it stands for. If you want to display seconds
on the X axis and the measuring device produced 50 values per second, set this
value to 50. This will affect all curves being displayed.

</description></function></member>
<member class="wxPlotWindow" name="GetUnitsPerValue"><function type="double" name="GetUnitsPerValue"><description>

See <ref target="wxplotwindowsetunitspervalue">SetUnitsPerValue</ref>.

</description></function></member>
<member class="wxPlotWindow" name="SetZoom"><function type="void" name="SetZoom"><parameters><parameter type="double " name="zoom"></parameter></parameters><description>

This functions zooms all curves in their horizontal dimension. The X axis will
be changed accordingly.

</description></function></member>
<member class="wxPlotWindow" name="GetZoom"><function type="double" name="GetZoom"><description>

See <ref target="wxplotwindowsetzoom">SetZoom</ref>.

</description></function></member>
<member class="wxPlotWindow" name="RedrawEverything"><function type="void" name="RedrawEverything"><description>

Helper function which redraws both axes and the central area.

</description></function></member>
<member class="wxPlotWindow" name="RedrawXAxis"><function type="void" name="RedrawXAxis"><description>

Helper function which redraws the X axis.

</description></function></member>
<member class="wxPlotWindow" name="RedrawYAxis"><function type="void" name="RedrawYAxis"><description>

Helper function which redraws the Y axis.

</description></function></member>
<member class="wxPlotWindow" name="SetScrollOnThumbRelease"><function type="void" name="SetScrollOnThumbRelease"><parameters><parameter type="bool" name="onrelease" value="true"></parameter></parameters><description>

This function controls if the plot area will get scrolled only if the scrollbar thumb
has been release or also if the thumb is being dragged. When displaying large amounts
of data, it might become impossible to display the data fast enough to produce smooth
scrolling and then this function should be called.

</description></function></member>
<member class="wxPlotWindow" name="SetEnlargeAroundWindowCentre"><function type="void" name="SetEnlargeAroundWindowCentre"><parameters><parameter type="bool" name="aroundwindow" value="true"></parameter></parameters><description>

Depending on the kind of data you display, enlarging the individual curves might
have different desired effects. Sometimes, the data will be supposed to get enlarged
with the fixed point being the origin, sometimes the fixed point should be the centre
of the current drawing area. This function controls this behaviour.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPoint">
<description>
<p class="classdesc">
A <b> wxPoint</b> is a useful data structure for graphics operations.
It simply contains integer <i> x</i> and <i> y</i> members.</p><p class="classdesc">See also <ref target="wxrealpoint">wxRealPoint</ref> for a floating point version.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/gdicmn.h"/></includes>
<seealso>

<ref target="wxrealpoint">wxRealPoint</ref>

</seealso>
<members>
<member class="wxPoint" name="wxPoint"><function type="" name="wxPoint"><description>

</description></function>
<function type="" name="wxPoint"><parameters><parameter type="int" name=" x"></parameter><parameter type="int" name=" y"></parameter></parameters><description>

Create a point.

</description></function></member>
<member class="wxPoint" name="x"></member>
<member class="wxPoint" name="y"></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPostScriptDC">
<description>
<p class="classdesc">
This defines the wxWindows Encapsulated PostScript device context,
which can write PostScript files on any platform. See <ref target="wxdc">wxDC</ref> for
descriptions of the member functions.</p>
</description>
<parents>
<classref name="wxDC"/>
<classref name="wxObject"/>

</parents>
<members>
<member class="wxPostScriptDC" name="wxPostScriptDC"><function type="" name="wxPostScriptDC"><parameters><parameter type="const wxPrintData&amp;" name=" printData"></parameter></parameters><description>

Constructs a PostScript printer device context from a <ref target="wxprintdata">wxPrintData</ref> object.

</description></function>
<function type="" name="wxPostScriptDC"><parameters><parameter type="const wxString&amp; " name="output"></parameter><parameter type="bool " name="interactive" value="true"></parameter><parameter type="wxWindow &#42;" name="parent"></parameter></parameters><description>

Constructor. <i> output</i> is an optional file for printing to, and if
<i> interactive</i> is true a dialog box will be displayed for adjusting
various parameters. <i> parent</i> is the parent of the printer dialog box.

Use the <i> Ok</i> member to test whether the constructor was successful
in creating a usable device context.

See <ref target="printersettings">Printer settings</ref> for functions to set and
get PostScript printing settings.

This constructor and the global printer settings are now deprecated;
use the wxPrintData constructor instead.


</description></function></member>
<member class="wxPostScriptDC" name="SetResolution"><function type="static void" name="SetResolution"><parameters><parameter type="int" name=" ppi"></parameter></parameters><description>

Set resolution (in pixels per inch) that will be used in PostScript
output. Default is 720ppi.

</description></function></member>
<member class="wxPostScriptDC" name="GetResolution"><function type="static int" name="GetResolution"><description>

Return resolution used in PostScript output. See 
<ref target="wxpostscriptdcsetresolution">SetResolution</ref>.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPreviewCanvas">
<description>
<p class="classdesc">
A preview canvas is the default canvas used by the print preview
system to display the preview.</p>
</description>
<parents>
<classref name="wxScrolledWindow"/>
<classref name="wxWindow"/>
<classref name="wxevthandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/print.h"/></includes>
<seealso>

<ref target="wxpreviewframe">wxPreviewFrame</ref><ref target="wxpreviewcontrolbar">wxPreviewControlBar</ref>,
<ref target="wxprintpreview">wxPrintPreview</ref>

</seealso>
<members>
<member class="wxPreviewCanvas" name="wxPreviewCanvas"><function type="" name="wxPreviewCanvas"><parameters><parameter type="wxPrintPreview&#42; " name="preview"></parameter><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="0"></parameter><parameter type="const wxString&amp; " name="name" value="``canvas&quot;"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxPreviewCanvas" name="~wxPreviewCanvas"><function type="" name="~wxPreviewCanvas"><description>

Destructor.

</description></function></member>
<member class="wxPreviewCanvas" name="OnPaint"><function type="void" name="OnPaint"><parameters><parameter type="wxPaintEvent&amp; " name="event"></parameter></parameters><description>

Calls <ref target="wxprintpreviewpaintpage">wxPrintPreview::PaintPage</ref> to refresh the canvas.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPreviewControlBar">
<description>
<p class="classdesc">
This is the default implementation of the preview control bar, a panel
with buttons and a zoom control. You can derive a new class from this and
override some or all member functions to change the behaviour and appearance;
or you can leave it as it is.</p>
</description>
<parents>
<classref name="wxPanel"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/print.h"/></includes>
<seealso>

<ref target="wxpreviewframe">wxPreviewFrame</ref><ref target="wxpreviewcanvas">wxPreviewCanvas</ref>,
<ref target="wxprintpreview">wxPrintPreview</ref>

</seealso>
<members>
<member class="wxPreviewControlBar" name="wxPreviewControlbar"><function type="" name="wxPreviewControlBar"><parameters><parameter type="wxPrintPreview&#42; " name="preview"></parameter><parameter type="long" name=" buttons"></parameter><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="0"></parameter><parameter type="const wxString&amp; " name="name" value="``panel&quot;"></parameter></parameters><description>

Constructor.

The buttons parameter may be a combination of the following, using the bitwise `or' operator.

<table>
<tr><td>wxPREVIEW_PRINT</td><td>Create a print button.</td></tr>
<tr><td>wxPREVIEW_NEXT</td><td>Create a next page button.</td></tr>
<tr><td>wxPREVIEW_PREVIOUS</td><td>Create a previous page button.</td></tr>
<tr><td>wxPREVIEW_ZOOM</td><td>Create a zoom control.</td></tr>
<tr><td>wxPREVIEW_DEFAULT</td><td>Equivalent to a combination of wxPREVIEW_PREVIOUS, wxPREVIEW_NEXT and
wxPREVIEW_ZOOM.</td></tr>
</table>

</description></function></member>
<member class="wxPreviewControlBar" name="~wxPreviewControlBar"><function type="" name="~wxPreviewControlBar"><description>

Destructor.

</description></function></member>
<member class="wxPreviewControlBar" name="CreateButtons"><function type="void" name="CreateButtons"><description>

Creates buttons, according to value of the button style flags.

</description></function></member>
<member class="wxPreviewControlBar" name="GetPrintPreview"><function type="wxPrintPreview &#42;" name="GetPrintPreview"><description>

Gets the print preview object associated with the control bar.

</description></function></member>
<member class="wxPreviewControlBar" name="GetZoomControl"><function type="int" name="GetZoomControl"><description>

Gets the current zoom setting in percent.

</description></function></member>
<member class="wxPreviewControlBar" name="SetZoomControl"><function type="void" name="SetZoomControl"><parameters><parameter type="int " name="percent"></parameter></parameters><description>

Sets the zoom control.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPreviewFrame">
<description>
<p class="classdesc">
This class provides the default method of managing the print preview interface.
Member functions may be overridden to replace functionality, or the
class may be used without derivation.</p>
</description>
<parents>
<classref name="wxFrame"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/print.h"/></includes>
<seealso>

<ref target="wxpreviewcanvas">wxPreviewCanvas</ref><ref target="wxpreviewcontrolbar">wxPreviewControlBar</ref>,
<ref target="wxprintpreview">wxPrintPreview</ref>

</seealso>
<members>
<member class="wxPreviewFrame" name="wxPreviewFrame"><function type="" name="wxPreviewFrame"><parameters><parameter type="wxPrintPreview&#42; " name="preview"></parameter><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="const wxString&amp; " name="title"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; size " name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="wxDEFAULT_FRAME_STYLE"></parameter><parameter type="const wxString&amp; " name="name" value="``frame&quot;"></parameter></parameters><description>

Constructor. Pass a print preview object plus other normal frame arguments.
The print preview object will be destroyed by the frame when it closes.

</description></function></member>
<member class="wxPreviewFrame" name="~wxPreviewFrame"><function type="" name="~wxPreviewFrame"><description>

Destructor. 

</description></function></member>
<member class="wxPreviewFrame" name="CreateControlBar"><function type="void" name="CreateControlBar"><description>

Creates a wxPreviewControlBar. Override this function to allow
a user-defined preview control bar object to be created.

</description></function></member>
<member class="wxPreviewFrame" name="CreateCanvas"><function type="void" name="CreateCanvas"><description>

Creates a wxPreviewCanvas. Override this function to allow
a user-defined preview canvas object to be created.

</description></function></member>
<member class="wxPreviewFrame" name="Initialize"><function type="void" name="Initialize"><description>

Creates the preview canvas and control bar, and calls
wxWindow::MakeModal(true) to disable other top-level windows
in the application.

This function should be called by the application prior to
showing the frame.

</description></function></member>
<member class="wxPreviewFrame" name="OnCloseWindow"><function type="void" name="OnCloseWindow"><parameters><parameter type="wxCloseEvent&amp;" name=" event"></parameter></parameters><description>

Enables the other frames in the application, and deletes the print preview
object, implicitly deleting any printout objects associated with the print
preview object.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPrintData">
<description>
<p class="classdesc">
This class holds a variety of information related to printers and
printer device contexts. This class is used to create a wxPrinterDC
and a wxPostScriptDC. It is also used as a data member of wxPrintDialogData
and wxPageSetupDialogData, as part of the mechanism for transferring data
between the print dialogs and the application.</p>
</description>
<remarks>

The following functions are specific to PostScript printing
and have not yet been documented:

<pre>
const wxString&amp; GetPrinterCommand() const ;
const wxString&amp; GetPrinterOptions() const ;
const wxString&amp; GetPreviewCommand() const ;
const wxString&amp; GetFilename() const ;
const wxString&amp; GetFontMetricPath() const ;
double GetPrinterScaleX() const ;
double GetPrinterScaleY() const ;
long GetPrinterTranslateX() const ;
long GetPrinterTranslateY() const ;
// wxPRINT_MODE_PREVIEW, wxPRINT_MODE_FILE, wxPRINT_MODE_PRINTER
wxPrintMode GetPrintMode() const ;

void SetPrinterCommand(const wxString&amp; command) ;
void SetPrinterOptions(const wxString&amp; options) ;
void SetPreviewCommand(const wxString&amp; command) ;
void SetFilename(const wxString&amp; filename) ;
void SetFontMetricPath(const wxString&amp; path) ;
void SetPrinterScaleX(double x) ;
void SetPrinterScaleY(double y) ;
void SetPrinterScaling(double x, double y) ;
void SetPrinterTranslateX(long x) ;
void SetPrinterTranslateY(long y) ;
void SetPrinterTranslation(long x, long y) ;
void SetPrintMode(wxPrintMode printMode) ;
</pre>

</remarks>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/cmndata.h"/></includes>
<seealso>

<ref target="wxprintdialog">wxPrintDialog</ref>
<ref target="wxpagesetupdialog">wxPageSetupDialog</ref>
<ref target="wxprintdialogdata">wxPrintDialogData</ref>
<ref target="wxpagesetupdialogdata">wxPageSetupDialogData</ref>
<ref target="wxprintdialogoverview">wxPrintDialog Overview</ref>
<ref target="wxprinterdc">wxPrinterDC</ref>
<ref target="wxpostscriptdc">wxPostScriptDC</ref>

</seealso>
<members>
<member class="wxPrintData" name="wxPrintData"><function type="" name="wxPrintData"><description>

Default constructor.

</description></function>
<function type="" name="wxPrintData"><parameters><parameter type="const wxPrintData&amp;" name=" data"></parameter></parameters><description>

Copy constructor.

</description></function></member>
<member class="wxPrintData" name="~wxPrintData"><function type="" name="~wxPrintData"><description>

Destructor.

</description></function></member>
<member class="wxPrintData" name="GetCollate"><function type="bool" name="GetCollate" suffix="const"><description>

Returns true if collation is on.

</description></function></member>
<member class="wxPrintData" name="GetColour"><function type="bool" name="GetColour" suffix="const"><description>

Returns true if colour printing is on.

</description></function></member>
<member class="wxPrintData" name="GetDuplex"><function type="wxDuplexMode" name="GetDuplex" suffix="const"><description>

Returns the duplex mode. One of wxDUPLEX_SIMPLEX, wxDUPLEX_HORIZONTAL, wxDUPLEX_VERTICAL.

</description></function></member>
<member class="wxPrintData" name="GetNoCopies"><function type="int" name="GetNoCopies" suffix="const"><description>

Returns the number of copies requested by the user.

</description></function></member>
<member class="wxPrintData" name="GetOrientation"><function type="int" name="GetOrientation" suffix="const"><description>

Gets the orientation. This can be wxLANDSCAPE or wxPORTRAIT.

</description></function></member>
<member class="wxPrintData" name="GetPaperId"><function type="wxPaperSize" name="GetPaperId" suffix="const"><description>

Returns the paper size id. For more information, see <ref target="wxprintdatasetpaperid">wxPrintData::SetPaperId</ref>.

</description></function></member>
<member class="wxPrintData" name="GetPrinterName"><function type="const wxString&amp;" name="GetPrinterName" suffix="const"><description>

Returns the printer name. If the printer name is the empty string, it indicates that the default
printer should be used.

</description></function></member>
<member class="wxPrintData" name="GetQuality"><function type="wxPrintQuality" name="GetQuality" suffix="const"><description>

Returns the current print quality. This can be a positive integer, denoting the number of dots per inch, or
one of the following identifiers:

<pre>
wxPRINT_QUALITY_HIGH
wxPRINT_QUALITY_MEDIUM
wxPRINT_QUALITY_LOW
wxPRINT_QUALITY_DRAFT
</pre>

On input you should pass one of these identifiers, but on return you may get back a positive integer
indicating the current resolution setting.

</description></function></member>
<member class="wxPrintData" name="Ok"><function type="bool" name="Ok" suffix="const"><description>

Returns true if the print data is valid for using in print dialogs.
This can return false on Windows if the current printer is not set, for example.
On all other platforms, it returns true.

</description></function></member>
<member class="wxPrintData" name="SetCollate"><function type="void" name="SetCollate"><parameters><parameter type="bool " name="flag"></parameter></parameters><description>

Sets collation to on or off.

</description></function></member>
<member class="wxPrintData" name="SetColour"><function type="void" name="SetColour"><parameters><parameter type="bool " name="flag"></parameter></parameters><description>

Sets colour printing on or off.

</description></function></member>
<member class="wxPrintData" name="SetDuplex"><function type="void" name="SetDuplex"><parameters><parameter type="wxDuplexMode" name=" mode"></parameter></parameters><description>

Returns the duplex mode. One of wxDUPLEX_SIMPLEX, wxDUPLEX_HORIZONTAL, wxDUPLEX_VERTICAL.

</description></function></member>
<member class="wxPrintData" name="SetNoCopies"><function type="void" name="SetNoCopies"><parameters><parameter type="int " name="n"></parameter></parameters><description>

Sets the default number of copies to be printed out.

</description></function></member>
<member class="wxPrintData" name="SetOrientation"><function type="void" name="SetOrientation"><parameters><parameter type="int " name="orientation"></parameter></parameters><description>

Sets the orientation. This can be wxLANDSCAPE or wxPORTRAIT.

</description></function></member>
<member class="wxPrintData" name="SetPaperId"><function type="void" name="SetPaperId"><parameters><parameter type="wxPaperSize" name=" paperId"></parameter></parameters><description>

\index{wxPaperSize}Sets the paper id. This indicates the type of paper to be used. For a mapping between
paper id, paper size and string name, see wxPrintPaperDatabase in <tt> paper.h</tt> (not yet documented).

<i> paperId</i> can be one of:

<pre>
    wxPAPER_NONE,               // Use specific dimensions
    wxPAPER_LETTER,             // Letter, 8 1/2 by 11 inches
    wxPAPER_LEGAL,              // Legal, 8 1/2 by 14 inches
    wxPAPER_A4,                 // A4 Sheet, 210 by 297 millimeters
    wxPAPER_CSHEET,             // C Sheet, 17 by 22 inches
    wxPAPER_DSHEET,             // D Sheet, 22 by 34 inches
    wxPAPER_ESHEET,             // E Sheet, 34 by 44 inches
    wxPAPER_LETTERSMALL,        // Letter Small, 8 1/2 by 11 inches
    wxPAPER_TABLOID,            // Tabloid, 11 by 17 inches
    wxPAPER_LEDGER,             // Ledger, 17 by 11 inches
    wxPAPER_STATEMENT,          // Statement, 5 1/2 by 8 1/2 inches
    wxPAPER_EXECUTIVE,          // Executive, 7 1/4 by 10 1/2 inches
    wxPAPER_A3,                 // A3 sheet, 297 by 420 millimeters
    wxPAPER_A4SMALL,            // A4 small sheet, 210 by 297 millimeters
    wxPAPER_A5,                 // A5 sheet, 148 by 210 millimeters
    wxPAPER_B4,                 // B4 sheet, 250 by 354 millimeters
    wxPAPER_B5,                 // B5 sheet, 182-by-257-millimeter paper
    wxPAPER_FOLIO,              // Folio, 8-1/2-by-13-inch paper
    wxPAPER_QUARTO,             // Quarto, 215-by-275-millimeter paper
    wxPAPER_10X14,              // 10-by-14-inch sheet
    wxPAPER_11X17,              // 11-by-17-inch sheet
    wxPAPER_NOTE,               // Note, 8 1/2 by 11 inches
    wxPAPER_ENV_9,              // #9 Envelope, 3 7/8 by 8 7/8 inches
    wxPAPER_ENV_10,             // #10 Envelope, 4 1/8 by 9 1/2 inches
    wxPAPER_ENV_11,             // #11 Envelope, 4 1/2 by 10 3/8 inches
    wxPAPER_ENV_12,             // #12 Envelope, 4 3/4 by 11 inches
    wxPAPER_ENV_14,             // #14 Envelope, 5 by 11 1/2 inches
    wxPAPER_ENV_DL,             // DL Envelope, 110 by 220 millimeters
    wxPAPER_ENV_C5,             // C5 Envelope, 162 by 229 millimeters
    wxPAPER_ENV_C3,             // C3 Envelope, 324 by 458 millimeters
    wxPAPER_ENV_C4,             // C4 Envelope, 229 by 324 millimeters
    wxPAPER_ENV_C6,             // C6 Envelope, 114 by 162 millimeters
    wxPAPER_ENV_C65,            // C65 Envelope, 114 by 229 millimeters
    wxPAPER_ENV_B4,             // B4 Envelope, 250 by 353 millimeters
    wxPAPER_ENV_B5,             // B5 Envelope, 176 by 250 millimeters
    wxPAPER_ENV_B6,             // B6 Envelope, 176 by 125 millimeters
    wxPAPER_ENV_ITALY,          // Italy Envelope, 110 by 230 millimeters
    wxPAPER_ENV_MONARCH,        // Monarch Envelope, 3 7/8 by 7 1/2 inches
    wxPAPER_ENV_PERSONAL,       // 6 3/4 Envelope, 3 5/8 by 6 1/2 inches
    wxPAPER_FANFOLD_US,         // US Std Fanfold, 14 7/8 by 11 inches
    wxPAPER_FANFOLD_STD_GERMAN, // German Std Fanfold, 8 1/2 by 12 inches
    wxPAPER_FANFOLD_LGL_GERMAN, // German Legal Fanfold, 8 1/2 by 13 inches

Windows 95 only:
    wxPAPER_ISO_B4,             // B4 (ISO) 250 x 353 mm
    wxPAPER_JAPANESE_POSTCARD,  // Japanese Postcard 100 x 148 mm
    wxPAPER_9X11,               // 9 x 11 in
    wxPAPER_10X11,              // 10 x 11 in
    wxPAPER_15X11,              // 15 x 11 in
    wxPAPER_ENV_INVITE,         // Envelope Invite 220 x 220 mm
    wxPAPER_LETTER_EXTRA,       // Letter Extra 9 \275 x 12 in
    wxPAPER_LEGAL_EXTRA,        // Legal Extra 9 \275 x 15 in
    wxPAPER_TABLOID_EXTRA,      // Tabloid Extra 11.69 x 18 in
    wxPAPER_A4_EXTRA,           // A4 Extra 9.27 x 12.69 in
    wxPAPER_LETTER_TRANSVERSE,  // Letter Transverse 8 \275 x 11 in
    wxPAPER_A4_TRANSVERSE,      // A4 Transverse 210 x 297 mm
    wxPAPER_LETTER_EXTRA_TRANSVERSE, // Letter Extra Transverse 9\275 x 12 in
    wxPAPER_A_PLUS,             // SuperA/SuperA/A4 227 x 356 mm
    wxPAPER_B_PLUS,             // SuperB/SuperB/A3 305 x 487 mm
    wxPAPER_LETTER_PLUS,        // Letter Plus 8.5 x 12.69 in
    wxPAPER_A4_PLUS,            // A4 Plus 210 x 330 mm
    wxPAPER_A5_TRANSVERSE,      // A5 Transverse 148 x 210 mm
    wxPAPER_B5_TRANSVERSE,      // B5 (JIS) Transverse 182 x 257 mm
    wxPAPER_A3_EXTRA,           // A3 Extra 322 x 445 mm
    wxPAPER_A5_EXTRA,           // A5 Extra 174 x 235 mm
    wxPAPER_B5_EXTRA,           // B5 (ISO) Extra 201 x 276 mm
    wxPAPER_A2,                 // A2 420 x 594 mm
    wxPAPER_A3_TRANSVERSE,      // A3 Transverse 297 x 420 mm
    wxPAPER_A3_EXTRA_TRANSVERSE // A3 Extra Transverse 322 x 445 mm
</pre>

</description></function></member>
<member class="wxPrintData" name="SetPrinterName"><function type="void" name="SetPrinterName"><parameters><parameter type="const wxString&amp; " name="printerName"></parameter></parameters><description>

Sets the printer name. This can be the empty string to indicate that the default
printer should be used.

</description></function></member>
<member class="wxPrintData" name="SetQuality"><function type="void" name="SetQuality"><parameters><parameter type="wxPrintQuality" name=" quality"></parameter></parameters><description>

Sets the desired print quality. This can be a positive integer, denoting the number of dots per inch, or
one of the following identifiers:

<pre>
wxPRINT_QUALITY_HIGH
wxPRINT_QUALITY_MEDIUM
wxPRINT_QUALITY_LOW
wxPRINT_QUALITY_DRAFT
</pre>

On input you should pass one of these identifiers, but on return you may get back a positive integer
indicating the current resolution setting.

</description></function></member>
<member class="wxPrintData" name="operator $=$"><function type="void" name="operator $=$"><parameters><parameter type="const wxPrintData&amp;" name=" data"></parameter></parameters><description>

Assigns print data to this object.

</description></function>
<function type="void" name="operator $=$"><parameters><parameter type="const wxPrintSetupData&amp;" name=" data"></parameter></parameters><description>

Assigns print setup data to this object. wxPrintSetupData is deprecated,
but retained for backward compatibility.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPrintDialog">
<description>
<p class="classdesc">
This class represents the print and print setup common dialogs.
You may obtain a <ref target="wxprinterdc">wxPrinterDC</ref> device context from
a successfully dismissed print dialog.</p>
</description>
<parents>
<classref name="wxDialog"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/printdlg.h"/></includes>
<seealso>

<ref target="wxprintdialogoverview">wxPrintDialog Overview</ref>

</seealso>
<members>
<member class="wxPrintDialog" name="wxPrintDialog"><function type="" name="wxPrintDialog"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxPrintDialogData&#42; " name="data" value="NULL"></parameter></parameters><seealso>

<ref target="wxprintdialogdata">wxPrintDialogData</ref>

</seealso><description>

Constructor. Pass a parent window, and optionally a pointer to a block of print
data, which will be copied to the print dialog's print data.

</description></function></member>
<member class="wxPrintDialog" name="~wxPrintDialog"><function type="" name="~wxPrintDialog"><description>

Destructor. If wxPrintDialog::GetPrintDC has <i> not</i> been called,
the device context obtained by the dialog (if any) will be deleted.

</description></function></member>
<member class="wxPrintDialog" name="GetPrintDialogData"><function type="wxPrintDialogData&amp;" name="GetPrintDialogData"><description>

Returns the <ref target="wxprintdialogdata">print dialog data</ref> associated with the print dialog.

</description></function></member>
<member class="wxPrintDialog" name="GetPrintDC"><function type="wxDC&#42; " name="GetPrintDC"><description>

Returns the device context created by the print dialog, if any.
When this function has been called, the ownership of the device context
is transferred to the application, so it must then be deleted
explicitly.

</description></function></member>
<member class="wxPrintDialog" name="Ok"><function type="bool" name="Ok" suffix="const"><description>

Returns true if the print data associated with the dialog is valid.
This can return false on Windows if the current printer is not set, for example.
On all other platforms, it returns true.

</description></function></member>
<member class="wxPrintDialog" name="ShowModal"><function type="int" name="ShowModal"><description>

Shows the dialog, returning wxID_OK if the user pressed OK, and wxID_CANCEL
otherwise. After this function is called, a device context may
be retrievable using <ref target="wxprintdialoggetprintdc">wxPrintDialog::GetPrintDC</ref>.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPrintDialogData">
<description>
<p class="classdesc">
This class holds information related to the visual characteristics of wxPrintDialog.
It contains a wxPrintData object with underlying printing settings.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/cmndata.h"/></includes>
<seealso>

<ref target="wxprintdialog">wxPrintDialog</ref><ref target="wxprintdialogoverview">wxPrintDialog Overview</ref>

</seealso>
<members>
<member class="wxPrintDialogData" name="wxPrintDialogData"><function type="" name="wxPrintDialogData"><description>

Default constructor.

</description></function>
<function type="" name="wxPrintDialogData"><parameters><parameter type="wxPrintDialogData&amp;" name=" dialogData"></parameter></parameters><description>

Copy constructor.

</description></function>
<function type="" name="wxPrintDialogData"><parameters><parameter type="wxPrintData&amp;" name=" printData"></parameter></parameters><description>

Construct an object from a print dialog data object.

</description></function></member>
<member class="wxPrintDialogData" name="~wxprintdialogdata"><function type="" name="~wxPrintDialogData"><description>

Destructor.

</description></function></member>
<member class="wxPrintDialogData" name="EnableHelp"><function type="void" name="EnableHelp"><parameters><parameter type="bool " name="flag"></parameter></parameters><description>

Enables or disables the `Help' button.

</description></function></member>
<member class="wxPrintDialogData" name="EnablePageNumbers"><function type="void" name="EnablePageNumbers"><parameters><parameter type="bool " name="flag"></parameter></parameters><description>

Enables or disables the `Page numbers' controls.

</description></function></member>
<member class="wxPrintDialogData" name="EnablePrintToFile"><function type="void" name="EnablePrintToFile"><parameters><parameter type="bool " name="flag"></parameter></parameters><description>

Enables or disables the `Print to file' checkbox.

</description></function></member>
<member class="wxPrintDialogData" name="EnableSelection"><function type="void" name="EnableSelection"><parameters><parameter type="bool " name="flag"></parameter></parameters><description>

Enables or disables the `Selection' radio button.

</description></function></member>
<member class="wxPrintDialogData" name="GetAllPages"><function type="bool" name="GetAllPages" suffix="const"><description>

Returns true if the user requested that all pages be printed.

</description></function></member>
<member class="wxPrintDialogData" name="GetCollate"><function type="bool" name="GetCollate" suffix="const"><description>

Returns true if the user requested that the document(s) be collated.

</description></function></member>
<member class="wxPrintDialogData" name="GetFromPage"><function type="int" name="GetFromPage" suffix="const"><description>

Returns the <i> from</i> page number, as entered by the user.

</description></function></member>
<member class="wxPrintDialogData" name="GetMaxPage"><function type="int" name="GetMaxPage" suffix="const"><description>

Returns the <i> maximum</i> page number.

</description></function></member>
<member class="wxPrintDialogData" name="GetMinPage"><function type="int" name="GetMinPage" suffix="const"><description>

Returns the <i> minimum</i> page number.

</description></function></member>
<member class="wxPrintDialogData" name="GetNoCopies"><function type="int" name="GetNoCopies" suffix="const"><description>

Returns the number of copies requested by the user.

</description></function></member>
<member class="wxPrintDialogData" name="GetPrintData"><function type="wxPrintData&amp;" name="GetPrintData"><description>

Returns a reference to the internal wxPrintData object.

</description></function></member>
<member class="wxPrintDialogData" name="GetPrintToFile"><function type="bool" name="GetPrintToFile" suffix="const"><description>

Returns true if the user has selected printing to a file.

</description></function></member>
<member class="wxPrintDialogData" name="GetSelection"><function type="bool" name="GetSelection" suffix="const"><description>

Returns true if the user requested that the selection be printed (where 'selection' is
a concept specific to the application).

</description></function></member>
<member class="wxPrintDialogData" name="GetToPage"><function type="int" name="GetToPage" suffix="const"><description>

Returns the <i> to</i> page number, as entered by the user.

</description></function></member>
<member class="wxPrintDialogData" name="Ok"><function type="bool" name="Ok" suffix="const"><description>

Returns true if the print data is valid for using in print dialogs.
This can return false on Windows if the current printer is not set, for example.
On all other platforms, it returns true.

</description></function></member>
<member class="wxPrintDialogData" name="SetCollate"><function type="void" name="SetCollate"><parameters><parameter type="bool " name="flag"></parameter></parameters><description>

Sets the 'Collate' checkbox to true or false.

</description></function></member>
<member class="wxPrintDialogData" name="SetFromPage"><function type="void" name="SetFromPage"><parameters><parameter type="int " name="page"></parameter></parameters><description>

Sets the <i> from</i> page number.

</description></function></member>
<member class="wxPrintDialogData" name="SetMaxPage"><function type="void" name="SetMaxPage"><parameters><parameter type="int " name="page"></parameter></parameters><description>

Sets the <i> maximum</i> page number.

</description></function></member>
<member class="wxPrintDialogData" name="SetMinPage"><function type="void" name="SetMinPage"><parameters><parameter type="int " name="page"></parameter></parameters><description>

Sets the <i> minimum</i> page number.

</description></function></member>
<member class="wxPrintDialogData" name="SetNoCopies"><function type="void" name="SetNoCopies"><parameters><parameter type="int " name="n"></parameter></parameters><description>

Sets the default number of copies the user has requested to be printed out.

</description></function></member>
<member class="wxPrintDialogData" name="SetPrintData"><function type="void" name="SetPrintData"><parameters><parameter type="const wxPrintData&amp; " name="printData"></parameter></parameters><description>

Sets the internal wxPrintData.

</description></function></member>
<member class="wxPrintDialogData" name="SetPrintToFile"><function type="void" name="SetPrintToFile"><parameters><parameter type="bool " name="flag"></parameter></parameters><description>

Sets the 'Print to file' checkbox to true or false.

</description></function></member>
<member class="wxPrintDialogData" name="SetSelection"><function type="void" name="SetSelection"><parameters><parameter type="bool" name=" flag"></parameter></parameters><description>

Selects the 'Selection' radio button. The effect of printing the selection depends on how the application
implements this command, if at all.

</description></function></member>
<member class="wxPrintDialogData" name="SetSetupDialog"><function type="void" name="SetSetupDialog"><parameters><parameter type="bool " name="flag"></parameter></parameters><description>

Determines whether the dialog to be shown will be the Print dialog
(pass false) or Print Setup dialog (pass true).

Note that the setup dialog is (according to Microsoft) obsolete from
Windows 95, though retained for backward compatibility.

</description></function></member>
<member class="wxPrintDialogData" name="SetToPage"><function type="void" name="SetToPage"><parameters><parameter type="int " name="page"></parameter></parameters><description>

Sets the <i> to</i> page number.

</description></function></member>
<member class="wxPrintDialogData" name="operator $=$"><function type="void" name="operator $=$"><parameters><parameter type="const wxPrintData&amp;" name=" data"></parameter></parameters><description>

Assigns print data to this object.

</description></function>
<function type="void" name="operator $=$"><parameters><parameter type="const wxPrintDialogData&amp;" name=" data"></parameter></parameters><description>

Assigns another print dialog data object to this object.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPrintPreview">
<description>
<p class="classdesc">
Objects of this class manage the print preview process. The object is passed
a wxPrintout object, and the wxPrintPreview object itself is passed to
a wxPreviewFrame object. Previewing is started by initializing and showing
the preview frame. Unlike wxPrinter::Print, flow of control returns to the application
immediately after the frame is shown.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/print.h"/></includes>
<seealso>

\overview{Printing framework overview}{printingoverview}<ref target="wxprinterdc">wxPrinterDC</ref><ref target="wxprintdialog">wxPrintDialog</ref>,
<ref target="wxprintout">wxPrintout</ref><ref target="wxprinter">wxPrinter</ref>,
<ref target="wxpreviewcanvas">wxPreviewCanvas</ref><ref target="wxpreviewcontrolbar">wxPreviewControlBar</ref>,
<ref target="wxpreviewframe">wxPreviewFrame</ref>.

</seealso>
<members>
<member class="wxPrintPreview" name="wxPrintPreview"><function type="" name="wxPrintPreview"><parameters><parameter type="wxPrintout&#42; " name="printout"></parameter><parameter type="wxPrintout&#42; " name="printoutForPrinting"></parameter><parameter type="wxPrintData&#42; " name="data" value="NULL"></parameter></parameters><description>

Constructor. Pass a printout object, an optional printout object to be
used for actual printing, and the address of an optional
block of printer data, which will be copied to the print preview object's
print data.

If <i> printoutForPrinting</i> is non-NULL, a <b> Print...</b> button will be placed on the
preview frame so that the user can print directly from the preview interface.

Do not explicitly delete the printout objects once this destructor has been
called, since they will be deleted in the wxPrintPreview constructor.
The same does not apply to the <i> data</i> argument.

Test the Ok member to check whether the wxPrintPreview object was created correctly.
Ok could return false if there was a problem initializing the printer device context
(current printer not set, for example).

</description></function></member>
<member class="wxPrintPreview" name="~wxPrintPreview"><function type="" name="~wxPrinter"><description>

Destructor. Deletes both print preview objects, so do not destroy these objects
in your application.

</description></function></member>
<member class="wxPrintPreview" name="DrawBlankPage"><function type="bool" name="DrawBlankPage"><parameters><parameter type="wxWindow&#42; " name="window"></parameter></parameters><description>

Draws a representation of the blank page into the preview window. Used
internally.

</description></function></member>
<member class="wxPrintPreview" name="GetCanvas"><function type="wxWindow&#42; " name="GetCanvas"><description>

Gets the preview window used for displaying the print preview image.

</description></function></member>
<member class="wxPrintPreview" name="GetCurrentPage"><function type="int" name="GetCurrentPage"><description>

Gets the page currently being previewed.

</description></function></member>
<member class="wxPrintPreview" name="GetFrame"><function type="wxFrame &#42;" name="GetFrame"><description>

Gets the frame used for displaying the print preview canvas
and control bar.

</description></function></member>
<member class="wxPrintPreview" name="GetMaxPage"><function type="int" name="GetMaxPage"><description>

Returns the maximum page number.

</description></function></member>
<member class="wxPrintPreview" name="GetMinPage"><function type="int" name="GetMinPage"><description>

Returns the minimum page number.

</description></function></member>
<member class="wxPrintPreview" name="GetPrintData"><function type="wxPrintData&amp;" name="GetPrintData"><description>

Returns a reference to the internal print data.

</description></function></member>
<member class="wxPrintPreview" name="GetPrintout"><function type="wxPrintout &#42;" name="GetPrintout"><description>

Gets the preview printout object associated with the wxPrintPreview object.

</description></function></member>
<member class="wxPrintPreview" name="GetPrintoutForPrinting"><function type="wxPrintout &#42;" name="GetPrintoutForPrinting"><description>

Gets the printout object to be used for printing from within the preview interface,
or NULL if none exists.

</description></function></member>
<member class="wxPrintPreview" name="Ok"><function type="bool" name="Ok"><description>

Returns true if the wxPrintPreview is valid, false otherwise. It could return false if there was a
problem initializing the printer device context (current printer not set, for example).

</description></function></member>
<member class="wxPrintPreview" name="PaintPage"><function type="bool" name="PaintPage"><parameters><parameter type="wxWindow&#42; " name="window"></parameter></parameters><description>

This refreshes the preview window with the preview image.
It must be called from the preview window's OnPaint member.

The implementation simply blits the preview bitmap onto
the canvas, creating a new preview bitmap if none exists.

</description></function></member>
<member class="wxPrintPreview" name="Print"><function type="bool" name="Print"><parameters><parameter type="bool " name="prompt"></parameter></parameters><description>

Invokes the print process using the second wxPrintout object
supplied in the wxPrintPreview constructor.
Will normally be called by the <b> Print...</b> panel item on the
preview frame's control bar.

Returns false in case of error -- call
<ref target="wxprintergetlasterror">wxPrinter::GetLastError</ref> to get detailed
information about the kind of the error.

</description></function></member>
<member class="wxPrintPreview" name="RenderPage"><function type="bool" name="RenderPage"><parameters><parameter type="int " name="pageNum"></parameter></parameters><description>

Renders a page into a wxMemoryDC. Used internally by wxPrintPreview.

</description></function></member>
<member class="wxPrintPreview" name="SetCanvas"><function type="void" name="SetCanvas"><parameters><parameter type="wxWindow&#42; " name="window"></parameter></parameters><description>

Sets the window to be used for displaying the print preview image.

</description></function></member>
<member class="wxPrintPreview" name="SetCurrentPage"><function type="void" name="SetCurrentPage"><parameters><parameter type="int" name=" pageNum"></parameter></parameters><description>

Sets the current page to be previewed.

</description></function></member>
<member class="wxPrintPreview" name="SetFrame"><function type="void" name="SetFrame"><parameters><parameter type="wxFrame &#42;" name="frame"></parameter></parameters><description>

Sets the frame to be used for displaying the print preview canvas
and control bar.

</description></function></member>
<member class="wxPrintPreview" name="SetPrintout"><function type="void" name="SetPrintout"><parameters><parameter type="wxPrintout &#42;" name="printout"></parameter></parameters><description>

Associates a printout object with the wxPrintPreview object.

</description></function></member>
<member class="wxPrintPreview" name="SetZoom"><function type="void" name="SetZoom"><parameters><parameter type="int" name=" percent"></parameter></parameters><description>

Sets the percentage preview zoom, and refreshes the preview canvas
accordingly.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPrinter">
<description>
<p class="classdesc">
This class represents the Windows or PostScript printer, and is the vehicle through
which printing may be launched by an application. Printing can also
be achieved through using of lower functions and classes, but
this and associated classes provide a more convenient and general
method of printing.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/print.h"/></includes>
<seealso>

<ref target="printingoverview">Printing framework overview</ref><ref target="wxprinterdc">wxPrinterDC</ref><ref target="wxprintdialog">wxPrintDialog</ref>,
<ref target="wxprintout">wxPrintout</ref><ref target="wxprintpreview">wxPrintPreview</ref>.

</seealso>
<members>
<member class="wxPrinter" name="wxPrinter"><function type="" name="wxPrinter"><parameters><parameter type="wxPrintDialogData&#42; " name="data" value="NULL"></parameter></parameters><seealso>

<ref target="wxprintdialogdata">wxPrintDialogData</ref>,
<ref target="wxprintdata">wxPrintData</ref>

</seealso><description>

Constructor. Pass an optional pointer to a block of print
dialog data, which will be copied to the printer object's local data.

</description></function></member>
<member class="wxPrinter" name="~wxPrinter"><function type="" name="~wxPrinter"><description>

Destructor.

</description></function></member>
<member class="wxPrinter" name="Abort"><function type="bool" name="Abort"><description>

Returns true if the user has aborted the print job.

</description></function></member>
<member class="wxPrinter" name="CreateAbortWindow"><function type="void" name="CreateAbortWindow"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxPrintout&#42; " name="printout"></parameter></parameters><description>

Creates the default printing abort window, with a cancel button.


</description></function></member>
<member class="wxPrinter" name="GetLastError"><function type="static wxPrinterError" name="GetLastError"><description>

Return last error. Valid after calling <ref target="wxprinterprint">Print</ref>,
<ref target="wxprinterprintdialog">PrintDialog</ref> or 
<ref target="wxprintpreviewprint">wxPrintPreview::Print</ref>. These functions 
set last error to <b> wxPRINTER_NO_ERROR</b> if no error happened.

Returned value is one of the following:

\twocolwidtha{7cm}
<table>
<tr><td><b> wxPRINTER_NO_ERROR</b></td><td>No error happened.</td></tr>
<tr><td><b> wxPRINTER_CANCELLED</b></td><td>The user cancelled printing.</td></tr>
<tr><td><b> wxPRINTER_ERROR</b></td><td>There was an error during printing.</td></tr>
</table>


</description></function></member>
<member class="wxPrinter" name="GetPrintDialogData"><function type="wxPrintDialogData&amp;" name="GetPrintDialogData"><description>

Returns the <ref target="wxprintdata">print data</ref> associated with the printer object.

</description></function></member>
<member class="wxPrinter" name="Print"><function type="bool" name="Print"><parameters><parameter type="wxWindow &#42;" name="parent"></parameter><parameter type="wxPrintout &#42;" name="printout"></parameter><parameter type="bool " name="prompt" value="true"></parameter></parameters><description>

Starts the printing process. Provide a parent window, a user-defined wxPrintout object which controls
the printing of a document, and whether the print dialog should be invoked first.

Print could return false if there was a problem initializing the printer device context
(current printer not set, for example) or the user cancelled printing. Call
<ref target="wxprintergetlasterror">wxPrinter::GetLastError</ref> to get detailed
information about the kind of the error.

</description></function></member>
<member class="wxPrinter" name="PrintDialog"><function type="wxDC&#42;" name="PrintDialog"><parameters><parameter type="wxWindow &#42;" name="parent"></parameter></parameters><description>

Invokes the print dialog. If successful (the user did not press Cancel
and no error occurred), a suitable device context will be returned
(otherwise NULL is returned -- call
<ref target="wxprintergetlasterror">wxPrinter::GetLastError</ref> to get detailed
information about the kind of the error).

The application must delete this device context to avoid a memory leak.

</description></function></member>
<member class="wxPrinter" name="ReportError"><function type="void" name="ReportError"><parameters><parameter type="wxWindow &#42;" name="parent"></parameter><parameter type="wxPrintout &#42;" name="printout"></parameter><parameter type="const wxString&amp; " name="message"></parameter></parameters><description>

Default error-reporting function.

</description></function></member>
<member class="wxPrinter" name="Setup"><function type="bool" name="Setup"><parameters><parameter type="wxWindow &#42;" name="parent"></parameter></parameters><description>

Invokes the print setup dialog. Note that the setup dialog is obsolete from
Windows 95, though retained for backward compatibility.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPrinterDC">
<description>
<p class="classdesc">
A printer device context is specific to Windows, and allows access to
any printer with a Windows driver. See <ref target="wxdc">wxDC</ref> for further information
on device contexts, and <ref target="wxdcgetsize">wxDC::GetSize</ref> for advice on
achieving the correct scaling for the page.</p>
</description>
<parents>
<classref name="wxDC"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/dcprint.h"/></includes>
<seealso>

<ref target="wxdc">wxDC</ref><ref target="printingoverview">Printing framework overview</ref>

</seealso>
<members>
<member class="wxPrinterDC" name="wxPrinterDC"><function type="" name="wxPrinterDC"><parameters><parameter type="const wxPrintData&amp; " name="printData"></parameter></parameters><description>

Pass a <ref target="wxprintdata">wxPrintData</ref> object with information
necessary for setting up a suitable printer device context. This
is the recommended way to construct a wxPrinterDC.

</description></function>
<function type="" name="wxPrinterDC"><parameters><parameter type="const wxString&amp; " name="driver"></parameter><parameter type="const wxString&amp; " name="device"></parameter><parameter type="const wxString&amp; " name="output"></parameter><parameter type="const bool " name="interactive" value="true"></parameter><parameter type="int " name="orientation" value="wxPORTRAIT"></parameter></parameters><description>

Constructor. With empty strings for the first three arguments, the default printer dialog is
displayed. <i> device</i> indicates the type of printer and <i> output</i>
is an optional file for printing to. The <i> driver</i> parameter is
currently unused.  Use the <i> Ok</i> member to test whether the
constructor was successful in creating a usable device context.

This constructor is deprecated and retained only for backward compatibility.
</description></function></member></members>
<supported>
<platform name="gtk" status="N"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPrintout">
<description>
<p class="classdesc">
This class encapsulates the functionality of printing out an
application document. A new class must be derived and members
overridden to respond to calls such as OnPrintPage and HasPage.
Instances of this class are passed to wxPrinter::Print or a
wxPrintPreview object to initiate printing or previewing.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/print.h"/></includes>
<seealso>

<ref target="printingoverview">Printing framework overview</ref><ref target="wxprinterdc">wxPrinterDC</ref><ref target="wxprintdialog">wxPrintDialog</ref>,
<ref target="wxprinter">wxPrinter</ref><ref target="wxprintpreview">wxPrintPreview</ref>

</seealso>
<members>
<member class="wxPrintout" name="wxPrintout"><function type="" name="wxPrintout"><parameters><parameter type="const wxString&amp; " name="title" value="&quot;Printout&quot;"></parameter></parameters><description>

Constructor. Pass an optional title argument - the current filename would be a good idea. This will appear in the printing list
(at least in MSW)

</description></function></member>
<member class="wxPrintout" name="~wxPrintout"><function type="" name="~wxPrintout"><description>

Destructor.

</description></function></member>
<member class="wxPrintout" name="GetDC"><function type="wxDC &#42;" name="GetDC"><description>

Returns the device context associated with the printout (given to the printout at start of
printing or previewing). This will be a wxPrinterDC if printing under Windows,
a wxPostScriptDC if printing on other platforms, and a wxMemoryDC if previewing.

</description></function></member>
<member class="wxPrintout" name="GetPageInfo"><function type="void" name="GetPageInfo"><parameters><parameter type="int &#42;" name="minPage"></parameter><parameter type="int &#42;" name="maxPage"></parameter><parameter type="int &#42;" name="pageFrom"></parameter><parameter type="int &#42;" name="pageTo"></parameter></parameters><description>

Called by the framework to obtain information from the application about minimum and maximum page values that
the user can select, and the required page range to be printed. By default this
returns 1, 32000 for the page minimum and maximum values, and 1, 1 for the required page range.

If <i> minPage</i> is zero, the page number controls in the print dialog will be disabled.

\pythonnote{When this method is implemented in a derived Python class,
it should be designed to take no parameters (other than the self
reference) and to return a tuple of four integers.
}

\perlnote{When this method is overridden in a derived class,
it must not take any parameters, an return a 4-element list.
}

</description></function></member>
<member class="wxPrintout" name="GetPageSizeMM"><function type="void" name="GetPageSizeMM"><parameters><parameter type="int &#42;" name="w"></parameter><parameter type="int &#42;" name="h"></parameter></parameters><description>

Returns the size of the printer page in millimetres.

\pythonnote{This method returns the output-only parameters as a tuple.}

\perlnote{In wxPerl this method takes no arguments and returns a
2-element list <tt> ( w, h )</tt>}

</description></function></member>
<member class="wxPrintout" name="GetPageSizePixels"><function type="void" name="GetPageSizePixels"><parameters><parameter type="int &#42;" name="w"></parameter><parameter type="int &#42;" name="h"></parameter></parameters><description>

Returns the size of the printer page in pixels. These may not be the
same as the values returned from <ref target="wxdcgetsize">wxDC::GetSize</ref> if
the printout is being used for previewing, since in this case, a
memory device context is used, using a bitmap size reflecting the current
preview zoom. The application must take this discrepancy into account if
previewing is to be supported.

\pythonnote{This method returns the output-only parameters as a tuple.}

\perlnote{In wxPerl this method takes no arguments and returns a
2-element list <tt> ( w, h )</tt>}

</description></function></member>
<member class="wxPrintout" name="GetPPIPrinter"><function type="void" name="GetPPIPrinter"><parameters><parameter type="int &#42;" name="w"></parameter><parameter type="int &#42;" name="h"></parameter></parameters><description>

Returns the number of pixels per logical inch of the printer device context.
Dividing the printer PPI by the screen PPI can give a suitable scaling
factor for drawing text onto the printer. Remember to multiply
this by a scaling factor to take the preview DC size into account.

\pythonnote{This method returns the output-only parameters as a tuple.}

\perlnote{In wxPerl this method takes no arguments and returns a
2-element list <tt> ( w, h )</tt>}

</description></function></member>
<member class="wxPrintout" name="GetPPIScreen"><function type="void" name="GetPPIScreen"><parameters><parameter type="int &#42;" name="w"></parameter><parameter type="int &#42;" name="h"></parameter></parameters><description>

Returns the number of pixels per logical inch of the screen device context.
Dividing the printer PPI by the screen PPI can give a suitable scaling
factor for drawing text onto the printer. Remember to multiply
this by a scaling factor to take the preview DC size into account.

</description></function></member>
<member class="wxPrintout" name="GetTitle"><function type="wxString" name="GetTitle"><description>

Returns the title of the printout

\pythonnote{This method returns the output-only parameters as a tuple.}

\perlnote{In wxPerl this method takes no arguments and returns a
2-element list <tt> ( w, h )</tt>}

</description></function></member>
<member class="wxPrintout" name="HasPage"><function type="bool" name="HasPage"><parameters><parameter type="int" name=" pageNum"></parameter></parameters><description>

Should be overridden to return true if the document has this page, or false
if not. Returning false signifies the end of the document. By default,
HasPage behaves as if the document has only one page.

</description></function></member>
<member class="wxPrintout" name="IsPreview"><function type="bool" name="IsPreview"><description>

Returns true if the printout is currently being used for previewing.

</description></function></member>
<member class="wxPrintout" name="OnBeginDocument"><function type="bool" name="OnBeginDocument"><parameters><parameter type="int" name=" startPage"></parameter><parameter type="int" name=" endPage"></parameter></parameters><description>

Called by the framework at the start of document printing. Return false from
this function cancels the print job. OnBeginDocument is called once for every
copy printed.

The base wxPrintout::OnBeginDocument <i> must</i> be called (and the return value
checked) from within the overridden function, since it calls wxDC::StartDoc.

\pythonnote{If this method is overridden in a Python class then the
base class version can be called by using the method
<tt> base_OnBeginDocument(startPage, endPage)</tt>. }

</description></function></member>
<member class="wxPrintout" name="OnEndDocument"><function type="void" name="OnEndDocument"><description>

Called by the framework at the end of document printing. OnEndDocument
is called once for every copy printed.

The base wxPrintout::OnEndDocument <i> must</i> be called
from within the overridden function, since it calls wxDC::EndDoc.

</description></function></member>
<member class="wxPrintout" name="OnBeginPrinting"><function type="void" name="OnBeginPrinting"><description>

Called by the framework at the start of printing. OnBeginPrinting is called once for every
print job (regardless of how many copies are being printed).

</description></function></member>
<member class="wxPrintout" name="OnEndPrinting"><function type="void" name="OnEndPrinting"><description>

Called by the framework at the end of printing. OnEndPrinting
is called once for every print job (regardless of how many copies are being printed).

</description></function></member>
<member class="wxPrintout" name="OnPreparePrinting"><function type="void" name="OnPreparePrinting"><description>

Called once by the framework before any other demands are made of the
wxPrintout object. This gives the object an opportunity to calculate the
number of pages in the document, for example.

</description></function></member>
<member class="wxPrintout" name="OnPrintPage"><function type="bool" name="OnPrintPage"><parameters><parameter type="int" name=" pageNum"></parameter></parameters><description>

Called by the framework when a page should be printed. Returning false cancels
the print job. The application can use wxPrintout::GetDC to obtain a device
context to draw on.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxPrivateDropTarget">
<description>
<p class="classdesc">
wxPrivateDropTarget is for...</p>
</description>
<parents>
<classref name="wxDropTarget"/>

</parents>
<includes>
<header name="wx/dnd.h"/></includes>
<seealso>

<ref target="wxdroptarget">wxDropTarget</ref>

</seealso>
<members>
<member class="wxPrivateDropTarget" name="wxPrivateDropTarget"><function type="" name="wxPrivateDropTarget"><description>

</description></function></member>
<member class="wxPrivateDropTarget" name="SetId"><function type="void" name="SetId"><parameters><parameter type="const wxString&amp; " name="id"></parameter></parameters><description>

You have to override OnDrop to get at the data.
The string ID identifies the format of clipboard or DnD data. A word
processor would e.g. add a wxTextDataObject and a wxPrivateDataObject
to the clipboard - the latter with the Id &quot;WXWORD_FORMAT&quot;.

</description></function></member>
<member class="wxPrivateDropTarget" name="GetId"><function type="virtual wxString" name="GetId" suffix="const"><description>

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxProcess">
<description>
<p class="classdesc">
The objects of this class are used in conjunction with the
<ref target="wxexecute">wxExecute</ref> function. When a wxProcess object is passed to
wxExecute(), its <ref target="wxprocessonterminate">OnTerminate()</ref> virtual method
is called when the process terminates. This allows the program to be
(asynchronously) notified about the process termination and also retrieve its
exit status which is unavailable from wxExecute() in the case of
asynchronous execution.</p><p class="classdesc">Please note that if the process termination notification is processed by the
parent, it is responsible for deleting the wxProcess object which sent it.
However, if it is not processed, the object will delete itself and so the
library users should only delete those objects whose notifications have been
processed (and call <ref target="wxprocessdetach">Detach()</ref> for others).</p><p class="classdesc">wxProcess also supports IO redirection of the child process. For this, you have
to call its <ref target="wxprocessredirect">Redirect</ref> method before passing it to
<ref target="wxexecute">wxExecute</ref>. If the child process was launched successfully,
<ref target="wxprocessgetinputstream">GetInputStream</ref>,
<ref target="wxprocessgetoutputstream">GetOutputStream</ref> and
<ref target="wxprocessgeterrorstream">GetErrorStream</ref> can then be used to retrieve
the streams corresponding to the child process standard output, input and
error output respectively.</p>
</description>

<parents>
<classref name="wxEvtHandler"/>

</parents>
<includes>
<header name="wx/process.h"/></includes>
<seealso>

<ref target="wxexecute">wxExecute</ref><br/>
<ref target="sampleexec">exec sample</ref>

</seealso>
<members>
<member class="wxProcess" name="wxProcess"><function type="" name="wxProcess"><parameters><parameter type="wxEvtHandler &#42;" name="parent" value="NULL">The event handler parent.</parameter><parameter type="int" name="id" value="-1">id of an event.</parameter></parameters><description>

</description></function>
<function type="" name="wxProcess"><parameters><parameter type="int " name="flags">either <tt> wxPROCESS_DEFAULT</tt> or <tt> wxPROCESS_REDIRECT</tt></parameter></parameters><description>

Constructs a process object. <i> id</i> is only used in the case you want to
use wxWindows events. It identifies this object, or another window that will
receive the event.

If the <i> parent</i> parameter is different from NULL, it will receive
a wxEVT_END_PROCESS notification event (you should insert EVT_END_PROCESS
macro in the event table of the parent to handle it) with the given <i> id</i>.

The second constructor creates an object without any associated parent (and
hence no id neither) but allows to specify the <i> flags</i> which can have the
value of <tt> wxPROCESS_DEFAULT</tt> or <tt> wxPROCESS_REDIRECT</tt>. Specifying the
former value has no particular effect while using the latter one is equivalent
to calling <ref target="wxprocessredirect">Redirect</ref>.









</description></function></member>
<member class="wxProcess" name="~wxProcess"><function type="" name="~wxProcess"><description>

Destroys the wxProcess object.

</description></function></member>
<member class="wxProcess" name="CloseOutput"><function type="void" name="CloseOutput"><description>

Closes the output stream (the one connected to the stdin of the child
process). This function can be used to indicate to the child process that
there is no more data to be read - usually, a filter program will only
terminate when the input stream is closed.

</description></function></member>
<member class="wxProcess" name="Detach"><function type="void" name="Detach"><description>

Normally, a wxProcess object is deleted by its parent when it receives the
notification about the process termination. However, it might happen that the
parent object is destroyed before the external process is terminated (e.g. a
window from which this external process was launched is closed by the user)
and in this case it <b> should not delete</b> the wxProcess object, but
<b> should call Detach()</b> instead. After the wxProcess object is detached
from its parent, no notification events will be sent to the parent and the
object will delete itself upon reception of the process termination
notification.

</description></function></member>
<member class="wxProcess" name="GetErrorStream"><function type="wxInputStream&#42; " name="GetErrorStream" suffix="const"><description>

Returns an input stream which corresponds to the standard error output (stderr)
of the child process.

</description></function></member>
<member class="wxProcess" name="GetInputStream"><function type="wxInputStream&#42; " name="GetInputStream" suffix="const"><description>

It returns an input stream corresponding to the standard output stream of the
subprocess. If it is NULL, you have not turned on the redirection.
See <ref target="wxprocessredirect">wxProcess::Redirect</ref>.

</description></function></member>
<member class="wxProcess" name="GetOutputStream"><function type="wxOutputStream&#42; " name="GetOutputStream" suffix="const"><description>

It returns an output stream correspoding to the input stream of the subprocess.
If it is NULL, you have not turned on the redirection.
See <ref target="wxprocessredirect">wxProcess::Redirect</ref>.

</description></function></member>
<member class="wxProcess" name="IsErrorAvailable"><function type="bool" name="IsErrorAvailable" suffix="const"><seealso>

<ref target="wxprocessisinputavailable">IsInputAvailable</ref>

</seealso><description>

Returns <tt> true</tt> if there is data to be read on the child process standard
error stream.

</description></function></member>
<member class="wxProcess" name="IsInputAvailable"><function type="bool" name="IsInputAvailable" suffix="const"><seealso>

<ref target="wxprocessisinputopened">IsInputOpened</ref>

</seealso><description>

Returns <tt> true</tt> if there is data to be read on the child process standard
output stream. This allows to write simple (and extremely inefficient)
polling-based code waiting for a better mechanism in future wxWindows versions.

See the <ref target="sampleexec">exec sample</ref> for an example of using this
function.

</description></function></member>
<member class="wxProcess" name="IsInputOpened"><function type="bool" name="IsInputOpened" suffix="const"><description>

Returns <tt> true</tt> if the child process standard output stream is opened.

</description></function></member>
<member class="wxProcess" name="Kill"><function type="static wxKillError" name="Kill"><parameters><parameter type="int" name=" pid"></parameter><parameter type="wxSignal" name="signal" value="wxSIGNONE"></parameter></parameters><seealso>

<ref target="wxprocessexists">wxProcess::Exists</ref>,
<ref target="wxkill">wxKill</ref>,
<ref target="sampleexec">Exec sample</ref>

</seealso><description>

Send the specified signal to the given process. Possible signal values are:

<pre>
enum wxSignal
{
    wxSIGNONE = 0,  // verify if the process exists under Unix
    wxSIGHUP,
    wxSIGINT,
    wxSIGQUIT,
    wxSIGILL,
    wxSIGTRAP,
    wxSIGABRT,
    wxSIGEMT,
    wxSIGFPE,
    wxSIGKILL,      // forcefully kill, dangerous!
    wxSIGBUS,
    wxSIGSEGV,
    wxSIGSYS,
    wxSIGPIPE,
    wxSIGALRM,
    wxSIGTERM       // terminate the process gently
};
</pre>

<tt> wxSIGNONE</tt>, <tt> wxSIGKILL</tt> and <tt> wxSIGTERM</tt> have the same meaning
under both Unix and Windows but all the other signals are equivalent to
<tt> wxSIGTERM</tt> under Windows.

Returns the element of <tt> wxKillError</tt> enum:

<pre>
enum wxKillError
{
    wxKILL_OK,              // no error
    wxKILL_BAD_SIGNAL,      // no such signal
    wxKILL_ACCESS_DENIED,   // permission denied
    wxKILL_NO_PROCESS,      // no such process
    wxKILL_ERROR            // another, unspecified error
};
</pre>

</description></function></member>
<member class="wxProcess" name="Exists"><function type="static bool" name="Exists"><parameters><parameter type="int" name=" pid"></parameter></parameters><seealso>

<ref target="wxprocesskill">wxProcess::Kill</ref>,
<ref target="sampleexec">Exec sample</ref>

</seealso><description>

Returns <tt> true</tt> if the given process exists in the system.

</description></function></member>
<member class="wxProcess" name="OnTerminate"><function type="void" name="OnTerminate" suffix="const"><parameters><parameter type="int" name=" pid"></parameter><parameter type="int" name=" status"></parameter></parameters><description>

It is called when the process with the pid <i> pid</i> finishes.
It raises a wxWindows event when it isn't overridden.





</description></function></member>
<member class="wxProcess" name="Open"><function type="static wxProcess &#42;" name="Open"><parameters><parameter type="const wxString&amp; " name="cmd">The command to execute, including optional arguments.</parameter><parameter type="int " name="flags" value="wxEXEC_ASYNC">The flags to pass to <ref target="wxexecute">wxExecute</ref>.
  NOTE: wxEXEC_SYNC should not be used.</parameter></parameters><seealso>

<ref target="wxexecute">wxExecute</ref>

</seealso><returnvalue>

A pointer to new wxProcess object or <tt> NULL</tt> on error.

</returnvalue><description>

This static method replaces the standard <tt> popen()</tt> function: it launches
the process specified by the <i> cmd</i> parameter and returns the wxProcess
object which can be used to retrieve the streams connected to the standard
input, output and error output of the child process.

If the process couldn't be launched, <tt> NULL</tt> is returned. Note that in any
case the returned pointer should <b> not</b> be deleted, rather the process
object will be destroyed automatically when the child process terminates. This
does mean that the child process should be told to quit before the main program
exits to avoid memory leaks.






</description></function></member>
<member class="wxProcess" name="Redirect"><function type="void" name="Redirect"><description>

Turns on redirection. wxExecute will try to open a couple of pipes
to catch the subprocess stdio. The caught input stream is returned by
GetOutputStream() as a non-seekable stream. The caught output stream is returned
by GetInputStream() as a non-seekable stream.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxProcessEvent">
<description>
<p class="classdesc">
A process event is sent when a process is terminated.</p>
</description>
<parents>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/process.h"/></includes>
<events>
<event name="EVT_END_PROCESS(id, func)">Process a wxEVT_END_PROCESS event.
{\it id</event></events>
<seealso>

<ref target="wxprocess">wxProcess</ref>,
<ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxProcessEvent" name="wxProcessEvent"><function type="" name="wxProcessEvent"><parameters><parameter type="int " name="id" value="0"></parameter><parameter type="int " name="pid" value="0"></parameter><parameter type="int " name="exitcode" value="0"></parameter></parameters><description>

Constructor. Takes a wxProcessObject or window id, a process id and an
exit status.

</description></function></member>
<member class="wxProcessEvent" name="GetPid"><function type="int" name="GetPid" suffix="const"><description>

Returns the process id.

</description></function></member>
<member class="wxProcessEvent" name="GetExitCode"><function type="int" name="GetExitCode"><description>

Returns the exist status.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxProgressDialog">
<description>
<p class="classdesc">
This class represents a dialog that shows a short message and a
progress bar. Optionally, it can display an ABORT button.</p>
</description>
<parents>
<classref name="wxFrame"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/progdlg.h"/></includes>
<members>
<member class="wxProgressDialog" name="wxProgressDialog"><function type="" name="wxProgressDialog"><parameters><parameter type="const wxString&amp; " name="title">Dialog title to show in titlebar.</parameter><parameter type="const wxString&amp; " name="message">Message displayed above the progress bar.</parameter><parameter type="int " name="maximum" value="100">Maximum value for the progress bar.</parameter><parameter type="wxWindow &#42; " name="parent" value="NULL">Parent window.</parameter><parameter type="int " name="style" value="wxPD_AUTO_HIDE"></parameter></parameters><description>

Constructor. Creates the dialog, displays it and disables user input
for other windows, or, if wxPD_APP_MODAL flag is not given, for its parent
window only.













</description></function></member>
<member class="wxProgressDialog" name="~wxProgressDialog"><function type="" name="~wxMessageDialog"><description>

Destructor. Deletes the dialog and enables all top level windows.

</description></function></member>
<member class="wxProgressDialog" name="Resume"><function type="void" name="Resume"><description>

Can be used to continue with the dialog, after the user had chosen
ABORT.

</description></function></member>
<member class="wxProgressDialog" name="Update"><function type="bool" name="Update"><parameters><parameter type="int " name="value">The new value of the progress meter. It must be strictly less
than the maximum value given to the constructor (i.e., as usual in C, the
index runs from 0 to $maximum-1$).</parameter><parameter type="const wxString&amp; " name="newmsg" value="&quot;&quot;">The new messages for the progress dialog text, if it is
empty (which is the default) the message is not changed.</parameter></parameters><description>

Updates the dialog, setting the progress bar to the new value and, if
given changes the message above it. Returns true unless the Cancel button
has been pressed.

If false is returned, the application can either immediately destroy the dialog
or ask the user for the confirmation and if the abort is not confirmed the
dialog may be resumed with <ref target="wxprogressdialogresume">Resume</ref> function.






</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxProtocol">
<description>

</description>
<parents>
<classref name="wxSocketClient"/>

</parents>
<includes>
<header name="wx/protocol/protocol.h"/></includes>
<seealso>

<ref target="wxsocketbase">wxSocketBase</ref><ref target="wxurl">wxURL</ref>


</seealso>
<members>
<member class="wxProtocol" name="Reconnect"><function type="bool" name="Reconnect"><returnvalue>

true, if the connection is established, else false.

</returnvalue><description>

Tries to reestablish a previous opened connection (close and renegotiate connection).

</description></function></member>
<member class="wxProtocol" name="GetInputStream"><function type="wxInputStream &#42;" name="GetInputStream"><parameters><parameter type="const wxString&amp;" name=" path"></parameter></parameters><seealso>

<ref target="wxinputstream">wxInputStream</ref>

</seealso><returnvalue>

Returns the initialized stream. You will have to delete it yourself once you
don't use it anymore. The destructor closes the network connection.

</returnvalue><description>

Creates a new input stream on the the specified path. You can use all but seek
functionality of wxStream. Seek isn't available on all stream. For example,
http or ftp streams doesn't deal with it. Other functions like StreamSize and
Tell aren't available for the moment for this sort of stream.
You will be notified when the EOF is reached by an error.

</description></function></member>
<member class="wxProtocol" name="Abort"><function type="bool" name="Abort"><returnvalue>

Returns true, if successful, else false.

</returnvalue><description>

Abort the current stream.

\wxheading{Warning}

It is advised to destroy the input stream instead of aborting the stream this way.

</description></function></member>
<member class="wxProtocol" name="GetError"><function type="wxProtocolError" name="GetError"><description>

Returns the last occurred error.

\twocolwidtha{7cm}
<table>
<tr><td><b> wxPROTO_NOERR</b></td><td>No error.</td></tr>
<tr><td><b> wxPROTO_NETERR</b></td><td>A generic network error occurred.</td></tr>
<tr><td><b> wxPROTO_PROTERR</b></td><td>An error occurred during negotiation.</td></tr>
<tr><td><b> wxPROTO_CONNERR</b></td><td>The client failed to connect the server.</td></tr>
<tr><td><b> wxPROTO_INVVAL</b></td><td>Invalid value.</td></tr>
<tr><td><b> wxPROTO_NOHNDLR</b></td><td>.</td></tr>
<tr><td><b> wxPROTO_NOFILE</b></td><td>The remote file doesn't exist.</td></tr>
<tr><td><b> wxPROTO_ABRT</b></td><td>Last action aborted.</td></tr>
<tr><td><b> wxPROTO_RCNCT</b></td><td>An error occurred during reconnection.</td></tr>
<tr><td><b> wxPROTO_STREAM</b></td><td>Someone tried to send a command during a transfer.</td></tr>
</table>

</description></function></member>
<member class="wxProtocol" name="GetContentType"><function type="wxString" name="GetContentType"><description>

Returns the type of the content of the last opened stream. It is a mime-type.

</description></function></member>
<member class="wxProtocol" name="SetUser"><function type="void " name="SetUser"><parameters><parameter type="const wxString&amp;" name=" user"></parameter></parameters><description>

Sets the authentication user. It is mainly useful when FTP is used.

</description></function></member>
<member class="wxProtocol" name="SetPassword"><function type="void" name="SetPassword"><parameters><parameter type="const wxString&amp;" name=" user"></parameter></parameters><description>

Sets the authentication password. It is mainly useful when FTP is used.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxQuantize">
<description>
<p class="classdesc">
Performs quantization, or colour reduction, on a wxImage.</p><p class="classdesc">Functions in this class are static and so a wxQuantize object need not be created.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/quantize.h"/></includes>
<members>
<member class="wxQuantize" name="wxQuantize"><function type="" name="wxQuantize"><description>

Constructor. You do not need to construct a wxQuantize object since its functions are static.

</description></function></member>
<member class="wxQuantize" name="Quantize"><function type="bool" name="Quantize"><parameters><parameter type="const wxImage&amp; " name="src"></parameter><parameter type="wxImage&amp; " name="dest"></parameter><parameter type="wxPalette&#42;&#42; " name="pPalette"></parameter><parameter type="int " name="desiredNoColours" value="236"></parameter><parameter type="unsigned char&#42;&#42; " name="eightBitData" value="0"></parameter><parameter type="int " name="flags" value="wxQUANTIZE_INCLUDE_WINDOWS_COLOURS|wxQUANTIZE_FILL_DESTINATION_IMAGE|wxQUANTIZE_RETURN_8BIT_DATA"></parameter></parameters><description>

Reduce the colours in the source image and put the result into the
destination image. Both images may be the same, to overwrite the source image.
Specify an optional palette pointer to receive the resulting palette.
This palette may be passed to ConvertImageToBitmap, for example.

If you pass a palette pointer, you must free the palette yourself.

</description></function>
<function type="bool" name="Quantize"><parameters><parameter type="const wxImage&amp; " name="src"></parameter><parameter type="wxImage&amp; " name="dest"></parameter><parameter type="int " name="desiredNoColours" value="236"></parameter><parameter type="unsigned char&#42;&#42; " name="eightBitData" value="0"></parameter><parameter type="int " name="flags" value="wxQUANTIZE_INCLUDE_WINDOWS_COLOURS|wxQUANTIZE_FILL_DESTINATION_IMAGE|wxQUANTIZE_RETURN_8BIT_DATA"></parameter></parameters><description>

This version sets a palette in the destination image so you don't
have to manage it yourself.

</description></function></member>
<member class="wxQuantize" name="DoQuantize"><function type="void" name="DoQuantize"><parameters><parameter type="unsigned " name="w"></parameter><parameter type="unsigned " name="h"></parameter><parameter type="unsigned char&#42;&#42; " name="in_rows"></parameter><parameter type="unsigned char&#42;&#42; " name="out_rows"></parameter><parameter type="unsigned char&#42; " name="palette"></parameter><parameter type="int " name="desiredNoColours"></parameter></parameters><description>

Converts input bitmap(s) into 8bit representation with custom palette.

in_rows and out_rows are arrays &#91;0..h-1] of pointer to rows
(in_rows contains w &#42; 3 bytes per row, out_rows w bytes per row).

Fills out_rows with indexes into palette (which is also stored into palette variable).

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxQueryCol">
<description>
<p class="classdesc">
Every ODBC data column is represented by an instance of this class.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/odbc.h"/></includes>
<seealso>

\overview{wxQueryCol overview}{wxquerycoloverview}\overview{wxDatabase overview}{wxdatabaseoverview}

</seealso>
<members>
<member class="wxQueryCol" name="wxQueryCol"><function type="void" name="wxQueryCol"><description>

Constructor. Sets the attributes of the column to default values.

</description></function></member>
<member class="wxQueryCol" name="~wxQueryCol"><function type="void" name="~wxQueryCol"><description>

Destructor. Deletes the wxQueryField list.

</description></function></member>
<member class="wxQueryCol" name="BindVar"><function type="void &#42;" name="BindVar"><parameters><parameter type="void &#42;" name="v"></parameter><parameter type="long" name=" sz"></parameter></parameters><description>

Binds a user-defined variable to a column. Whenever a column is bound to a
variable, it will automatically copy the data of the current field into this
buffer (to a maximum of <i> sz</i> bytes).

</description></function></member>
<member class="wxQueryCol" name="FillVar"><function type="void" name="FillVar"><parameters><parameter type="int" name=" recnum"></parameter></parameters><description>

Fills the bound variable with the data of the field recnum. When no variable
is bound to the column nothing will happen.

</description></function></member>
<member class="wxQueryCol" name="GetData"><function type="void &#42;" name="GetData"><parameters><parameter type="int" name=" field"></parameter></parameters><description>

Returns a pointer to the data of the field.

</description></function></member>
<member class="wxQueryCol" name="GetName"><function type="wxString" name="GetName"><description>

Returns the name of a column.
  
</description></function></member>
<member class="wxQueryCol" name="GetType"><function type="short" name="GetType"><description>

Returns the data type of a column.

</description></function></member>
<member class="wxQueryCol" name="GetSize"><function type="long" name="GetSize"><parameters><parameter type="int" name=" field"></parameter></parameters><description>

Return the size of the data of the field field.

</description></function></member>
<member class="wxQueryCol" name="IsRowDirty"><function type="bool" name="IsRowDirty"><parameters><parameter type="int" name=" field"></parameter></parameters><description>

Returns true if the given field has been changed, but not saved.

</description></function></member>
<member class="wxQueryCol" name="IsNullable"><function type="bool" name="IsNullable"><description>

Returns true if a column may contain no data.

</description></function></member>
<member class="wxQueryCol" name="AppendField"><function type="void" name="AppendField"><parameters><parameter type="void &#42;" name="buf"></parameter><parameter type="long" name=" len"></parameter></parameters><description>

Appends a wxQueryField instance to the field list of the column. <i> len</i> bytes from
<i> buf</i> will be copied into the field's buffer.

</description></function></member>
<member class="wxQueryCol" name="SetData"><function type="bool" name="SetData"><parameters><parameter type="int" name=" field"></parameter><parameter type="void &#42;" name="buf"></parameter><parameter type="long" name=" len"></parameter></parameters><description>

Sets the data of a field. This function finds the wxQueryField corresponding to
<i> field</i> and calls wxQueryField::SetData with <i> buf</i> and <i> len</i> arguments.

</description></function></member>
<member class="wxQueryCol" name="SetName"><function type="void" name="SetName"><parameters><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Sets the name of a column. Only useful when creating new tables or
appending columns.
 
</description></function></member>
<member class="wxQueryCol" name="SetNullable"><function type="void" name="SetNullable"><parameters><parameter type="bool" name=" nullable"></parameter></parameters><description>

Determines whether a column may contain no data. Only useful when creating new tables or
appending columns.

</description></function></member>
<member class="wxQueryCol" name="SetFieldDirty"><function type="void" name="SetFieldDirty"><parameters><parameter type="int" name=" field"></parameter><parameter type="bool " name="dirty" value="true"></parameter></parameters><description>

Sets the dirty tag of a given field.

</description></function></member>
<member class="wxQueryCol" name="SetType"><function type="void" name="SetType"><parameters><parameter type="short" name=" type"></parameter></parameters><description>
  
Sets the data type of a column. Only useful when creating new tables or
appending columns.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="N"/><platform name="os2" status="Y"/></supported>
</class><class name="wxQueryField">
<description>
<p class="classdesc">
Represents the data item for one or several columns.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<seealso>

\overview{wxQueryField overview}{wxqueryfieldoverview}\overview{wxDatabase overview}{wxdatabaseoverview}

</seealso>
<members>
<member class="wxQueryField" name="wxQueryField"><function type="" name="wxQueryField"><description>

Constructor. Sets type and size of the field to default values.
  
</description></function></member>
<member class="wxQueryField" name="~wxQueryField"><function type="" name="~wxQueryField"><description>

Destructor. Frees the associated memory depending on the field type.

</description></function></member>
<member class="wxQueryField" name="AllocData"><function type="bool" name="AllocData"><description>

Allocates memory depending on the size and type of the field.

</description></function></member>
<member class="wxQueryField" name="ClearData"><function type="void" name="ClearData"><description>

Deletes the contents of the field buffer without deallocating the memory.

</description></function></member>
<member class="wxQueryField" name="GetData"><function type="void &#42;" name="GetData"><description>

Returns a pointer to the field buffer.

</description></function></member>
<member class="wxQueryField" name="GetSize"><function type="long" name="GetSize"><description>

Returns the size of the field buffer.

</description></function></member>
<member class="wxQueryField" name="GetType"><function type="short" name="GetType"><description>

Returns the type of the field (currently SQL_CHAR, SQL_VARCHAR or SQL_INTEGER).
 
</description></function></member>
<member class="wxQueryField" name="IsDirty"><function type="bool" name="IsDirty"><description>

Returns true if the data of a field has been changed, but not saved.

</description></function></member>
<member class="wxQueryField" name="SetData"><function type="bool" name="SetData"><parameters><parameter type="void &#42;" name="data"></parameter><parameter type="long" name=" sz"></parameter></parameters><description>

Allocates memory of the size <i> sz</i> and copies the contents of <i> d</i> into the
field buffer.
  
</description></function></member>
<member class="wxQueryField" name="SetDirty"><function type="void" name="SetDirty"><parameters><parameter type="bool" name="dirty" value="true"></parameter></parameters><description>

Sets the dirty tag of a field.

</description></function></member>
<member class="wxQueryField" name="SetSize"><function type="void" name="SetSize"><parameters><parameter type="long" name=" size"></parameter></parameters><description>

Resizes the field buffer. Stored data will be lost.
  
</description></function></member>
<member class="wxQueryField" name="SetType"><function type="void" name="SetType"><parameters><parameter type="short " name="type"></parameter></parameters><description>

Sets the type of the field. Currently the types SQL_CHAR, SQL_VARCHAR and
SQL_INTEGER are supported.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="N"/><platform name="os2" status="Y"/></supported>
</class><class name="wxQueryLayoutInfoEvent">
<description>
<p class="classdesc">
This event is sent when <ref target="wxlayoutalgorithm">wxLayoutAlgorithm</ref> wishes to get
the size, orientation and alignment of a window. More precisely, the event is sent
by the OnCalculateLayout handler which is itself invoked by wxLayoutAlgorithm.</p>
</description>
<parents>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/laywin.h"/></includes>
<events>
<event name="EVT_QUERY_LAYOUT_INFO(func)">Process a wxEVT_QUERY_LAYOUT_INFO event,
to get size, orientation and alignment from a window.</event></events>
<structs>

<pre>
enum wxLayoutOrientation {
    wxLAYOUT_HORIZONTAL,
    wxLAYOUT_VERTICAL
};

enum wxLayoutAlignment {
    wxLAYOUT_NONE,
    wxLAYOUT_TOP,
    wxLAYOUT_LEFT,
    wxLAYOUT_RIGHT,
    wxLAYOUT_BOTTOM,
};
</pre>

</structs>
<seealso>

<ref target="wxcalculatelayoutevent">wxCalculateLayoutEvent</ref>,
<ref target="wxsashlayoutwindow">wxSashLayoutWindow</ref>,
<ref target="wxlayoutalgorithm">wxLayoutAlgorithm</ref>.

</seealso>
<members>
<member class="wxQueryLayoutInfoEvent" name="wxQueryLayoutInfoEvent"><function type="" name="wxQueryLayoutInfoEvent"><parameters><parameter type="wxWindowID " name="id" value="0"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxQueryLayoutInfoEvent" name="GetAlignment"><function type="void" name="GetAlignment" suffix="const"><description>

Specifies the alignment of the window (which side of the remaining parent client area
the window sticks to). One of wxLAYOUT_TOP, wxLAYOUT_LEFT, wxLAYOUT_RIGHT, wxLAYOUT_BOTTOM.

</description></function></member>
<member class="wxQueryLayoutInfoEvent" name="GetFlags"><function type="int" name="GetFlags" suffix="const"><description>

Returns the flags associated with this event. Not currently used.

</description></function></member>
<member class="wxQueryLayoutInfoEvent" name="GetOrientation"><function type="wxLayoutOrientation" name="GetOrientation" suffix="const"><description>

Returns the orientation that the event handler specified to the event object. May be one of wxLAYOUT_HORIZONTAL,
wxLAYOUT_VERTICAL.

</description></function></member>
<member class="wxQueryLayoutInfoEvent" name="GetRequestedLength"><function type="int" name="GetRequestedLength" suffix="const"><description>

Returns the requested length of the window in the direction of the window orientation. This information
is not yet used.

</description></function></member>
<member class="wxQueryLayoutInfoEvent" name="GetSize"><function type="wxSize" name="GetSize" suffix="const"><description>

Returns the size that the event handler specified to the event object as being the requested size of the window.

</description></function></member>
<member class="wxQueryLayoutInfoEvent" name="SetAlignment"><function type="void" name="SetAlignment"><parameters><parameter type="wxLayoutAlignment " name="alignment"></parameter></parameters><description>

Call this to specify the alignment of the window (which side of the remaining parent client area
the window sticks to). May be one of wxLAYOUT_TOP, wxLAYOUT_LEFT, wxLAYOUT_RIGHT, wxLAYOUT_BOTTOM.

</description></function></member>
<member class="wxQueryLayoutInfoEvent" name="SetFlags"><function type="void" name="SetFlags"><parameters><parameter type="int " name="flags"></parameter></parameters><description>

Sets the flags associated with this event. Not currently used.

</description></function></member>
<member class="wxQueryLayoutInfoEvent" name="SetOrientation"><function type="void" name="SetOrientation"><parameters><parameter type="wxLayoutOrientation " name="orientation"></parameter></parameters><description>

Call this to specify the orientation of the window. May be one of wxLAYOUT_HORIZONTAL,
wxLAYOUT_VERTICAL.

</description></function></member>
<member class="wxQueryLayoutInfoEvent" name="SetRequestedLength"><function type="void" name="SetRequestedLength"><parameters><parameter type="int" name=" length"></parameter></parameters><description>

Sets the requested length of the window in the direction of the window orientation. This information
is not yet used.

</description></function></member>
<member class="wxQueryLayoutInfoEvent" name="SetSize"><function type="void" name="SetSize"><parameters><parameter type="const wxSize&amp; " name="size"></parameter></parameters><description>

Call this to let the calling code know what the size of the window is.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxRadioBox">
<description>
<p class="classdesc">
A radio box item is used to select one of number of mutually exclusive
choices.  It is displayed as a vertical column or horizontal row of
labelled buttons.</p>
</description>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/radiobox.h"/></includes>
<windowstyles>
<style name="wxRA_SPECIFY_ROWS">The major dimension parameter refers to the
maximum number of rows.</style><style name="wxRA_SPECIFY_COLS">The major dimension parameter refers to the
maximum number of columns.</style></windowstyles>
<events>
<event name="EVT_RADIOBOX(id, func)">Process a wxEVT_COMMAND_RADIOBOX_SELECTED event,
when a radiobutton is clicked.</event></events>
<seealso>

<ref target="eventhandlingoverview">Event handling overview</ref><ref target="wxradiobutton">wxRadioButton</ref>,
<ref target="wxcheckbox">wxCheckBox</ref>

</seealso>
<members>
<member class="wxRadioBox" name="wxRadioBox"><function type="" name="wxRadioBox"><description>

Default constructor.

</description></function>
<function type="" name="wxRadioBox"><parameters><parameter type="wxWindow&#42; " name="parent">Parent window. Must not be NULL.</parameter><parameter type="wxWindowID " name="id">Window identifier. A value of -1 indicates a default value.</parameter><parameter type="const wxString&amp; " name="label">Label for the static box surrounding the radio buttons.</parameter><parameter type="const wxPoint&amp; " name="point" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Window size. If the default size (-1, -1) is specified then a default size is chosen.</parameter><parameter type="int" name="n" value="0">Number of choices with which to initialize the radiobox.</parameter><parameter type="const wxString" name="choices&#91;]" value="NULL"></parameter><parameter type="int" name="majorDimension" value="0">Specifies the maximum number of rows (if style contains wxRA_SPECIFY_ROWS) or columns (if style contains wxRA_SPECIFY_COLS) for a two-dimensional
radiobox.</parameter><parameter type="long" name="style" value="wxRA_SPECIFY_COLS">Window style. See <ref target="wxradiobox">wxRadioBox</ref>.</parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator">Window validator.</parameter><parameter type="const wxString&amp; " name="name" value="``radioBox&quot;">Window name.</parameter></parameters><seealso>

<ref target="wxradioboxcreate">wxRadioBox::Create</ref><ref target="wxvalidator">wxValidator</ref>

\pythonnote{The wxRadioBox constructor in wxPython reduces the <tt> n</tt>
and <tt> choices</tt> arguments are to a single argumentwhich is
a list of strings.}

\perlnote{In wxPerl there is just an array reference in place of <tt> n</tt>
and <tt> choices</tt>.}

</seealso><description></description></function></member>
<member class="wxRadioBox" name="~wxRadioBox"><function type="" name="~wxRadioBox"><description>

Destructor, destroying the radiobox item.

</description></function></member>
<member class="wxRadioBox" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxString&amp; " name="label"></parameter><parameter type="const wxPoint&amp; " name="point" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="int" name="n" value="0"></parameter><parameter type="const wxString" name="choices&#91;]" value="NULL"></parameter><parameter type="int" name="majorDimension" value="0"></parameter><parameter type="long" name="style" value="wxRA_SPECIFY_COLS"></parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator"></parameter><parameter type="const wxString&amp; " name="name" value="``radioBox&quot;"></parameter></parameters><description>

Creates the radiobox for two-step construction. See <ref target="wxradioboxconstr">wxRadioBox::wxRadioBox</ref>
for further details.

</description></function></member>
<member class="wxRadioBox" name="Enable"><function type="void" name="Enable"><parameters><parameter type="bool" name="enable" value="true">true to enable, false to disable.</parameter></parameters><description>

Enables or disables the entire radiobox.

</description></function>
<function type="void" name="Enable"><parameters><parameter type="int" name=" n"></parameter><parameter type="bool" name="enable" value="true">true to enable, false to disable.</parameter></parameters><description>

Enables or disables an individual button in the radiobox.







\pythonnote{In place of a single overloaded method name, wxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> Enable(flag)</b></td><td>Enables or disables the entire radiobox.</td></tr>
<tr><td><b> EnableItem(n, flag)</b></td><td>Enables or disables an
individual button in the radiobox.</td></tr>
</table>}
}


</description></function></member>
<member class="wxRadioBox" name="FindString"><function type="int" name="FindString" suffix="const"><parameters><parameter type="const wxString&amp; " name="string">The string to find.</parameter></parameters><description>

Finds a button matching the given string, returning the position if found, or
-1 if not found.





</description></function></member>
<member class="wxRadioBox" name="GetCount"><function type="int" name="GetCount" suffix="const"><description>

Returns the number of items in the radiobox.

</description></function></member>
<member class="wxRadioBox" name="GetLabel"><function type="wxString" name="GetLabel" suffix="const"><description>

Returns the radiobox label.

</description></function>
<function type="wxString" name="GetLabel" suffix="const"><parameters><parameter type="int " name="n">The zero-based button index.</parameter></parameters><seealso>

<ref target="wxradioboxsetlabel">wxRadioBox::SetLabel</ref>

\pythonnote{In place of a single overloaded method namewxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> GetLabel()</b></td><td>Returns the radiobox label.</td></tr>
<tr><td><b> GetItemLabel(n)</b></td><td>Returns the label for the given button.</td></tr>
</table>}
}


</seealso><description></description></function></member>
<member class="wxRadioBox" name="GetSelection"><function type="int" name="GetSelection" suffix="const"><description>

Returns the zero-based position of the selected button.

</description></function></member>
<member class="wxRadioBox" name="GetStringSelection"><function type="wxString" name="GetStringSelection" suffix="const"><description>

Returns the selected string.

</description></function></member>
<member class="wxRadioBox" name="Number"><function type="int" name="Number" suffix="const"><description>

<b> Obsolescence note:</b> This method is obsolete and was replaced with 
<ref target="wxradioboxgetcount">GetCount</ref>, please use the new method in the new
code. This method is only available if wxWindows was compiled with 
<tt> WXWIN_COMPATIBILITY_2_2</tt> defined and will disappear completely in
future versions.

Returns the number of buttons in the radiobox.

</description></function></member>
<member class="wxRadioBox" name="SetLabel"><function type="void" name="SetLabel"><parameters><parameter type="const wxString&amp;" name=" label"></parameter></parameters><description>

Sets the radiobox label.

</description></function>
<function type="void" name="SetLabel"><parameters><parameter type="int " name="n">The zero-based button index.</parameter><parameter type="const wxString&amp;" name=" label"></parameter></parameters><description>

Sets a label for a radio button.







\pythonnote{In place of a single overloaded method name, wxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> SetLabel(string)</b></td><td>Sets the radiobox label.</td></tr>
<tr><td><b> SetItemLabel(n, string)</b></td><td>Sets a label for a radio button.</td></tr>
</table>}
}

</description></function></member>
<member class="wxRadioBox" name="SetSelection"><function type="void" name="SetSelection"><parameters><parameter type="int" name=" n"></parameter></parameters><description>

Sets a button by passing the desired string position. This does not cause
a wxEVT_COMMAND_RADIOBOX_SELECTED event to get emitted.





</description></function></member>
<member class="wxRadioBox" name="SetStringSelection"><function type="void" name="SetStringSelection"><parameters><parameter type="const wxString&amp; " name="string">The label of the button to select.</parameter></parameters><description>

Sets the selection to a button by passing the desired string. This does not cause
a wxEVT_COMMAND_RADIOBOX_SELECTED event to get emitted.





</description></function></member>
<member class="wxRadioBox" name="Show"><function type="void" name="Show"><parameters><parameter type="const bool" name=" show"></parameter></parameters><description>

Shows or hides the entire radiobox.

</description></function>
<function type="void" name="Show"><parameters><parameter type="int " name="item">The zero-based position of the button to show or hide.</parameter><parameter type="const bool" name=" show"></parameter></parameters><description>

Shows or hides individual buttons.







\pythonnote{In place of a single overloaded method name, wxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> Show(flag)</b></td><td>Shows or hides the entire radiobox.</td></tr>
<tr><td><b> ShowItem(n, flag)</b></td><td>Shows or hides individual buttons.</td></tr>
</table>}
}

</description></function></member>
<member class="wxRadioBox" name="GetString"><function type="wxString" name="GetString" suffix="const"><parameters><parameter type="int" name=" n"></parameter></parameters><description>

Returns the label for the button at the given position.






</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxRadioButton">
<description>
<p class="classdesc">
A radio button item is a button which usually denotes one of several mutually
exclusive options. It has a text label next to a (usually) round button.</p>
</description>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/radiobut.h"/></includes>
<windowstyles>
<style name="wxRB_GROUP">Marks the beginning of a new group of radio buttons.</style><style name="wxRB_SINGLE">If your radio buttons are not
consecutive siblings, they cannot form a group under Windows and you should use
this style to indicate that each of them is handled individually.</style></windowstyles>
<events>
<event name="EVT_RADIOBUTTON(id, func)">Process a wxEVT_COMMAND_RADIOBUTTON_SELECTED event,
when the radiobutton is clicked.</event></events>
<seealso>

<ref target="eventhandlingoverview">Event handling overview</ref><ref target="wxradiobox">wxRadioBox</ref>,
<ref target="wxcheckbox">wxCheckBox</ref>

</seealso>
<members>
<member class="wxRadioButton" name="wxRadioButton"><function type="" name="wxRadioButton"><description>

Default constructor.

</description></function>
<function type="" name="wxRadioButton"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp; " name="label">Label for the radio button.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Window position. If the position (-1, -1) is specified then a default position is chosen.</parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize">Window size. If the default size (-1, -1) is specified then a default size is chosen.</parameter><parameter type="long" name="style" value="0">Window style. See <ref target="wxradiobutton">wxRadioButton</ref>.</parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator">Window validator.</parameter><parameter type="const wxString&amp; " name="name" value="``radioButton&quot;">Window name.</parameter></parameters><seealso>

<ref target="wxradiobuttoncreate">wxRadioButton::Create</ref><ref target="wxvalidator">wxValidator</ref>

</seealso><description></description></function></member>
<member class="wxRadioButton" name="~wxRadioButton"><function type="void" name="~wxRadioButton"><description>

Destructor, destroying the radio button item.

</description></function></member>
<member class="wxRadioButton" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp; " name="label"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="0"></parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator"></parameter><parameter type="const wxString&amp; " name="name" value="``radioButton&quot;"></parameter></parameters><description>

Creates the choice for two-step construction. See <ref target="wxradiobuttonconstr">wxRadioButton::wxRadioButton</ref> for
further details.

</description></function></member>
<member class="wxRadioButton" name="GetValue"><function type="bool" name="GetValue" suffix="const"><description>

Returns true if the radio button is depressed, false otherwise.

</description></function></member>
<member class="wxRadioButton" name="SetValue"><function type="void" name="SetValue"><parameters><parameter type="const bool" name=" value"></parameter></parameters><description>

Sets the radio button to selected or deselected status. This does not cause a
wxEVT_COMMAND_RADIOBUTTON_SELECTED event to get emitted.






</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxRealPoint">
<description>
<p class="classdesc">
A <b> wxRealPoint</b> is a useful data structure for graphics operations.
It contains floating point point <i> x</i> and <i> y</i> members.
See also <ref target="wxpoint">wxPoint</ref> for an integer version.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/gdicmn.h"/></includes>
<seealso>

<ref target="wxpoint">wxPoint</ref>

</seealso>
<members>
<member class="wxRealPoint" name="wxRealPoint"><function type="" name="wxRealPoint"><description>

</description></function>
<function type="" name="wxRealPoint"><parameters><parameter type="double" name=" x"></parameter><parameter type="double" name=" y"></parameter></parameters><description>

Create a point.

\member{double}{ x}

\member{double}{ y}

Members of the <b> wxRealPoint</b> object.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxRect">
<description>
<p class="classdesc">
A class for manipulating rectangles.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/gdicmn.h"/></includes>
<seealso>

<ref target="wxpoint">wxPoint</ref><ref target="wxsize">wxSize</ref>

</seealso>
<members>
<member class="wxRect" name="wxRect"><function type="" name="wxRect"><description>

Default constructor.

</description></function>
<function type="" name="wxRect"><parameters><parameter type="int" name=" x"></parameter><parameter type="int" name=" y"></parameter><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter></parameters><description>

Creates a wxRect object from x, y, width and height values.

</description></function>
<function type="" name="wxRect"><parameters><parameter type="const wxPoint&amp;" name=" topLeft"></parameter><parameter type="const wxPoint&amp;" name=" bottomRight"></parameter></parameters><description>

Creates a wxRect object from top-left and bottom-right points.

</description></function>
<function type="" name="wxRect"><parameters><parameter type="const wxPoint&amp;" name=" pos"></parameter><parameter type="const wxSize&amp;" name=" size"></parameter></parameters><description>

Creates a wxRect object from position and size values.

</description></function></member>
<member class="wxRect" name="x"></member>
<member class="wxRect" name="y"></member>
<member class="wxRect" name="width"></member>
<member class="wxRect" name="height"></member>
<member class="wxRect" name="Deflate"><function type="void" name="Deflate"><parameters><parameter type="wxCoord " name="dx"></parameter><parameter type="wxCoord " name="dy"></parameter></parameters><description>

</description></function>
<function type="void" name="Deflate"><parameters><parameter type="wxCoord " name="diff"></parameter></parameters><description>

</description></function>
<function type="wxRect" name="Deflate" suffix="const"><parameters><parameter type="wxCoord " name="dx"></parameter><parameter type="wxCoord " name="dy"></parameter></parameters><seealso>

<ref target="wxrectinflate">Inflate</ref>

</seealso><description>

Decrease the rectangle size by <i> dx</i> in x direction and <i> dy</i> in y
direction. Both (or one of) parameters may be negative to increase the
rectngle size. This method is the opposite of <ref target="wxrectinflate">Inflate</ref>.

The second form uses the same <i> diff</i> for both <i> dx</i> and <i> dy</i>.

The first two versions modify the rectangle in place, the last one returns a
new rectangle leaving this one unchanged.

</description></function></member>
<member class="wxRect" name="GetBottom"><function type="int" name="GetBottom" suffix="const"><description>

Gets the bottom point of the rectangle.

</description></function></member>
<member class="wxRect" name="GetHeight"><function type="int" name="GetHeight" suffix="const"><description>

Gets the height member.

</description></function></member>
<member class="wxRect" name="GetLeft"><function type="int" name="GetLeft" suffix="const"><description>

Gets the left point of the rectangle (the same as <ref target="wxrectgetx">wxRect::GetX</ref>).

</description></function></member>
<member class="wxRect" name="GetPosition"><function type="wxPoint" name="GetPosition" suffix="const"><description>

Gets the position.

</description></function></member>
<member class="wxRect" name="GetRight"><function type="int" name="GetRight" suffix="const"><description>

Gets the right point of the rectangle.

</description></function></member>
<member class="wxRect" name="GetSize"><function type="wxSize" name="GetSize" suffix="const"><description>

Gets the size.

</description></function></member>
<member class="wxRect" name="GetTop"><function type="int" name="GetTop" suffix="const"><description>

Gets the top point of the rectangle (the same as <ref target="wxrectgety">wxRect::GetY</ref>).

</description></function></member>
<member class="wxRect" name="GetWidth"><function type="int" name="GetWidth" suffix="const"><description>

Gets the width member.

</description></function></member>
<member class="wxRect" name="GetX"><function type="int" name="GetX" suffix="const"><description>

Gets the x member.

</description></function></member>
<member class="wxRect" name="GetY"><function type="int" name="GetY" suffix="const"><description>

Gets the y member.

</description></function></member>
<member class="wxRect" name="Inflate"><function type="void" name="Inflate"><parameters><parameter type="wxCoord " name="dx"></parameter><parameter type="wxCoord " name="dy"></parameter></parameters><description>

</description></function>
<function type="void" name="Inflate"><parameters><parameter type="wxCoord " name="diff"></parameter></parameters><description>

</description></function>
<function type="wxRect" name="Inflate" suffix="const"><parameters><parameter type="wxCoord " name="dx"></parameter><parameter type="wxCoord " name="dy"></parameter></parameters><seealso>

<ref target="wxrectdeflate">Deflate</ref>

</seealso><description>

Increase the rectangle size by <i> dx</i> in x direction and <i> dy</i> in y
direction. Both (or one of) parameters may be negative to decrease the
rectangle size.

The second form uses the same <i> diff</i> for both <i> dx</i> and <i> dy</i>.

The first two versions modify the rectangle in place, the last one returns a
new rectangle leaving this one unchanged.

</description></function></member>
<member class="" name=""></member>
<member class="" name=""></member>
<member class="wxRect" name="Offset"><function type="void" name="Offset"><parameters><parameter type="wxCoord " name="dx"></parameter><parameter type="wxCoord " name="dy"></parameter></parameters><description>

</description></function>
<function type="void" name="Offset"><parameters><parameter type="const wxPoint&amp; " name="pt"></parameter></parameters><description>

Moves the rectangle by the specified offset. If <i> dx</i> is positive, the
rectangle is moved to the right, if <i> dy</i> is positive, it is moved to the
bottom, otherwise it is moved to the left or top respectively.

</description></function></member>
<member class="wxRect" name="SetHeight"><function type="void" name="SetHeight"><parameters><parameter type="int" name=" height"></parameter></parameters><description>

Sets the height.

</description></function></member>
<member class="wxRect" name="SetWidth"><function type="void" name="SetWidth"><parameters><parameter type="int" name=" width"></parameter></parameters><description>

Sets the width.

</description></function></member>
<member class="wxRect" name="SetX"><function type="void" name="SetX"><parameters><parameter type="int" name=" x"></parameter></parameters><description>

Sets the x position.

</description></function></member>
<member class="wxRect" name="SetY"><function type="void" name="SetY"><parameters><parameter type="int" name=" y"></parameter></parameters><description>

Sets the y position.

</description></function></member>
<member class="wxRect" name="operator $=$"><function type="void" name="operator $=$"><parameters><parameter type="const wxRect&amp; " name="rect"></parameter></parameters><description>

Assignment operator.

</description></function></member>
<member class="wxRect" name="operator $==$"><function type="bool" name="operator $==$"><parameters><parameter type="const wxRect&amp; " name="rect"></parameter></parameters><description>

Equality operator.

</description></function></member>
<member class="wxRect" name="operator $!=$"><function type="bool" name="operator $!=$"><parameters><parameter type="const wxRect&amp; " name="rect"></parameter></parameters><description>

Inequality operator.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxRegEx">
<description>
<p class="classdesc">
wxRegEx represents a regular expression. The regular expressions syntax
supported is the POSIX one. Both basic and extended regular expressions are
supported but, unlike POSIX C API, the extended ones are used by default.</p><p class="classdesc">This class provides support for regular expressions matching and also
replacement. It is built on top of either the system library (if it has support
for POSIX regular expressions - which is the case of the most modern Unices) or
uses the built in Henry Spencer's library. In the latter case you need to abide
by the terms of its copyright:</p><p class="classdesc"><pre>
Copyright 1992, 1993, 1994, 1997 Henry Spencer.  All rights reserved.
This software is not subject to any license of the American Telephone
and Telegraph Company or of the Regents of the University of California.

Permission is granted to anyone to use this software for any purpose on
any computer system, and to alter it and redistribute it, subject
to the following restrictions:

1. The author is not responsible for the consequences of use of this
   software, no matter how awful, even if they arise from flaws in it.

2. The origin of this software must not be misrepresented, either by
   explicit claim or by omission.  Since few users ever read sources,
   credits must appear in the documentation.

3. Altered versions must be plainly marked as such, and must not be
   misrepresented as being the original software.  Since few users
   ever read sources, credits must appear in the documentation.

4. This notice may not be removed or altered.
</pre></p>
</description>
<example>

A bad example of processing some text containing email addresses (the example
is bad because the real email addresses can have more complicated form than
<tt> user@host.net</tt>):

<pre>
wxString text;
...
wxRegEx reEmail = &quot;(&#91;^@]+)@(&#91;&#91;:alnum:].-_].)+(&#91;&#91;:alnum:]]+)&quot;;
if ( reEmail.Matches(text) )
{
    wxString text = reEmail.GetMatch(email);
    wxString username = reEmail.GetMatch(email, 1);
    if ( reEmail.GetMatch(email, 3) == &quot;com&quot; ) // .com TLD?
    {
        ...
    }
}

// or we could do this to hide the email address
size_t count = reEmail.ReplaceAll(text, &quot;HIDDEN@\\2\\3&quot;);
printf(&quot;text now contains </pre>

</example>
<parents></parents>
<structs>

Flags for regex compilation to be used with <ref target="wxregexcompile">Compile()</ref>:

<pre>
enum
{
    // use extended regex syntax (default)
    wxRE_EXTENDED = 0,

    // use basic RE syntax
    wxRE_BASIC    = 2,

    // ignore case in match
    wxRE_ICASE    = 4,

    // only check match, don't set back references
    wxRE_NOSUB    = 8,

    // if not set, treat '\n' as an ordinary character, otherwise it is
    // special: it is not matched by '.' and '^' and '$' always match
    // after/before it regardless of the setting of wxRE_NOT&#91;BE]OL
    wxRE_NEWLINE  = 16,

    // default flags
    wxRE_DEFAULT  = wxRE_EXTENDED
}
</pre>

Flags for regex matching to be used with <ref target="wxregexmatches">Matches()</ref>.

These flags are mainly useful when doing several matches in a long string
to prevent erroneous matches for <tt> '^'</tt> and <tt> '$'</tt>:

<pre>
enum
{
    // '^' doesn't match at the start of line
    wxRE_NOTBOL = 32,

    // '$' doesn't match at the end of line
    wxRE_NOTEOL = 64
}
</pre>

</structs>
<members>
<member class="wxRegEx" name="wxRegEx"><function type="" name="wxRegEx"><description>

Default ctor: use <ref target="wxregexcompile">Compile()</ref> later.

</description></function>
<function type="" name="wxRegEx"><parameters><parameter type="const wxString&amp; " name="expr"></parameter><parameter type="int " name="flags" value="wxRE_DEFAULT"></parameter></parameters><description>

Create and compile the regular expression, use 
<ref target="wxregexisvalid">IsValid</ref> to test for compilation errors.

</description></function></member>
<member class="wxRegEx" name="~wxRegEx"><function type="" name="~wxRegEx"><description>

dtor not virtual, don't derive from this class

</description></function></member>
<member class="wxRegEx" name="Compile"><function type="bool" name="Compile"><parameters><parameter type="const wxString&amp; " name="pattern"></parameter><parameter type="int " name="flags" value="wxRE_DEFAULT"></parameter></parameters><description>

Compile the string into regular expression, return <tt> true</tt> if ok or <tt> false</tt> 
if string has a syntax error.

</description></function></member>
<member class="wxRegEx" name="IsValid"><function type="bool" name="IsValid" suffix="const"><description>

Return <tt> true</tt> if this is a valid compiled regular expression, <tt> false</tt> 
otherwise.

</description></function></member>
<member class="wxRegEx" name="GetMatch"><function type="bool" name="GetMatch" suffix="const"><parameters><parameter type="size_t&#42; " name="start"></parameter><parameter type="size_t&#42; " name="len"></parameter><parameter type="size_t " name="index" value="0"></parameter></parameters><description>

Get the start index and the length of the match of the expression
(if <i> index</i> is 0) or a bracketed subexpression (<i> index</i> different
from 0).

May only be called after successful call to <ref target="wxregexmatches">Matches()</ref> 
and only if <tt> wxRE_NOSUB</tt> was <b> not</b> used in 
<ref target="wxregexcompile">Compile()</ref>.

Returns <tt> false</tt> if no match or if an error occured.

</description></function>
<function type="wxString" name="GetMatch" suffix="const"><parameters><parameter type="const wxString&amp; " name="text"></parameter><parameter type="size_t " name="index" value="0"></parameter></parameters><description>

Returns the part of string corresponding to the match where <i> index</i> is
interpreted as above. Empty string is returned if match failed

May only be called after successful call to <ref target="wxregexmatches">Matches()</ref> 
and only if <tt> wxRE_NOSUB</tt> was <b> not</b> used in 
<ref target="wxregexcompile">Compile()</ref>.

</description></function></member>
<member class="wxRegEx" name="Matches"><function type="bool" name="Matches" suffix="const"><parameters><parameter type="const wxChar&#42; " name="text"></parameter><parameter type="int " name="flags" value="0"></parameter></parameters><description>

Matches the precompiled regular expression against the string <i> text</i>,
returns <tt> true</tt> if matches and <tt> false</tt> otherwise.

Flags may be combination of <tt> wxRE_NOTBOL</tt> and <tt> wxRE_NOTEOL</tt>.

May only be called after successful call to <ref target="wxregexcompile">Compile()</ref>.

</description></function></member>
<member class="wxRegEx" name="Replace"><function type="int" name="Replace" suffix="const"><parameters><parameter type="wxString&#42; " name="text"></parameter><parameter type="const wxString&amp; " name="replacement"></parameter><parameter type="size_t " name="maxMatches" value="0"></parameter></parameters><description>

Replaces the current regular expression in the string pointed to by
<i> text</i>, with the text in <i> replacement</i> and return number of matches
replaced (maybe 0 if none found) or $-1$ on error.

The replacement text may contain back references <tt> $\backslash$number</tt> which will be
replaced with the value of the corresponding subexpression in the
pattern match. <tt> $\backslash$0</tt> corresponds to the entire match and <tt> &amp;</tt> is a
synonym for it. Backslash may be used to quote itself or <tt> &amp;</tt> character.

<i> maxMatches</i> may be used to limit the number of replacements made, setting
it to 1, for example, will only replace first occurrence (if any) of the
pattern in the text while default value of 0 means replace all.

</description></function></member>
<member class="wxRegEx" name="ReplaceAll"><function type="int" name="ReplaceAll" suffix="const"><parameters><parameter type="wxString&#42; " name="text"></parameter><parameter type="const wxString&amp; " name="replacement"></parameter></parameters><seealso>

<ref target="wxregexreplacefirst">ReplaceFirst</ref>

</seealso><description>

Replace all occurrences: this is actually a synonym for 
<ref target="wxregexreplace">Replace()</ref>.

</description></function></member>
<member class="wxRegEx" name="ReplaceFirst"><function type="int" name="ReplaceFirst" suffix="const"><parameters><parameter type="wxString&#42; " name="text"></parameter><parameter type="const wxString&amp; " name="replacement"></parameter></parameters><seealso>

<ref target="wxregexreplace">Replace</ref>

</seealso><description>

Replace the first occurrence.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxRegion">
<description>
<p class="classdesc">
A wxRegion represents a simple or complex region on a device context or window. It uses
reference counting, so copying and assignment operations are fast.</p>
</description>
<parents>
<classref name="wxGDIObject"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/region.h"/></includes>
<seealso>

<ref target="wxregioniterator">wxRegionIterator</ref>

</seealso>
<members>
<member class="wxRegion" name="wxRegion"><function type="" name="wxRegion"><description>

Default constructor.

</description></function>
<function type="" name="wxRegion"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter><parameter type="wxCoord" name=" width"></parameter><parameter type="wxCoord" name=" height"></parameter></parameters><description>

Constructs a rectangular region with the given position and size.

</description></function>
<function type="" name="wxRegion"><parameters><parameter type="const wxPoint&amp;" name=" topLeft"></parameter><parameter type="const wxPoint&amp;" name=" bottomRight"></parameter></parameters><description>

Constructs a rectangular region from the top left point and the bottom right point.

</description></function>
<function type="" name="wxRegion"><parameters><parameter type="const wxRect&amp;" name=" rect"></parameter></parameters><description>

Constructs a rectangular region a wxRect object.

</description></function>
<function type="" name="wxRegion"><parameters><parameter type="const wxRegion&amp;" name=" region"></parameter></parameters><description>

Constructs a region by copying another region.

</description></function>
<function type="" name="wxRegion"><parameters><parameter type="size_t" name=" n"></parameter><parameter type="const wxPoint " name="&#42;points"></parameter><parameter type="int " name="fillStyle" value="wxWINDING_RULE"></parameter></parameters><description>

Constructs a region corresponding to the polygon made of <i> n</i> points in the
provided array. <i> fillStyle</i> parameter may have values
<tt> wxWINDING_RULE</tt> or <tt> wxODDEVEN_RULE</tt>.

<b> NB:</b> This constructor is only implemented for Win32 and GTK+ wxWindows ports.

</description></function>
<function type="" name="wxRegion"><parameters><parameter type="const wxBitmap&amp;" name=" bmp"></parameter><parameter type="const wxColour&amp;" name="transColour" value="wxNullColour"></parameter><parameter type="int" name="tolerance" value="0"></parameter></parameters><description>

Constructs a region using the non-transparent pixels of a bitmap.  See
<ref target="wxregionunion">Union</ref> for more details.


</description></function></member>
<member class="wxRegion" name="~wxRegion"><function type="" name="~wxRegion"><description>

Destructor.

</description></function></member>
<member class="wxRegion" name="Clear"><function type="void" name="Clear"><description>

Clears the current region.

</description></function></member>
<member class="wxRegion" name="Contains"><function type="wxRegionContain" name="Contains" suffix="const"><parameters><parameter type="long&amp; " name="x"></parameter><parameter type="long&amp; " name="y"></parameter></parameters><description>

Returns a value indicating whether the given point is contained within the region.

</description></function>
<function type="wxRegionContain" name="Contains" suffix="const"><parameters><parameter type="const wxPoint&amp;" name=" pt"></parameter></parameters><description>

Returns a value indicating whether the given point is contained within the region.

</description></function>
<function type="wxRegionContain" name="Contains" suffix="const"><parameters><parameter type="long&amp; " name="x"></parameter><parameter type="long&amp; " name="y"></parameter><parameter type="long&amp; " name="width"></parameter><parameter type="long&amp; " name="height"></parameter></parameters><description>

Returns a value indicating whether the given rectangle is contained within the region.

</description></function>
<function type="wxRegionContain" name="Contains" suffix="const"><parameters><parameter type="const wxRect&amp; " name="rect"></parameter></parameters><returnvalue>

The return value is one of wxOutRegion, wxPartRegion and wxInRegion.

On Windows, only wxOutRegion and wxInRegion are returned; a value wxInRegion then indicates that
all or some part of the region is contained in this region.

</returnvalue><description>

Returns a value indicating whether the given rectangle is contained within the region.

</description></function></member>
<member class="wxRegion" name="ConvertToBitmap"><function type="wxBitmap" name="ConvertToBitmap" suffix="const"><parameters></parameters><description>

Convert the region to a black and white bitmap with the white pixels
being inside the region.

</description></function></member>
<member class="wxRegion" name="GetBox"><function type="void" name="GetBox" suffix="const"><parameters><parameter type="long&amp; " name="x"></parameter><parameter type="long&amp; " name="y"></parameter><parameter type="long&amp; " name="width"></parameter><parameter type="long&amp; " name="height"></parameter></parameters><description>

Returns the outer bounds of the region.

</description></function>
<function type="wxRect" name="GetBox" suffix="const"><description>

Returns the outer bounds of the region.

</description></function></member>
<member class="wxRegion" name="Intersect"><function type="bool" name="Intersect"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter><parameter type="wxCoord" name=" width"></parameter><parameter type="wxCoord" name=" height"></parameter></parameters><description>

Finds the intersection of this region and another, rectangular region, specified using position and size.

</description></function>
<function type="bool" name="Intersect"><parameters><parameter type="const wxRect&amp;" name=" rect"></parameter></parameters><description>

Finds the intersection of this region and another, rectangular region.

</description></function>
<function type="bool" name="Intersect"><parameters><parameter type="const wxRegion&amp;" name=" region"></parameter></parameters><remarks>

Creates the intersection of the two regions, that is, the parts which are in both regions. The result
is stored in this region.

</remarks><returnvalue>

<tt> true</tt> if successful, <tt> false</tt> otherwise.

</returnvalue><description>

Finds the intersection of this region and another region.

</description></function></member>
<member class="wxRegion" name="IsEmpty"><function type="bool" name="IsEmpty" suffix="const"><description>

Returns <tt> true</tt> if the region is empty, <tt> false</tt> otherwise.

</description></function></member>
<member class="wxRegion" name="Subtract"><function type="bool" name="Subtract"><parameters><parameter type="const wxRect&amp;" name=" rect"></parameter></parameters><description>

Subtracts a rectangular region from this region.

</description></function>
<function type="bool" name="Subtract"><parameters><parameter type="const wxRegion&amp;" name=" region"></parameter></parameters><remarks>

This operation combines the parts of 'this' region that are not part of the second region.
The result is stored in this region.

</remarks><returnvalue>

<tt> true</tt> if successful, <tt> false</tt> otherwise.

</returnvalue><description>

Subtracts a region from this region.

</description></function></member>
<member class="wxRegion" name="Offset"><function type="bool" name="Offset"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter></parameters><returnvalue>

<tt> true</tt> if successful, <tt> false</tt> otherwise (the region is unchanged then).

</returnvalue><description>

Moves the region by the specified offsets in horizontal and vertical
directions.

</description></function></member>
<member class="wxRegion" name="Union"><function type="bool" name="Union"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter><parameter type="wxCoord" name=" width"></parameter><parameter type="wxCoord" name=" height"></parameter></parameters><description>

Finds the union of this region and another, rectangular region, specified using position and size.

</description></function>
<function type="bool" name="Union"><parameters><parameter type="const wxRect&amp;" name=" rect"></parameter></parameters><description>

Finds the union of this region and another, rectangular region.

</description></function>
<function type="bool" name="Union"><parameters><parameter type="const wxRegion&amp;" name=" region"></parameter></parameters><description>

Finds the union of this region and another region.

</description></function>
<function type="bool" name="Union"><parameters><parameter type="const wxBitmap&amp;" name=" bmp"></parameter><parameter type="const wxColour&amp;" name="transColour" value="wxNullColour"></parameter><parameter type="int" name="tolerance" value="0"></parameter></parameters><remarks>

This operation creates a region that combines all of this region and the second region.
The result is stored in this region.

</remarks><returnvalue>

<tt> true</tt> if successful, <tt> false</tt> otherwise.

</returnvalue><description>

Finds the union of this region and the the non-transparent pixels of a
bitmap.  If the bitmap has a mask then it will be used, otherwise the
colour to be treated as transparent may be specified, along with an
optional colour tolerance value.

</description></function></member>
<member class="wxRegion" name="Xor"><function type="bool" name="Xor"><parameters><parameter type="wxCoord" name=" x"></parameter><parameter type="wxCoord" name=" y"></parameter><parameter type="wxCoord" name=" width"></parameter><parameter type="wxCoord" name=" height"></parameter></parameters><description>

Finds the Xor of this region and another, rectangular region, specified using position and size.

</description></function>
<function type="bool" name="Xor"><parameters><parameter type="const wxRect&amp;" name=" rect"></parameter></parameters><description>

Finds the Xor of this region and another, rectangular region.

</description></function>
<function type="bool" name="Xor"><parameters><parameter type="const wxRegion&amp;" name=" region"></parameter></parameters><remarks>

This operation creates a region that combines all of this region and the second region, except
for any overlapping areas. The result is stored in this region.

</remarks><returnvalue>

<tt> true</tt> if successful, <tt> false</tt> otherwise.

</returnvalue><description>

Finds the Xor of this region and another region.

</description></function></member>
<member class="wxRegion" name="operator $=$"><function type="void" name="operator $=$"><parameters><parameter type="const wxRegion&amp;" name=" region"></parameter></parameters><description>

Copies <i> region</i> by reference counting.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxRegionIterator">
<description>
<p class="classdesc">
This class is used to iterate through the rectangles in a region,
typically when examining the damaged regions of a window within an OnPaint call.</p><p class="classdesc">To use it, construct an iterator object on the stack and loop through the
regions, testing the object and incrementing the iterator at the end of the loop.</p><p class="classdesc">See <ref target="wxpaintevent">wxPaintEvent</ref> for an example of use.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/region.h"/></includes>
<seealso>

<ref target="wxpaintevent">wxPaintEvent</ref>

</seealso>
<members>
<member class="wxRegionIterator" name="wxRegionIterator"><function type="" name="wxRegionIterator"><description>

Default constructor.

</description></function>
<function type="" name="wxRegionIterator"><parameters><parameter type="const wxRegion&amp;" name=" region"></parameter></parameters><description>

Creates an iterator object given a region.

</description></function></member>
<member class="wxRegionIterator" name="GetX"><function type="wxCoord" name="GetX" suffix="const"><description>

Returns the x value for the current region.

</description></function></member>
<member class="wxRegionIterator" name="GetY"><function type="wxCoord" name="GetY" suffix="const"><description>

Returns the y value for the current region.

</description></function></member>
<member class="wxRegionIterator" name="GetW"><function type="wxCoord" name="GetW" suffix="const"><description>

An alias for GetWidth.

</description></function></member>
<member class="wxRegionIterator" name="GetWidth"><function type="wxCoord" name="GetWidth" suffix="const"><description>

Returns the width value for the current region.

</description></function></member>
<member class="wxRegionIterator" name="GetH"><function type="wxCoord" name="GetH" suffix="const"><description>

An alias for GetHeight.

</description></function></member>
<member class="wxRegionIterator" name="GetHeight"><function type="wxCoord" name="GetWidth" suffix="const"><description>

Returns the width value for the current region.

</description></function></member>
<member class="wxRegionIterator" name="GetRect"><function type="wxRect" name="GetRect" suffix="const"><description>

Returns the current rectangle.

</description></function></member>
<member class="wxRegionIterator" name="HaveRects"><function type="bool" name="HaveRects" suffix="const"><description>

Returns <tt> true</tt> if there are still some rectangles; otherwise returns <tt> false</tt>.

</description></function></member>
<member class="wxRegionIterator" name="Reset"><function type="void" name="Reset"><description>

Resets the iterator to the beginning of the rectangles.

</description></function>
<function type="void" name="Reset"><parameters><parameter type="const wxRegion&amp;" name=" region"></parameter></parameters><description>

Resets the iterator to the given region.

</description></function></member>
<member class="wxRegionIterator" name="operator $++$"><function type="void" name="operator $++$"><description>

Increment operator. Increments the iterator to the next region.

\pythonnote{A wxPython alias for this operator is called <tt> Next</tt>.}

</description></function></member>
<member class="wxRegionIterator" name="operator bool"><function type="" name="operator bool" suffix="const"><description>

Returns <tt> true</tt> if there are still some rectangles; otherwise returns <tt> false</tt>.

You can use this to test the iterator object as if it were of type bool.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSashEvent">
<description>
<p class="classdesc">
A sash event is sent when the sash of a <ref target="wxsashwindow">wxSashWindow</ref> has been
dragged by the user.</p>
</description>
<remarks>

When a sash belonging to a sash window is dragged by the user, and then released,
this event is sent to the window, where it may be processed by an event table
entry in a derived class, a plug-in event handler or an ancestor class.

Note that the wxSashWindow doesn't change the window's size itself. It relies on the application's
event handler to do that. This is because the application may have to handle other consequences
of the resize, or it may wish to veto it altogether. The event handler should
look at the drag rectangle: see <ref target="wxsasheventgetdragrect">wxSashEvent::GetDragRect</ref> to see
what the new size of the window would be if the resize were to be applied. It should
also call <ref target="wxsasheventgetdragstatus">wxSashEvent::GetDragStatus</ref> to see whether the
drag was OK or out of the current allowed range.

</remarks>
<parents>
<classref name="wxCommandEvent"/>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/sashwin.h"/></includes>
<events>
<event name="EVT_SASH_DRAGGED(id, func)">Process a wxEVT_SASH_DRAGGED event,
when the user has finished dragging a sash.</event><event name="EVT_SASH_DRAGGED_RANGE(id1, id2, func)">Process a wxEVT_SASH_DRAGGED_RANGE event,
when the user has finished dragging a sash. The event handler is called when windows with ids in the
given range have their sashes dragged.</event></events>
<structs>

<pre>
enum wxSashDragStatus
{
    wxSASH_STATUS_OK,
    wxSASH_STATUS_OUT_OF_RANGE
};
</pre>

</structs>
<seealso>

<ref target="wxsashwindow">wxSashWindow</ref>,
<ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxSashEvent" name="wxSashEvent"><function type="" name="wxSashEvent"><parameters><parameter type="int " name="id" value="0"></parameter><parameter type="wxSashEdgePosition" name="edge" value="wxSASH_NONE"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxSashEvent" name="GetEdge"><function type="wxSashEdgePosition" name="GetEdge" suffix="const"><description>

Returns the dragged edge. The return value is one of wxSASH_TOP, wxSASH_RIGHT, wxSASH_BOTTOM, wxSASH_LEFT.

</description></function></member>
<member class="wxSashEvent" name="GetDragRect"><function type="wxRect" name="GetDragRect" suffix="const"><description>

Returns the rectangle representing the new size the window would be if the resize was applied. It is
up to the application to set the window size if required.

</description></function></member>
<member class="wxSashEvent" name="GetDragStatus"><function type="wxSashDragStatus" name="GetDragStatus" suffix="const"><description>

Returns the status of the sash: one of wxSASH_STATUS_OK, wxSASH_STATUS_OUT_OF_RANGE.
If the drag caused the notional bounding box of the window to flip over, for example, the drag will be out of rage.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSashLayoutWindow">
<description>
<p class="classdesc">
wxSashLayoutWindow responds to OnCalculateLayout events generated
by <ref target="wxlayoutalgorithm">wxLayoutAlgorithm</ref>. It allows the
application to use simple accessors to specify how the window should be
laid out, rather than having to respond to events. The fact that
the class derives from wxSashWindow allows sashes to be used if required,
to allow the windows to be user-resizable.</p><p class="classdesc">The documentation for <ref target="wxlayoutalgorithm">wxLayoutAlgorithm</ref> explains
the purpose of this class in more detail.</p>
</description>
<parents>
<classref name="wxSashWindow"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/laywin.h"/></includes>
<windowstyles>
</windowstyles>
<events>
</events>
<seealso>

<ref target="wxlayoutalgorithm">wxLayoutAlgorithm</ref><ref target="wxsashwindow">wxSashWindow</ref><ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxSashLayoutWindow" name="wxSashLayoutWindow"><function type="" name="wxSashLayoutWindow"><description>

Default constructor.

</description></function>
<function type="" name="wxSashLayoutWindow"><parameters><parameter type="wxSashLayoutWindow&#42;" name=" parent"></parameter><parameter type="wxSashLayoutWindowID " name="id">Window identifier. If -1, will automatically create an identifier.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Window position. wxDefaultPosition is (-1, -1) which indicates that wxSashLayoutWindows
should generate a default position for the window. If using the wxSashLayoutWindow class directly, supply
an actual position.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Window size. wxDefaultSize is (-1, -1) which indicates that wxSashLayoutWindows
should generate a default size for the window.</parameter><parameter type="long " name="style" value="wxCLIP_CHILDREN">Window style. For window styles, please see <ref target="wxsashlayoutwindow">wxSashLayoutWindow</ref>.</parameter><parameter type="const wxString&amp; " name="name" value="&quot;layoutWindow&quot;">Window name.</parameter></parameters><description>

Constructs a sash layout window, which can be a child of a frame, dialog or any other non-control window.















</description></function></member>
<member class="wxSashLayoutWindow" name="~wxSashLayoutWindow"><function type="" name="~wxSashLayoutWindow"><description>

Destructor.

</description></function></member>
<member class="wxSashLayoutWindow" name="GetAlignment"><function type="wxLayoutAlignment" name="GetAlignment" suffix="const"><description>

Returns the alignment of the window: one of wxLAYOUT_TOP, wxLAYOUT_LEFT, wxLAYOUT_RIGHT, wxLAYOUT_BOTTOM.

</description></function></member>
<member class="wxSashLayoutWindow" name="GetOrientation"><function type="wxLayoutOrientation" name="GetOrientation" suffix="const"><description>

Returns the orientation of the window: one of wxLAYOUT_HORIZONTAL, wxLAYOUT_VERTICAL.

</description></function></member>
<member class="wxSashLayoutWindow" name="OnCalculateLayout"><function type="void" name="OnCalculateLayout"><parameters><parameter type="wxCalculateLayoutEvent&amp;" name=" event"></parameter></parameters><description>

The default handler for the event that is generated by wxLayoutAlgorithm. The implementation
of this function calls wxCalculateLayoutEvent::SetRect to shrink the provided size according to
how much space this window takes up. For further details,
see <ref target="wxlayoutalgorithm">wxLayoutAlgorithm</ref> and <ref target="wxcalculatelayoutevent">wxCalculateLayoutEvent</ref>.

</description></function></member>
<member class="wxSashLayoutWindow" name="OnQueryLayoutInfo"><function type="void" name="OnQueryLayoutInfo"><parameters><parameter type="wxQueryLayoutInfoEvent&amp;" name=" event"></parameter></parameters><description>

The default handler for the event that is generated by OnCalculateLayout to get
size, alignment and orientation information for the window. The implementation
of this function uses member variables as set by accessors called by the application.
For further details, see <ref target="wxlayoutalgorithm">wxLayoutAlgorithm</ref> and <ref target="wxquerylayoutinfoevent">wxQueryLayoutInfoEvent</ref>.

</description></function></member>
<member class="wxSashLayoutWindow" name="SetAlignment"><function type="void" name="SetAlignment"><parameters><parameter type="wxLayoutAlignment" name=" alignment"></parameter></parameters><description>

Sets the alignment of the window (which edge of the available parent client area the window
is attached to). <i> alignment</i> is one of wxLAYOUT_TOP, wxLAYOUT_LEFT, wxLAYOUT_RIGHT, wxLAYOUT_BOTTOM.

</description></function></member>
<member class="wxSashLayoutWindow" name="SetDefaultSize"><function type="void" name="SetDefaultSize"><parameters><parameter type="const wxSize&amp; " name="size"></parameter></parameters><description>

Sets the default dimensions of the window. The dimension other than the orientation will be fixed to this
value, and the orientation dimension will be ignored and the window stretched to fit the available space.

</description></function></member>
<member class="wxSashLayoutWindow" name="SetOrientation"><function type="void" name="SetOrientation"><parameters><parameter type="wxLayoutOrientation" name=" orientation"></parameter></parameters><description>

Sets the orientation of the window (the direction the window will stretch in, to fill the available
parent client area). <i> orientation</i> is one of wxLAYOUT_HORIZONTAL, wxLAYOUT_VERTICAL.



</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSashWindow">
<description>
<p class="classdesc">
wxSashWindow allows any of its edges to have a sash which can be dragged
to resize the window. The actual content window will be created by the application
as a child of wxSashWindow. The window (or an ancestor) will be notified of a drag
via a <ref target="wxsashevent">wxSashEvent</ref> notification.</p>
</description>
<parents>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/sashwin.h"/></includes>
<windowstyles>
<style name="wxSW_3D">Draws a 3D effect sash and border.</style><style name="wxSW_3DSASH">Draws a 3D effect sash.</style><style name="wxSW_3DBORDER">Draws a 3D effect border.</style><style name="wxSW_BORDER">Draws a thin black border.</style></windowstyles>
<events>
<event name="EVT_SASH_DRAGGED(id, func)">Process a wxEVT_SASH_DRAGGED event,
when the user has finished dragging a sash.</event><event name="EVT_SASH_DRAGGED_RANGE(id1, id2, func)">Process a wxEVT_SASH_DRAGGED_RANGE event,
when the user has finished dragging a sash. The event handler is called when windows with ids in the
given range have their sashes dragged.</event></events>
<types>

<pre>
enum wxSashEdgePosition {
    wxSASH_TOP = 0,
    wxSASH_RIGHT,
    wxSASH_BOTTOM,
    wxSASH_LEFT,
    wxSASH_NONE = 100
};
</pre>

</types>
<seealso>

<ref target="wxsashevent">wxSashEvent</ref><ref target="wxsashlayoutwindow">wxSashLayoutWindow</ref><ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxSashWindow" name="wxSashWindow"><function type="" name="wxSashWindow"><description>

Default constructor.

</description></function>
<function type="" name="wxSashWindow"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID " name="id">Window identifier. If -1, will automatically create an identifier.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Window position. wxDefaultPosition is (-1, -1) which indicates that wxSashWindows
should generate a default position for the window. If using the wxSashWindow class directly, supply
an actual position.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Window size. wxDefaultSize is (-1, -1) which indicates that wxSashWindows
should generate a default size for the window.</parameter><parameter type="long " name="style" value="wxCLIP_CHILDREN">Window style. For window styles, please see <ref target="wxsashwindow">wxSashWindow</ref>.</parameter><parameter type="const wxString&amp; " name="name" value="&quot;sashWindow&quot;">Window name.</parameter></parameters><description>

Constructs a sash window, which can be a child of a frame, dialog or any other non-control window.















</description></function></member>
<member class="wxSashWindow" name="~wxSashWindow"><function type="" name="~wxSashWindow"><description>

Destructor.

</description></function></member>
<member class="wxSashWindow" name="GetSashVisible"><function type="bool" name="GetSashVisible" suffix="const"><parameters><parameter type="wxSashEdgePosition " name="edge">Edge. One of wxSASH_TOP, wxSASH_RIGHT, wxSASH_BOTTOM, wxSASH_LEFT.</parameter></parameters><seealso>

<ref target="wxsashwindowsetsashvisible">wxSashWindow::SetSashVisible</ref>

</seealso><description>

Returns true if a sash is visible on the given edge, false otherwise.





</description></function></member>
<member class="wxSashWindow" name="GetMaximumSizeX"><function type="int" name="GetMaximumSizeX" suffix="const"><description>

Gets the maximum window size in the x direction.

</description></function></member>
<member class="wxSashWindow" name="GetMaximumSizeY"><function type="int" name="GetMaximumSizeY" suffix="const"><description>

Gets the maximum window size in the y direction.

</description></function></member>
<member class="wxSashWindow" name="GetMinimumSizeX"><function type="int" name="GetMinimumSizeX"><description>

Gets the minimum window size in the x direction.

</description></function></member>
<member class="wxSashWindow" name="GetMinimumSizeY"><function type="int" name="GetMinimumSizeY" suffix="const"><parameters><parameter type="int" name=" min"></parameter></parameters><description>

Gets the minimum window size in the y direction.

</description></function></member>
<member class="wxSashWindow" name="HasBorder"><function type="bool" name="HasBorder" suffix="const"><parameters><parameter type="wxSashEdgePosition " name="edge">Edge. One of wxSASH_TOP, wxSASH_RIGHT, wxSASH_BOTTOM, wxSASH_LEFT.</parameter></parameters><seealso>

<ref target="wxsashwindowsetsashborder">wxSashWindow::SetSashBorder</ref>

</seealso><description>

Returns true if the sash has a border, false otherwise.





</description></function></member>
<member class="wxSashWindow" name="SetMaximumSizeX"><function type="void" name="SetMaximumSizeX"><parameters><parameter type="int" name=" min"></parameter></parameters><description>

Sets the maximum window size in the x direction.

</description></function></member>
<member class="wxSashWindow" name="SetMaximumSizeY"><function type="void" name="SetMaximumSizeY"><parameters><parameter type="int" name=" min"></parameter></parameters><description>

Sets the maximum window size in the y direction.

</description></function></member>
<member class="wxSashWindow" name="SetMinimumSizeX"><function type="void" name="SetMinimumSizeX"><parameters><parameter type="int" name=" min"></parameter></parameters><description>

Sets the minimum window size in the x direction.

</description></function></member>
<member class="wxSashWindow" name="SetMinimumSizeY"><function type="void" name="SetMinimumSizeY"><parameters><parameter type="int" name=" min"></parameter></parameters><description>

Sets the minimum window size in the y direction.

</description></function></member>
<member class="wxSashWindow" name="SetSashVisible"><function type="void" name="SetSashVisible"><parameters><parameter type="wxSashEdgePosition " name="edge">Edge to change. One of wxSASH_TOP, wxSASH_RIGHT, wxSASH_BOTTOM, wxSASH_LEFT.</parameter><parameter type="bool" name=" visible"></parameter></parameters><seealso>

<ref target="wxsashwindowgetsashvisible">wxSashWindow::GetSashVisible</ref>

</seealso><description>

Call this function to make a sash visible or invisible on a particular edge.







</description></function></member>
<member class="wxSashWindow" name="SetSashBorder"><function type="void" name="SetSashBorder"><parameters><parameter type="wxSashEdgePosition " name="edge">Edge to change. One of wxSASH_TOP, wxSASH_RIGHT, wxSASH_BOTTOM, wxSASH_LEFT.</parameter><parameter type="bool" name=" hasBorder"></parameter></parameters><seealso>

<ref target="wxsashwindowhasborder">wxSashWindow::HasBorder</ref>

</seealso><description>

Call this function to give the sash a border, or remove the border.







</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxScopedArray">
<description>
<p class="classdesc">
This is a simple scoped smart pointer array implementation that is similar to 
the <a href="Boost">http://www.boost.org</a> smart pointers but rewritten to
use macros instead.</p>
</description>
<example>

Below is an example of using a wxWindows scoped smart pointer and 
pointer array.

<pre>
  class MyClass { /&#42; ... &#42;/ };

  // declare a smart pointer to a MyClass called wxMyClassPtr
  wxDECLARE_SCOPED_PTR(MyClass, wxMyClassPtr)
  // declare a smart pointer to an array of chars
  wxDECLARE_SCOPED_ARRAY(char, wxCharArray)

  ...

  // define the first pointer class, must be complete
  wxDEFINE_SCOPED_PTR(MyClass, wxMyClassPtr)
  // define the second pointer class
  wxDEFINE_SCOPED_ARRAY(char, wxCharArray)

  // create an object with a new pointer to MyClass
  wxMyClassPtr theObj(new MyClass());
  // reset the pointer (deletes the previous one)
  theObj.reset(new MyClass());

  // access the pointer
  theObj-&gt;MyFunc();

  // create an object with a new array of chars
  wxCharArray theCharObj(new char&#91;100]);

  // access the array
  theCharObj&#91;0] = &quot;!&quot;;
</pre>

<heading>Declaring new smart pointer types</heading>

<pre>
    wxDECLAR_SCOPED_ARRAY( TYPE,     // type of the values
                                CLASSNAME ); // name of the class
</pre>

A smart pointer holds a pointer to an object (which must be complete
when wxDEFINE_SCOPED_ARRAY() is called). The memory used by the object is
deleted when the smart pointer goes out of scope. The first argument
of the macro is the pointer type, the second is the name of the new
smart pointer class being created.  Below we will use wxScopedArray to
represent the scoped pointer array class, but the user may create the class 
with any legal name.

</example>
<includes>
<header name="wx/ptr_scpd.h"/></includes>
<seealso>

<ref target="wxscopedptr">wxScopedPtr</ref>

</seealso>
<members>
<member class="wxScopedArray" name="wxScopedArray"><function type="" name="wxScopedArray"><parameters><parameter type="type" name="T" value="NULL"></parameter></parameters><description>

Creates the smart pointer with the given pointer or none if NULL.  On
compilers that support it, this uses the explicit keyword.

</description></function></member>
<member class="wxScopedArray" name="reset"><function type="void" name="reset"><parameters><parameter type="T" name="&#42;" value="NULL"></parameter></parameters><description>

Deletes the currently held pointer and sets it to 'p' or to NULL if no 
arguments are specified. This function does check to make sure that the
pointer you are assigning is not the same pointer that is already stored.

</description></function></member>
<member class="wxScopedArray" name="operator &#91;]"><function type="const T &amp;" name="operator &#91;]"><parameters><parameter type="long int" name="i"></parameter></parameters><description>

This operator acts like the standard &#91;] indexing operator for C++ arrays.  The
function does not do bounds checking.

</description></function></member>
<member class="wxScopedArray" name="get"><function type="const T&#42;" name="get"><description>

This operator gets the pointer stored in the smart pointer or returns NULL if
there is none.

</description></function></member>
<member class="wxScopedArray" name="swap"><function type="void" name="swap"><parameters><parameter type="wxScopedPtr" name=" &amp; ot"></parameter></parameters><description>

Swap the pointer inside the smart pointer with 'ot'. The pointer being swapped
must be of the same type (hence the same class name).

</description></function></member></members>
<supported>
</supported>
</class><class name="wxScopedPtr">
<description>
<p class="classdesc">
This is a simple scoped smart pointer implementation that is similar to 
the <a href="Boost">http://www.boost.org</a> smart pointers but rewritten to
use macros instead.</p><p class="classdesc"><heading>Declaring new smart pointer types</heading></p><p class="classdesc"><pre>
    wxDECLAR_SCOPED_PTR( TYPE,     // type of the values
                                CLASSNAME ); // name of the class
</pre></p><p class="classdesc">A smart pointer holds a pointer to an object (which must be complete
when wxDEFINE_SCOPED_PTR() is called). The memory used by the object is
deleted when the smart pointer goes out of scope. The first argument
of the macro is the pointer type, the second is the name of the new
smart pointer class being created.  Below we will use wxScopedPtr to
represent the scoped pointer class, but the user may create the class with any
legal name.</p>
</description>
<example>

Below is an example of using a wxWindows scoped smart pointer and 
pointer array.

<pre>
  class MyClass { /&#42; ... &#42;/ };

  // declare a smart pointer to a MyClass called wxMyClassPtr
  wxDECLARE_SCOPED_PTR(MyClass, wxMyClassPtr)
  // declare a smart pointer to an array of chars
  wxDECLARE_SCOPED_ARRAY(char, wxCharArray)

  ...

  // define the first pointer class, must be complete
  wxDEFINE_SCOPED_PTR(MyClass, wxMyClassPtr)
  // define the second pointer class
  wxDEFINE_SCOPED_ARRAY(char, wxCharArray)

  // create an object with a new pointer to MyClass
  wxMyClassPtr theObj(new MyClass());
  // reset the pointer (deletes the previous one)
  theObj.reset(new MyClass());

  // access the pointer
  theObj-&gt;MyFunc();

  // create an object with a new array of chars
  wxCharArray theCharObj(new char&#91;100]);

  // access the array
  theCharObj&#91;0] = &quot;!&quot;;
</pre>


</example>
<includes>
<header name="wx/ptr_scpd.h"/></includes>
<seealso>

<ref target="wxscopedarray">wxScopedArray</ref>

</seealso>
<members>
<member class="wxScopedPtr" name="wxScopedPtr"><function type="" name="wxScopedPtr"><parameters><parameter type="type" name="T" value="NULL"></parameter></parameters><description>

Creates the smart pointer with the given pointer or none if NULL.  On
compilers that support it, this uses the explicit keyword.

</description></function></member>
<member class="wxScopedPtr" name="reset"><function type="void" name="reset"><parameters><parameter type="T" name="&#42;" value="NULL"></parameter></parameters><description>

Deletes the currently held pointer and sets it to 'p' or to NULL if no 
arguments are specified. This function does check to make sure that the
pointer you are assigning is not the same pointer that is already stored.

</description></function></member>
<member class="wxScopedPtr" name="operator &#42;"><function type="const T&amp;" name="operator &#42;"><description>

This operator works like the standard C++ pointer operator to return the object
being pointed to by the pointer.  If the pointer is NULL or invalid this will
crash.

</description></function></member>
<member class="wxScopedPtr" name="operator -$&gt;$"><function type="const T&#42;" name="operator -$&gt;$"><description> 
This operator works like the standard C++ pointer operator to return the pointer
in the smart pointer or NULL if it is empty.

</description></function></member>
<member class="wxScopedPtr" name="get"><function type="const T&#42;" name="get"><description>

This operator gets the pointer stored in the smart pointer or returns NULL if
there is none.

</description></function></member>
<member class="wxScopedPtr" name="swap"><function type="void" name="swap"><parameters><parameter type="wxScopedPtr" name=" &amp; ot"></parameter></parameters><description>

Swap the pointer inside the smart pointer with 'ot'. The pointer being swapped
must be of the same type (hence the same class name).

</description></function></member></members>
<supported>
</supported>
</class><class name="wxScreenDC">
<description>
<p class="classdesc">
A wxScreenDC can be used to paint on the screen.
This should normally be constructed as a temporary stack object; don't store
a wxScreenDC object.</p>
</description>
<parents>
<classref name="wxDC"/>

</parents>
<includes>
<header name="wx/dcscreen.h"/></includes>
<seealso>

<ref target="wxdc">wxDC</ref><ref target="wxmemorydc">wxMemoryDC</ref><ref target="wxpaintdc">wxPaintDC</ref>,
<ref target="wxclientdc">wxClientDC</ref><ref target="wxwindowdc">wxWindowDC</ref>

</seealso>
<members>
<member class="wxScreenDC" name="wxScreenDC"><function type="" name="wxScreenDC"><description>

Constructor.

</description></function></member>
<member class="wxScreenDC" name="StartDrawingOnTop"><function type="bool" name="StartDrawingOnTop"><parameters><parameter type="wxWindow&#42;" name=" window"></parameter></parameters><description>

</description></function>
<function type="bool" name="StartDrawingOnTop"><parameters><parameter type="wxRect&#42;" name="rect" value="NULL"></parameter></parameters><remarks>

This function is probably obsolete since the X implementations
allow drawing directly on the screen now. However, the fact that this
function allows the screen to be refreshed afterwards, may be useful to
some applications.

</remarks><description>

Use this in conjunction with <ref target="wxscreendcenddrawingontop">EndDrawingOnTop</ref> to
ensure that drawing to the screen occurs on top of existing windows. Without this,
some window systems (such as X) only allow drawing to take place underneath
other windows.

By using the first form of this function, an application is specifying that
the area that will be drawn on coincides with the given window.

By using the second form, an application can specify an area of the screen
which is to be drawn on. If NULL is passed, the whole screen is available.

It is recommended that an area of the screen is specified because with large regions,
flickering effects are noticeable when destroying the temporary transparent window used
to implement this feature.

You might use this pair of functions when implementing a drag feature, for example
as in the <ref target="wxsplitterwindow">wxSplitterWindow</ref> implementation.

</description></function></member>
<member class="wxScreenDC" name="EndDrawingOnTop"><function type="bool" name="EndDrawingOnTop"><description>

Use this in conjunction with <ref target="wxscreendcstartdrawingontop">StartDrawingOnTop</ref>.

This function destroys the temporary window created to implement on-top drawing (X only).

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxScrollBar">
<description>
<p class="classdesc">
A wxScrollBar is a control that represents a horizontal or
vertical scrollbar. It is distinct from the two scrollbars that some windows
provide automatically, but the two types of scrollbar share the way
events are received.</p>
</description>
<remarks>

A scrollbar has the following main attributes: <i> range</i>, <i> thumb size</i>, <i> page size</i>, and <i> position</i>.

The range is the total number of units associated with the view represented by the scrollbar.
For a table with 15 columns, the range would be 15.

The thumb size is the number of units that are currently visible. For the table example, the window
might be sized so that only 5 columns are currently visible, in which case the application would
set the thumb size to 5. When the thumb size becomes the same as or greater than the range,
the scrollbar will be automatically hidden on most platforms.

The page size is the number of units that the scrollbar should scroll by, when `paging' through
the data. This value is normally the same as the thumb size length, because
it is natural to assume that the visible window size defines a page.

The scrollbar position is the current thumb position.

Most applications will find it convenient to provide a function called <b> AdjustScrollbars</b> which can
be called initially, from an <b> OnSize</b> event handler, and whenever the application data
changes in size. It will adjust the view, object and page size according
to the size of the window and the size of the data.

</remarks>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/scrolbar.h"/></includes>
<windowstyles>
<style name="wxSB_HORIZONTAL">Specifies a horizontal scrollbar.</style><style name="wxSB_VERTICAL">Specifies a vertical scrollbar.</style></windowstyles>
<seealso>

<ref target="scrollingoverview">Scrolling overview</ref>,
<ref target="eventhandlingoverview">Event handling overview</ref>,
<ref target="wxscrolledwindow">wxScrolledWindow</ref>

</seealso>
<members>
<member class="wxScrollBar" name="wxScrollBar"><function type="" name="wxScrollBar"><description>

Default constructor.

</description></function>
<function type="" name="wxScrollBar"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID " name="id">Window identifier. A value of -1 indicates a default value.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Window position. If the position (-1, -1) is specified then a default position is chosen.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Window size. If the default size (-1, -1) is specified then a default size is chosen.</parameter><parameter type="long" name="style" value="wxSB_HORIZONTAL">Window style. See <ref target="wxscrollbar">wxScrollBar</ref>.</parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator">Window validator.</parameter><parameter type="const wxString&amp; " name="name" value="``scrollBar&quot;">Window name.</parameter></parameters><seealso>

<ref target="wxscrollbarcreate">wxScrollBar::Create</ref><ref target="wxvalidator">wxValidator</ref>

</seealso><description></description></function></member>
<member class="wxScrollBar" name="~wxScrollBar"><function type="void" name="~wxScrollBar"><description>

Destructor, destroying the scrollbar.

</description></function></member>
<member class="wxScrollBar" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="wxSB_HORIZONTAL"></parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator"></parameter><parameter type="const wxString&amp; " name="name" value="``scrollBar&quot;"></parameter></parameters><description>

Scrollbar creation function called by the scrollbar constructor.
See <ref target="wxscrollbarconstr">wxScrollBar::wxScrollBar</ref> for details.

</description></function></member>
<member class="wxScrollBar" name="GetRange"><function type="int" name="GetRange" suffix="const"><seealso>

<ref target="wxscrollbarsetscrollbar">wxScrollBar::SetScrollbar</ref>

</seealso><description>

Returns the length of the scrollbar.

</description></function></member>
<member class="wxScrollBar" name="GetPageSize"><function type="int" name="GetPageSize" suffix="const"><seealso>

<ref target="wxscrollbarsetscrollbar">wxScrollBar::SetScrollbar</ref>

</seealso><description>

Returns the page size of the scrollbar. This is the number of scroll units
that will be scrolled when the user pages up or down. Often it is the
same as the thumb size.

</description></function></member>
<member class="wxScrollBar" name="GetThumbPosition"><function type="int" name="GetThumbPosition" suffix="const"><seealso>

<ref target="wxscrollbarsetthumbposition">wxScrollBar::SetThumbPosition</ref>

</seealso><description>

Returns the current position of the scrollbar thumb.

</description></function></member>
<member class="wxScrollBar" name="GetThumbLength"><function type="int" name="GetThumbLength" suffix="const"><seealso>

<ref target="wxscrollbarsetscrollbar">wxScrollBar::SetScrollbar</ref>

\begin{comment}
</seealso><description>

Returns the thumb or `view' size.

</description></function></member>
<member class="wxScrollBar" name="SetObjectLength"><function type="void" name="SetObjectLength"><parameters><parameter type="int" name=" objectLength"></parameter></parameters><seealso>

<ref target="wxscrollbargetobjectlength">wxScrollBar::GetObjectLength</ref>

</seealso><remarks>

Example: you are implementing scrollbars on a text window, where text lines have a maximum width
of 100 characters. Your text window has a current width of 60 characters. So the view length is 60,
and the object length is 100. The scrollbar will then enable you to scroll to see the other 40 characters.

You will need to call <b> SetViewLength</b> and <b> SetObjectLength</b> whenever there
is a change in the size of the window (the view size) or the size of the
contents (the object length).

</remarks><description>

Sets the object length for the scrollbar. This is the total object size (virtual size). You must
call <ref target="wxscrollbarsetviewlength">SetViewLength</ref> <i> before</i> calling SetObjectLength.





</description></function></member>
<member class="wxScrollBar" name="SetPageSize"><function type="void" name="SetPageSize"><parameters><parameter type="int" name=" pageSize"></parameter></parameters><seealso>

<ref target="wxscrollbargetpagesize">wxScrollBar::GetPageSize</ref>
\end{comment}

</seealso><remarks>

At present, this needs to be called <i> before</i> other set functions.

</remarks><description>

Sets the page size for the scrollbar. This is the number of scroll units which are scrolled when the
user pages down (clicks on the scrollbar outside the thumbtrack area).





</description></function></member>
<member class="wxScrollBar" name="SetThumbPosition"><function type="void" name="SetThumbPosition"><parameters><parameter type="int" name=" viewStart"></parameter></parameters><seealso>

<ref target="wxscrollbargetthumbposition">wxScrollBar::GetThumbPosition</ref>

</seealso><description>

Sets the position of the scrollbar.





</description></function></member>
<member class="wxScrollBar" name="SetScrollbar"><function type="virtual void" name="SetScrollbar"><parameters><parameter type="int " name="position">The position of the scrollbar in scroll units.</parameter><parameter type="int " name="thumbSize">The size of the thumb, or visible portion of the scrollbar, in scroll units.</parameter><parameter type="int " name="range">The maximum position of the scrollbar.</parameter><parameter type="int " name="pageSize">The size of the page size in scroll units. This is the number of units
the scrollbar will scroll when it is paged up or down. Often it is the same as
the thumb size.</parameter><parameter type="const bool " name="refresh" value="true">true to redraw the scrollbar, false otherwise.</parameter></parameters><seealso>

<ref target="scrollingoverview">Scrolling overview</ref>,
<ref target="wxwindowsetscrollbar">wxWindow::SetScrollbar</ref><ref target="wxscrolledwindow">wxScrolledWindow</ref>

\begin{comment}
</seealso><description></description></function></member>
<member class="wxScrollBar" name="SetViewLength"><function type="void" name="SetViewLength"><parameters><parameter type="int" name=" viewLength"></parameter></parameters><seealso>

<ref target="wxscrollbargetviewlength">wxScrollBar::GetViewLength</ref>
\end{comment}

</seealso><description>

Sets the view length for the scrollbar.





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxScrollEvent">
<description>
<p class="classdesc">
A scroll event holds information about events sent from stand-alone
<ref target="wxscrollbar">scrollbars</ref> and <ref target="wxslider">sliders</ref>. Note that
starting from wxWindows 2.1, scrolled windows send the 
<ref target="wxscrollwinevent">wxScrollWinEvent</ref> which does not derive from
wxCommandEvent, but from wxEvent directly - don't confuse these two kinds of
events and use the event table macros mentioned below only for the
scrollbar-like controls.</p>
</description>
<remarks>

Note that unless specifying a scroll control identifier, you will need to test for scrollbar
orientation with <ref target="wxscrolleventgetorientation">wxScrollEvent::GetOrientation</ref>, since
horizontal and vertical scroll events are processed using the same event handler.

</remarks>
<parents>
<classref name="wxCommandEvent"/>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h" comment="\input scrolevt.inc"/></includes>
<seealso>

<ref target="wxscrollbar">wxScrollBar</ref><ref target="wxslider">wxSlider</ref><ref target="wxspinbutton">wxSpinButton</ref><br/>
<ref target="wxscrollwinevent">wxScrollWinEvent</ref><ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxScrollEvent" name="wxScrollEvent"><function type="" name="wxScrollEvent"><parameters><parameter type="WXTYPE " name="commandType" value="0"></parameter><parameter type="int " name="id" value="0"></parameter><parameter type="int" name="pos" value="0"></parameter><parameter type="int" name="orientation" value="0"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxScrollEvent" name="GetOrientation"><function type="int" name="GetOrientation" suffix="const"><description>

Returns wxHORIZONTAL or wxVERTICAL, depending on the orientation of the scrollbar.

</description></function></member>
<member class="wxScrollEvent" name="GetPosition"><function type="int" name="GetPosition" suffix="const"><description>

Returns the position of the scrollbar.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxScrollWinEvent">
<description>
<p class="classdesc">
A scroll event holds information about events sent from scrolling windows.</p>
</description>
<parents>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_SCROLLWIN(func)">Process all scroll events.</event><event name="EVT_SCROLLWIN_TOP(func)">Process wxEVT_SCROLLWIN_TOP scroll-to-top events.</event><event name="EVT_SCROLLWIN_BOTTOM(func)">Process wxEVT_SCROLLWIN_TOP scroll-to-bottom events.</event><event name="EVT_SCROLLWIN_LINEUP(func)">Process wxEVT_SCROLLWIN_LINEUP line up events.</event><event name="EVT_SCROLLWIN_LINEDOWN(func)">Process wxEVT_SCROLLWIN_LINEDOWN line down events.</event><event name="EVT_SCROLLWIN_PAGEUP(func)">Process wxEVT_SCROLLWIN_PAGEUP page up events.</event><event name="EVT_SCROLLWIN_PAGEDOWN(func)">Process wxEVT_SCROLLWIN_PAGEDOWN page down events.</event><event name="EVT_SCROLLWIN_THUMBTRACK(func)">Process wxEVT_SCROLLWIN_THUMBTRACK thumbtrack events (frequent events
sent as the user drags the thumbtrack).</event><event name="EVT_SCROLLWIN_THUMBRELEASE(func)">Process wxEVT_SCROLLWIN_THUMBRELEASE thumb release events.</event></events>
<seealso>

<ref target="wxscrollevent">wxScrollEvent</ref><ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxScrollWinEvent" name="wxScrollWinEvent"><function type="" name="wxScrollWinEvent"><parameters><parameter type="WXTYPE " name="commandType" value="0"></parameter><parameter type="int " name="id" value="0"></parameter><parameter type="int" name="pos" value="0"></parameter><parameter type="int" name="orientation" value="0"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxScrollWinEvent" name="GetOrientation"><function type="int" name="GetOrientation" suffix="const"><description>

Returns wxHORIZONTAL or wxVERTICAL, depending on the orientation of the scrollbar.

</description></function></member>
<member class="wxScrollWinEvent" name="GetPosition"><function type="int" name="GetPosition" suffix="const"><description>

Returns the position of the scrollbar for the thumb track and release events.
Note that this field can't be used for the other events, you need to query
the window itself for the current position in that case.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxScrolledWindow">
<description>
<p class="classdesc">
The wxScrolledWindow class manages scrolling for its client area, transforming
the coordinates according to the scrollbar positions, and setting the
scroll positions, thumb sizes and ranges according to the area in view.</p><p class="classdesc">Starting from version 2.4 of wxWindows, there are several ways to use a
wxScrolledWindow. In particular, there are now three ways to set the
size of the scrolling area:</p><p class="classdesc">One way is to set the scrollbars directly using a call to
<ref target="wxscrolledwindowsetscrollbars">wxScrolledWindow::SetScrollbars</ref>.
This is the way it used to be in any previous version of wxWindows
and it will be kept for backwards compatibility.</p><p class="classdesc">An additional method of manual control, which requires a little less
computation of your own, is to set the total size of the scrolling area by
calling either <ref target="wxwindowsetvirtualsize">wxWindow::SetVirtualSize</ref>,
or <ref target="wxwindowfitinside">wxWindow::FitInside</ref>, and setting the
scrolling increments for it by calling 
<ref target="wxscrolledwindowsetscrollrate">wxScrolledWindow::SetScrollRate</ref>.
Scrolling in some orientation is enabled by setting a non zero increment
for it.</p><p class="classdesc">The most automatic and newest way is to simply let sizers determine the
scrolling area. This is now the default when you set an interior sizer
into a wxScrolledWindow with <ref target="wxwindowsetsizer">wxWindow::SetSizer</ref>.
The scrolling area will be set to the size requested by the sizer and
the scrollbars will be assigned for each orientation according to the need
for them and the scrolling increment set by 
<ref target="wxscrolledwindowsetscrollrate">wxScrolledWindow::SetScrollRate</ref>.
As above, scrolling is only enabled in orientations with a non-zero
increment.  You can influence the minimum size of the scrolled area
controlled by a sizer by calling
<ref target="wxwindowsetvirtualsizehints">wxWindow::SetVirtualSizeHints</ref>.
(calling <ref target="wxscrolledwindowsetscrollbars">wxScrolledWindow::SetScrollbars</ref>
 has analogous effects in wxWindows 2.4 -- in later versions it may not continue
 to override the sizer)</p><p class="classdesc">Note:  if Maximum size hints are still supported by SetVirtualSizeHints, use
them at your own dire risk.  They may or may not have been removed for 2.4,
but it really only makes sense to set minimum size hints here.  We should
probably replace SetVirtualSizeHints with SetMinVirtualSize or similar
and remove it entirely in future.</p><p class="classdesc">As with all windows, an application can draw onto a wxScrolledWindow using
a <ref target="dcoverview">device context</ref>.</p><p class="classdesc">You have the option of handling the OnPaint handler
or overriding the <ref target="wxscrolledwindowondraw">OnDraw</ref> function, which is passed
a pre-scrolled device context (prepared by <ref target="wxscrolledwindowpreparedc">PrepareDC</ref>).</p><p class="classdesc">If you don't wish to calculate your own scrolling, you must call PrepareDC when not drawing from
within OnDraw, to set the device origin for the device context according to the current
scroll position.</p><p class="classdesc">A wxScrolledWindow will normally scroll itself and therefore its child windows as well. It
might however be desired to scroll a different window than itself: e.g. when designing a
spreadsheet, you will normally only have to scroll the (usually white) cell area, whereas the
(usually grey) label area will scroll very differently. For this special purpose, you can
call <ref target="wxscrolledwindowsettargetwindow">SetTargetWindow</ref> which means that pressing
the scrollbars will scroll a different window.</p><p class="classdesc">Note that the underlying system knows nothing about scrolling coordinates, so that all system
functions (mouse events, expose events, refresh calls etc) as well as the position of subwindows
are relative to the &quot;physical&quot; origin of the scrolled window. If the user insert a child window at
position (10,10) and scrolls the window down 100 pixels (moving the child window out of the visible
area), the child window will report a position of (10,-90).</p>
</description>
<remarks>

Use wxScrolledWindow for applications where the user scrolls by a fixed amount, and
where a `page' can be interpreted to be the current visible portion of the window. For
more sophisticated applications, use the wxScrolledWindow implementation as a guide
to build your own scroll behaviour.

</remarks>
<parents>
<classref name="wxPanel"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/scrolwin.h"/></includes>
<windowstyles>
<style name="wxRETAINED">Uses a backing pixmap to speed refreshes. Motif only.</style></windowstyles>
<seealso>

<ref target="wxscrollbar">wxScrollBar</ref><ref target="wxclientdc">wxClientDC</ref>,<br/>
<ref target="wxpaintdc">wxPaintDC</ref><ref target="wxvscrolledwindow">wxVScrolledWindow</ref>

</seealso>
<members>
<member class="wxScrolledWindow" name="wxScrolledWindow"><function type="" name="wxScrolledWindow"><description>

Default constructor.

</description></function>
<function type="" name="wxScrolledWindow"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID " name="id" value="-1">Window identifier. A value of -1 indicates a default value.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Window position. If a position of (-1, -1) is specified then a default position
is chosen.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Window size. If a size of (-1, -1) is specified then the window is sized
appropriately.</parameter><parameter type="long" name="style" value="wxHSCROLL">Window style. See <ref target="wxscrolledwindow">wxScrolledWindow</ref>.</parameter><parameter type="const wxString&amp; " name="name" value="``scrolledWindow&quot;">Window name.</parameter></parameters><remarks>

The window is initially created without visible scrollbars.
Call <ref target="wxscrolledwindowsetscrollbars">wxScrolledWindow::SetScrollbars</ref> to
specify how big the virtual window size should be.

</remarks><description>

Constructor.















</description></function></member>
<member class="wxScrolledWindow" name="~wxScrolledWindow"><function type="" name="~wxScrolledWindow"><description>

Destructor.

</description></function></member>
<member class="wxScrolledWindow" name="CalcScrolledPosition"><function type="void" name="CalcScrolledPosition" suffix="const"><parameters><parameter type="int " name="x"></parameter><parameter type="int " name="y"></parameter><parameter type="int &#42;" name="xx"></parameter><parameter type="int &#42;" name="yy"></parameter></parameters><seealso>

<ref target="wxscrolledwindowcalcunscrolledposition">CalcUnscrolledPosition</ref>

\pythonnote{The wxPython version of this methods accepts only two
parameters and returns xx and yy as a tuple of values.}

\perlnote{In wxPerl this method takes two parameters and returns a
2-element list <tt> ( xxyy )</tt>.}

</seealso><description></description></function></member>
<member class="wxScrolledWindow" name="CalcUnscrolledPosition"><function type="void" name="CalcUnscrolledPosition" suffix="const"><parameters><parameter type="int " name="x"></parameter><parameter type="int " name="y"></parameter><parameter type="int &#42;" name="xx"></parameter><parameter type="int &#42;" name="yy"></parameter></parameters><seealso>

<ref target="wxscrolledwindowcalcscrolledposition">CalcScrolledPosition</ref>

\pythonnote{The wxPython version of this methods accepts only two
parameters and returns xx and yy as a tuple of values.}

\perlnote{In wxPerl this method takes two parameters and returns a
2-element list <tt> ( xxyy )</tt>.}

</seealso><description></description></function></member>
<member class="wxScrolledWindow" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID " name="id" value="-1"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="wxHSCROLL"></parameter><parameter type="const wxString&amp; " name="name" value="``scrolledWindow&quot;"></parameter></parameters><description>

Creates the window for two-step construction. Derived classes
should call or replace this function. See <ref target="wxscrolledwindowconstr">wxScrolledWindow::wxScrolledWindow</ref>
for details.

</description></function></member>
<member class="wxScrolledWindow" name="EnableScrolling"><function type="void" name="EnableScrolling"><parameters><parameter type="const bool" name=" xScrolling"></parameter><parameter type="const bool" name=" yScrolling"></parameter></parameters><remarks>

Physical scrolling may not be available on all platforms. Where it is available, it is enabled
by default.

</remarks><description>

Enable or disable physical scrolling in the given direction. Physical
scrolling is the physical transfer of bits up or down the
screen when a scroll event occurs. If the application scrolls by a
variable amount (e.g. if there are different font sizes) then physical
scrolling will not work, and you should switch it off. Note that you
will have to reposition child windows yourself, if physical scrolling
is disabled.







</description></function></member>
<member class="wxScrolledWindow" name="GetScrollPixelsPerUnit"><function type="void" name="GetScrollPixelsPerUnit" suffix="const"><parameters><parameter type="int&#42; " name="xUnit">Receives the number of pixels per horizontal unit.</parameter><parameter type="int&#42; " name="yUnit">Receives the number of pixels per vertical unit.</parameter></parameters><seealso>

<ref target="wxscrolledwindowsetscrollbars">wxScrolledWindow::SetScrollbars</ref>,
<ref target="wxscrolledwindowgetvirtualsize">wxScrolledWindow::GetVirtualSize</ref>

\pythonnote{The wxPython version of this methods accepts no
parameters and returns a tuple of values for xUnit and yUnit.}

\perlnote{In wxPerl this method takes no parameters and returns a
2-element list <tt> ( xUnityUnit )</tt>.}

</seealso><description></description></function></member>
<member class="wxScrolledWindow" name="GetViewStart"><function type="void" name="GetViewStart" suffix="const"><parameters><parameter type="int&#42; " name="x">Receives the first visible x position in scroll units.</parameter><parameter type="int&#42; " name=" y"></parameter></parameters><seealso>

<ref target="wxscrolledwindowsetscrollbars">wxScrolledWindow::SetScrollbars</ref>

\pythonnote{The wxPython version of this methods accepts no
parameters and returns a tuple of values for x and y.}

\perlnote{In wxPerl this method takes no parameters and returns a
2-element list <tt> ( xy )</tt>.}

</seealso><description></description></function></member>
<member class="wxScrolledWindow" name="GetVirtualSize"><function type="void" name="GetVirtualSize" suffix="const"><parameters><parameter type="int&#42; " name="x">Receives the length of the scrollable window, in pixels.</parameter><parameter type="int&#42; " name="y">Receives the height of the scrollable window, in pixels.</parameter></parameters><seealso>

<ref target="wxscrolledwindowsetscrollbars">wxScrolledWindow::SetScrollbars</ref>,
<ref target="wxscrolledwindowgetscrollpixelsperunit">wxScrolledWindow::GetScrollPixelsPerUnit</ref>

\pythonnote{The wxPython version of this methods accepts no
parameters and returns a tuple of values for x and y.}

\perlnote{In wxPerl this method takes no parameters and returns a
2-element list <tt> ( xy )</tt>.}

</seealso><description></description></function></member>
<member class="wxScrolledWindow" name="IsRetained"><function type="bool" name="IsRetained" suffix="const"><description>

Motif only: true if the window has a backing bitmap.

</description></function></member>
<member class="wxScrolledWindow" name="PrepareDC"><function type="void" name="PrepareDC"><parameters><parameter type="wxDC&amp; " name="dc"></parameter></parameters><description>

Call this function to prepare the device context for drawing a scrolled image. It
sets the device origin according to the current scroll position.

PrepareDC is called automatically within the default wxScrolledWindow::OnPaint event
handler, so your <ref target="wxscrolledwindowondraw">wxScrolledWindow::OnDraw</ref> override
will be passed a 'pre-scrolled' device context. However, if you wish to draw from
outside of OnDraw (via OnPaint), or you wish to implement OnPaint yourself, you must
call this function yourself. For example:

<pre>
void MyWindow::OnEvent(wxMouseEvent&amp; event)
{
  wxClientDC dc(this);
  PrepareDC(dc);

  dc.SetPen(&#42;wxBLACK_PEN);
  float x, y;
  event.Position(&amp;x, &amp;y);
  if (xpos &gt; -1 &amp;&amp; ypos &gt; -1 &amp;&amp; event.Dragging())
  {
    dc.DrawLine(xpos, ypos, x, y);
  }
  xpos = x;
  ypos = y;
}
</pre>

</description></function></member>
<member class="wxScrolledWindow" name="OnDraw"><function type="virtual void" name="OnDraw"><parameters><parameter type="wxDC&amp; " name="dc"></parameter></parameters><description>

Called by the default paint event handler to allow the application to define
painting behaviour without having to worry about calling
<ref target="wxscrolledwindowpreparedc">wxScrolledWindow::PrepareDC</ref>.

Instead of overriding this function you may also just process the paint event
in the derived class as usual, but then you will have to call PrepareDC()
yourself.

</description></function></member>
<member class="wxScrolledWindow" name="Scroll"><function type="void" name="Scroll"><parameters><parameter type="int" name=" x"></parameter><parameter type="int" name=" y"></parameter></parameters><seealso>

<ref target="wxscrolledwindowsetscrollbars">wxScrolledWindow::SetScrollbars</ref>,
<ref target="wxscrolledwindowgetscrollpixelsperunit">wxScrolledWindow::GetScrollPixelsPerUnit</ref>

</seealso><remarks>

The positions are in scroll units, not pixels, so to convert to pixels you
will have to multiply by the number of pixels per scroll increment.
If either parameter is -1, that position will be ignored (no change in
that direction).

</remarks><description>

Scrolls a window so the view start is at the given point.







</description></function></member>
<member class="wxScrolledWindow" name="SetScrollbars"><function type="void" name="SetScrollbars"><parameters><parameter type="int" name=" pixelsPerUnitX"></parameter><parameter type="int" name=" pixelsPerUnitY"></parameter><parameter type="int" name=" noUnitsX"></parameter><parameter type="int" name=" noUnitsY"></parameter><parameter type="int " name="xPos" value="0">Position to initialize the scrollbars in the horizontal direction, in scroll units.</parameter><parameter type="int" name="yPos" value="0">Position to initialize the scrollbars in the vertical direction, in scroll units.</parameter><parameter type="bool " name="noRefresh" value="false">Will not refresh window if true.</parameter></parameters><seealso>

<ref target="wxwindowsetvirtualsize">wxWindow::SetVirtualSize</ref>

</seealso><remarks>

The first pair of parameters give the number of pixels per `scroll step', i.e. amount
moved when the up or down scroll arrows are pressed.
The second pair gives the length of scrollbar in scroll steps, which sets the size of the virtual
window.

<i> xPos</i> and <i> yPos</i> optionally specify a position to scroll to immediately.

For example, the following gives a window horizontal and vertical
scrollbars with 20 pixels per scroll step, and a size of 50 steps (1000
pixels) in each direction.

<pre>
  window-&gt;SetScrollbars(20, 20, 50, 50);
</pre>

wxScrolledWindow manages the page size itself,
using the current client window size as the page size.

Note that for more sophisticated scrolling applications, for example where
scroll steps may be variable according to the position in the document, it will be
necessary to derive a new class from wxWindow, overriding <b> OnSize</b> and
adjusting the scrollbars appropriately.

</remarks><description>

Sets up vertical and/or horizontal scrollbars.

















</description></function></member>
<member class="wxScrolledWindow" name="SetScrollRate"><function type="void" name="SetScrollRate"><parameters><parameter type="int" name=" xstep"></parameter><parameter type="int" name=" ystep"></parameter></parameters><description>

Set the horizontal and vertical scrolling increment only. See the pixelsPerUnit
parameter in SetScrollbars.

</description></function></member>
<member class="wxScrolledWindow" name="SetTargetWindow"><function type="void" name="SetTargetWindow"><parameters><parameter type="wxWindow&#42; " name="window"></parameter></parameters><description>

Call this function to tell wxScrolledWindow to perform the actual scrolling on
a different window (and not on itself).

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSemaphore">
<description>
<p class="classdesc">
wxSemaphore is a counter limiting the number of threads concurrently accessing
a shared resource. This counter is always between 0 and the maximum value
specified during the semaphore creation. When the counter is strictly greater
than 0, a call to <ref target="wxsemaphorewait">Wait</ref> returns immediately and
decrements the counter. As soon as it reaches 0, any subsequent calls to
<ref target="wxsemaphorewait">Wait</ref> block and only return when the semaphore
counter becomes strictly positive again as the result of calling 
<ref target="wxsemaphorepost">Post</ref> which increments the counter.</p><p class="classdesc">In general, the semaphores are useful to restrict access to a shared resource
which can only be accessed by some fixed number of clients at once. For
example, when modeling a hotel reservation system a semaphore with the counter
equal to the total number of available rooms could be created. Each time a room
is reserved, the semaphore should be acquired by calling 
<ref target="wxsemaphorewait">Wait</ref> and each time a room is freed it should be
released by calling <ref target="wxsemaphorepost">Post</ref>.</p>
</description>
<parents></parents>
<includes>
<header name="wx/thread.h"/></includes>
<members>
<member class="wxSemaphore" name="wxSemaphore"><function type="" name="wxSemaphore"><parameters><parameter type="int " name="initialcount" value="0"></parameter><parameter type="int " name="maxcount" value="0"></parameter></parameters><description>

Specifying a <i> maxcount</i> of 0 actually makes wxSemaphore behave as if
there is no upper limit. If maxcount is 1 the semaphore behaves exactly as a
mutex.

<i> initialcount</i> is the initial value of the semaphore which must be between
0 and <i> maxcount</i> (if it is not set to 0).

</description></function></member>
<member class="wxSemaphore" name="~wxSemaphore"><function type="" name="~wxSemaphore"><description>

Destructor is not virtual, don't use this class polymorphically.

</description></function></member>
<member class="wxSemaphore" name="Post"><function type="wxSemaError " name="Post"><returnvalue>

One of:

\twocolwidtha{7cm}
<table>
<tr><td><b> wxSEMA_NO_ERROR</b></td><td>There was no error.</td></tr>
<tr><td><b> wxSEMA_INVALID</b></td><td>Semaphore hasn't been initialized successfully.</td></tr>
<tr><td><b> wxSEMA_OVERFLOW</b></td><td>Post() would increase counter past the max.</td></tr>
<tr><td><b> wxSEMA_MISC_ERROR</b></td><td>Miscellaneous error.</td></tr>
</table>


</returnvalue><description>

Increments the semaphore count and signals one of the waiting
threads in an atomic way. Returns wxSEMA_OVERFLOW if the count
would increase the counter past the maximum.

</description></function></member>
<member class="wxSemaphore" name="TryWait"><function type="wxSemaError " name="TryWait"><returnvalue>

One of:

\twocolwidtha{7cm}
<table>
<tr><td><b> wxSEMA_NO_ERROR</b></td><td>There was no error.</td></tr>
<tr><td><b> wxSEMA_INVALID</b></td><td>Semaphore hasn't been initialized successfully.</td></tr>
<tr><td><b> wxSEMA_BUSY</b></td><td>Returned by TryWait() if Wait() would block, i.e. the count is zero.</td></tr>
<tr><td><b> wxSEMA_MISC_ERROR</b></td><td>Miscellaneous error.</td></tr>
</table>


</returnvalue><description>

Same as <ref target="wxsemaphorewait">Wait()</ref>, but returns immediately.

</description></function></member>
<member class="wxSemaphore" name="Wait"><function type="wxSemaError " name="Wait"><returnvalue>

One of:

\twocolwidtha{7cm}
<table>
<tr><td><b> wxSEMA_NO_ERROR</b></td><td>There was no error.</td></tr>
<tr><td><b> wxSEMA_INVALID</b></td><td>Semaphore hasn't been initialized successfully.</td></tr>
<tr><td><b> wxSEMA_MISC_ERROR</b></td><td>Miscellaneous error.</td></tr>
</table>

</returnvalue><description>

Wait indefinitely until the semaphore count becomes strictly positive
and then decrement it and return.

</description></function></member>
<member class="wxSemaphore" name="WaitTimeout"><function type="wxSemaError " name="WaitTimeout"><parameters><parameter type="unsigned
long" name="timeout_millis"></parameter></parameters><returnvalue>

One of:

\twocolwidtha{7cm}
<table>
<tr><td><b> wxSEMA_NO_ERROR</b></td><td>There was no error.</td></tr>
<tr><td><b> wxSEMA_INVALID</b></td><td>Semaphore hasn't been initialized successfully.</td></tr>
<tr><td><b> wxSEMA_TIMEOUT</b></td><td>Timeout occurred without receiving semaphore.</td></tr>
<tr><td><b> wxSEMA_MISC_ERROR</b></td><td>Miscellaneous error.</td></tr>
</table>
</returnvalue><description>

Same as <ref target="wxsemaphorewait">Wait()</ref>, but with a timeout
limit.

</description></function></member></members>
<supported>
</supported>
</class><class name="wxServer">
<description>
<p class="classdesc">
A wxServer object represents the server part of a client-server
DDE-like (Dynamic Data Exchange) conversation. The actual
DDE-based implementation using wxDDEServer is available on Windows
only, but a platform-independent, socket-based version of this
API is available using wxTCPServer, which has the same API.</p><p class="classdesc">To create a server which can communicate with a suitable client,
you need to derive a class from wxConnection and another from
wxServer. The custom wxConnection class will intercept
communications in a `conversation' with a client, and the custom
wxServer is required so that a user-overridden <ref target="wxddeserveronacceptconnection">wxServer::OnAcceptConnection</ref> 
member can return a wxConnection of the required class, when a
connection is made. Look at the IPC sample and the <ref target="ipcoverview">Interprocess communications overview</ref> for
an example of how to do this.</p>
</description>
<parents>

</parents>
<includes>
<header name="wx/ipc.h"/></includes>
<seealso>

<ref target="wxddeclient">wxClient</ref>,
<ref target="wxddeconnection">wxConnection</ref><ref target="ipcoverview">IPC
overview</ref>

</seealso>
<members>
<member class="wxServer" name="wxServer"><function type="" name="wxServer"><description>

Constructs a server object.

</description></function></member>
<member class="wxServer" name="Create"><function type="bool" name="Create"><parameters><parameter type="const wxString&amp; " name="service"></parameter></parameters><description>

Registers the server using the given service name. Under Unix,
the service name may be either an integer port identifier in
which case an Internet domain socket will be used for the
communications, or a valid file name (which shouldn't exist and
will be deleted afterwards) in which case a Unix domain socket is
created. false is returned if the call failed (for example, the
port number is already in use).

</description></function></member>
<member class="wxServer" name="OnAcceptConnection"><function type="virtual wxConnectionBase &#42;" name="OnAcceptConnection"><parameters><parameter type="const wxString&amp; " name="topic"></parameter></parameters><description>

When a client calls <b> MakeConnection</b>, the server receives the
message and this member is called. The application should derive a
member to intercept this message and return a connection object of
either the standard wxConnection type, or (more likely) of a
user-derived type.

If the topic is <b> STDIO</b>, the application may wish to refuse the
connection. Under UNIX, when a server is created the
OnAcceptConnection message is always sent for standard input and
output, but in the context of DDE messages it doesn't make a lot
of sense.

</description></function></member></members>
<supported>
</supported>
</class>
<class name="wxSimpleHelpProvider">
<description>
<p class="classdesc">
wxSimpleHelpProvider is an implementation of <ref target="wxhelpprovider">wxHelpProvider</ref> which supports
only plain text help strings, and shows the string associated with the
control (if any) in a tooltip.</p>
</description>
<parents>
<classref name="wxHelpProvider"/>

</parents>
<includes>
<header name="wx/cshelp.h"/></includes>
<members>
</members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSingleChoiceDialog">
<description>
<p class="classdesc">
This class represents a dialog that shows a list of strings, and allows
the user to select one. Double-clicking on a list item is equivalent to single-clicking
and then pressing OK.</p>
</description>
<parents>
<classref name="wxDialog"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/choicdlg.h"/></includes>
<seealso>

<ref target="wxsinglechoicedialogoverview">wxSingleChoiceDialog overview</ref>

</seealso>
<members>
<member class="wxSingleChoiceDialog" name="wxSingleChoiceDialog"><function type="" name="wxSingleChoiceDialog"><parameters><parameter type="wxWindow&#42; " name="parent">Parent window.</parameter><parameter type="const wxString&amp; " name="message">Message to show on the dialog.</parameter><parameter type="const wxString&amp; " name="caption">The dialog caption.</parameter><parameter type="int " name="n">The number of choices.</parameter><parameter type="const wxString&#42; " name="choices">An array of strings, or a string list, containing the choices.</parameter><parameter type="void&#42;&#42;" name="clientData" value="NULL"></parameter><parameter type="long " name="style" value="wxOK"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Dialog position. Not Windows.</parameter></parameters><remarks>

Use <ref target="wxsinglechoicedialogshowmodal">wxSingleChoiceDialog::ShowModal</ref> to show the dialog.

\pythonnote{For Python the two parameters <tt> n</tt> and <tt> choices</tt> are collapsed
into a single parameter <tt> choices</tt> which is expected to be a Python
list of strings.}

\perlnote{In wxPerl there is just an array reference in place of <tt> n</tt>
and <tt> choices</tt>, and the client data array, if present, must have the
same length as the choices array.}

</remarks><description>

Constructor, taking an array of wxString choices and optional client data.


















</description></function></member>
<member class="wxSingleChoiceDialog" name="~wxSingleChoiceDialog"><function type="" name="~wxSingleChoiceDialog"><description>

Destructor.

</description></function></member>
<member class="wxSingleChoiceDialog" name="GetSelection"><function type="int" name="GetSelection" suffix="const"><description>

Returns the index of selected item.

</description></function></member>
<member class="wxSingleChoiceDialog" name="GetSelectionClientData"><function type="char&#42;" name="GetSelectionClientData" suffix="const"><description>

Returns the client data associated with the selection.

</description></function></member>
<member class="wxSingleChoiceDialog" name="GetStringSelection"><function type="wxString" name="GetStringSelection" suffix="const"><description>

Returns the selected string.

</description></function></member>
<member class="wxSingleChoiceDialog" name="SetSelection"><function type="void" name="SetSelection" suffix="const"><parameters><parameter type="int" name=" selection"></parameter></parameters><description>

Sets the index of the initially selected item.

</description></function></member>
<member class="wxSingleChoiceDialog" name="ShowModal"><function type="int" name="ShowModal"><description>

Shows the dialog, returning either wxID_OK or wxID_CANCEL.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSingleInstanceChecker">
<description>
<p class="classdesc">
wxSingleInstanceChecker class allows to check that only a single instance of a
program is running. To do it, you should create an object of this class. As
long as this object is alive, calls to 
<ref target="wxsingleinstancecheckerisanotherrunning">IsAnotherRunning()</ref> from
other processes will return <tt> true</tt>.</p><p class="classdesc">As the object should have the life span as big as possible, it makes sense to
create it either as a global or in <ref target="wxapponinit">wxApp::OnInit</ref>. For
example:</p><p class="classdesc"><pre>
bool MyApp::OnInit()
{
    const wxString name = wxString::Format(&quot;MyApp-    m_checker = new wxSingleInstanceChecker(name);
    if ( m_checker-&gt;IsAnotherRunning() )
    {
        wxLogError(_(&quot;Another program instance is already running, aborting.&quot;));

        return false;
    }

    ... more initializations ...

    return true;
}

int MyApp::OnExit()
{
    delete m_checker;

    return 0;
}
</pre></p><p class="classdesc">Note using <ref target="wxgetuserid">wxGetUserId()</ref> to construct the name: this
allows different user to run the application concurrently which is usually the
intended goal. If you don't use the user name in the wxSingleInstanceChecker
name, only one user would be able to run the application at a time.</p><p class="classdesc">This class is implemented for Win32 and Unix platforms (supporting <tt> fcntl()</tt>
system call, but almost all of modern Unix systems do) only.</p>
</description>
<parents></parents>
<includes>
<header name="wx/snglinst.h"/></includes>
<members>
<member class="wxSingleInstanceChecker" name="wxSingleInstanceChecker"><function type="" name="wxSingleInstanceChecker"><description>

Default ctor, use <ref target="wxsingleinstancecheckercreate">Create()</ref> after it.

</description></function></member>
<member class="wxSingleInstanceChecker" name="wxSingleInstanceChecker"><function type="" name="wxSingleInstanceChecker"><parameters><parameter type="const wxString&amp; " name="name"></parameter><parameter type="const wxString&amp; " name="path" value="wxEmptyString"></parameter></parameters><description>

Like <ref target="wxsingleinstancecheckercreate">Create()</ref> but without
error checking.

</description></function></member>
<member class="wxSingleInstanceChecker" name="Create"><function type="bool" name="Create"><parameters><parameter type="const wxString&amp; " name="name">must be given and be as unique as possible. It is used as the
mutex name under Win32 and the lock file name under Unix. 
<ref target="wxappgetappname">GetAppName()</ref> and <ref target="wxgetuserid">wxGetUserId()</ref> 
are commonly used to construct this parameter.</parameter><parameter type="const wxString&amp; " name="path" value="wxEmptyString">is optional and is ignored under Win32 and used as the directory to
create the lock file in under Unix (default is 
<ref target="wxgethomedir">wxGetHomeDir()</ref>)</parameter></parameters><returnvalue>

Returns <tt> false</tt> if initialization failed, it doesn't mean that another
instance is running - use 
<ref target="wxsingleinstancecheckerisanotherrunning">IsAnotherRunning()</ref> to check
for it.

</returnvalue><description>

Initialize the object if it had been created using the default constructor.
Note that you can't call Create() more than once, so calling it if the 
<ref target="wxsingleinstancecheckerwxsingleinstancechecker">non default ctor</ref> 
had been used is an error.







</description></function></member>
<member class="wxSingleInstanceChecker" name="IsAnotherRunning"><function type="bool" name="IsAnotherRunning" suffix="const"><description>

Returns <tt> true</tt> if another copy of this program is already running, <tt>
false</tt> otherwise.

</description></function></member>
<member class="wxSingleInstanceChecker" name="~wxSingleInstanceChecker"><function type="" name="~wxSingleInstanceChecker"><description>

Destructor frees the associated resources.

Note that it is not virtual, this class is not meant to be used polymorphically

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSize">
<description>
<p class="classdesc">
A <b> wxSize</b> is a useful data structure for graphics operations.
It simply contains integer <i> width</i> and <i> height</i> members.</p><p class="classdesc">wxSize is used throughout wxWindows as well as wxPoint which, although almost
equivalent to wxSize, has a different meaning: wxPoint represents a position
while wxSize - the size.</p>

</description>
<parents>


</parents>
<includes>
<header name="wx/gdicmn.h"/></includes>
<seealso>

<ref target="wxpoint">wxPoint</ref><ref target="wxrealpoint">wxRealPoint</ref>

</seealso>
<members>
<member class="wxSize" name="wxSize"><function type="" name="wxSize"><description>

</description></function>
<function type="" name="wxSize"><parameters><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter></parameters><description>

Creates a size object.

</description></function></member>
<member class="wxSize" name="GetWidth"><function type="int" name="GetWidth" suffix="const"><description>

Gets the width member.

</description></function></member>
<member class="wxSize" name="GetHeight"><function type="int" name="GetHeight" suffix="const"><description>

Gets the height member.

</description></function></member>
<member class="wxSize" name="Set"><function type="void" name="Set"><parameters><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter></parameters><description>

Sets the width and height members.

</description></function></member>
<member class="wxSize" name="SetHeight"><function type="void" name="SetHeight"><parameters><parameter type="int" name=" height"></parameter></parameters><description>

Sets the height.

</description></function></member>
<member class="wxSize" name="SetWidth"><function type="void" name="SetWidth"><parameters><parameter type="int" name=" width"></parameter></parameters><description>

Sets the width.

</description></function></member>
<member class="wxSize" name="operator $=$"><function type="void" name="operator $=$"><parameters><parameter type="const wxSize&amp; " name="sz"></parameter></parameters><description>

Assignment operator.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSizeEvent">
<description>
<p class="classdesc">
A size event holds information about size change events.</p><p class="classdesc">The EVT_SIZE handler function will be called when the window has been resized.</p><p class="classdesc">You may wish to use this for frames to resize their child windows as appropriate.</p><p class="classdesc">Note that the size passed is of
the whole window: call <ref target="wxwindowgetclientsize">wxWindow::GetClientSize</ref> for the area which may be
used by the application.</p><p class="classdesc">When a window is resized, usually only a small part of the window is damaged and you
may only need to repaint that area. However, if your drawing depends on the size of the window,
you may need to clear the DC explicitly and repaint the whole window. In which case, you
may need to call <ref target="wxwindowrefresh">wxWindow::Refresh</ref> to invalidate the entire window.</p>
</description>
<parents>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_SIZE(func)">Process a wxEVT_SIZE event.</event></events>
<seealso>

<ref target="wxsize">wxSize</ref>,
<ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxSizeEvent" name="wxSizeEvent"><function type="" name="wxSizeEvent"><parameters><parameter type="const wxSize&amp; " name="sz"></parameter><parameter type="int " name="id" value="0"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxSizeEvent" name="GetSize"><function type="wxSize" name="GetSize" suffix="const"><description>

Returns the entire size of the window generating the size change event.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSizer">
<description>
<p class="classdesc">
wxSizer is the abstract base class used for laying out subwindows in a window. You
cannot use wxSizer directly; instead, you will have to use one of the sizer
classes derived from it. Currently there are <ref target="wxboxsizer">wxBoxSizer</ref>, 
<ref target="wxstaticboxsizer">wxStaticBoxSizer</ref>,
<ref target="wxnotebooksizer">wxNotebookSizer</ref>, <ref target="wxgridsizer">wxGridSizer</ref> 
and <ref target="wxflexgridsizer">wxFlexGridSizer</ref>.</p><p class="classdesc">The layout algorithm used by sizers in wxWindows is closely related to layout
in other GUI toolkits, such as Java's AWT, the GTK toolkit or the Qt toolkit. It is
based upon the idea of the individual subwindows reporting their minimal required
size and their ability to get stretched if the size of the parent window has changed.
This will most often mean, that the programmer does not set the original size of
a dialog in the beginning, rather the dialog will assigned a sizer and this sizer
will be queried about the recommended size. The sizer in turn will query its
children, which can be normal windows, empty space or other sizers, so that
a hierarchy of sizers can be constructed. Note that wxSizer does not derive from wxWindow
and thus do not interfere with tab ordering and requires very little resources compared
to a real window on screen.</p><p class="classdesc">What makes sizers so well fitted for use in wxWindows is the fact that every control
reports its own minimal size and the algorithm can handle differences in font sizes
or different window (dialog item) sizes on different platforms without problems. If e.g.
the standard font as well as the overall design of Motif widgets requires more space than
on Windows, the initial dialog size will automatically be bigger on Motif than on Windows.</p>

</description>
<parents>
<classref name="wxObject"/>

</parents>
<seealso>

<ref target="sizeroverview">Sizer overview</ref>

</seealso>
<members>
<member class="wxSizer" name="wxSizer"><function type="" name="wxSizer"><description>

The constructor. Note that wxSizer is an abstract base class and may not
be instantiated.

</description></function></member>
<member class="wxSizer" name="~wxSizer"><function type="" name="~wxSizer"><description>

The destructor.

</description></function></member>
<member class="wxSizer" name="Add"><function type="void" name="Add"><parameters><parameter type="wxWindow&#42; " name="window">The window to be added to the sizer. Its initial size (either set explicitly by the
user or calculated internally when using wxDefaultSize) is interpreted as the minimal and in many
cases also the initial size. This is particularly useful in connection with <ref target="wxsizersetsizehints">SetSizeHints</ref>.</parameter><parameter type="int " name="proportion" value="0">Although the meaning of this parameter is undefined in wxSizer, it is used in wxBoxSizer
to indicate if a child of a sizer can change its size in the main orientation of the wxBoxSizer - where
0 stands for not changeable and a value of more than zero is interpreted relative to the value of other
children of the same wxBoxSizer. For example, you might have a horizontal wxBoxSizer with three children, two
of which are supposed to change their size with the sizer. Then the two stretchable windows would get a
value of 1 each to make them grow and shrink equally with the sizer's horizontal dimension.</parameter><parameter type="int " name="flag" value="0">This parameter can be used to set a number of flags which can
be combined using the binary OR operator |. Two main behaviours are defined
using these flags. One is the border around a window: the <i> border</i>
parameter determines the border width whereas the flags given here determine
where the border may be (wxTOP, wxBOTTOM, wxLEFT, wxRIGHT or wxALL). The other
flags determine the child window's behaviour if the size of the sizer changes.
However this is not - in contrast to the <i> proportion</i> flag - in the main
orientation, but in the respectively other orientation. So if you created a
wxBoxSizer with the wxVERTICAL option, these flags will be relevant if the
sizer changes its horizontal size. A child may get resized to completely fill
out the new size (using either wxGROW or wxEXPAND), it may get proportionally
resized (wxSHAPED), it may get centered (wxALIGN_CENTER or wxALIGN_CENTRE)
or it may get aligned to either side (wxALIGN_LEFT and wxALIGN_TOP are set
to 0 and thus represent the default, wxALIGN_RIGHT and wxALIGN_BOTTOM have
their obvious meaning). With proportional resize, a child may also be centered
in the main orientation using wxALIGN_CENTER_VERTICAL (same as
wxALIGN_CENTRE_VERTICAL) and wxALIGN_CENTER_HORIZONTAL (same as
wxALIGN_CENTRE_HORIZONTAL) flags. Finally, you can also specify
wxADJUST_MINSIZE flag to make the minimal size of the control dynamically adjust
to the value returned by its <ref target="wxwindowgetadjustedbestsize">GetAdjustedBestSize()</ref>
method - this allows, for example, for correct relayouting of a static text
control even if its text is changed during run-time.</parameter><parameter type="int " name="border" value="0">Determines the border width, if the <i> flag</i> parameter is set to any border.</parameter><parameter type="wxObject&#42; " name="userData" value="NULL">Allows an extra object to be attached to the sizer
item, for use in derived classes when sizing information is more
complex than the <i> proportion</i> and <i> flag</i> will allow for.</parameter></parameters><description>

</description></function>
<function type="void" name="Add"><parameters><parameter type="wxSizer&#42; " name="sizer">The (child-)sizer to be added to the sizer. This allows placing a child sizer in a
sizer and thus to create hierarchies of sizers (typically a vertical box as the top sizer and several
horizontal boxes on the level beneath).</parameter><parameter type="int " name="proportion" value="0">Although the meaning of this parameter is undefined in wxSizer, it is used in wxBoxSizer
to indicate if a child of a sizer can change its size in the main orientation of the wxBoxSizer - where
0 stands for not changeable and a value of more than zero is interpreted relative to the value of other
children of the same wxBoxSizer. For example, you might have a horizontal wxBoxSizer with three children, two
of which are supposed to change their size with the sizer. Then the two stretchable windows would get a
value of 1 each to make them grow and shrink equally with the sizer's horizontal dimension.</parameter><parameter type="int " name="flag" value="0">This parameter can be used to set a number of flags which can
be combined using the binary OR operator |. Two main behaviours are defined
using these flags. One is the border around a window: the <i> border</i>
parameter determines the border width whereas the flags given here determine
where the border may be (wxTOP, wxBOTTOM, wxLEFT, wxRIGHT or wxALL). The other
flags determine the child window's behaviour if the size of the sizer changes.
However this is not - in contrast to the <i> proportion</i> flag - in the main
orientation, but in the respectively other orientation. So if you created a
wxBoxSizer with the wxVERTICAL option, these flags will be relevant if the
sizer changes its horizontal size. A child may get resized to completely fill
out the new size (using either wxGROW or wxEXPAND), it may get proportionally
resized (wxSHAPED), it may get centered (wxALIGN_CENTER or wxALIGN_CENTRE)
or it may get aligned to either side (wxALIGN_LEFT and wxALIGN_TOP are set
to 0 and thus represent the default, wxALIGN_RIGHT and wxALIGN_BOTTOM have
their obvious meaning). With proportional resize, a child may also be centered
in the main orientation using wxALIGN_CENTER_VERTICAL (same as
wxALIGN_CENTRE_VERTICAL) and wxALIGN_CENTER_HORIZONTAL (same as
wxALIGN_CENTRE_HORIZONTAL) flags. Finally, you can also specify
wxADJUST_MINSIZE flag to make the minimal size of the control dynamically adjust
to the value returned by its <ref target="wxwindowgetadjustedbestsize">GetAdjustedBestSize()</ref>
method - this allows, for example, for correct relayouting of a static text
control even if its text is changed during run-time.</parameter><parameter type="int " name="border" value="0">Determines the border width, if the <i> flag</i> parameter is set to any border.</parameter><parameter type="wxObject&#42; " name="userData" value="NULL">Allows an extra object to be attached to the sizer
item, for use in derived classes when sizing information is more
complex than the <i> proportion</i> and <i> flag</i> will allow for.</parameter></parameters><description>

</description></function>
<function type="void" name="Add"><parameters><parameter type="int " name="width"></parameter><parameter type="int " name="height"></parameter><parameter type="int " name="proportion" value="0">Although the meaning of this parameter is undefined in wxSizer, it is used in wxBoxSizer
to indicate if a child of a sizer can change its size in the main orientation of the wxBoxSizer - where
0 stands for not changeable and a value of more than zero is interpreted relative to the value of other
children of the same wxBoxSizer. For example, you might have a horizontal wxBoxSizer with three children, two
of which are supposed to change their size with the sizer. Then the two stretchable windows would get a
value of 1 each to make them grow and shrink equally with the sizer's horizontal dimension.</parameter><parameter type="int " name="flag" value="0">This parameter can be used to set a number of flags which can
be combined using the binary OR operator |. Two main behaviours are defined
using these flags. One is the border around a window: the <i> border</i>
parameter determines the border width whereas the flags given here determine
where the border may be (wxTOP, wxBOTTOM, wxLEFT, wxRIGHT or wxALL). The other
flags determine the child window's behaviour if the size of the sizer changes.
However this is not - in contrast to the <i> proportion</i> flag - in the main
orientation, but in the respectively other orientation. So if you created a
wxBoxSizer with the wxVERTICAL option, these flags will be relevant if the
sizer changes its horizontal size. A child may get resized to completely fill
out the new size (using either wxGROW or wxEXPAND), it may get proportionally
resized (wxSHAPED), it may get centered (wxALIGN_CENTER or wxALIGN_CENTRE)
or it may get aligned to either side (wxALIGN_LEFT and wxALIGN_TOP are set
to 0 and thus represent the default, wxALIGN_RIGHT and wxALIGN_BOTTOM have
their obvious meaning). With proportional resize, a child may also be centered
in the main orientation using wxALIGN_CENTER_VERTICAL (same as
wxALIGN_CENTRE_VERTICAL) and wxALIGN_CENTER_HORIZONTAL (same as
wxALIGN_CENTRE_HORIZONTAL) flags. Finally, you can also specify
wxADJUST_MINSIZE flag to make the minimal size of the control dynamically adjust
to the value returned by its <ref target="wxwindowgetadjustedbestsize">GetAdjustedBestSize()</ref>
method - this allows, for example, for correct relayouting of a static text
control even if its text is changed during run-time.</parameter><parameter type="int " name="border" value="0">Determines the border width, if the <i> flag</i> parameter is set to any border.</parameter><parameter type="wxObject&#42; " name="userData" value="NULL">Allows an extra object to be attached to the sizer
item, for use in derived classes when sizing information is more
complex than the <i> proportion</i> and <i> flag</i> will allow for.</parameter></parameters><description>

Appends a child to the sizer.  wxSizer itself is an abstract class, but the parameters are
equivalent in the derived classes that you will instantiate to use it so they are described
here:















</description></function></member>
<member class="wxSizer" name="CalcMin"><function type="wxSize" name="CalcMin"><description>

This method is abstract and has to be overwritten by any derived class.
Here, the sizer will do the actual calculation of its children minimal sizes.

</description></function></member>
<member class="wxSizer" name="Detach"><function type="bool" name="Detach"><parameters><parameter type="wxWindow&#42; " name="window"></parameter></parameters><description>

</description></function>
<function type="bool" name="Detach"><parameters><parameter type="wxSizer&#42; " name="sizer"></parameter></parameters><description>

</description></function>
<function type="bool" name="Detach"><parameters><parameter type="size_t " name="index"></parameter></parameters><seealso>

<ref target="wxsizerremove">wxSizer::Remove</ref>

</seealso><description>

Detach a child from the sizer without destroying it. <i> window</i> is the window to be
detached, <i> sizer</i> is the equivalent sizer and <i> index</i> is the position of
the child in the sizer, typically 0 for the first item. This method does not
cause any layout or resizing to take place, call <ref target="wxsizerlayout">wxSizer::Layout</ref>
to update the layout &quot;on screen&quot; after detaching a child from the sizer.

Returns true if the child item was found and detached, false otherwise.

</description></function></member>
<member class="wxSizer" name="Fit"><function type="wxSize" name="Fit"><parameters><parameter type="wxWindow&#42; " name="window"></parameter></parameters><description>

Tell the sizer to resize the <i> window</i> to match the sizer's minimal size. This
is commonly done in the constructor of the window itself, see sample in the description
of <ref target="wxboxsizer">wxBoxSizer</ref>. Returns the new size.

</description></function></member>
<member class="wxSizer" name="FitInside"><function type="void" name="FitInside"><parameters><parameter type="wxWindow&#42; " name="window"></parameter></parameters><seealso>

<ref target="wxscrolledwindowsetscrollbars">wxScrolledWindow::SetScrollbars</ref>,
<ref target="wxsizersetvirtualsizehints">wxSizer::SetVirtualSizeHints</ref>

</seealso><description>

Tell the sizer to resize the virtual size of the <i> window</i> to match the sizer's
minimal size.  This will not alter the on screen size of the window, but may cause
the addition/removal/alteration of scrollbars required to view the virtual area in
windows which manage it.

</description></function></member>
<member class="wxSizer" name="GetSize"><function type="wxSize" name="GetSize"><description>

Returns the current size of the sizer.

</description></function></member>
<member class="wxSizer" name="GetPosition"><function type="wxPoint" name="GetPosition"><description>

Returns the current position of the sizer.

</description></function></member>
<member class="wxSizer" name="GetMinSize"><function type="wxSize" name="GetMinSize"><description>

Returns the minimal size of the sizer. This is either the combined minimal
size of all the children and their borders or the minimal size set by 
<ref target="wxsizersetminsize">SetMinSize</ref>, depending on which is bigger.

</description></function></member>
<member class="wxSizer" name="Insert"><function type="void" name="Insert"><parameters><parameter type="size_t " name="index">The position this child should assume in the sizer.</parameter><parameter type="wxWindow&#42; " name="window"></parameter><parameter type="int " name="proportion" value="0"></parameter><parameter type="int " name="flag" value="0"></parameter><parameter type="int " name="border" value="0"></parameter><parameter type="wxObject&#42; " name="userData" value="NULL"></parameter></parameters><description>

</description></function>
<function type="void" name="Insert"><parameters><parameter type="size_t " name="index">The position this child should assume in the sizer.</parameter><parameter type="wxSizer&#42; " name="sizer"></parameter><parameter type="int " name="proportion" value="0"></parameter><parameter type="int " name="flag" value="0"></parameter><parameter type="int " name="border" value="0"></parameter><parameter type="wxObject&#42; " name="userData" value="NULL"></parameter></parameters><description>

</description></function>
<function type="void" name="Insert"><parameters><parameter type="size_t " name="index">The position this child should assume in the sizer.</parameter><parameter type="int " name="width"></parameter><parameter type="int " name="height"></parameter><parameter type="int " name="proportion" value="0"></parameter><parameter type="int " name="flag" value="0"></parameter><parameter type="int " name="border" value="0"></parameter><parameter type="wxObject&#42; " name="userData" value="NULL"></parameter></parameters><description>

Insert a child into the sizer before any existing item at <i> index</i>.



See <ref target="wxsizeradd">wxSizer::Add</ref> for the meaning of the other parameters.

</description></function></member>
<member class="wxSizer" name="Layout"><function type="void" name="Layout"><description>

Call this to force layout of the children anew, e.g. after having added a child
to or removed a child (window, other sizer or space) from the sizer while keeping
the current dimension.

</description></function></member>
<member class="wxSizer" name="Prepend"><function type="void" name="Prepend"><parameters><parameter type="wxWindow&#42; " name="window"></parameter><parameter type="int " name="proportion" value="0"></parameter><parameter type="int " name="flag" value="0"></parameter><parameter type="int " name="border" value="0"></parameter><parameter type="wxObject&#42; " name="userData" value="NULL"></parameter></parameters><description>

</description></function>
<function type="void" name="Prepend"><parameters><parameter type="wxSizer&#42; " name="sizer"></parameter><parameter type="int " name="proportion" value="0"></parameter><parameter type="int " name="flag" value="0"></parameter><parameter type="int " name="border" value="0"></parameter><parameter type="wxObject&#42; " name="userData" value="NULL"></parameter></parameters><description>

</description></function>
<function type="void" name="Prepend"><parameters><parameter type="int " name="width"></parameter><parameter type="int " name="height"></parameter><parameter type="int " name="proportion" value="0"></parameter><parameter type="int " name="flag" value="0"></parameter><parameter type="int " name="border" value="0"></parameter><parameter type="wxObject&#42; " name="userData" value="NULL"></parameter></parameters><description>

Same as <ref target="wxsizeradd">wxSizer::Add</ref>, but prepends the items to the beginning of the
list of items (windows, subsizers or spaces) owned by this sizer.

</description></function></member>
<member class="wxSizer" name="RecalcSizes"><function type="void" name="RecalcSizes"><description>

This method is abstract and has to be overwritten by any derived class.
Here, the sizer will do the actual calculation of its children's positions
and sizes.

</description></function></member>
<member class="wxSizer" name="Remove"><function type="bool" name="Remove"><parameters><parameter type="wxWindow&#42; " name="window"></parameter></parameters><description>

</description></function>
<function type="bool" name="Remove"><parameters><parameter type="wxSizer&#42; " name="sizer"></parameter></parameters><description>

</description></function>
<function type="bool" name="Remove"><parameters><parameter type="size_t " name="index"></parameter></parameters><description>

Removes a child from the sizer and destroys it.  <i> sizer</i> is the wxSizer to be removed,
<i> index</i> is the position of the child in the sizer, typically 0 for the first item.
This method does not cause any layout or resizing to take place, call
<ref target="wxsizerlayout">wxSizer::Layout</ref> to update the layout &quot;on screen&quot; after removing a
child from the sizer.

<b> NB:</b> The method taking a wxWindow&#42; parameter is deprecated.  For historical reasons
it does not destroy the window as would usually be expected from Remove.  You should use
<ref target="wxsizerdetach">wxSizer::Detach</ref> in new code instead.  There is currently no wxSizer
method that will both detach and destroy a wxWindow item.

Returns true if the child item was found and removed, false otherwise.

</description></function></member>
<member class="wxSizer" name="SetDimension"><function type="void" name="SetDimension"><parameters><parameter type="int " name="x"></parameter><parameter type="int " name="y"></parameter><parameter type="int " name="width"></parameter><parameter type="int " name="height"></parameter></parameters><description>

Call this to force the sizer to take the given dimension and thus force the items owned
by the sizer to resize themselves according to the rules defined by the parameter in the 
<ref target="wxsizeradd">Add</ref> and <ref target="wxsizerprepend">Prepend</ref> methods.

</description></function></member>
<member class="wxSizer" name="SetMinSize"><function type="void" name="SetMinSize"><parameters><parameter type="int " name="width"></parameter><parameter type="int " name="height"></parameter></parameters><description>

</description></function>
<function type="void" name="SetMinSize"><parameters><parameter type="wxSize " name="size"></parameter></parameters><description>

Call this to give the sizer a minimal size. Normally, the sizer will calculate its
minimal size based purely on how much space its children need. After calling this
method <ref target="wxsizergetminsize">GetMinSize</ref> will return either the minimal size
as requested by its children or the minimal size set here, depending on which is
bigger.

</description></function></member>
<member class="wxSizer" name="SetItemMinSize"><function type="void" name="SetItemMinSize"><parameters><parameter type="wxWindow&#42; " name="window"></parameter><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter></parameters><description>

</description></function>
<function type="void" name="SetItemMinSize"><parameters><parameter type="wxSizer&#42; " name="sizer"></parameter><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter></parameters><description>

</description></function>
<function type="void" name="SetItemMinSize"><parameters><parameter type="size_t " name="index"></parameter><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter></parameters><description>

Set an item's minimum size by window, sizer, or position. The item will be found recursively
in the sizer's descendants. This function enables an application to set the size of an item
after initial creation.

</description></function></member>
<member class="wxSizer" name="SetSizeHints"><function type="void" name="SetSizeHints"><parameters><parameter type="wxWindow&#42; " name="window"></parameter></parameters><description>

Tell the sizer to set (and <ref target="wxsizerfit">Fit</ref>) the minimal size of the <i> window</i> to
match the sizer's minimal size.  This is commonly done in the constructor of the window itself,
see sample in the description of <ref target="wxboxsizer">wxBoxSizer</ref> if the window is resizable
(as are many dialogs under Unix and frames on probably all platforms).

</description></function></member>
<member class="wxSizer" name="SetVirtualSizeHints"><function type="void" name="SetVirtualSizeHints"><parameters><parameter type="wxWindow&#42; " name="window"></parameter></parameters><seealso>

<ref target="wxscrolledwindowsetscrollbars">wxScrolledWindow::SetScrollbars</ref>

</seealso><description>

Tell the sizer to set the minimal size of the <i> window</i> virtual area to match the sizer's
minimal size. For windows with managed scrollbars this will set them appropriately.

</description></function></member>
<member class="wxSizer" name="Show"><function type="void" name="Show"><parameters><parameter type="wxWindow&#42; " name="window"></parameter><parameter type="bool " name="show" value="true"></parameter></parameters><description>

</description></function>
<function type="void" name="Show"><parameters><parameter type="wxSizer&#42; " name="sizer"></parameter><parameter type="bool " name="show" value="true"></parameter></parameters><description>

</description></function>
<function type="void" name="Show"><parameters><parameter type="size_t " name="index"></parameter><parameter type="bool " name="show" value="true"></parameter></parameters><description>

Shows or hides the <i> window</i>, <i> sizer</i>, or item at <i> index</i>.
To make a sizer item disappear or reappear, use Show() followed by Layout().

Note that this only works with wxBoxSizer and wxFlexGridSizer, since they
are the only two sizer classes that can size rows/columns independently.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSlider">
<description>
<p class="classdesc">
A slider is a control with a handle which can be pulled
back and forth to change the value.</p><p class="classdesc">In Windows versions below Windows 95, a scrollbar is used to simulate the slider. In Windows 95,
the track bar control is used.</p><p class="classdesc">Slider events are handled in the same way as a scrollbar.</p>
</description>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/slider.h"/></includes>
<windowstyles>
<style name="wxSL_HORIZONTAL">Displays the slider horizontally.</style><style name="wxSL_VERTICAL">Displays the slider vertically.</style><style name="wxSL_AUTOTICKS">Displays tick marks.</style><style name="wxSL_LABELS">Displays minimum, maximum and value labels.
(NB: only displays the current value label under wxGTK)</style><style name="wxSL_LEFT">Displays ticks on the left, if a vertical slider.</style><style name="wxSL_RIGHT">Displays ticks on the right, if a vertical slider.</style><style name="wxSL_TOP">Displays ticks on the top, if a horizontal slider.</style><style name="wxSL_SELRANGE">Allows the user to select a range on the slider. Windows 95 only.</style></windowstyles>
<seealso>

<ref target="eventhandlingoverview">Event handling overview</ref><ref target="wxscrollbar">wxScrollBar</ref>

</seealso>
<members>
<member class="wxSlider" name="wxSlider"><function type="" name="wxSlider"><description>

Default slider.

</description></function>
<function type="" name="wxSlider"><parameters><parameter type="wxWindow&#42; " name="parent">Parent window. Must not be NULL.</parameter><parameter type="wxWindowID " name="id">Window identifier. A value of -1 indicates a default value.</parameter><parameter type="int " name="value "></parameter><parameter type="int" name=" minValue"></parameter><parameter type="int" name=" maxValue"></parameter><parameter type="const wxPoint&amp; " name="point" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Window size. If the default size (-1, -1) is specified then a default size is chosen.</parameter><parameter type="long" name="style" value="wxSL_HORIZONTAL">Window style. See <ref target="wxslider">wxSlider</ref>.</parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator">Window validator.</parameter><parameter type="const wxString&amp; " name="name" value="``slider&quot;">Window name.</parameter></parameters><seealso>

<ref target="wxslidercreate">wxSlider::Create</ref><ref target="wxvalidator">wxValidator</ref>

</seealso><description></description></function></member>
<member class="wxSlider" name="~wxSlider"><function type="void" name="~wxSlider"><description>

Destructor, destroying the slider.

</description></function></member>
<member class="wxSlider" name="ClearSel"><function type="void" name="ClearSel"><remarks>

Windows 95 only.

</remarks><description>

Clears the selection, for a slider with the <b> wxSL_SELRANGE</b> style.

</description></function></member>
<member class="wxSlider" name="ClearTicks"><function type="void" name="ClearTicks"><remarks>

Windows 95 only.

</remarks><description>

Clears the ticks.

</description></function></member>
<member class="wxSlider" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="int " name="value "></parameter><parameter type="int" name=" minValue"></parameter><parameter type="int" name=" maxValue"></parameter><parameter type="const wxPoint&amp; " name="point" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="wxSL_HORIZONTAL"></parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator"></parameter><parameter type="const wxString&amp; " name="name" value="``slider&quot;"></parameter></parameters><description>

Used for two-step slider construction. See <ref target="wxsliderconstr">wxSlider::wxSlider</ref>
for further details.

</description></function></member>
<member class="wxSlider" name="GetLineSize"><function type="int" name="GetLineSize" suffix="const"><seealso>

<ref target="wxslidersetlinesize">wxSlider::SetLineSize</ref>

</seealso><description>

Returns the line size.

</description></function></member>
<member class="wxSlider" name="GetMax"><function type="int" name="GetMax" suffix="const"><seealso>

<ref target="wxslidergetmin">wxSlider::GetMin</ref><ref target="wxslidersetrange">wxSlider::SetRange</ref>

</seealso><description></description></function></member>
<member class="wxSlider" name="GetMin"><function type="int" name="GetMin" suffix="const"><seealso>

<ref target="wxslidergetmin">wxSlider::GetMin</ref><ref target="wxslidersetrange">wxSlider::SetRange</ref>

</seealso><description></description></function></member>
<member class="wxSlider" name="GetPageSize"><function type="int" name="GetPageSize" suffix="const"><seealso>

<ref target="wxslidersetpagesize">wxSlider::SetPageSize</ref>

</seealso><description>

Returns the page size.

</description></function></member>
<member class="wxSlider" name="GetSelEnd"><function type="int" name="GetSelEnd" suffix="const"><seealso>

<ref target="wxslidergetselstart">wxSlider::GetSelStart</ref><ref target="wxslidersetselection">wxSlider::SetSelection</ref>

</seealso><description></description></function></member>
<member class="wxSlider" name="GetSelStart"><function type="int" name="GetSelStart" suffix="const"><seealso>

<ref target="wxslidergetselend">wxSlider::GetSelEnd</ref><ref target="wxslidersetselection">wxSlider::SetSelection</ref>

</seealso><description></description></function></member>
<member class="wxSlider" name="GetThumbLength"><function type="int" name="GetThumbLength" suffix="const"><seealso>

<ref target="wxslidersetthumblength">wxSlider::SetThumbLength</ref>

</seealso><remarks>

Windows 95 only.

</remarks><description>

Returns the thumb length.

</description></function></member>
<member class="wxSlider" name="GetTickFreq"><function type="int" name="GetTickFreq" suffix="const"><seealso>

<ref target="wxslidersettickfreq">wxSlider::SetTickFreq</ref>

</seealso><remarks>

Windows 95 only.

</remarks><description>

Returns the tick frequency.

</description></function></member>
<member class="wxSlider" name="GetValue"><function type="int" name="GetValue" suffix="const"><seealso>

<ref target="wxslidergetmin">wxSlider::GetMin</ref><ref target="wxslidergetmax">wxSlider::GetMax</ref>,
<ref target="wxslidersetvalue">wxSlider::SetValue</ref>

</seealso><description></description></function></member>
<member class="wxSlider" name="SetRange"><function type="void" name="SetRange"><parameters><parameter type="int" name=" minValue"></parameter><parameter type="int" name=" maxValue"></parameter></parameters><seealso>

<ref target="wxslidergetmin">wxSlider::GetMin</ref><ref target="wxslidergetmax">wxSlider::GetMax</ref>

</seealso><description></description></function></member>
<member class="wxSlider" name="SetTickFreq"><function type="void" name="SetTickFreq"><parameters><parameter type="int " name="n">Frequency. For example, if the frequency is set to two, a tick mark is displayed for
every other increment in the slider's range.</parameter><parameter type="int " name="pos">Position. Must be greater than zero. TODO: what is this for?</parameter></parameters><seealso>

<ref target="wxslidergettickfreq">wxSlider::GetTickFreq</ref>

</seealso><remarks>

Windows 95 only.

</remarks><description>

Sets the tick mark frequency and position.







</description></function></member>
<member class="wxSlider" name="SetLineSize"><function type="void" name="SetLineSize"><parameters><parameter type="int " name="lineSize">The number of steps the slider moves when the user moves it up or down a line.</parameter></parameters><seealso>

<ref target="wxslidergetlinesize">wxSlider::GetLineSize</ref>

</seealso><description>

Sets the line size for the slider.





</description></function></member>
<member class="wxSlider" name="SetPageSize"><function type="void" name="SetPageSize"><parameters><parameter type="int " name="pageSize">The number of steps the slider moves when the user pages up or down.</parameter></parameters><seealso>

<ref target="wxslidergetpagesize">wxSlider::GetPageSize</ref>

</seealso><description>

Sets the page size for the slider.





</description></function></member>
<member class="wxSlider" name="SetSelection"><function type="void" name="SetSelection"><parameters><parameter type="int " name="startPos">The selection start position.</parameter><parameter type="int " name="endPos">The selection end position.</parameter></parameters><seealso>

<ref target="wxslidergetselstart">wxSlider::GetSelStart</ref><ref target="wxslidergetselend">wxSlider::GetSelEnd</ref>

</seealso><description></description></function></member>
<member class="wxSlider" name="SetThumbLength"><function type="void" name="SetThumbLength"><parameters><parameter type="int " name="len">The thumb length.</parameter></parameters><seealso>

<ref target="wxslidergetthumblength">wxSlider::GetThumbLength</ref>

</seealso><remarks>

Windows 95 only.

</remarks><description>

Sets the slider thumb length.





</description></function></member>
<member class="wxSlider" name="SetTick"><function type="void" name="SetTick"><parameters><parameter type="int" name=" tickPos"></parameter></parameters><seealso>

<ref target="wxslidersettickfreq">wxSlider::SetTickFreq</ref>

</seealso><remarks>

Windows 95 only.

</remarks><description>

Sets a tick position.





</description></function></member>
<member class="wxSlider" name="SetValue"><function type="void" name="SetValue"><parameters><parameter type="int" name=" value"></parameter></parameters><seealso>

<ref target="wxslidergetvalue">wxSlider::GetValue</ref>

</seealso><description>

Sets the slider position.





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSockAddress">
<description>
<p class="classdesc">
You are unlikely to need to use this class: only wxSocketBase uses it.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/socket.h"/></includes>
<seealso>

<ref target="wxsocketbase">wxSocketBase</ref>
<ref target="wxipv4address">wxIPV4address</ref>

</seealso>
<members>
<member class="wxSockAddress" name="wxSockAddress"><function type="" name="wxSockAddress"><description>

Default constructor.

</description></function></member>
<member class="wxSockAddress" name="~wxSockAddress"><function type="" name="~wxSockAddress"><description>

Default destructor.

</description></function></member>
<member class="wxSockAddress" name="Clear"><function type="void" name="Clear"><description>

Delete all informations about the address.

</description></function></member>
<member class="wxSockAddress" name="SockAddrLen"><function type="int" name="SockAddrLen"><description>

Returns the length of the socket address.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSocketBase">
<description>
<p class="classdesc">
wxSocketBase is the base class for all socket-related objects, and it
defines all basic IO functionality.</p><p class="classdesc"><heading>wxSocket errors</heading></p><p class="classdesc">\twocolwidtha{7cm}
<table>
<tr><td><b> wxSOCKET_NOERROR</b></td><td>No error happened.</td></tr>
<tr><td><b> wxSOCKET_INVOP</b></td><td>Invalid operation.</td></tr>
<tr><td><b> wxSOCKET_IOERR</b></td><td>Input/Output error.</td></tr>
<tr><td><b> wxSOCKET_INVADDR</b></td><td>Invalid address passed to wxSocket.</td></tr>
<tr><td><b> wxSOCKET_INVSOCK</b></td><td>Invalid socket (uninitialized).</td></tr>
<tr><td><b> wxSOCKET_NOHOST</b></td><td>No corresponding host.</td></tr>
<tr><td><b> wxSOCKET_INVPORT</b></td><td>Invalid port.</td></tr>
<tr><td><b> wxSOCKET_WOULDBLOCK</b></td><td>The socket is non-blocking and the operation would block.</td></tr>
<tr><td><b> wxSOCKET_TIMEDOUT</b></td><td>The timeout for this operation expired.</td></tr>
<tr><td><b> wxSOCKET_MEMERR</b></td><td>Memory exhausted.</td></tr>
</table></p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/socket.h"/></includes>
<events>
<event name="EVT_SOCKET(id, func)">Process a wxEVT_SOCKET event. To process events coming from a socket object, use this handler macro to direct events to member functions that take a \helpref{wxSocketEvent</event></events>
<seealso>

<ref target="wxsocketevent">wxSocketEvent</ref>
<ref target="wxsocketclient">wxSocketClient</ref>
<ref target="wxsocketserver">wxSocketServer</ref>
<ref target="samplesockets">Sockets sample</ref>


</seealso>
<members>
<member class="wxSocketBase" name=""></member>
<member class="wxSocketBase" name=""></member>
<member class="wxSocketServer" name="WaitForAccept"></member>
<member class="wxSocketBase" name=""></member>
<member class="wxSocketBase" name="wxSocketBase"><function type="" name="wxSocketBase"><description>

Default constructor. Don't use it directly; instead, use 
<ref target="wxsocketclient">wxSocketClient</ref> to construct a socket client, or 
<ref target="wxsocketserver">wxSocketServer</ref> to construct a socket server.

</description></function></member>
<member class="wxSocketBase" name="~wxSocketBase"><function type="" name="~wxSocketBase"><description>

Destructor. Do not destroy a socket using the delete operator directly;
use <ref target="wxsocketbasedestroy">Destroy</ref> instead. Also, do not create
socket objects in the stack.

</description></function></member>
<member class="wxSocketBase" name="Callback"><function type="wxSocketBase::wxSockCbk" name="Callback"><parameters><parameter type="wxSocketBase::wxSockCbk" name=" callback"></parameter></parameters><seealso>

<ref target="wxsocketbasecallbackdata">wxSocketBase::CallbackData</ref>
<ref target="wxsocketbasesetnotify">wxSocketBase::SetNotify</ref>
<ref target="wxsocketbasenotify">wxSocketBase::Notify</ref>

</seealso><description></description></function></member>
<member class="wxSocketBase" name="CallbackData"><function type="char &#42;" name="CallbackData"><parameters><parameter type="char &#42;" name="cdata"></parameter></parameters><seealso>

<ref target="wxsocketbasecallback">wxSocketBase::Callback</ref>
<ref target="wxsocketbasesetnotify">wxSocketBase::SetNotify</ref>
<ref target="wxsocketbasenotify">wxSocketBase::Notify</ref>

</seealso><description></description></function></member>
<member class="wxSocketBase" name="Close"><function type="void" name="Close"><description>

This function shuts down the socket, disabling further transmission and
reception of data; it also disables events for the socket and frees the
associated system resources. Upon socket destruction, Close is automatically
called, so in most cases you won't need to do it yourself, unless you
explicitly want to shut down the socket, typically to notify the peer
that you are closing the connection.

\wxheading{Remark/Warning}

Although Close immediately disables events for the socket, it is possible
that event messages may be waiting in the application's event queue. The
application must therefore be prepared to handle socket event messages
even after calling Close.

</description></function></member>
<member class="wxSocketBase" name="Destroy"><function type="bool" name="Destroy"><returnvalue>

Always true.

</returnvalue><description>

Destroys the socket safely. Use this function instead of the delete operator,
since otherwise socket events could reach the application even after the
socket has been destroyed. To prevent this problem, this function appends
the wxSocket to a list of object to be deleted on idle time, after all
events have been processed. For the same reason, you should avoid creating
socket objects in the stack.

Destroy calls <ref target="wxsocketbaseclose">Close</ref> automatically.

</description></function></member>
<member class="wxSocketBase" name="Discard"><function type="wxSocketBase&amp;" name="Discard"><description>

This function simply deletes all bytes in the incoming queue. This function
always returns immediately and its operation is not affected by IO flags.

Use <ref target="wxsocketbaselastcount">LastCount</ref> to verify the number of bytes actually discarded.

If you use <ref target="wxsocketbaseerror">Error</ref>, it will always return false.

</description></function></member>
<member class="wxSocketBase" name="Error"><function type="bool" name="Error" suffix="const"><description>

Returns true if an error occurred in the last IO operation.

Use this function to check for an error condition after one of the
following calls: Discard, Peek, Read, ReadMsg, Unread, Write, WriteMsg.

</description></function></member>
<member class="wxSocketBase" name="GetClientData"><function type="void &#42;" name="GetClientData" suffix="const"><description>

Returns a pointer of the client data for this socket, as set with 
<ref target="wxsocketbasesetclientdata">SetClientData</ref>

</description></function></member>
<member class="wxSocketBase" name="GetLocal"><function type="bool" name="GetLocal" suffix="const"><parameters><parameter type="wxSockAddress&amp; " name="addr"></parameter></parameters><returnvalue>

true if no error happened, false otherwise.

</returnvalue><description>

This function returns the local address field of the socket. The local
address field contains the complete local address of the socket (local
address, local port, ...).

</description></function></member>
<member class="wxSocketBase" name="GetFlags"><function type="wxSocketFlags" name="GetFlags" suffix="const"><description>

Returns current IO flags, as set with <ref target="wxsocketbasesetflags">SetFlags</ref>

</description></function></member>
<member class="wxSocketBase" name="GetPeer"><function type="bool" name="GetPeer" suffix="const"><parameters><parameter type="wxSockAddress&amp; " name="addr"></parameter></parameters><returnvalue>

true if no error happened, false otherwise.

</returnvalue><description>

This function returns the peer address field of the socket. The peer 
address field contains the complete peer host address of the socket
(address, port, ...).

</description></function></member>
<member class="wxSocketBase" name="InterruptWait"><function type="void" name="InterruptWait"><description>

Use this function to interrupt any wait operation currently in progress.
Note that this is not intended as a regular way to interrupt a Wait call,
but only as an escape mechanism for exceptional situations where it is
absolutely necessary to use it, for example to abort an operation due to
some exception or abnormal problem. InterruptWait is automatically called
when you <ref target="wxsocketbaseclose">Close</ref> a socket (and thus also upon
socket destruction), so you don't need to use it in these cases.

<ref target="wxsocketbasewait">wxSocketBase::Wait</ref>, 
<ref target="wxsocketserverwaitforaccept">wxSocketServer::WaitForAccept</ref>, 
<ref target="wxsocketbasewaitforlost">wxSocketBase::WaitForLost</ref>, 
<ref target="wxsocketbasewaitforread">wxSocketBase::WaitForRead</ref>, 
<ref target="wxsocketbasewaitforwrite">wxSocketBase::WaitForWrite</ref>, 
<ref target="wxsocketclientwaitonconnect">wxSocketClient::WaitOnConnect</ref>

</description></function></member>
<member class="wxSocketBase" name="IsConnected"><function type="bool" name="IsConnected" suffix="const"><description>

Returns true if the socket is connected.

</description></function></member>
<member class="wxSocketBase" name="IsData"><function type="bool" name="IsData" suffix="const"><description>

This function waits until the socket is readable. This might mean that
queued data is available for reading or, for streamed sockets, that
the connection has been closed, so that a read operation will complete
immediately without blocking (unless the <b> wxSOCKET_WAITALL</b> flag
is set, in which case the operation might still block).

</description></function></member>
<member class="wxSocketBase" name="IsDisconnected"><function type="bool" name="IsDisconnected" suffix="const"><description>

Returns true if the socket is not connected.

</description></function></member>
<member class="wxSocketBase" name="LastCount"><function type="wxUint32" name="LastCount" suffix="const"><description>

Returns the number of bytes read or written by the last IO call.

Use this function to get the number of bytes actually transferred
after using one of the following IO calls: Discard, Peek, Read,
ReadMsg, Unread, Write, WriteMsg.

</description></function></member>
<member class="wxSocketBase" name="LastError"><function type="wxSocketError" name="LastError" suffix="const"><description>

Returns the last wxSocket error. See <ref target="wxsocketbase">wxSocket errors</ref>.

Please note that this function merely returns the last error code,
but it should not be used to determine if an error has occurred (this
is because successful operations do not change the LastError value).
Use <ref target="wxsocketbaseerror">Error</ref> first, in order to determine
if the last IO call failed. If this returns true, use LastError
to discover the cause of the error.

</description></function></member>
<member class="wxSocketBase" name="Notify"><function type="void" name="Notify"><parameters><parameter type="bool" name=" notify"></parameter></parameters><description>

According to the <i> notify</i> value, this function enables
or disables socket events. If <i> notify</i> is true, the events
configured with <ref target="wxsocketbasesetnotify">SetNotify</ref> will
be sent to the application. If <i> notify</i> is false; no events
will be sent.

</description></function></member>
<member class="wxSocketBase" name="Ok"><function type="bool" name="Ok" suffix="const"><description>

Returns true if the socket is initialized and ready and false in other
cases.

\wxheading{Remark/Warning}

For <ref target="wxsocketclient">wxSocketClient</ref>, Ok won't return true unless
the client is connected to a server.

For <ref target="wxsocketserver">wxSocketServer</ref>, Ok will return true if the
server could bind to the specified address and is already listening for
new connections.

Ok does not check for IO errors;
use <ref target="wxsocketbaseerror">Error</ref> instead for that purpose.

</description></function></member>
<member class="wxSocketBase" name="RestoreState"><function type="void" name="RestoreState"><seealso>

<ref target="wxsocketbasesavestate">wxSocketBase::SaveState</ref>

</seealso><description>

This function restores the previous state of the socket, as saved
with <ref target="wxsocketbasesavestate">SaveState</ref>

Calls to SaveState and RestoreState can be nested.

</description></function></member>
<member class="wxSocketBase" name="SaveState"><function type="void" name="SaveState"><seealso>

<ref target="wxsocketbaserestorestate">wxSocketBase::RestoreState</ref>

</seealso><description>

This function saves the current state of the socket in a stack. Socket
state includes flags, as set with <ref target="wxsocketbasesetflags">SetFlags</ref>,
event mask, as set with <ref target="wxsocketbasesetnotify">SetNotify</ref> and 
<ref target="wxsocketbasenotify">Notify</ref>, user data, as set with 
<ref target="wxsocketbasesetclientdata">SetClientData</ref>, and asynchronous
callback settings, as set with <ref target="wxsocketbasecallback">Callback</ref> 
and <ref target="wxsocketbasecallbackdata">CallbackData</ref>.

Calls to SaveState and RestoreState can be nested.

</description></function></member>
<member class="wxSocketBase" name="SetClientData"><function type="void" name="SetClientData"><parameters><parameter type="void &#42;" name="data"></parameter></parameters><description>

Sets user-supplied client data for this socket. All socket events will
contain a pointer to this data, which can be retrieved with
the <ref target="wxsocketeventgetclientdata">wxSocketEvent::GetClientData</ref> function.

</description></function></member>
<member class="wxSocketBase" name="SetEventHandler"><function type="void" name="SetEventHandler"><parameters><parameter type="wxEvtHandler&amp;" name=" handler"></parameter><parameter type="int" name="id" value="-1">The id of socket event.</parameter></parameters><seealso>

<ref target="wxsocketbasesetnotify">wxSocketBase::SetNotify</ref>
<ref target="wxsocketbasenotify">wxSocketBase::Notify</ref>
<ref target="wxsocketevent">wxSocketEvent</ref>
<ref target="wxevthandler">wxEvtHandler</ref>

</seealso><description></description></function></member>
<member class="wxSocketBase" name="SetFlags"><function type="void" name="SetFlags"><parameters><parameter type="wxSocketFlags" name=" flags"></parameter></parameters><description>

Use SetFlags to customize IO operation for this socket.
The <i> flags</i> parameter may be a combination of flags ORed together.
The following flags can be used:

\twocolwidtha{7cm}
<table>
<tr><td><b> wxSOCKET_NONE</b></td><td>Normal functionality.</td></tr>
<tr><td><b> wxSOCKET_NOWAIT</b></td><td>Read/write as much data as possible and return immediately.</td></tr>
<tr><td><b> wxSOCKET_WAITALL</b></td><td>Wait for all required data to be read/written unless an error occurs.</td></tr>
<tr><td><b> wxSOCKET_BLOCK</b></td><td>Block the GUI (do not yield) while reading/writing data.</td></tr>
</table>

A brief overview on how to use these flags follows.

If no flag is specified (this is the same as <b> wxSOCKET_NONE</b>),
IO calls will return after some data has been read or written, even
when the transfer might not be complete. This is the same as issuing
exactly one blocking low-level call to recv() or send(). Note
that <i> blocking</i> here refers to when the function returns, not
to whether the GUI blocks during this time.

If <b> wxSOCKET_NOWAIT</b> is specified, IO calls will return immediately.
Read operations will retrieve only available data. Write operations will
write as much data as possible, depending on how much space is available
in the output buffer. This is the same as issuing exactly one nonblocking
low-level call to recv() or send(). Note that <i> nonblocking</i> here
refers to when the function returns, not to whether the GUI blocks during
this time.

If <b> wxSOCKET_WAITALL</b> is specified, IO calls won't return until ALL
the data has been read or written (or until an error occurs), blocking if
necessary, and issuing several low level calls if necessary. This is the
same as having a loop which makes as many blocking low-level calls to
recv() or send() as needed so as to transfer all the data. Note
that <i> blocking</i> here refers to when the function returns, not
to whether the GUI blocks during this time.

The <b> wxSOCKET_BLOCK</b> flag controls whether the GUI blocks during
IO operations. If this flag is specified, the socket will not yield
during IO calls, so the GUI will remain blocked until the operation
completes. If it is not used, then the application must take extra
care to avoid unwanted reentrance.

So:

<b> wxSOCKET_NONE</b> will try to read at least SOME data, no matter how much.

<b> wxSOCKET_NOWAIT</b> will always return immediately, even if it cannot
read or write ANY data.

<b> wxSOCKET_WAITALL</b> will only return when it has read or written ALL
the data.

<b> wxSOCKET_BLOCK</b> has nothing to do with the previous flags and
it controls whether the GUI blocks.

</description></function></member>
<member class="wxSocketBase" name="SetNotify"><function type="void" name="SetNotify"><parameters><parameter type="wxSocketEventFlags" name=" flags"></parameter></parameters><description>

SetNotify specifies which socket events are to be sent to the event handler.
The <i> flags</i> parameter may be combination of flags ORed together. The
following flags can be used:

\twocolwidtha{7cm}
<table>
<tr><td><b> wxSOCKET_INPUT_FLAG</b></td><td>to receive wxSOCKET_INPUT</td></tr>
<tr><td><b> wxSOCKET_OUTPUT_FLAG</b></td><td>to receive wxSOCKET_OUTPUT</td></tr>
<tr><td><b> wxSOCKET_CONNECTION_FLAG</b></td><td>to receive wxSOCKET_CONNECTION</td></tr>
<tr><td><b> wxSOCKET_LOST_FLAG</b></td><td>to receive wxSOCKET_LOST</td></tr>
</table>

For example:

<pre>
  sock.SetNotify(wxSOCKET_INPUT_FLAG | wxSOCKET_LOST_FLAG);
  sock.Notify(true);
</pre>

In this example, the user will be notified about incoming socket data and
whenever the connection is closed.

For more information on socket events see <ref target="wxsocketbase">wxSocket events</ref>.

</description></function></member>
<member class="wxSocketBase" name="SetTimeout"><function type="void" name="SetTimeout"><parameters><parameter type="int " name="seconds"></parameter></parameters><description>

This function sets the default socket timeout in seconds. This timeout
applies to all IO calls, and also to the <ref target="wxsocketbasewait">Wait</ref> family
of functions if you don't specify a wait interval. Initially, the default
timeout is 10 minutes.

</description></function></member>
<member class="wxSocketBase" name="Peek"><function type="wxSocketBase&amp;" name="Peek"><parameters><parameter type="void &#42;" name=" buffer"></parameter><parameter type="wxUint32" name=" nbytes"></parameter></parameters><seealso>

<ref target="wxsocketbaseerror">wxSocketBase::Error</ref>
<ref target="wxsocketbaselasterror">wxSocketBase::LastError</ref>
<ref target="wxsocketbaselastcount">wxSocketBase::LastCount</ref>
<ref target="wxsocketbasesetflags">wxSocketBase::SetFlags</ref>

</seealso><description></description></function></member>
<member class="wxSocketBase" name="Read"><function type="wxSocketBase&amp;" name="Read"><parameters><parameter type="void &#42;" name=" buffer"></parameter><parameter type="wxUint32" name=" nbytes"></parameter></parameters><seealso>

<ref target="wxsocketbaseerror">wxSocketBase::Error</ref>
<ref target="wxsocketbaselasterror">wxSocketBase::LastError</ref>
<ref target="wxsocketbaselastcount">wxSocketBase::LastCount</ref>
<ref target="wxsocketbasesetflags">wxSocketBase::SetFlags</ref>

</seealso><description></description></function></member>
<member class="wxSocketBase" name="ReadMsg"><function type="wxSocketBase&amp;" name="ReadMsg"><parameters><parameter type="void &#42;" name=" buffer"></parameter><parameter type="wxUint32" name=" nbytes"></parameter></parameters><seealso>

<ref target="wxsocketbaseerror">wxSocketBase::Error</ref>
<ref target="wxsocketbaselasterror">wxSocketBase::LastError</ref>
<ref target="wxsocketbaselastcount">wxSocketBase::LastCount</ref>
<ref target="wxsocketbasesetflags">wxSocketBase::SetFlags</ref>
<ref target="wxsocketbasewritemsg">wxSocketBase::WriteMsg</ref>

</seealso><description></description></function></member>
<member class="wxSocketBase" name="Unread"><function type="wxSocketBase&amp;" name="Unread"><parameters><parameter type="const void &#42;" name=" buffer"></parameter><parameter type="wxUint32" name=" nbytes"></parameter></parameters><seealso>

<ref target="wxsocketbaseerror">wxSocketBase::Error</ref>
<ref target="wxsocketbaselastcount">wxSocketBase::LastCount</ref>
<ref target="wxsocketbaselasterror">wxSocketBase::LastError</ref>

</seealso><description></description></function></member>
<member class="wxSocketBase" name="Wait"><function type="bool" name="Wait"><parameters><parameter type="long" name="seconds" value="-1">Number of seconds to wait.
If -1, it will wait for the default timeout,
as set with <ref target="wxsocketbasesettimeout">SetTimeout</ref>.</parameter><parameter type="long" name="millisecond" value="0">Number of milliseconds to wait.</parameter></parameters><seealso>

<ref target="wxsocketbaseinterruptwait">wxSocketBase::InterruptWait</ref>
<ref target="wxsocketserverwaitforaccept">wxSocketServer::WaitForAccept</ref>
<ref target="wxsocketbasewaitforlost">wxSocketBase::WaitForLost</ref>
<ref target="wxsocketbasewaitforread">wxSocketBase::WaitForRead</ref>
<ref target="wxsocketbasewaitforwrite">wxSocketBase::WaitForWrite</ref>
<ref target="wxsocketclientwaitonconnect">wxSocketClient::WaitOnConnect</ref>

</seealso><description></description></function></member>
<member class="wxSocketBase" name="WaitForLost"><function type="bool" name="Wait"><parameters><parameter type="long" name="seconds" value="-1">Number of seconds to wait.
If -1, it will wait for the default timeout,
as set with <ref target="wxsocketbasesettimeout">SetTimeout</ref>.</parameter><parameter type="long" name="millisecond" value="0">Number of milliseconds to wait.</parameter></parameters><seealso>

<ref target="wxsocketbaseinterruptwait">wxSocketBase::InterruptWait</ref>,
<ref target="wxsocketbasewait">wxSocketBase::Wait</ref>

</seealso><returnvalue>

Returns true if the connection was lost, false if the timeout was reached.

</returnvalue><description>

This function waits until the connection is lost. This may happen if
the peer gracefully closes the connection or if the connection breaks.







</description></function></member>
<member class="wxSocketBase" name="WaitForRead"><function type="bool" name="WaitForRead"><parameters><parameter type="long" name="seconds" value="-1">Number of seconds to wait.
If -1, it will wait for the default timeout,
as set with <ref target="wxsocketbasesettimeout">SetTimeout</ref>.</parameter><parameter type="long" name="millisecond" value="0">Number of milliseconds to wait.</parameter></parameters><seealso>

<ref target="wxsocketbaseinterruptwait">wxSocketBase::InterruptWait</ref>
<ref target="wxsocketbasewait">wxSocketBase::Wait</ref>

</seealso><description></description></function></member>
<member class="wxSocketBase" name="WaitForWrite"><function type="bool" name="WaitForWrite"><parameters><parameter type="long" name="seconds" value="-1">Number of seconds to wait.
If -1, it will wait for the default timeout,
as set with <ref target="wxsocketbasesettimeout">SetTimeout</ref>.</parameter><parameter type="long" name="millisecond" value="0">Number of milliseconds to wait.</parameter></parameters><seealso>

<ref target="wxsocketbaseinterruptwait">wxSocketBase::InterruptWait</ref>
<ref target="wxsocketbasewait">wxSocketBase::Wait</ref>

</seealso><description></description></function></member>
<member class="wxSocketBase" name="Write"><function type="wxSocketBase&amp;" name="Write"><parameters><parameter type="const void &#42;" name=" buffer"></parameter><parameter type="wxUint32" name=" nbytes"></parameter></parameters><seealso>

<ref target="wxsocketbaseerror">wxSocketBase::Error</ref>
<ref target="wxsocketbaselasterror">wxSocketBase::LastError</ref>
<ref target="wxsocketbaselastcount">wxSocketBase::LastCount</ref>
<ref target="wxsocketbasesetflags">wxSocketBase::SetFlags</ref>

</seealso><description></description></function></member>
<member class="wxSocketBase" name="WriteMsg"><function type="wxSocketBase&amp;" name="WriteMsg"><parameters><parameter type="const void &#42;" name=" buffer"></parameter><parameter type="wxUint32" name=" nbytes"></parameter></parameters><seealso>

<ref target="wxsocketbaseerror">wxSocketBase::Error</ref>
<ref target="wxsocketbaselasterror">wxSocketBase::LastError</ref>
<ref target="wxsocketbaselastcount">wxSocketBase::LastCount</ref>
<ref target="wxsocketbasesetflags">wxSocketBase::SetFlags</ref>
<ref target="wxsocketbasereadmsg">wxSocketBase::ReadMsg</ref>
</seealso><description></description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSocketClient">
<description>

</description>
<parents>
<classref name="wxSocketBase"/>

</parents>
<includes>
<header name="wx/socket.h"/></includes>
<members>
<member class="wxSocketClient" name="wxSocketClient"><function type="" name="wxSocketClient"><parameters><parameter type="wxSocketFlags" name="flags" value="wxSOCKET_NONE">Socket flags (See <ref target="wxsocketbasesetflags">wxSocketBase::SetFlags</ref>)</parameter></parameters><description>

Constructor.





</description></function></member>
<member class="wxSocketClient" name="~wxSocketClient"><function type="" name="~wxSocketClient"><description>

Destructor. Please see <ref target="wxsocketbasedestroy">wxSocketBase::Destroy</ref>.

</description></function></member>
<member class="wxSocketClient" name="Connect"><function type="bool" name="Connect"><parameters><parameter type="wxSockAddress&amp;" name=" address"></parameter><parameter type="bool" name="wait" value="true">If true, waits for the connection to complete.</parameter></parameters><seealso>

<ref target="wxsocketclientwaitonconnect">wxSocketClient::WaitOnConnect</ref>
<ref target="wxsocketbasesetnotify">wxSocketBase::SetNotify</ref>
<ref target="wxsocketbasenotify">wxSocketBase::Notify</ref>

</seealso><description></description></function></member>
<member class="wxSocketClient" name="WaitOnConnect"><function type="bool" name="WaitOnConnect"><parameters><parameter type="long" name="seconds" value="-1">Number of seconds to wait.
If -1, it will wait for the default timeout,
as set with <ref target="wxsocketbasesettimeout">SetTimeout</ref>.</parameter><parameter type="long" name="milliseconds" value="0"></parameter></parameters><seealso>

<ref target="wxsocketclientconnect">wxSocketClient::Connect</ref>
<ref target="wxsocketbaseinterruptwait">wxSocketBase::InterruptWait</ref>
<ref target="wxsocketbaseisconnected">wxSocketBase::IsConnected</ref>
</seealso><description></description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSocketEvent">
<description>
<p class="classdesc">
This event class contains information about socket events.</p>
</description>
<parents>
<classref name="wxEvent"/>

</parents>
<includes>
<header name="wx/socket.h"/></includes>
<events>
<event name="EVT_SOCKET(id, func)">Process a socket event, supplying the member function.</event></events>
<seealso>

<ref target="wxsocketbase">wxSocketBase</ref>
<ref target="wxsocketclient">wxSocketClient</ref>
<ref target="wxsocketserver">wxSocketServer</ref>

</seealso>
<members>
<member class="wxSocketEvent" name="wxSocketEvent"><function type="" name="wxSocketEvent"><parameters><parameter type="int" name="id" value="0"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxSocketEvent" name="GetClientData"><function type="void &#42;" name="GetClientData"><description>

Gets the client data of the socket which generated this event, as
set with <ref target="wxsocketbasesetclientdata">wxSocketBase::SetClientData</ref>.

</description></function></member>
<member class="wxSocketEvent" name="GetSocket"><function type="wxSocketBase &#42;" name="GetSocket" suffix="const"><description>

Returns the socket object to which this event refers to. This makes
it possible to use the same event handler for different sockets.

</description></function></member>
<member class="wxSocketEvent" name="GetSocketEvent"><function type="wxSocketNotify" name="GetSocketEvent" suffix="const"><description>

Returns the socket event type.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSocketInputStream">
<description>
<p class="classdesc">
This class implements an input stream which reads data from
a connected socket. Note that this stream is purely sequential
and it does not support seeking.</p>
</description>
<parents>
<classref name="wxInputStream"/>

</parents>
<includes>
<header name="wx/sckstrm.h"/></includes>
<seealso>

<ref target="wxsocketbase">wxSocketBase</ref>

</seealso>
<members>
<member class="wxSocketInputStream" name="wxSocketInputStream"><function type="" name="wxSocketInputStream"><parameters><parameter type="wxSocketBase&amp;" name=" s"></parameter></parameters><description>

Creates a new read-only socket stream using the specified initialized
socket connection. 

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSocketOutputStream">
<description>
<p class="classdesc">
This class implements an output stream which writes data from
a connected socket. Note that this stream is purely sequential
and it does not support seeking.</p>
</description>
<parents>
<classref name="wxOutputStream"/>

</parents>
<includes>
<header name="wx/sckstrm.h"/></includes>
<seealso>

<ref target="wxsocketbase">wxSocketBase</ref>

</seealso>
<members>
<member class="wxSocketOutputStream" name="wxSocketOutputStream"><function type="" name="wxSocketInputStream"><parameters><parameter type="wxSocketBase&amp;" name=" s"></parameter></parameters><description>

Creates a new write-only socket stream using the specified initialized
socket connection.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSocketServer">
<description>

</description>
<parents>
<classref name="wxSocketBase"/>

</parents>
<includes>
<header name="wx/socket.h"/></includes>
<members>
<member class="wxSocketServer" name="wxSocketServer"><function type="" name="wxSocketServer"><parameters><parameter type="wxSockAddress&amp;" name=" address"></parameter><parameter type="wxSocketFlags" name="flags" value="wxSOCKET_NONE">Socket flags (See <ref target="wxsocketbasesetflags">wxSocketBase::SetFlags</ref>)</parameter></parameters><description>

Constructs a new server and tries to bind to the specified <i> address</i>.
Before trying to accept new connections, test whether it succeeded with 
<ref target="wxsocketbaseok">wxSocketBase::Ok</ref>.







</description></function></member>
<member class="wxSocketServer" name="~wxSocketServer"><function type="" name="~wxSocketServer"><description>

Destructor (it doesn't close the accepted connections).

</description></function></member>
<member class="wxSocketServer" name="Accept"><function type="wxSocketBase &#42;" name="Accept"><parameters><parameter type="bool" name="wait" value="true"></parameter></parameters><seealso>

<ref target="wxsocketserverwaitforaccept">wxSocketServer::WaitForAccept</ref>
<ref target="wxsocketbasesetnotify">wxSocketBase::SetNotify</ref>
<ref target="wxsocketbasenotify">wxSocketBase::Notify</ref>
<ref target="wxsocketserveracceptwith">wxSocketServer::AcceptWith</ref>

</seealso><description></description></function></member>
<member class="wxSocketServer" name="AcceptWith"><function type="bool" name="AcceptWith"><parameters><parameter type="wxSocketBase&amp;" name=" socket"></parameter><parameter type="bool" name="wait" value="true"></parameter></parameters><returnvalue>

Returns true on success, or false if an error occurred or if the
<i> wait</i> parameter was false and there were no pending
connections.

<ref target="wxsocketserverwaitforaccept">wxSocketServer::WaitForAccept</ref>, 
<ref target="wxsocketbasesetnotify">wxSocketBase::SetNotify</ref>, 
<ref target="wxsocketbasenotify">wxSocketBase::Notify</ref>, 
<ref target="wxsocketserveraccept">wxSocketServer::Accept</ref>

</returnvalue><description>

Accept an incoming connection using the specified socket object.





</description></function></member>
<member class="wxSocketServer" name="WaitForAccept"><function type="bool" name="WaitForAccept"><parameters><parameter type="long" name="seconds" value="-1">Number of seconds to wait.
If -1, it will wait for the default timeout,
as set with <ref target="wxsocketbasesettimeout">SetTimeout</ref>.</parameter><parameter type="long" name="millisecond" value="0">Number of milliseconds to wait.</parameter></parameters><seealso>

<ref target="wxsocketserveraccept">wxSocketServer::Accept</ref>
<ref target="wxsocketserveracceptwith">wxSocketServer::AcceptWith</ref>,
<ref target="wxsocketbaseinterruptwait">wxSocketBase::InterruptWait</ref>


</seealso><description></description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSpinButton">
<description>
<p class="classdesc">
A wxSpinButton has two small up and down (or left and right) arrow buttons. It
is often used next to a text control for increment and decrementing a value.
Portable programs should try to use <ref target="wxspinctrl">wxSpinCtrl</ref> instead
as wxSpinButton is not implemented for all platforms (Win32 and GTK only
currently).</p><p class="classdesc"><b> NB:</b> the range supported by this control (and wxSpinCtrl) depends on the
platform but is at least <tt> -0x8000</tt> to <tt> 0x7fff</tt>. Under GTK and
Win32 with sufficiently new version of <tt> comctrl32.dll</tt> (at least 4.71 is
required, 5.80 is recommended) the full 32 bit range is supported.</p>
</description>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/spinbutt.h"/></includes>
<windowstyles>
<style name="wxSP_HORIZONTAL">Specifies a horizontal spin button (note that this style is not supported in wxGTK).</style><style name="wxSP_VERTICAL">Specifies a vertical spin button.</style><style name="wxSP_ARROW_KEYS">The user can use arrow keys.</style><style name="wxSP_WRAP">The value wraps at the minimum and maximum.</style></windowstyles>
<seealso>

<ref target="wxspinctrl">wxSpinCtrl</ref> 

</seealso>
<members>
<member class="wxSpinButton" name="wxSpinButton"><function type="" name="wxSpinButton"><description>

Default constructor.

</description></function>
<function type="" name="wxSpinButton"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID " name="id">Window identifier. A value of -1 indicates a default value.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Window position. If the position (-1, -1) is specified then a default position is chosen.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Window size. If the default size (-1, -1) is specified then a default size is chosen.</parameter><parameter type="long" name="style" value="wxSP_HORIZONTAL">Window style. See <ref target="wxspinbutton">wxSpinButton</ref>.</parameter><parameter type="const wxString&amp; " name="name" value="``spinButton&quot;">Window name.</parameter></parameters><seealso>

<ref target="wxspinbuttoncreate">wxSpinButton::Create</ref><ref target="wxvalidator">wxValidator</ref>

</seealso><description></description></function></member>
<member class="wxSpinButton" name="~wxSpinButton"><function type="void" name="~wxSpinButton"><description>

Destructor, destroys the spin button control.

</description></function></member>
<member class="wxSpinButton" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="wxSP_HORIZONTAL"></parameter><parameter type="const wxString&amp; " name="name" value="``spinButton&quot;"></parameter></parameters><description>

Scrollbar creation function called by the spin button constructor.
See <ref target="wxspinbuttonconstr">wxSpinButton::wxSpinButton</ref> for details.

</description></function></member>
<member class="wxSpinButton" name="GetMax"><function type="int" name="GetMax" suffix="const"><seealso>

<ref target="wxspinbuttonsetrange">wxSpinButton::SetRange</ref>

</seealso><description>

Returns the maximum permissible value.

</description></function></member>
<member class="wxSpinButton" name="GetMin"><function type="int" name="GetMin" suffix="const"><seealso>

<ref target="wxspinbuttonsetrange">wxSpinButton::SetRange</ref>

</seealso><description>

Returns the minimum permissible value.

</description></function></member>
<member class="wxSpinButton" name="GetValue"><function type="int" name="GetValue" suffix="const"><seealso>

<ref target="wxspinbuttonsetvalue">wxSpinButton::SetValue</ref>

</seealso><description>

Returns the current spin button value.

</description></function></member>
<member class="wxSpinButton" name="SetRange"><function type="void" name="SetRange"><parameters><parameter type="int" name=" min"></parameter><parameter type="int" name=" max"></parameter></parameters><seealso>

<ref target="wxspinbuttongetmin">wxSpinButton::GetMin</ref><ref target="wxspinbuttongetmax">wxSpinButton::GetMax</ref>

</seealso><description></description></function></member>
<member class="wxSpinButton" name="SetValue"><function type="void" name="SetValue"><parameters><parameter type="int" name=" value"></parameter></parameters><seealso>

<ref target="wxspinbuttongetvalue">wxSpinButton::GetValue</ref>

</seealso><description>

Sets the value of the spin button.





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSpinCtrl">
<description>
<p class="classdesc">
wxSpinCtrl combines <ref target="wxtextctrl">wxTextCtrl</ref> and 
<ref target="wxspinbutton">wxSpinButton</ref> in one control.</p>
</description>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/spinctrl.h"/></includes>
<windowstyles>
<style name="wxSP_ARROW_KEYS">The user can use arrow keys.</style><style name="wxSP_WRAP">The value wraps at the minimum and maximum.</style></windowstyles>
<events>
<event name="EVT_SPINCTRL(id, func)">Generated whenever the numeric value
of the spinctrl is updated</event></events>
<seealso>

<ref target="eventhandlingoverview">Event handling overview</ref>,
<ref target="wxspinbutton">wxSpinButton</ref>,
<ref target="wxcontrol">wxControl</ref>

</seealso>
<members>
<member class="wxSpinCtrl" name="wxSpinCtrl"><function type="" name="wxSpinCtrl"><description>

Default constructor.

</description></function>
<function type="" name="wxSpinCtrl"><parameters><parameter type="wxWindow&#42; " name="parent">Parent window. Must not be NULL.</parameter><parameter type="wxWindowID " name="id" value="-1">Window identifier. A value of -1 indicates a default value.</parameter><parameter type="const wxString&amp; " name="value" value="wxEmptyString">Default value.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Window position. If the position (-1, -1) is specified then a default position is chosen.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Window size. If the default size (-1, -1) is specified then a default size is chosen.</parameter><parameter type="long " name="style" value="wxSP_ARROW_KEYS">Window style. See <ref target="wxspinbutton">wxSpinButton</ref>.</parameter><parameter type="int " name="min" value="0">Minimal value.</parameter><parameter type="int " name="max" value="100">Maximal value.</parameter><parameter type="int " name="initial" value="0">Initial value.</parameter><parameter type="const wxString&amp; " name="name" value="_T(&quot;wxSpinCtrl&quot;)">Window name.</parameter></parameters><seealso>

<ref target="wxspinctrlcreate">wxSpinCtrl::Create</ref>

</seealso><description>

Constructor, creating and showing a spin control.























</description></function></member>
<member class="wxSpinCtrl" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id" value="-1"></parameter><parameter type="const wxString&amp; " name="value" value="wxEmptyString"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long " name="style" value="wxSP_ARROW_KEYS"></parameter><parameter type="int " name="min" value="0"></parameter><parameter type="int " name="max" value="100"></parameter><parameter type="int " name="initial" value="0"></parameter><parameter type="const wxString&amp; " name="name" value="_T(&quot;wxSpinCtrl&quot;)"></parameter></parameters><description>

Creation function called by the spin control constructor.

See <ref target="wxspinctrlwxspinctrl">wxSpinCtrl::wxSpinCtrl</ref> for details.

</description></function></member>
<member class="wxSpinCtrl" name="SetValue"><function type="void" name="SetValue"><parameters><parameter type="const wxString&amp; " name="text"></parameter></parameters><description>

</description></function>
<function type="void" name="SetValue"><parameters><parameter type="int " name="value"></parameter></parameters><description>

Sets the value of the spin control.

</description></function></member>
<member class="wxSpinCtrl" name="GetValue"><function type="int" name="GetValue" suffix="const"><description>

Gets the value of the spin control.

</description></function></member>
<member class="wxSpinCtrl" name="SetRange"><function type="void" name="SetRange"><parameters><parameter type="int " name="minVal"></parameter><parameter type="int " name="maxVal"></parameter></parameters><description>

Sets range of allowable values.

</description></function></member>
<member class="wxSpinCtrl" name="SetSelection"><function type="void" name="SetSelection"><parameters><parameter type="long " name="from"></parameter><parameter type="long " name="to"></parameter></parameters><description>

Select the text in the text part of the control between  positions 
<i> from</i> (inclusive) and <i> to</i> (exclusive). This is similar to 
<ref target="wxtextctrlsetselection">wxTextCtrl::SetSelection</ref>.

<b> NB:</b> this is currently only implemented for Windows and generic versions
of the control.

</description></function></member>
<member class="wxSpinCtrl" name="GetMin"><function type="int" name="GetMin" suffix="const"><description>

Gets minimal allowable value.

</description></function></member>
<member class="wxSpinCtrl" name="GetMax"><function type="int" name="GetMax" suffix="const"><description>

Gets maximal allowable value.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="N"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSpinEvent">
<description>
<p class="classdesc">
This event class is used for the events generated by 
<ref target="wxspinbutton">wxSpinButton</ref> and <ref target="wxspinctrl">wxSpinCtrl</ref>.</p>
</description>
<parents>
<classref name="wxNotifyEvent"/>
<classref name="wxCommandEvent"/>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/spinbutt.h" comment="or &lt;wx/spinctrl.h&gt;"/></includes>
<seealso>

<ref target="wxspinbutton">wxSpinButton</ref> and <ref target="wxspinctrl">wxSpinCtrl</ref>

</seealso>
<members>
<member class="wxSpinEvent" name="wxSpinEvent"><function type="" name="wxSpinEvent"><parameters><parameter type="wxEventType " name="commandType" value="wxEVT_NULL"></parameter><parameter type="int " name="id" value="0"></parameter></parameters><description>

The constructor is not normally used by the user code.

</description></function></member>
<member class="wxSpinEvent" name="GetPosition"><function type="int" name="GetPosition" suffix="const"><description>

Retrieve the current spin button or control value.

</description></function></member>
<member class="wxSpinEvent" name="SetPosition"><function type="void" name="SetPosition"><parameters><parameter type="int " name="pos"></parameter></parameters><description>

Set the value associated with the event.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSplashScreen">
<description>
<p class="classdesc">
wxSplashScreen shows a window with a thin border, displaying a bitmap describing your
application. Show it in application initialisation, and then either explicitly destroy
it or let it time-out.</p><p class="classdesc">Example usage:</p><p class="classdesc"><pre>
  wxBitmap bitmap;
  if (bitmap.LoadFile(&quot;splash16.png&quot;, wxBITMAP_TYPE_PNG))
  {
      wxSplashScreen&#42; splash = new wxSplashScreen(bitmap,
          wxSPLASH_CENTRE_ON_SCREEN|wxSPLASH_TIMEOUT,
          6000, NULL, -1, wxDefaultPosition, wxDefaultSize,
          wxSIMPLE_BORDER|wxSTAY_ON_TOP);
  }
  wxYield();
</pre></p>
</description>
<parents>
<classref name="wxFrame"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/splash.h"/></includes>
<members>
<member class="wxSplashScreen" name="wxSplashScreen"><function type="" name="wxSplashScreen"><parameters><parameter type="const wxBitmap&amp; " name="bitmap"></parameter><parameter type="long " name="splashStyle"></parameter><parameter type="int " name="milliseconds"></parameter><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long " name="style" value="wxSIMPLE_BORDER|wxFRAME_NO_TASKBAR|wxSTAY_ON_TOP"></parameter></parameters><description>

Construct the splash screen passing a bitmap, a style, a timeout, a window id, optional position
and size, and a window style.

<i> splashStyle</i> is a bitlist of some of the following:

<ul><li> wxSPLASH_CENTRE_ON_PARENT
</li>
<li> wxSPLASH_CENTRE_ON_SCREEN
</li>
<li> wxSPLASH_NO_CENTRE
</li>
<li> wxSPLASH_TIMEOUT
</li>
<li> wxSPLASH_NO_TIMEOUT
</li></ul>

<i> milliseconds</i> is the timeout in milliseconds.

</description></function></member>
<member class="wxSplashScreen" name="~wxSplashScreen"><function type="" name="~wxSplashScreen"><description>

Destroys the splash screen.

</description></function></member>
<member class="wxSplashScreen" name="OnCloseWindow"><function type="void" name="OnCloseWindow"><parameters><parameter type="wxCloseEvent&amp; " name="event"></parameter></parameters><description>

Reimplement this event handler if you want to set an application variable on window destruction, for example.

</description></function></member>
<member class="wxSplashScreen" name="GetSplashStyle"><function type="long" name="GetSplashStyle" suffix="const"><description>

Returns the splash style (see <ref target="wxsplashscreenwxsplashscreen">wxSplashScreen::wxSplashScreen</ref> for
details).

</description></function></member>
<member class="wxSplashScreen" name="GetSplashWindow"><function type="wxSplashScreenWindow&#42;" name="GetSplashWindow" suffix="const"><description>

Returns the window used to display the bitmap.

</description></function></member>
<member class="wxSplashScreen" name="GetTimeout"><function type="int" name="GetTimeout" suffix="const"><description>

Returns the timeout in milliseconds.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSplitterEvent">
<description>
<p class="classdesc">
This class represents the events generated by a splitter control. Also there is
only one event class, the data associated to the different events is not the
same and so not all accessor functions may be called for each event. The
documentation mentions the kind of event(s) for which the given accessor
function makes sense: calling it for other types of events will result
in assert failure (in debug mode) and will return meaningless results.</p>
</description>
<parents>
<classref name="wxNotifyEvent"/>
<classref name="wxCommandEvent"/>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/splitter.h"/></includes>
<events>
<event name="EVT_SPLITTER_SASH_POS_CHANGING(id, func)">The sash
position is in the process of being changed. You may prevent this change
from happening by calling \helpref{Veto</event><event name="EVT_SPLITTER_SASH_POS_CHANGED(id, func)">The sash
position was changed. May be used to modify the sash position before
it is set, or to prevent the change from taking place.
Processes a wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED event.</event><event name="EVT_SPLITTER_UNSPLIT(id, func)">The splitter has been just
unsplit. Processes a wxEVT_COMMAND_SPLITTER_UNSPLIT event. This event can't
be vetoed.</event><event name="EVT_SPLITTER_DCLICK(id, func)">The sash was double
clicked. The default behaviour is to unsplit the window when this happens
(unless the minimum pane size has been set to a value greater than zero). This
won't happen if you veto this event. Processes a
wxEVT_COMMAND_SPLITTER_DOUBLECLICKED event.</event></events>
<seealso>

<ref target="wxsplitterwindow">wxSplitterWindow</ref>,
<ref target="eventhandlingoverview">Event handling overview</ref>


</seealso>
<members>
<member class="wxSplitterEvent" name="wxSplitterEvent"><function type="" name="wxSplitterEvent"><parameters><parameter type="wxEventType" name="eventType" value="wxEVT_NULL"></parameter><parameter type="wxSplitterWindow &#42;" name="splitter" value="NULL"></parameter></parameters><description>

Constructor. Used internally by wxWindows only.


</description></function></member>
<member class="wxSplitterEvent" name="GetSashPosition"><function type="int" name="GetSashPosition" suffix="const"><description>

Returns the new sash position.

May only be called while processing
wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING and
wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED events.


</description></function></member>
<member class="wxSplitterEvent" name="GetX"><function type="int" name="GetX" suffix="const"><description>

Returns the x coordinate of the double-click point.

May only be called while processing
wxEVT_COMMAND_SPLITTER_DOUBLECLICKED events.


</description></function></member>
<member class="wxSplitterEvent" name="GetY"><function type="int" name="GetY" suffix="const"><description>

Returns the y coordinate of the double-click point.

May only be called while processing
wxEVT_COMMAND_SPLITTER_DOUBLECLICKED events.

</description></function></member>
<member class="wxSplitterEvent" name="GetWindowBeingRemoved"><function type="wxWindow&#42;" name="GetWindowBeingRemoved" suffix="const"><description>

Returns a pointer to the window being removed when a splitter window
is unsplit.

May only be called while processing
wxEVT_COMMAND_SPLITTER_UNSPLIT events.


</description></function></member>
<member class="wxSplitterEvent" name="SetSashPosition"><function type="void" name="SetSashPosition"><parameters><parameter type="int" name=" pos"></parameter></parameters><description>

In the case of wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED events,
sets the the new sash position. In the case of
wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING events, sets the new
tracking bar position so visual feedback during dragging will
represent that change that will actually take place. Set to -1 from
the event handler code to prevent repositioning.

May only be called while processing
wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING and
wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED events.





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSplitterWindow">
<description>
<p class="classdesc">
\overview{wxSplitterWindow overview}{wxsplitterwindowoverview}</p><p class="classdesc">This class manages up to two subwindows. The current view can be
split into two programmatically (perhaps from a menu command), and unsplit
either programmatically or via the wxSplitterWindow user interface.</p><p class="classdesc">Appropriate 3D shading for the Windows 95 user interface is an option -
this is also recommended for GTK. Optionally, the sash can be made to
look more like the native control under MacOS X.</p>
</description>
<parents>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/splitter.h"/></includes>
<windowstyles>
<style name="wxSP_3D">Draws a 3D effect border and sash.</style><style name="wxSP_3DSASH">Draws a 3D effect sash.</style><style name="wxSP_3DBORDER">Draws a 3D effect border.</style><style name="wxSP_FULLSASH">Draws the ends of the sash (so the window can be used without a border).</style><style name="wxSP_BORDER">Draws a thin black border around the window.</style><style name="wxSP_NOBORDER">No border, and a black sash.</style><style name="wxSP_PERMIT_UNSPLIT">Always allow to
unsplit, even with the minimum pane size other than zero.</style><style name="wxSP_LIVE_UPDATE">Don't draw XOR line but resize the child windows immediately.</style></windowstyles>
<events>
<event name="EVT_SPLITTER_SASH_POS_CHANGING(id, func)">The sash
position is in the process of being changed. May be used to modify the
position of the tracking bar to properly reflect the position that
would be set if the drag were to be completed at this point. Processes
a wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING event.</event><event name="EVT_SPLITTER_SASH_POS_CHANGED(id, func)">The sash
position was changed. May be used to modify the sash position before
it is set, or to prevent the change from taking place.
Processes a wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED event.</event><event name="EVT_SPLITTER_UNSPLIT(id, func)">The splitter has been just
unsplit. Processes a wxEVT_COMMAND_SPLITTER_UNSPLIT event.</event><event name="EVT_SPLITTER_DCLICK(id, func)">The sash was double
clicked. The default behaviour is to unsplit the window when this happens
(unless the minimum pane size has been set to a value greater than zero).
Processes a wxEVT_COMMAND_SPLITTER_DOUBLECLICKED event.</event></events>
<seealso>

<ref target="wxsplitterevent">wxSplitterEvent</ref>

</seealso>
<members>
<member class="wxSplitterWindow" name="wxSplitterWindow"><function type="" name="wxSplitterWindow"><description>

Default constructor.

</description></function>
<function type="" name="wxSplitterWindow"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxPoint&amp; " name="point" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">The window size.</parameter><parameter type="long " name="style" value="wxSP_3D">The window style. See <ref target="wxsplitterwindow">wxSplitterWindow</ref>.</parameter><parameter type="const wxString&amp;" name="name" value="&quot;splitterWindow&quot;">The window name.</parameter></parameters><seealso>

<ref target="wxsplitterwindowinitialize">wxSplitterWindow::Initialize</ref><ref target="wxsplitterwindowsplitvertically">wxSplitterWindow::SplitVertically</ref>,
<ref target="wxsplitterwindowsplithorizontally">wxSplitterWindow::SplitHorizontally</ref>,
<ref target="wxsplitterwindowcreate">wxSplitterWindow::Create</ref>

</seealso><description></description></function></member>
<member class="wxSplitterWindow" name="~wxSplitterWindow"><function type="" name="~wxSplitterWindow"><description>

Destroys the wxSplitterWindow and its children.

</description></function></member>
<member class="wxSplitterWindow" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="int " name="x"></parameter><parameter type="const wxPoint&amp; " name="point" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long " name="style" value="wxSP_3D"></parameter><parameter type="const wxString&amp;" name="name" value="&quot;splitterWindow&quot;"></parameter></parameters><description>

Creation function, for two-step construction. See <ref target="wxsplitterwindowconstr">wxSplitterWindow::wxSplitterWindow</ref> for
details.

</description></function></member>
<member class="wxSplitterWindow" name="GetMinimumPaneSize"><function type="int" name="GetMinimumPaneSize" suffix="const"><seealso>

<ref target="wxsplitterwindowsetminimumpanesize">wxSplitterWindow::SetMinimumPaneSize</ref>

</seealso><description>

Returns the current minimum pane size (defaults to zero).

</description></function></member>
<member class="wxSplitterWindow" name="GetSashPosition"><function type="int" name="GetSashPosition"><seealso>

<ref target="wxsplitterwindowsetsashposition">wxSplitterWindow::SetSashPosition</ref>

</seealso><description>

Returns the current sash position.

</description></function></member>
<member class="wxSplitterWindow" name="GetSplitMode"><function type="int" name="GetSplitMode" suffix="const"><seealso>

<ref target="wxsplitterwindowsetsplitmode">wxSplitterWindow::SetSplitMode</ref><ref target="wxsplitterwindowsplitvertically">wxSplitterWindow::SplitVertically</ref>,
<ref target="wxsplitterwindowsplithorizontally">wxSplitterWindow::SplitHorizontally</ref>.

</seealso><description></description></function></member>
<member class="wxSplitterWindow" name="GetWindow1"><function type="wxWindow&#42;" name="GetWindow1" suffix="const"><description>

Returns the left/top or only pane.

</description></function></member>
<member class="wxSplitterWindow" name="GetWindow2"><function type="wxWindow&#42;" name="GetWindow2" suffix="const"><description>

Returns the right/bottom pane.

</description></function></member>
<member class="wxSplitterWindow" name="Initialize"><function type="void" name="Initialize"><parameters><parameter type="wxWindow&#42; " name="window">The pane for the unsplit window.</parameter></parameters><seealso>

<ref target="wxsplitterwindowsplitvertically">wxSplitterWindow::SplitVertically</ref>,
<ref target="wxsplitterwindowsplithorizontally">wxSplitterWindow::SplitHorizontally</ref>

</seealso><remarks>

This should be called if you wish to initially view only a single pane in the splitter window.

</remarks><description>

Initializes the splitter window to have one pane.





</description></function></member>
<member class="wxSplitterWindow" name="IsSplit"><function type="bool" name="IsSplit" suffix="const"><description>

Returns true if the window is split, false otherwise.

</description></function></member>
<member class="wxSplitterWindow" name="OnDoubleClickSash"><function type="virtual void" name="OnDoubleClickSash"><parameters><parameter type="int " name="x">The x position of the mouse cursor.</parameter><parameter type="int " name="y">The y position of the mouse cursor.</parameter></parameters><seealso>

<ref target="wxsplitterwindowunsplit">wxSplitterWindow::Unsplit</ref>

</seealso><remarks>

The default implementation of this function calls <ref target="wxsplitterwindowunsplit">Unsplit</ref> if
the minimum pane size is zero.

</remarks><description>

Application-overridable function called when the sash is double-clicked with
the left mouse button.







</description></function></member>
<member class="wxSplitterWindow" name="OnUnsplit"><function type="virtual void" name="OnUnsplit"><parameters><parameter type="wxWindow&#42; " name="removed">The window being removed.</parameter></parameters><remarks>

The default implementation of this function simply hides <i> removed</i>. You
may wish to delete the window.

</remarks><description>

Application-overridable function called when the window is unsplit, either
programmatically or using the wxSplitterWindow user interface.





</description></function></member>
<member class="wxSplitterWindow" name="OnSashPositionChange"><function type="virtual bool" name="OnSashPositionChange"><parameters><parameter type="int " name="newSashPosition">The new sash position (always positive or zero)</parameter></parameters><remarks>

The default implementation of this function verifies that the sizes of both 
panes of the splitter are greater than minimum pane size.

</remarks><description>

Application-overridable function called when the sash position is changed by 
user. It may return false to prevent the change or true to allow it.





</description></function></member>
<member class="wxSplitterWindow" name="ReplaceWindow"><function type="bool" name="ReplaceWindow"><parameters><parameter type="wxWindow &#42; " name="winOld"></parameter><parameter type="wxWindow &#42; " name="winNew"></parameter></parameters><seealso>

<ref target="wxsplitterwindowunsplit">wxSplitterWindow::Unsplit</ref><br/>
<ref target="wxsplitterwindowsplitvertically">wxSplitterWindow::SplitVertically</ref><br/>
<ref target="wxsplitterwindowsplithorizontally">wxSplitterWindow::SplitHorizontally</ref>

</seealso><description>

This function replaces one of the windows managed by the wxSplitterWindow with
another one. It is in general better to use it instead of calling Unsplit()
and then resplitting the window back because it will provoke much less flicker
(if any). It is valid to call this function whether the splitter has two
windows or only one.

Both parameters should be non-NULL and <i> winOld</i> must specify one of the
windows managed by the splitter. If the parameters are incorrect or the window
couldn't be replaced, false is returned. Otherwise the function will return
true, but please notice that it will not delete the replaced window and you
may wish to do it yourself.

\wxheading{See also}

<ref target="wxsplitterwindowgetminimumpanesize">wxSplitterWindow::GetMinimumPaneSize</ref>

</description></function></member>
<member class="wxSplitterWindow" name="SetSashPosition"><function type="void" name="SetSashPosition"><parameters><parameter type="int " name="position">The sash position in pixels.</parameter><parameter type="const bool" name="redraw" value="true">If true, resizes the panes and redraws the sash and border.</parameter></parameters><seealso>

<ref target="wxsplitterwindowgetsashposition">wxSplitterWindow::GetSashPosition</ref>

</seealso><remarks>

Does not currently check for an out-of-range value.

</remarks><description>

Sets the sash position.







</description></function></member>
<member class="wxSplitterWindow" name="SetMinimumPaneSize"><function type="void" name="SetMinimumPaneSize"><parameters><parameter type="int " name="paneSize">Minimum pane size in pixels.</parameter></parameters><seealso>

<ref target="wxsplitterwindowgetminimumpanesize">wxSplitterWindow::GetMinimumPaneSize</ref>

</seealso><remarks>

The default minimum pane size is zero, which means that either pane can be reduced to zero by dragging
the sash, thus removing one of the panes. To prevent this behaviour (and veto out-of-range sash dragging),
set a minimum size, for example 20 pixels. If the wxSP_PERMIT_UNSPLIT style
is used when a splitter window is created, the window may be unsplit even
if minimum size is non-zero.

</remarks><description>

Sets the minimum pane size.





</description></function></member>
<member class="wxSplitterWindow" name="SetSplitMode"><function type="void" name="SetSplitMode"><parameters><parameter type="int " name="mode">Can be wxSPLIT_VERTICAL or wxSPLIT_HORIZONTAL.</parameter></parameters><seealso>

<ref target="wxsplitterwindowgetsplitmode">wxSplitterWindow::GetSplitMode</ref><ref target="wxsplitterwindowsplitvertically">wxSplitterWindow::SplitVertically</ref>,
<ref target="wxsplitterwindowsplithorizontally">wxSplitterWindow::SplitHorizontally</ref>.

</seealso><description></description></function></member>
<member class="wxSplitterWindow" name="SplitHorizontally"><function type="bool" name="SplitHorizontally"><parameters><parameter type="wxWindow&#42; " name="window1">The top pane.</parameter><parameter type="wxWindow&#42; " name="window2">The bottom pane.</parameter><parameter type="int" name="sashPosition" value="0">The initial position of the sash. If this value is
positive, it specifies the size of the upper pane. If it is negative, it is
absolute value gives the size of the lower pane. Finally, specify 0 (default)
to choose the default position (half of the total window height).</parameter></parameters><seealso>

<ref target="wxsplitterwindowsplitvertically">wxSplitterWindow::SplitVertically</ref><ref target="wxsplitterwindowissplit">wxSplitterWindow::IsSplit</ref>,
<ref target="wxsplitterwindowunsplit">wxSplitterWindow::Unsplit</ref>

</seealso><description></description></function></member>
<member class="wxSplitterWindow" name="SplitVertically"><function type="bool" name="SplitVertically"><parameters><parameter type="wxWindow&#42; " name="window1">The left pane.</parameter><parameter type="wxWindow&#42; " name="window2">The right pane.</parameter><parameter type="int" name="sashPosition" value="0">The initial position of the sash. If this value is
positive, it specifies the size of the left pane. If it is negative, it is
absolute value gives the size of the right pane. Finally, specify 0 (default)
to choose the default position (half of the total window width).</parameter></parameters><seealso>

<ref target="wxsplitterwindowsplithorizontally">wxSplitterWindow::SplitHorizontally</ref><ref target="wxsplitterwindowissplit">wxSplitterWindow::IsSplit</ref>,
<ref target="wxsplitterwindowunsplit">wxSplitterWindow::Unsplit</ref>.

</seealso><description></description></function></member>
<member class="wxSplitterWindow" name="Unsplit"><function type="bool" name="Unsplit"><parameters><parameter type="wxWindow&#42; " name="toRemove" value="NULL">The pane to remove, or NULL to remove the right or bottom pane.</parameter></parameters><seealso>

<ref target="wxsplitterwindowsplithorizontally">wxSplitterWindow::SplitHorizontally</ref><ref target="wxsplitterwindowsplitvertically">wxSplitterWindow::SplitVertically</ref>,
<ref target="wxsplitterwindowissplit">wxSplitterWindow::IsSplit</ref><ref target="wxsplitterwindowonunsplit">wxSplitterWindow::OnUnsplit</ref>

</seealso><description></description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxStaticBitmap">
<description>
<p class="classdesc">
A static bitmap control displays a bitmap.</p>
</description>
<remarks>

The bitmap to be displayed should have a small number of colours, such as 16, to avoid
palette problems.

</remarks>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/statbmp.h"/></includes>
<windowstyles>
</windowstyles>
<seealso>

<ref target="wxstaticbitmap">wxStaticBitmap</ref><ref target="wxstaticbox">wxStaticBox</ref>

</seealso>
<members>
<member class="wxStaticBitmap" name="wxStaticBitmap"><function type="" name="wxStaticBitmap"><description>

Default constructor.

</description></function>
<function type="" name="wxStaticBitmap"><parameters><parameter type="wxWindow&#42; " name="parent">Parent window. Should not be NULL.</parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxBitmap&amp; " name="label">Bitmap label.</parameter><parameter type="const wxPoint&amp; " name="pos">Window position.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Window size.</parameter><parameter type="long" name="style" value="0">Window style. See <ref target="wxstaticbitmap">wxStaticBitmap</ref>.</parameter><parameter type="const wxString&amp; " name="name" value="``staticBitmap&quot;">Window name.</parameter></parameters><seealso>

<ref target="wxstaticbitmapcreate">wxStaticBitmap::Create</ref>

</seealso><description>

Constructor, creating and showing a text control.

















</description></function></member>
<member class="wxStaticBitmap" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxBitmap&amp; " name="label"></parameter><parameter type="const wxPoint&amp; " name="pos"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="0"></parameter><parameter type="const wxString&amp; " name="name" value="``staticBitmap&quot;"></parameter></parameters><description>

Creation function, for two-step construction. For details see <ref target="wxstaticbitmapconstr">wxStaticBitmap::wxStaticBitmap</ref>.

</description></function></member>
<member class="wxStaticBitmap" name="GetBitmap"><function type="wxBitmap&amp;" name="GetBitmap" suffix="const"><seealso>

<ref target="wxstaticbitmapsetbitmap">wxStaticBitmap::SetBitmap</ref>

</seealso><description>

Returns a reference to the label bitmap.

</description></function></member>
<member class="wxStaticBitmap" name="SetBitmap"><function type="virtual void" name="SetBitmap"><parameters><parameter type="const wxBitmap&amp; " name=" label"></parameter></parameters><seealso>

<ref target="wxstaticbitmapgetbitmap">wxStaticBitmap::GetBitmap</ref>

</seealso><description>

Sets the bitmap label.





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxStaticBox">
<description>
<p class="classdesc">
A static box is a rectangle drawn around other panel items to denote
a logical grouping of items.</p><p class="classdesc">Please note that a static box should <b> not</b> be used as the parent for the
controls it contains, instead they should be siblings of each other. Although
using a static box as a parent might work in some versions of wxWindows, it
results in a crash under, for example, wxGTK.</p>
</description>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/statbox.h"/></includes>
<windowstyles>
</windowstyles>
<seealso>

<ref target="wxstatictext">wxStaticText</ref>

</seealso>
<members>
<member class="wxStaticBox" name="wxStaticBox"><function type="" name="wxStaticBox"><description>

Default constructor.

</description></function>
<function type="" name="wxStaticBox"><parameters><parameter type="wxWindow&#42; " name="parent">Parent window. Must not be NULL.</parameter><parameter type="wxWindowID " name="id">Window identifier. A value of -1 indicates a default value.</parameter><parameter type="const wxString&amp; " name="label">Text to be displayed in the static box, the empty string for no label.</parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition">Window position. If the position (-1, -1) is specified then a default position is chosen.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Checkbox size. If the size (-1, -1) is specified then a default size is chosen.</parameter><parameter type="long" name="style" value="0">Window style. See <ref target="wxstaticbox">wxStaticBox</ref>.</parameter><parameter type="const wxString&amp; " name="name" value="``staticBox&quot;">Window name.</parameter></parameters><seealso>

<ref target="wxstaticboxcreate">wxStaticBox::Create</ref>

</seealso><description>

Constructor, creating and showing a static box.

















</description></function></member>
<member class="wxStaticBox" name="~wxStaticBox"><function type="void" name="~wxStaticBox"><description>

Destructor, destroying the group box.

</description></function></member>
<member class="wxStaticBox" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxString&amp; " name="label"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="0"></parameter><parameter type="const wxString&amp; " name="name" value="``staticBox&quot;"></parameter></parameters><description>

Creates the static box for two-step construction. See <ref target="wxstaticboxconstr">wxStaticBox::wxStaticBox</ref>
for further details.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxStaticBoxSizer">
<description>
<p class="classdesc">
wxStaticBoxSizer is a sizer derived from wxBoxSizer but adds a static
box around the sizer. Note that this static box has to be created 
separately.</p>
</description>
<parents>
<classref name="wxBoxSizer"/>
<classref name="wxSizer"/>
<classref name="wxObject"/>

</parents>
<seealso>

<ref target="wxsizer">wxSizer</ref><ref target="wxstaticbox">wxStaticBox</ref><ref target="wxboxsizer">wxBoxSizer</ref><ref target="sizeroverview">Sizer overview</ref>

</seealso>
<members>
<member class="wxStaticBoxSizer" name="wxStaticBoxSizer"><function type="" name="wxStaticBoxSizer"><parameters><parameter type="wxStaticBox&#42; " name="box"></parameter><parameter type="int " name="orient"></parameter></parameters><description>

Constructor. It takes an associated static box and the orientation <i> orient</i> 
as parameters - orient can be either of wxVERTICAL or wxHORIZONTAL.

</description></function></member>
<member class="wxStaticBoxSizer" name="GetStaticBox"><function type="wxStaticBox&#42;" name="GetStaticBox"><description>

Returns the static box associated with the sizer.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxStaticLine">
<description>
<p class="classdesc">
A static line is just a line which may be used in a dialog to separate the
groups of controls. The line may be only vertical or horizontal.</p>
</description>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/statline.h"/></includes>
<windowstyles>
<style name="wxLI_HORIZONTAL">Creates a horizontal line.</style><style name="wxLI_VERTICAL">Creates a vertical line.</style></windowstyles>
<seealso>

<ref target="wxstaticbox">wxStaticBox</ref>

</seealso>
<members>
<member class="wxStaticLine" name="wxStaticLine"><function type="" name="wxStaticLine"><description>

Default constructor.

</description></function>
<function type="" name="wxStaticLine"><parameters><parameter type="wxWindow&#42; " name="parent">Parent window. Must not be NULL.</parameter><parameter type="wxWindowID " name="id">Window identifier. A value of -1 indicates a default value.</parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition">Window position. If the position (-1, -1) is specified then a default position is chosen.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Size. Note that either the height or the width (depending on
whether the line if horizontal or vertical) is ignored.</parameter><parameter type="long" name="style" value="wxLI_HORIZONTAL">Window style (either wxLI_HORIZONTAL or wxLI_VERTICAL).</parameter><parameter type="const wxString&amp; " name="name" value="``staticLine&quot;">Window name.</parameter></parameters><seealso>

<ref target="wxstaticlinecreate">wxStaticLine::Create</ref>

</seealso><description>

Constructor, creating and showing a static line.















</description></function></member>
<member class="wxStaticLine" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="0"></parameter><parameter type="const wxString&amp; " name="name" value="``staticLine&quot;"></parameter></parameters><description>

Creates the static line for two-step construction. See <ref target="wxstaticlinector">wxStaticLine::wxStaticLine</ref>
for further details.

</description></function></member>
<member class="wxStaticLine" name="IsVertical"><function type="bool" name="IsVertical" suffix="const"><description>

Returns true if the line is vertical, false if horizontal.

</description></function></member>
<member class="wxStaticLine" name="GetDefaultSize"><function type="int" name="GetDefaultSize"><description>

This static function returns the size which will be given to the smaller
dimension of the static line, i.e. its height for a horizontal line or its
width for a vertical one.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxStaticText">
<description>
<p class="classdesc">
A static text control displays one or more lines of read-only text.</p>
</description>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/stattext.h"/></includes>
<windowstyles>
<style name="wxALIGN_LEFT">Align the text to the left</style><style name="wxALIGN_RIGHT">Align the text to the right</style><style name="wxALIGN_CENTRE">Center the text (horizontally)</style><style name="wxST_NO_AUTORESIZE">By default, the control will
adjust its size to exactly fit to the size of the text when 
\helpref{SetLabel</style></windowstyles>
<seealso>

<ref target="wxstaticbitmap">wxStaticBitmap</ref><ref target="wxstaticbox">wxStaticBox</ref>

</seealso>
<members>
<member class="wxStaticText" name="wxStaticText"><function type="" name="wxStaticText"><description>

Default constructor.

</description></function>
<function type="" name="wxStaticText"><parameters><parameter type="wxWindow&#42; " name="parent">Parent window. Should not be NULL.</parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp; " name="label">Text label.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Window position.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Window size.</parameter><parameter type="long" name="style" value="0">Window style. See <ref target="wxstatictext">wxStaticText</ref>.</parameter><parameter type="const wxString&amp; " name="name" value="``staticText&quot;">Window name.</parameter></parameters><seealso>

<ref target="wxstatictextcreate">wxStaticText::Create</ref>

</seealso><description>

Constructor, creating and showing a text control.

















</description></function></member>
<member class="wxStaticText" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp; " name="label"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="0"></parameter><parameter type="const wxString&amp; " name="name" value="``staticText&quot;"></parameter></parameters><description>

Creation function, for two-step construction. For details see <ref target="wxstatictextconstr">wxStaticText::wxStaticText</ref>.

</description></function></member>
<member class="wxStaticText" name="GetLabel"><function type="wxString" name="GetLabel" suffix="const"><description>

Returns the contents of the control.

</description></function></member>
<member class="wxStaticText" name="SetLabel"><function type="virtual void" name="SetLabel"><parameters><parameter type="const wxString&amp; " name=" label"></parameter></parameters><description>

Sets the static text label and updates the controls size to exactly fit the
label unless the control has wxST_NO_AUTORESIZE flag.





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxStatusBar">
<description>
<p class="classdesc">
A status bar is a narrow window that can be placed along the bottom of a frame to give
small amounts of status information. It can contain one or more fields, one or more of which can
be variable length according to the size of the window.</p><p class="classdesc"><ref target="wxwindow">wxWindow</ref><br/>
<ref target="wxevthandler">wxEvtHandler</ref><br/>
<ref target="wxobject">wxObject</ref></p>
</description>
<remarks>

It is possible to create controls and other windows on the status bar. Position these windows
from an <b> OnSize</b> event handler.

</remarks>
<parents>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/statusbr.h"/></includes>
<windowstyles>
<style name="wxST_SIZEGRIP">On Windows 95, displays a gripper at right-hand side of
the status bar.</style></windowstyles>
<seealso>

<ref target="wxframe">wxFrame</ref><ref target="samplestatbar">Status bar sample</ref>

</seealso>
<members>
<member class="wxStatusBar" name="wxStatusBar"><function type="" name="wxStatusBar"><description>

Default constructor.

</description></function>
<function type="" name="wxStatusBar"><parameters><parameter type="wxWindow&#42; " name="parent">The window parent, usually a frame.</parameter><parameter type="wxWindowID " name="id">The window identifier. It may take a value of -1 to indicate a default value.</parameter><parameter type="long" name="style" value="wxST_SIZEGRIP">The window style. See <ref target="wxstatusbar">wxStatusBar</ref>.</parameter><parameter type="const wxString&amp; " name="name" value="``statusBar&quot;">The name of the window. This parameter is used to associate a name with the item,
allowing the application user to set Motif resource values for
individual windows.</parameter></parameters><seealso>

<ref target="wxstatusbarcreate">wxStatusBar::Create</ref>

</seealso><description>

Constructor, creating the window.











</description></function></member>
<member class="wxStatusBar" name="~wxStatusBar"><function type="void" name="~wxStatusBar"><description>

Destructor.

</description></function></member>
<member class="wxStatusBar" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="long" name="style" value="wxST_SIZEGRIP"></parameter><parameter type="const wxString&amp; " name="name" value="``statusBar&quot;"></parameter></parameters><description>

Creates the window, for two-step construction.

See <ref target="wxstatusbarconstr">wxStatusBar::wxStatusBar</ref> for details.

</description></function></member>
<member class="wxStatusBar" name="GetFieldRect"><function type="virtual bool" name="GetFieldRect" suffix="const"><parameters><parameter type="int" name=" i"></parameter><parameter type="wxRect&amp;" name=" rect"></parameter></parameters><seealso>

<ref target="wxrect">wxRect</ref>

\perlnote{In wxPerl this function returns a <tt> Wx::Rect</tt> if the field
  index is valid<tt> undef</tt> otherwise.}

</seealso><description></description></function></member>
<member class="wxStatusBar" name="GetFieldsCount"><function type="int" name="GetFieldsCount" suffix="const"><description>

Returns the number of fields in the status bar.

</description></function></member>
<member class="wxStatusBar" name="GetStatusText"><function type="virtual wxString" name="GetStatusText" suffix="const"><parameters><parameter type="int" name="ir" value="0"></parameter></parameters><seealso>

<ref target="wxstatusbarsetstatustext">wxStatusBar::SetStatusText</ref>

</seealso><returnvalue>

The status field string if the field is valid, otherwise the empty string.

</returnvalue><description>

Returns the string associated with a status bar field.





</description></function></member>
<member class="wxStatusBar" name="PopStatusText"><function type="void" name="PopStatusText"><parameters><parameter type="int" name="field" value="0"></parameter></parameters><seealso>

<ref target="wxstatusbarpushstatustext">wxStatusBar::PushStatusText</ref>

</seealso><description>

Sets the field text to the top of the stack, and pops the stack of saved
strings.

</description></function></member>
<member class="wxStatusBar" name="PushStatusText"><function type="void" name="PushStatusText"><parameters><parameter type="const wxString&amp;" name=" string"></parameter><parameter type="int" name="field" value="0"></parameter></parameters><description>

Saves the current field text in a per field stack, and sets the field text
to the string passed as argument.

</description></function></member>
<member class="wxStatusBar" name="SetFieldsCount"><function type="virtual void" name="SetFieldsCount"><parameters><parameter type="int" name="number" value="1">The number of fields.</parameter><parameter type="int&#42; " name="widths" value="NULL">An array of <i> n</i> integers interpreted in the same way as
in <ref target="wxstatusbarsetstatuswidths">SetStatusWidths</ref></parameter></parameters><description>

Sets the number of fields, and optionally the field widths.

\pythonnote{Only the first parameter is accepted.  Use SetStatusWidths
to set the widths of the fields.}

\perlnote{In wxPerl this function accepts only the <tt> n</tt> parameter.
Use SetStatusWidths to set the field widths.}







</description></function></member>
<member class="wxStatusBar" name="SetMinHeight"><function type="void" name="SetMinHeight"><parameters><parameter type="int" name=" height"></parameter></parameters><description>

Sets the minimal possible hight for the status bar. The real height may be
bigger than the height specified here depending on the size of the font used by
the status bar.

</description></function></member>
<member class="wxStatusBar" name="SetStatusText"><function type="virtual void" name="SetStatusText"><parameters><parameter type="const wxString&amp; " name="text">The text to be set. Use an empty string (``&quot;) to clear the field.</parameter><parameter type="int" name="i" value="0">The field to set, starting from zero.</parameter></parameters><seealso>

<ref target="wxstatusbargetstatustext">wxStatusBar::GetStatusText</ref><ref target="wxframesetstatustext">wxFrame::SetStatusText</ref>

</seealso><description></description></function></member>
<member class="wxStatusBar" name="SetStatusWidths"><function type="virtual void" name="SetStatusWidths"><parameters><parameter type="int" name=" n"></parameter><parameter type="int &#42;" name="widths">Contains an array of <i> n</i> integers, each of which is
either an absolute status field width in pixels if positive or indicates a
variable width field if negative</parameter></parameters><seealso>

<ref target="wxstatusbarsetfieldscount">wxStatusBar::SetFieldsCount</ref><ref target="wxframesetstatuswidths">wxFrame::SetStatusWidths</ref>

\pythonnote{Only a single parameter is requireda Python list of
integers.}

\perlnote{In wxPerl this method takes as parameters the field widths.}

</seealso><description></description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxStopWatch">
<description>
<p class="classdesc">
The wxStopWatch class allow you to measure time intervals. For example, you may
use it to measure the time elapsed by some function:</p><p class="classdesc"><pre>
    wxStopWatch sw;
    CallLongRunningFunction();
    wxLogMessage(&quot;The long running function took                  sw.Time());
    sw.Pause();
    ... stopwatch is stopped now ...
    sw.Resume();
    CallLongRunningFunction();
    wxLogMessage(&quot;And calling it twice took $ldms in all&quot;, sw.Time());
</pre></p>
</description>
<includes>
<header name="wx/timer.h"/></includes>
<seealso>

<ref target="wxstarttimer">::wxStartTimer</ref><ref target="wxgetelapsedtime">::wxGetElapsedTime</ref><ref target="wxtimer">wxTimer</ref>

</seealso>
<members>
<member class="wxStopWatch" name="wxStopWatch"><function type="" name="wxStopWatch"><description>

Constructor. This starts the stop watch.

</description></function></member>
<member class="wxStopWatch" name="Pause"><function type="void" name="Pause"><description>

Pauses the stop watch. Call <ref target="wxstopwatchresume">wxStopWatch::Resume</ref> to resume 
time measuring again.

If this method is called several times, <tt> Resume()</tt> must be called the same
number of times to really resume the stop watch. You may, however, call 
<ref target="wxstopwatchstart">Start</ref> to resume it unconditionally.

</description></function></member>
<member class="wxStopWatch" name="Resume"><function type="void" name="Resume"><description>

Resumes the stop watch which had been paused with 
<ref target="wxstopwatchpause">wxStopWatch::Pause</ref>.

</description></function></member>
<member class="wxStopWatch" name="Start"><function type="void" name="Start"><parameters><parameter type="long" name="milliseconds" value="0"></parameter></parameters><description>

(Re)starts the stop watch with a given initial value.

</description></function></member>
<member class="wxStopWatch" name="Time"><function type="long" name="Time" suffix="const"><description>\label{wxstopwatchtime}

Returns the time in milliseconds since the start (or restart) or the last call of 
<ref target="wxstopwatchpause">wxStopWatch::Pause</ref>.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxStreamBase">
<description>
<p class="classdesc">
This class is the base class of most stream related classes in wxWindows. It must
not be used directly.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/stream.h"/></includes>
<seealso>

<ref target="wxstreambuffer">wxStreamBuffer</ref>

</seealso>
<members>
<member class="wxStreamBase" name="wxStreamBase"><function type="" name="wxStreamBase"><description>

Creates a dummy stream object. It doesn't do anything.

</description></function></member>
<member class="wxStreamBase" name="~wxStreamBase"><function type="" name="~wxStreamBase"><description>

Destructor.

</description></function></member>
<member class="wxStreamBase" name="IsOk"><function type="wxStreamError" name="IsOk" suffix="const"><seealso>

<ref target="wxstreambaselasterror">LastError</ref>

</seealso><description>

Returns true if no error occurred on the stream.

</description></function></member>
<member class="wxStreamBase" name="LastError"><function type="wxStreamError" name="LastError" suffix="const"><description>

This function returns the last error.

\twocolwidtha{5cm}
<table>
<tr><td><b> wxSTREAM_NO_ERROR</b></td><td>No error occurred.</td></tr>
<tr><td><b> wxSTREAM_EOF</b></td><td>An End-Of-File occurred.</td></tr>
<tr><td><b> wxSTREAM_WRITE_ERROR</b></td><td>A generic error occurred on the last write call.</td></tr>
<tr><td><b> wxSTREAM_READ_ERROR</b></td><td>A generic error occurred on the last read call.</td></tr>
</table>

</description></function></member>
<member class="wxStreamBase" name="OnSysRead"><function type="size_t" name="OnSysRead"><parameters><parameter type="void&#42;" name=" buffer"></parameter><parameter type="size_t" name=" bufsize"></parameter></parameters><description>

Internal function. It is called when the stream wants to read data of the
specified size. It should return the size that was actually read.

</description></function></member>
<member class="wxStreamBase" name="OnSysSeek"><function type="off_t" name="OnSysSeek"><parameters><parameter type="off_t" name=" pos"></parameter><parameter type="wxSeekMode" name=" mode"></parameter></parameters><description>

Internal function. It is called when the stream needs to change the
current position.

</description></function></member>
<member class="wxStreamBase" name="OnSysTell"><function type="off_t" name="OnSysTell" suffix="const"><description>

Internal function. Is is called when the stream needs to know the
real position.

</description></function></member>
<member class="wxStreamBase" name="OnSysWrite"><function type="size_t" name="OnSysWrite"><parameters><parameter type="void &#42;" name="buffer"></parameter><parameter type="size_t" name=" bufsize"></parameter></parameters><description>

See <ref target="wxstreambaseonsysread">OnSysRead</ref>.

</description></function></member>
<member class="wxStreamBase" name="GetSize"><function type="size_t" name="GetSize" suffix="const"><description>

This function returns the size of the stream. For example, for a file it is the size of
the file.

\wxheading{Warning}

There are streams which do not have size by definition, such as socket streams.
In that cases, GetSize returns an invalid size represented by

<pre>
~(size_t)0
</pre>

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxStreamBuffer">
<description>

</description>
<parents>


</parents>
<includes>
<header name="wx/stream.h"/></includes>
<seealso>

<ref target="wxstreambase">wxStreamBase</ref>

</seealso>
<members>
<member class="wxStreamBuffer" name="wxStreamBuffer"><function type="" name="wxStreamBuffer"><parameters><parameter type="wxStreamBase&amp;" name=" stream"></parameter><parameter type="BufMode" name=" mode"></parameter></parameters><description>

Constructor, creates a new stream buffer using <i> stream</i> as a parent stream
and <i> mode</i> as the IO mode. <i> mode</i> can be: wxStreamBuffer::read,
wxStreamBuffer::write, wxStreamBuffer::read_write.

One stream can have many stream buffers but only one is used internally to
pass IO call (e.g. wxInputStream::Read() -&gt; wxStreamBuffer::Read()), but you
can call directly wxStreamBuffer::Read without any problems. Note that
all errors and messages linked to the stream are stored in the stream, not
the stream buffers:

<pre>
  streambuffer.Read(...);
  streambuffer2.Read(...); /&#42; This call erases previous error messages set by 
                              ``streambuffer'' &#42;/
</pre>

</description></function>
<function type="" name="wxStreamBuffer"><parameters><parameter type="BufMode" name=" mode"></parameter></parameters><description>

Constructor, creates a new empty stream buffer which won't flush any data
to a stream. <i> mode</i> specifies the type of the buffer (read, write, read_write).
This stream buffer has the advantage to be stream independent and to
work only on memory buffers but it is still compatible with the rest of the
wxStream classes. You can write, read to this special stream and it will
grow (if it is allowed by the user) its internal buffer. Briefly, it has all
functionality of a ``normal'' stream.

\wxheading{Warning}

The &quot;read_write&quot; mode may not work: it isn't completely finished.

</description></function>
<function type="" name="wxStreamBuffer"><parameters><parameter type="const wxStreamBuffer&amp;" name="buffer"></parameter></parameters><seealso>

<ref target="wxstreambuffersetbufferio">wxStreamBuffer:SetBufferIO</ref>

</seealso><description>

Constructor. It initializes the stream buffer with the data of the specified
stream buffer. The new stream buffer has the same attributes, size, position
and they share the same buffer. This will cause problems if the stream to
which the stream buffer belong is destroyed and the newly cloned stream
buffer continues to be used, trying to call functions in the (destroyed)
stream. It is advised to use this feature only in very local area of the
program.

</description></function></member>
<member class="wxStreamBuffer" name="~wxStreamBuffer"><function type="" name="wxStreamBuffer"><parameters></parameters><description>

Destructor. It finalizes all IO calls and frees all internal buffers if
necessary.

</description></function></member>
<member class="wxStreamBuffer" name="Read"><function type="size_t" name="Read"><parameters><parameter type="void &#42;" name="buffer"></parameter><parameter type="size_t " name="size"></parameter></parameters><returnvalue>

It returns the size of the data read. If the returned size is different of the specified 
<i> size</i>, an error has occurred and should be tested using 
<ref target="wxstreambaselasterror">LastError</ref>.

</returnvalue><description>

Reads a block of the specified <i> size</i> and stores the data in <i> buffer</i>.
This function tries to read from the buffer first and if more data has been
requested, reads more data from the associated stream and updates the buffer
accordingly until all requested data is read.

</description></function>
<function type="size_t" name="Read"><parameters><parameter type="wxStreamBuffer &#42;" name="buffer"></parameter></parameters><seealso>

<ref target="wxstreambufferwrite">wxStreamBuffer::Write</ref>

</seealso><description>

Reads a <i> buffer</i>. The function returns when <i> buffer</i> is full or when there isn't
data anymore in the current buffer.

</description></function></member>
<member class="wxStreamBuffer" name="Write"><function type="size_t" name="Write"><parameters><parameter type="const void &#42;" name="buffer"></parameter><parameter type="size_t " name="size"></parameter></parameters><description>

Writes a block of the specified <i> size</i> using data of <i> buffer</i>. The data
are cached in a buffer before being sent in one block to the stream.

</description></function>
<function type="size_t" name="Write"><parameters><parameter type="wxStreamBuffer &#42;" name="buffer"></parameter></parameters><description>

See <ref target="wxstreambufferread">Read</ref>.

</description></function></member>
<member class="wxStreamBuffer" name="GetChar"><function type="char" name="GetChar"><seealso>

<ref target="wxstreambufferread">wxStreamBuffer::Read</ref>

</seealso><description>

Gets a single char from the stream buffer. It acts like the Read call.

\wxheading{Problem}

You aren't directly notified if an error occurred during the IO call.

</description></function></member>
<member class="wxStreamBuffer" name="PutChar"><function type="void" name="PutChar"><parameters><parameter type="char " name="c"></parameter></parameters><seealso>

<ref target="wxstreambufferwrite">wxStreamBuffer::Read</ref>

</seealso><description>

Puts a single char to the stream buffer.

\wxheading{Problem}

You aren't directly notified if an error occurred during the IO call.

</description></function></member>
<member class="wxStreamBuffer" name="Tell"><function type="off_t" name="Tell" suffix="const"><returnvalue>

Returns the current position in the stream if possible, wxInvalidOffset in the
other case.

</returnvalue><description>

Gets the current position in the stream. This position is calculated from
the <i> real</i> position in the stream and from the internal buffer position: so
it gives you the position in the <i> real</i> stream counted from the start of
the stream.

</description></function></member>
<member class="wxStreamBuffer" name="Seek"><function type="off_t" name="Seek"><parameters><parameter type="off_t " name="pos"></parameter><parameter type="wxSeekMode " name="mode"></parameter></parameters><returnvalue>

Upon successful completion, it returns the new offset as measured in bytes from
the beginning of the stream. Otherwise, it returns wxInvalidOffset.

</returnvalue><description>

Changes the current position.

<i> mode</i> may be one of the following:

\twocolwidtha{5cm}
<table>
<tr><td><b> wxFromStart</b></td><td>The position is counted from the start of the stream.</td></tr>
<tr><td><b> wxFromCurrent</b></td><td>The position is counted from the current position of the stream.</td></tr>
<tr><td><b> wxFromEnd</b></td><td>The position is counted from the end of the stream.</td></tr>
</table>

</description></function></member>
<member class="wxStreamBuffer" name="ResetBuffer"><function type="void" name="ResetBuffer"><description>

Resets to the initial state variables concerning the buffer.

</description></function></member>
<member class="wxStreamBuffer" name="SetBufferIO"><function type="void" name="SetBufferIO"><parameters><parameter type="char&#42;" name=" buffer_start"></parameter><parameter type="char&#42;" name=" buffer_end"></parameter></parameters><seealso>

<ref target="wxstreambufconst">wxStreamBuffer constructor</ref><br/>
<ref target="wxstreambufferfixed">wxStreamBuffer::Fixed</ref><br/>
<ref target="wxstreambufferflushable">wxStreamBuffer::Flushable</ref>

</seealso><remarks>

When you use this function, you will have to destroy the IO buffers yourself
after the stream buffer is destroyed or don't use it anymore.
In the case you use it with an empty buffer, the stream buffer will not resize
it when it is full.

</remarks><description>

Specifies which pointers to use for stream buffering. You need to pass a pointer on the
start of the buffer end and another on the end. The object will use this buffer
to cache stream data. It may be used also as a source/destination buffer when
you create an empty stream buffer (See <ref target="wxstreambufconst">wxStreamBuffer::wxStreamBuffer</ref>).

</description></function>
<function type="void" name="SetBufferIO"><parameters><parameter type="size_t" name=" bufsize"></parameter></parameters><seealso>

<ref target="wxstreambufferfixed">wxStreamBuffer::Fixed</ref><br/>
<ref target="wxstreambufferflushable">wxStreamBuffer::Flushable</ref>

</seealso><description>

Destroys or invalidates the previous IO buffer and allocates a new one of the
specified size.

\wxheading{Warning}

All previous pointers aren't valid anymore.

\wxheading{Remark}

The created IO buffer is growable by the object.

</description></function></member>
<member class="wxStreamBuffer" name="GetBufferStart"><function type="char &#42;" name="GetBufferStart" suffix="const"><description>

Returns a pointer on the start of the stream buffer.

</description></function></member>
<member class="wxStreamBuffer" name="GetBufferEnd"><function type="char &#42;" name="GetBufferEnd" suffix="const"><description>

Returns a pointer on the end of the stream buffer.

</description></function></member>
<member class="wxStreamBuffer" name="GetBufferPos"><function type="char &#42;" name="GetBufferPos" suffix="const"><description>

Returns a pointer on the current position of the stream buffer.

</description></function></member>
<member class="wxStreamBuffer" name="GetIntPosition"><function type="off_t" name="GetIntPosition" suffix="const"><description>

Returns the current position (counted in bytes) in the stream buffer.

</description></function></member>
<member class="wxStreamBuffer" name="SetIntPosition"><function type="void" name="SetIntPosition"><description>

Sets the current position (in bytes) in the stream buffer.

\wxheading{Warning}

Since it is a very low-level function, there is no check on the position:
specify an invalid position can induce unexpected results.

</description></function></member>
<member class="wxStreamBuffer" name="GetLastAccess"><function type="size_t" name="GetLastAccess" suffix="const"><description>

Returns the amount of bytes read during the last IO call to the parent stream.

</description></function></member>
<member class="wxStreamBuffer" name="Fixed"><function type="void" name="Fixed"><parameters><parameter type="bool" name=" fixed"></parameter></parameters><seealso>

<ref target="wxstreambuffersetbufferio">wxStreamBuffer::SetBufferIO</ref>

</seealso><description>

Toggles the fixed flag. Usually this flag is toggled at the same time as 
<i> flushable</i>. This flag allows (when it has the false value) or forbids
(when it has the true value) the stream buffer to resize dynamically the IO buffer.

</description></function></member>
<member class="wxStreamBuffer" name="Flushable"><function type="void" name="Flushable"><parameters><parameter type="bool" name=" flushable"></parameter></parameters><description>

Toggles the flushable flag. If <i> flushable</i> is disabled, no data are sent
to the parent stream.

</description></function></member>
<member class="wxStreamBuffer" name="FlushBuffer"><function type="bool" name="FlushBuffer"><description>

Flushes the IO buffer.

</description></function></member>
<member class="wxStreamBuffer" name="FillBuffer"><function type="bool" name="FillBuffer"><description>

Fill the IO buffer.

</description></function></member>
<member class="wxStreamBuffer" name="GetDataLeft"><function type="size_t" name="GetDataLeft"><description>

Returns the amount of available data in the buffer.

</description></function></member>
<member class="wxStreamBuffer" name="Stream"><function type="wxStreamBase&#42;" name="Stream"><description>

Returns the parent stream of the stream buffer.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxStreamToTextRedirector">
<description>
<p class="classdesc">
This class can be used to (temporarily) redirect all output sent to a C++
ostream object to a <ref target="wxtextctrl">wxTextCtrl</ref> instead.</p><p class="classdesc"><b> NB:</b> Some compilers and/or build configurations don't support multiply
inheriting <ref target="wxtextctrl">wxTextCtrl</ref> from <tt> std::streambuf</tt> in which
case this class is not compiled in. You also must have <tt> wxUSE_STD_IOSTREAM</tt> 
option on (i.e. set to 1) in your setup.h to be able to use it. Under Unix,
specify <tt> --enable-std_iostreams</tt> switch when running configure for this.</p><p class="classdesc">Example of usage:
<pre>
  using namespace std;

  wxTextCtrl &#42;text = new wxTextCtrl(...);

  {
    wxStreamToTextRedirector redirect(text);

    // this goes to the text control
    cout &lt;&lt; &quot;Hello, text!&quot; &lt;&lt; endl;
  }

  // this goes soemwhere else, presumably to stdout
  cout &lt;&lt; &quot;Hello, console!&quot; &lt;&lt; endl;
</pre></p>
</description>
<parents></parents>
<includes>
<header name="wx/textctrl.h"/></includes>
<seealso>

<ref target="wxtextctrl">wxTextCtrl</ref>

</seealso>
<members>
<member class="wxStreamToTextRedirector" name="wxStreamToTextRedirector"><function type="" name="wxStreamToTextRedirector"><parameters><parameter type="wxTextCtrl " name="&#42;text"></parameter><parameter type="ostream &#42;" name="ostr" value="NULL">The C++ stream to redirect, <i> cout</i> is used if it is NULL</parameter></parameters><description>

The constructor starts redirecting output sent to <i> ostr</i> or <i> cout</i> for
the default parameter value to the text control <i> text</i>.







</description></function></member>
<member class="wxStreamToTextRedirector" name="~wxStreamToTextRedirector"><function type="" name="~wxStreamToTextRedirector"><description>

When a wxStreamToTextRedirector object is destroyed, the redirection is ended
and any output sent to the C++ ostream which had been specified at the time of
the object construction will go to its original destination.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxString">
<description>
<p class="classdesc">
wxString is a class representing a character string. Please see the 
<ref target="wxstringoverview">wxString overview</ref> for more information about it. As explained
there, wxString implements about 90\are not supported, nor all methods which use them).
These standard functions are not documented in this manual so please see the STL documentation.
The behaviour of all these functions is identical to the behaviour described
there.</p><p class="classdesc">You may notice that wxString sometimes has many functions which do the same
thing like, for example, <ref target="wxstringlength">Length()</ref>, 
<ref target="wxstringlen">Len()</ref> and <tt> length()</tt> which all return the string
length. In all cases of such duplication the <tt> std::string</tt>-compatible
method (<tt> length()</tt> in this case, always the lowercase version) should be
used as it will ensure smoother transition to <tt> std::string</tt> when wxWindows
starts using it instead of wxString.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/string.h"/></includes>
<predefs>

Objects:

<b> wxEmptyString</b>

</predefs>
<seealso>

\overview{Overview}{wxstringoverview}

</seealso>
<members>
<member class="wxString" name=""></member>
<member class="wxString" name=""></member>
<member class="wxString" name=""></member>
<member class="wxString" name=""></member>
<member class="wxString" name=""></member>
<member class="wxString" name=""></member>
<member class="wxString" name=""></member>
<member class="wxString" name=""></member>
<member class="wxString" name=""></member>
<member class="verbatim}
    // the following 2 snippets are equivalent

    wxString s = &quot;...&quot;;
    s += wxString" name="Format(&quot;
    wxString s;
    s.Printf(&quot;...\end{verbatim"></member>
<member class="wxString" name=""></member>
<member class="wxString" name=""></member>
<member class="wxWindows 1.xx compatibility functions}

These functions are deprecated, please consider using new wxWindows 2.0
functions instead of them (or, even better, std" name="string compatible variants).

\helpref{SubString"></member>
<member class="std" name="string compatibility functions"></member>
<member class="wxString" name="wxString"><function type="" name="wxString"><description>

Default constructor.

</description></function>
<function type="" name="wxString"><parameters><parameter type="const wxString&amp;" name=" x"></parameter></parameters><description>

Copy constructor.

</description></function>
<function type="" name="wxString"><parameters><parameter type="char" name=" ch"></parameter><parameter type="size_t" name="n" value="1"></parameter></parameters><description>

Constructs a string of <i> n</i> copies of character <i> ch</i>.

</description></function>
<function type="" name="wxString"><parameters><parameter type="const char&#42;" name=" psz"></parameter><parameter type="size_t" name="nLength" value="wxSTRING_MAXLEN"></parameter></parameters><description>

Takes first <i> nLength</i> characters from the C string <i> psz</i>.
The default value of wxSTRING_MAXLEN means to take all the string.

Note that this constructor may be used even if <i> psz</i> points to a buffer
with binary data (i.e. containing <tt> NUL</tt> characters) as long as you provide
the correct value for <i> nLength</i>. However, the default form of it works
only with strings without intermediate <tt> NUL</tt>s because it uses 
<tt> strlen()</tt> to calculate the effective length and it would not give correct
results otherwise.

</description></function>
<function type="" name="wxString"><parameters><parameter type="const unsigned char&#42;" name=" psz"></parameter><parameter type="size_t" name="nLength" value="wxSTRING_MAXLEN"></parameter></parameters><description>

For compilers using unsigned char: takes first <i> nLength</i> characters from the C string <i> psz</i>.
The default value of wxSTRING_MAXLEN means take all the string.

</description></function>
<function type="" name="wxString"><parameters><parameter type="const wchar_t&#42;" name=" psz"></parameter></parameters><description>

Constructs a string from the wide (UNICODE) string.

</description></function></member>
<member class="wxString" name="~wxString"><function type="" name="~wxString"><description>

String destructor. Note that this is not virtual, so wxString must not be inherited from.

</description></function></member>
<member class="wxString" name="Alloc"><function type="void" name="Alloc"><parameters><parameter type="size_t" name=" nLen"></parameter></parameters><description>

Preallocate enough space for wxString to store <i> nLen</i> characters. This function
may be used to increase speed when the string is constructed by repeated
concatenation as in

<pre>

// delete all vowels from the string
wxString DeleteAllVowels(const wxString&amp; original)
{
    wxString result;

    size_t len = original.length();

    result.Alloc(len);

    for ( size_t n = 0; n &lt; len; n++ )
    {
        if ( strchr(&quot;aeuio&quot;, tolower(original&#91;n])) == NULL )
            result += original&#91;n];
    }

    return result;
}

</pre>

because it will avoid the need of reallocating string memory many times (in case
of long strings). Note that it does not set the maximal length of a string - it
will still expand if more than <i> nLen</i> characters are stored in it. Also, it
does not truncate the existing string (use 
<ref target="wxstringtruncate">Truncate()</ref> for this) even if its current length is
greater than <i> nLen</i>

</description></function></member>
<member class="wxString" name="Append"><function type="wxString&amp;" name="Append"><parameters><parameter type="const char&#42;" name=" psz"></parameter></parameters><description>

Concatenates <i> psz</i> to this string, returning a reference to it.

</description></function>
<function type="wxString&amp;" name="Append"><parameters><parameter type="char" name=" ch"></parameter><parameter type="int" name="count" value="1"></parameter></parameters><description>

Concatenates character <i> ch</i> to this string, <i> count</i> times, returning a reference
to it.

</description></function></member>
<member class="wxString" name="AfterFirst"><function type="wxString" name="AfterFirst" suffix="const"><parameters><parameter type="char" name=" ch"></parameter></parameters><description>

Gets all the characters after the first occurrence of <i> ch</i>.
Returns the empty string if <i> ch</i> is not found.

</description></function></member>
<member class="wxString" name="AfterLast"><function type="wxString" name="AfterLast" suffix="const"><parameters><parameter type="char" name=" ch"></parameter></parameters><description>

Gets all the characters after the last occurrence of <i> ch</i>.
Returns the whole string if <i> ch</i> is not found.

</description></function></member>
<member class="wxString" name="BeforeFirst"><function type="wxString" name="BeforeFirst" suffix="const"><parameters><parameter type="char" name=" ch"></parameter></parameters><description>

Gets all characters before the first occurrence of <i> ch</i>.
Returns the whole string if <i> ch</i> is not found.

</description></function></member>
<member class="wxString" name="BeforeLast"><function type="wxString" name="BeforeLast" suffix="const"><parameters><parameter type="char" name=" ch"></parameter></parameters><description>

Gets all characters before the last occurrence of <i> ch</i>.
Returns the empty string if <i> ch</i> is not found.

</description></function></member>
<member class="wxString" name="c_str"><function type="const char &#42;" name="c_str" suffix="const"><description>

Returns a pointer to the string data.

</description></function></member>
<member class="wxString" name="Clear"><function type="void" name="Clear"><description>

Empties the string and frees memory occupied by it.

See also: <ref target="wxstringempty">Empty</ref>

</description></function></member>
<member class="wxString" name="Cmp"><function type="int" name="Cmp" suffix="const"><parameters><parameter type="const char&#42;" name=" psz"></parameter></parameters><description>

Case-sensitive comparison.

Returns a positive value if the string is greater than the argument, zero if
it is equal to it or a negative value if it is less than the argument (same semantics
as the standard <i> strcmp()</i> function).

See also <ref target="wxstringcmpnocase">CmpNoCase</ref>, <ref target="wxstringissameas">IsSameAs</ref>.

</description></function></member>
<member class="wxString" name="CmpNoCase"><function type="int" name="CmpNoCase" suffix="const"><parameters><parameter type="const char&#42;" name=" psz"></parameter></parameters><description>

Case-insensitive comparison.

Returns a positive value if the string is greater than the argument, zero if
it is equal to it or a negative value if it is less than the argument (same semantics
as the standard <i> strcmp()</i> function).

See also <ref target="wxstringcmp">Cmp</ref>, <ref target="wxstringissameas">IsSameAs</ref>.

</description></function></member>
<member class="wxString" name="CompareTo"><function type="int" name="CompareTo" suffix="const"><parameters><parameter type="const char&#42;" name=" psz"></parameter><parameter type="caseCompare" name="cmp" value="exact"></parameter></parameters><description>

Case-sensitive comparison. Returns 0 if equal, 1 if greater or -1 if less.

</description></function></member>
<member class="wxString" name="Contains"><function type="bool" name="Contains" suffix="const"><parameters><parameter type="const wxString&amp;" name=" str"></parameter></parameters><description>

Returns 1 if target appears anyhere in wxString; else 0.

</description></function></member>
<member class="wxString" name="Empty"><function type="void" name="Empty"><description>

Makes the string empty, but doesn't free memory occupied by the string.

See also: <ref target="wxstringclear">Clear()</ref>.

</description></function></member>
<member class="wxString" name="Find"><function type="int" name="Find" suffix="const"><parameters><parameter type="char" name=" ch"></parameter><parameter type="bool" name="fromEnd" value="false"></parameter></parameters><description>

Searches for the given character. Returns the starting index, or -1 if not found.

</description></function>
<function type="int" name="Find" suffix="const"><parameters><parameter type="const char&#42;" name=" sz"></parameter></parameters><description>

Searches for the given string. Returns the starting index, or -1 if not found.

</description></function></member>
<member class="wxString" name="First"><function type="int" name="First"><parameters><parameter type="char" name=" c"></parameter></parameters><description>

</description></function>
<function type="int" name="First" suffix="const"><parameters><parameter type="const char&#42;" name=" psz"></parameter></parameters><description>

</description></function>
<function type="int" name="First" suffix="const"><parameters><parameter type="const wxString&amp;" name=" str"></parameter></parameters><description>

Same as <ref target="wxstringfind">Find</ref>.

</description></function></member>
<member class="wxString" name="Format"><function type="static wxString" name="Format"><parameters><parameter type="const wxChar " name="&#42;format"></parameter><parameter type="" name="..."></parameter></parameters><seealso>

<ref target="wxstringformatv">FormatV</ref><ref target="wxstringprintf">Printf</ref>

</seealso><description></description></function></member>
<member class="wxString" name="FormatV"><function type="static wxString" name="Format"><parameters><parameter type="const wxChar " name="&#42;format"></parameter><parameter type="va_list " name="argptr"></parameter></parameters><seealso>

<ref target="wxstringformat">Format</ref><ref target="wxstringprintfv">PrintfV</ref>

</seealso><description></description></function></member>
<member class="wxString" name="Freq"><function type="int" name="Freq" suffix="const"><parameters><parameter type="char " name="ch"></parameter></parameters><description>

Returns the number of occurrences of <i> ch</i> in the string.

</description></function></member>
<member class="wxString" name="GetChar"><function type="char" name="GetChar" suffix="const"><parameters><parameter type="size_t" name=" n"></parameter></parameters><description>

Returns the character at position <i> n</i> (read-only).

</description></function></member>
<member class="wxString" name="GetData"><function type="const char&#42;" name="GetData" suffix="const"><description>

wxWindows compatibility conversion. Returns a constant pointer to the data in the string.

</description></function></member>
<member class="wxString" name="GetWritableChar"><function type="char&amp;" name="GetWritableChar"><parameters><parameter type="size_t" name=" n"></parameter></parameters><description>

Returns a reference to the character at position <i> n</i>.

</description></function></member>
<member class="wxString" name="GetWriteBuf"><function type="wxChar&#42;" name="GetWriteBuf"><parameters><parameter type="size_t" name=" len"></parameter></parameters><description>

Returns a writable buffer of at least <i> len</i> bytes.
It returns a pointer to a new memory block, and the
existing data will not be copied.

Call <ref target="wxstringungetwritebuf">wxString::UngetWriteBuf</ref> as soon as possible
to put the string back into a reasonable state.

</description></function></member>
<member class="wxString" name="Index"><function type="size_t" name="Index" suffix="const"><parameters><parameter type="char" name=" ch"></parameter></parameters><description>

</description></function>
<function type="size_t" name="Index" suffix="const"><parameters><parameter type="const char&#42;" name=" sz"></parameter></parameters><description>

Same as <ref target="wxstringfind">wxString::Find</ref>.

</description></function>
<function type="size_t" name="Index" suffix="const"><parameters><parameter type="const char&#42;" name=" sz"></parameter><parameter type="bool" name="caseSensitive" value="true"></parameter><parameter type="bool" name="fromEnd" value="false"></parameter></parameters><description>

Search the element in the array, starting from either side.

If <i> fromEnd</i> is true, reverse search direction.

If <b> caseSensitive</b>, comparison is case sensitive (the default).

Returns the index of the first item matched, or wxNOT_FOUND.

</description></function></member>
<member class="wxString" name="IsAscii"><function type="bool" name="IsAscii" suffix="const"><description>

Returns true if the string contains only ASCII characters.

</description></function></member>
<member class="wxString" name="IsEmpty"><function type="bool" name="IsEmpty" suffix="const"><description>

Returns true if the string is empty.

</description></function></member>
<member class="wxString" name="IsNull"><function type="bool" name="IsNull" suffix="const"><description>

Returns true if the string is empty (same as <ref target="wxstringisempty">IsEmpty</ref>).

</description></function></member>
<member class="wxString" name="IsNumber"><function type="bool" name="IsNumber" suffix="const"><description>

Returns true if the string is an integer (with possible sign).

</description></function></member>
<member class="wxString" name="IsSameAs"><function type="bool" name="IsSameAs" suffix="const"><parameters><parameter type="const char&#42;" name=" psz"></parameter><parameter type="bool" name="caseSensitive" value="true"></parameter></parameters><description>

Test for string equality, case-sensitive (default) or not.

caseSensitive is true by default (case matters).

Returns true if strings are equal, false otherwise.

See also <ref target="wxstringcmp">Cmp</ref>, <ref target="wxstringcmpnocase">CmpNoCase</ref>, <ref target="wxstringissameas2">IsSameAs</ref>

</description></function></member>
<member class="wxString" name="IsSameAs"><function type="bool" name="IsSameAs" suffix="const"><parameters><parameter type="char" name=" c"></parameter><parameter type="bool" name="caseSensitive" value="true"></parameter></parameters><description>

Test whether the string is equal to the single character <i> c</i>. The test is
case-sensitive if <i> caseSensitive</i> is true (default) or not if it is false.

Returns true if the string is equal to the character, false otherwise.

See also <ref target="wxstringcmp">Cmp</ref>, <ref target="wxstringcmpnocase">CmpNoCase</ref>, <ref target="wxstringissameas">IsSameAs</ref>

</description></function></member>
<member class="wxString" name="IsWord"><function type="bool" name="IsWord" suffix="const"><description>

Returns true if the string is a word. TODO: what's the definition of a word?

</description></function></member>
<member class="wxString" name="Last"><function type="char" name="Last" suffix="const"><description>

Returns the last character.

</description></function>
<function type="char&amp;" name="Last"><description>

Returns a reference to the last character (writable).

</description></function></member>
<member class="wxString" name="Left"><function type="wxString" name="Left" suffix="const"><parameters><parameter type="size_t" name=" count"></parameter></parameters><description>

Returns the first <i> count</i> characters of the string.

</description></function></member>
<member class="wxString" name="Len"><function type="size_t" name="Len" suffix="const"><description>

Returns the length of the string.

</description></function></member>
<member class="wxString" name="Length"><function type="size_t" name="Length" suffix="const"><description>

Returns the length of the string (same as Len).

</description></function></member>
<member class="wxString" name="Lower"><function type="wxString" name="Lower" suffix="const"><description>

Returns this string converted to the lower case.

</description></function></member>
<member class="wxString" name="LowerCase"><function type="void" name="LowerCase"><description>

Same as MakeLower.

</description></function></member>
<member class="wxString" name="MakeLower"><function type="wxString&amp;" name="MakeLower"><description>

Converts all characters to lower case and returns the result.

</description></function></member>
<member class="wxString" name="MakeUpper"><function type="wxString&amp;" name="MakeUpper"><description>

Converts all characters to upper case and returns the result.

</description></function></member>
<member class="wxString" name="Matches"><function type="bool" name="Matches" suffix="const"><parameters><parameter type="const char&#42;" name=" szMask"></parameter></parameters><description>

Returns true if the string contents matches a mask containing '&#42;' and '?'.

</description></function></member>
<member class="wxString" name="Mid"><function type="wxString" name="Mid" suffix="const"><parameters><parameter type="size_t" name=" first"></parameter><parameter type="size_t" name="count" value="wxSTRING_MAXLEN"></parameter></parameters><description>

Returns a substring starting at <i> first</i>, with length <i> count</i>, or the rest of
the string if <i> count</i> is the default value.

</description></function></member>
<member class="wxString" name="Pad"><function type="wxString&amp;" name="Pad"><parameters><parameter type="size_t" name=" count"></parameter><parameter type="char" name="pad" value="'"></parameter><parameter type="bool" name="fromRight" value="true"></parameter></parameters><description>

Adds <i> count</i> copies of <i> pad</i> to the beginning, or to the end of the string (the default).

Removes spaces from the left or from the right (default).

</description></function></member>
<member class="wxString" name="Prepend"><function type="wxString&amp;" name="Prepend"><parameters><parameter type="const wxString&amp;" name=" str"></parameter></parameters><description>

Prepends <i> str</i> to this string, returning a reference to this string.

</description></function></member>
<member class="wxString" name="Printf"><function type="int" name="Printf"><parameters><parameter type="const char&#42; " name="pszFormat"></parameter><parameter type="" name="..."></parameter></parameters><description>

Similar to the standard function <i> sprintf()</i>. Returns the number of
characters written, or an integer less than zero on error.

<b> NB:</b> This function will use a safe version of <i> vsprintf()</i> (usually called 
<i> vsnprintf()</i>) whenever available to always allocate the buffer of correct
size. Unfortunately, this function is not available on all platforms and the
dangerous <i> vsprintf()</i> will be used then which may lead to buffer overflows.

</description></function></member>
<member class="wxString" name="PrintfV"><function type="int" name="PrintfV"><parameters><parameter type="const char&#42; " name="pszFormat"></parameter><parameter type="va_list" name=" argPtr"></parameter></parameters><description>

Similar to vprintf. Returns the number of characters written, or an integer less than zero
on error.

</description></function></member>
<member class="wxString" name="Remove"><function type="wxString&amp;" name="Remove"><parameters><parameter type="size_t" name=" pos"></parameter></parameters><description>

Same as Truncate. Removes the portion from <i> pos</i> to the end of the string.

</description></function>
<function type="wxString&amp;" name="Remove"><parameters><parameter type="size_t" name=" pos"></parameter><parameter type="size_t" name=" len"></parameter></parameters><description>

Removes the <i> len</i> characters from the string, starting at <i> pos</i>.

</description></function></member>
<member class="wxString" name="RemoveLast"><function type="wxString&amp;" name="RemoveLast"><description>

Removes the last character.

</description></function></member>
<member class="wxString" name="Replace"><function type="size_t" name="Replace"><parameters><parameter type="const char&#42;" name=" szOld"></parameter><parameter type="const char&#42;" name=" szNew"></parameter><parameter type="bool" name="replaceAll" value="true"></parameter></parameters><description>

Replace first (or all) occurrences of substring with another one.

<i> replaceAll</i>: global replace (default), or only the first occurrence.

Returns the number of replacements made.

</description></function></member>
<member class="wxString" name="Right"><function type="wxString" name="Right" suffix="const"><parameters><parameter type="size_t" name=" count"></parameter></parameters><description>

Returns the last <i> count</i> characters.

</description></function></member>
<member class="wxString" name="SetChar"><function type="void" name="SetChar"><parameters><parameter type="size_t" name=" n"></parameter><parameter type="char" name="ch"></parameter></parameters><description>

Sets the character at position <i> n</i>.

</description></function></member>
<member class="wxString" name="Shrink"><function type="void" name="Shrink"><description>

Minimizes the string's memory. This can be useful after a call to 
<ref target="wxstringalloc">Alloc()</ref> if too much memory were preallocated.

</description></function></member>
<member class="wxString" name="sprintf"><function type="void" name="sprintf"><parameters><parameter type="const char&#42; " name=" fmt"></parameter></parameters><description>

The same as Printf.

</description></function></member>
<member class="wxString" name="StartsWith"><function type="bool" name="StartsWith" suffix="const"><parameters><parameter type="const wxChar " name="&#42;prefix"></parameter><parameter type="wxString " name="&#42;rest" value="NULL"></parameter></parameters><description>

This function can be used to test if the string starts with the specified 
<i> prefix</i>. If it does, the function will return <tt> true</tt> and put the rest
of the string (i.e. after the prefix) into <i> rest</i> string if it is not 
<tt> NULL</tt>. Otherwise, the function returns <tt> false</tt> and doesn't modify the 
<i> rest</i>.

</description></function></member>
<member class="wxString" name="Strip"><function type="wxString" name="Strip" suffix="const"><parameters><parameter type="stripType" name="s" value="trailing"></parameter></parameters><description>

Strip characters at the front and/or end. The same as Trim except that it
doesn't change this string.

</description></function></member>
<member class="wxString" name="SubString"><function type="wxString" name="SubString" suffix="const"><parameters><parameter type="size_t" name=" from"></parameter><parameter type="size_t" name=" to"></parameter></parameters><description>

Deprecated, use <ref target="wxstringmid">Mid</ref> instead (but note that parameters
have different meaning).

Returns the part of the string between the indices <i> from</i> and <i> to</i>
inclusive.

</description></function></member>
<member class="wxString" name="ToDouble"><function type="bool" name="ToDouble" suffix="const"><parameters><parameter type="double" name=" &#42;val"></parameter></parameters><seealso>

<ref target="wxstringtolong">wxString::ToLong</ref>,<br/>
<ref target="wxstringtoulong">wxString::ToULong</ref>

</seealso><description>

Attempts to convert the string to a floating point number. Returns true on
success (the number is stored in the location pointed to by <i> val</i>) or false
if the string does not represent such number.

</description></function></member>
<member class="wxString" name="ToLong"><function type="bool" name="ToLong" suffix="const"><parameters><parameter type="long" name=" &#42;val"></parameter><parameter type="int " name="base" value="10"></parameter></parameters><seealso>

<ref target="wxstringtodouble">wxString::ToDouble</ref>,<br/>
<ref target="wxstringtoulong">wxString::ToULong</ref>

</seealso><description>

Attempts to convert the string to a signed integer in base <i> base</i>. Returns
<tt> true</tt> on success in which case the number is stored in the location
pointed to by <i> val</i> or <tt> false</tt> if the string does not represent a
valid number in the given base.

The value of <i> base</i> must be comprised between 2 and 36, inclusive, or
be a special value 0 which means that the usual rules of <tt> C</tt> numbers are
applied: if the number starts with <tt> 0x</tt> it is considered to be in base
16, if it starts with <tt> 0</tt> - in base 8 and in base 10 otherwise. Note
that you may not want to specify the base 0 if you are parsing the numbers
which may have leading zeroes as they can yield unexpected (to the user not
familiar with C) results.

</description></function></member>
<member class="wxString" name="ToULong"><function type="bool" name="ToULong" suffix="const"><parameters><parameter type="unsigned long" name=" &#42;val"></parameter><parameter type="int " name="base" value="10"></parameter></parameters><seealso>

<ref target="wxstringtodouble">wxString::ToDouble</ref>,<br/>
<ref target="wxstringtolong">wxString::ToLong</ref>

</seealso><description>

Attempts to convert the string to a ansigned integer in base <i> base</i>.
Returns <tt> true</tt> on success in which case the number is stored in the
location pointed to by <i> val</i> or <tt> false</tt> if the string does not
represent a valid number in the given base.

See <ref target="wxstringtolong">wxString::ToLong</ref> for the more detailed
description of the <i> base</i> parameter.

</description></function></member>
<member class="wxString" name="Trim"><function type="wxString&amp;" name="Trim"><parameters><parameter type="bool" name="fromRight" value="true"></parameter></parameters><description>

Removes spaces from the left or from the right (default).

</description></function></member>
<member class="wxString" name="Truncate"><function type="wxString&amp;" name="Truncate"><parameters><parameter type="size_t" name=" len"></parameter></parameters><description>

Truncate the string to the given length.

</description></function></member>
<member class="wxString" name="UngetWriteBuf"><function type="void" name="UngetWriteBuf"><description>

</description></function>
<function type="void" name="UngetWriteBuf"><parameters><parameter type="size_t " name="len"></parameter></parameters><description>

Puts the string back into a reasonable state (in which it can be used
normally), after
<ref target="wxstringgetwritebuf">wxString::GetWriteBuf</ref> was called.

The version of the function without the <i> len</i> parameter will calculate the
new string length itself assuming that the string is terminated by the first
<tt> NUL</tt> character in it while the second one will use the specified length
and thus is the only version which should be used with the strings with
embedded <tt> NUL</tt>s (it is also slightly more efficient as <tt> strlen()</tt> 
doesn't have to be called).

</description></function></member>
<member class="wxString" name="Upper"><function type="wxString" name="Upper" suffix="const"><description>

Returns this string converted to upper case.

</description></function></member>
<member class="wxString" name="UpperCase"><function type="void" name="UpperCase"><description>

The same as MakeUpper.

</description></function></member>
<member class="wxString" name="operator!"><function type="bool" name="operator!" suffix="const"><description>

Empty string is false, so !string will only return true if the string is empty.
This allows the tests for NULLness of a <i> const char &#42;</i> pointer and emptyness
of the string to look the same in the code and makes it easier to port old code
to wxString.

See also <ref target="wxstringisempty">IsEmpty()</ref>.

</description></function></member>
<member class="wxString" name="operator $=$"><function type="wxString&amp;" name="operator $=$"><parameters><parameter type="const wxString&amp;" name=" str"></parameter></parameters><description>

</description></function>
<function type="wxString&amp;" name="operator $=$"><parameters><parameter type="const char&#42;" name=" psz"></parameter></parameters><description>

</description></function>
<function type="wxString&amp;" name="operator $=$"><parameters><parameter type="char" name=" c"></parameter></parameters><description>

</description></function>
<function type="wxString&amp;" name="operator $=$"><parameters><parameter type="const unsigned char&#42;" name=" psz"></parameter></parameters><description>

</description></function>
<function type="wxString&amp;" name="operator $=$"><parameters><parameter type="const wchar_t&#42;" name=" pwz"></parameter></parameters><description>

Assignment: the effect of each operation is the same as for the corresponding
constructor (see <ref target="wxstringconstruct">wxString constructors</ref>).

</description></function></member>
<member class="wxString" name="operator $+$"><function type="wxString" name="operator $+$"><parameters><parameter type="const wxString&amp;" name=" x"></parameter><parameter type="const wxString&amp;" name=" y"></parameter></parameters><description>

</description></function>
<function type="wxString" name="operator $+$"><parameters><parameter type="const wxString&amp;" name=" x"></parameter><parameter type="const char&#42;" name=" y"></parameter></parameters><description>

</description></function>
<function type="wxString" name="operator $+$"><parameters><parameter type="const wxString&amp;" name=" x"></parameter><parameter type="char" name=" y"></parameter></parameters><description>

</description></function>
<function type="wxString" name="operator $+$"><parameters><parameter type="const char&#42;" name=" x"></parameter><parameter type="const wxString&amp;" name=" y"></parameter></parameters><description>

</description></function></member>
<member class="wxString" name="operator $+=$"><function type="void" name="operator $+=$"><parameters><parameter type="const wxString&amp;" name=" str"></parameter></parameters><description>

</description></function>
<function type="void" name="operator $+=$"><parameters><parameter type="const char&#42;" name=" psz"></parameter></parameters><description>

</description></function>
<function type="void" name="operator $+=$"><parameters><parameter type="char" name=" c"></parameter></parameters><description>

Concatenation in place: the argument is appended to the string.

</description></function></member>
<member class="wxString" name="operator &#91;]"><function type="char&amp;" name="operator &#91;]"><parameters><parameter type="size_t" name=" i"></parameter></parameters><description>

</description></function>
<function type="char" name="operator &#91;]"><parameters><parameter type="size_t" name=" i"></parameter></parameters><description>

</description></function>
<function type="char" name="operator &#91;]"><parameters><parameter type="int" name=" i"></parameter></parameters><description>

Element extraction.

</description></function></member>
<member class="wxString" name="operator ()"><function type="wxString" name="operator ()"><parameters><parameter type="size_t" name=" start"></parameter><parameter type="size_t" name=" len"></parameter></parameters><description>

Same as Mid (substring extraction).

</description></function></member>
<member class="wxString" name="operator \cinsert"><function type="wxString&amp;" name="operator \cinsert"><parameters><parameter type="const wxString&amp;" name=" str"></parameter></parameters><description>

</description></function>
<function type="wxString&amp;" name="operator \cinsert"><parameters><parameter type="const char&#42;" name=" psz"></parameter></parameters><description>

</description></function>
<function type="wxString&amp;" name="operator \cinsert"><parameters><parameter type="char " name="ch"></parameter></parameters><description>

Same as $+=$.

</description></function>
<function type="wxString&amp;" name="operator \cinsert"><parameters><parameter type="int" name=" i"></parameter></parameters><description>

</description></function>
<function type="wxString&amp;" name="operator \cinsert"><parameters><parameter type="float" name=" f"></parameter></parameters><description>

</description></function>
<function type="wxString&amp;" name="operator \cinsert"><parameters><parameter type="double" name=" d"></parameter></parameters><description>

These functions work as C++ stream insertion operators: they insert the given
value into the string. Precision or format cannot be set using them, you can use 
<ref target="wxstringprintf">Printf</ref> for this.

</description></function></member>
<member class="wxString" name="operator \cextract"><function type="friend istream&amp;" name="operator \cextract"><parameters><parameter type="istream&amp;" name=" is"></parameter><parameter type="wxString&amp;" name=" str"></parameter></parameters><description>

Extraction from a stream.

</description></function></member>
<member class="wxString" name="operator const char&#42;"><function type="" name="operator const char&#42;" suffix="const"><description>

Implicit conversion to a C string.

</description></function></member>
<member class="wxString" name=""></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxStringBuffer">
<description>
<p class="classdesc">
This tiny class allows to conveniently access the <ref target="wxstring">wxString</ref> 
internal buffer as a writable pointer without any risk to forget to restore
the string to the usable state later.</p><p class="classdesc">For example, assuming you have a low-level OS function called 
<tt> GetMeaningOfLifeAsString(char &#42;)</tt> returning the value in the provided
buffer (which must be writable, of course) you might call it like this:</p><p class="classdesc"><pre>
    wxString theAnswer;
    GetMeaningOfLifeAsString(wxStringBuffer(theAnswer, 1024));
    if ( theAnswer != &quot;42&quot; )
    {
        wxLogError(&quot;Something is very wrong!&quot;);
    }
</pre></p>
</description>
<parents>


</parents>
<includes>
<header name="wx/string.h"/></includes>
<members>
<member class="wxStringBuffer" name="wxStringBuffer"><function type="" name="wxStringBuffer"><parameters><parameter type="const wxString&amp; " name="str"></parameter><parameter type="size_t " name="len"></parameter></parameters><description>

Constructs a writable string buffer object associated with the given string
and containing enough space for at least <i> len</i> characters. Basically, this
is equivalent to calling <ref target="wxstringgetwritebuf">GetWriteBuf</ref> and
saving the result.

</description></function></member>
<member class="wxStringBuffer" name="~wxStringBuffer"><function type="" name="~wxStringBuffer"><description>

Restores the string passed to the constructor to the usable state by calling 
<ref target="wxstringungetwritebuf">UngetWriteBuf</ref> on it.

</description></function></member>
<member class="wxStringBuffer" name="operator wxChar &#42;"><function type="wxChar &#42;" name="operator wxChar &#42;" suffix="const"><description>

Returns the writable pointer to a buffer of the size at least equal to the
length specified in the constructor.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxStringClientData">
<description>
<p class="classdesc">
Predefined client data class for holding a string.</p>
</description>
<parents>
<classref name="wxClientData"/>

</parents>
<includes>
<header name="clntdata.h"/></includes>
<structs>

</structs>
<members>
<member class="wxStringClientData" name="wxStringClientData"><function type="" name="wxStringClientData"><description>

Empty constructor.

</description></function>
<function type="" name="wxStringClientData"><parameters><parameter type="const wxString&amp; " name="data"></parameter></parameters><description>

Create client data with string.

</description></function></member>
<member class="wxStringClientData" name="GetData"><function type="const wxString&amp;" name="GetData" suffix="const"><description>

Get string client data.

</description></function></member>
<member class="wxStringClientData" name="SetData"><function type="void" name="SetData"><parameters><parameter type="const wxString&amp; " name="data"></parameter></parameters><description>

Set string client data.

</description></function></member></members>
<supported>
</supported>
</class><class name="wxStringList">
<description>
<p class="classdesc">
<b> NB:</b> This class is obsolete, please don't use it any longer. You can use
either <ref target="wxarraystring">wxArrayString</ref> or a <ref target="wxlist">type safe</ref> 
list class instead.</p><p class="classdesc">A string list is a list which is assumed to contain strings.
Memory is allocated when strings are added to
the list, and deallocated by the destructor or by the <b> Delete</b>
member.</p>
</description>
<parents>
<classref name="wxList"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/list.h"/></includes>
<seealso>

<ref target="wxstring">wxString</ref><ref target="wxlist">wxList</ref>

</seealso>
<members>
<member class="wxStringList" name="wxStringList"><function type="" name="wxStringList"><description>

Constructor.

</description></function>
<function type="void" name="wxStringList"><parameters><parameter type="char&#42; " name="first"></parameter></parameters><description>

Constructor, taking NULL-terminated string argument list. wxStringList
allocates memory for the strings.

</description></function></member>
<member class="wxStringList" name="~wxStringList"><function type="" name="~wxStringList"><description>

Deletes string list, deallocating strings.

</description></function></member>
<member class="wxStringList" name="Add"><function type="wxNode &#42;" name="Add"><parameters><parameter type="const wxString&amp; " name="s"></parameter></parameters><description>

Adds string to list, allocating memory.

</description></function></member>
<member class="wxStringList" name="Clear"><function type="void" name="Clear"><description>

Clears all strings from the list.

</description></function></member>
<member class="wxStringList" name="Delete"><function type="void" name="Delete"><parameters><parameter type="const wxString&amp; " name="s"></parameter></parameters><description>

Searches for string and deletes from list, deallocating memory.

</description></function></member>
<member class="wxStringList" name="ListToArray"><function type="char&#42;" name="ListToArray"><parameters><parameter type="bool" name="new_copies" value="false"></parameter></parameters><description>

Converts the list to an array of strings, only allocating new memory if
<b> new_copies</b> is true.

</description></function></member>
<member class="wxStringList" name="Member"><function type="bool" name="Member"><parameters><parameter type="const wxString&amp; " name="s"></parameter></parameters><description>

Returns true if <b> s</b> is a member of the list (tested using <b> strcmp</b>).

</description></function></member>
<member class="wxStringList" name="Sort"><function type="void" name="Sort"><description>

Sorts the strings in ascending alphabetical order. Note that all nodes
(but not strings) get deallocated and new ones allocated.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxStringTokenizer">
<description>
<p class="classdesc">
wxStringTokenizer helps you to break a string up into a number of tokens. It
replaces the standard C function <tt> strtok()</tt> and also extends it in a
number of ways.</p><p class="classdesc">To use this class, you should create a wxStringTokenizer object, give it the
string to tokenize and also the delimiters which separate tokens in the string
(by default, white space characters will be used).</p><p class="classdesc">Then <ref target="wxstringtokenizergetnexttoken">GetNextToken</ref> may be called
repeatedly until it <ref target="wxstringtokenizerhasmoretokens">HasMoreTokens</ref> 
returns false.</p><p class="classdesc">For example:</p><p class="classdesc"><pre>

wxStringTokenizer tkz(&quot;first:second:third:fourth&quot;, &quot;:&quot;);
while ( tkz.HasMoreTokens() )
{
    wxString token = tkz.GetNextToken();

    // process token here
}
</pre></p><p class="classdesc">By default, wxStringTokenizer will behave in the same way as <tt> strtok()</tt> if
the delimiters string only contains white space characters but, unlike the
standard function, it will return empty tokens if this is not the case. This
is helpful for parsing strictly formatted data where the number of fields is
fixed but some of them may be empty (i.e. <tt> TAB</tt> or comma delimited text
files).</p><p class="classdesc">The behaviour is governed by the last 
<ref target="wxstringtokenizerwxstringtokenizer">constructor</ref>/<ref target="wxstringtokenizersetstring">SetString</ref> 
parameter <tt> mode</tt> which may be one of the following:</p><p class="classdesc">\twocolwidtha{5cm}<table>
<tr><td><tt> wxTOKEN_DEFAULT</tt></td><td>Default behaviour (as described above):
same as <tt> wxTOKEN_STRTOK</tt> if the delimiter string contains only
whitespaces, same as <tt> wxTOKEN_RET_EMPTY</tt> otherwise</td></tr>
<tr><td><tt> wxTOKEN_RET_EMPTY</tt></td><td>In this mode, the empty tokens in the
middle of the string will be returned, i.e. <tt> &quot;a::b:&quot;</tt> will be tokenized in
three tokens `a', `' and `b'.</td></tr>
<tr><td><tt> wxTOKEN_RET_EMPTY_ALL</tt></td><td>In this mode, empty trailing token
(after the last delimiter character) will be returned as well. The string as
above will contain four tokens: the already mentioned ones and another empty
one as the last one.</td></tr>
<tr><td><tt> wxTOKEN_RET_DELIMS</tt></td><td>In this mode, the delimiter character
after the end of the current token (there may be none if this is the last
token) is returned appended to the token. Otherwise, it is the same mode as 
<tt> wxTOKEN_RET_EMPTY</tt>.</td></tr>
<tr><td><tt> wxTOKEN_STRTOK</tt></td><td>In this mode the class behaves exactly like
the standard <tt> strtok()</tt> function. The empty tokens are never returned.</td></tr>
</table></p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/tokenzr.h"/></includes>
<members>
<member class="wxStringTokenizer" name="wxStringTokenizer"><function type="" name="wxStringTokenizer"><description>

Default constructor. You must call 
<ref target="wxstringtokenizersetstring">SetString</ref> before calling any other
methods.

</description></function>
<function type="" name="wxStringTokenizer"><parameters><parameter type="const wxString&amp; " name="str"></parameter><parameter type="const wxString&amp; " name="delims" value="&quot;"></parameter><parameter type="wxStringTokenizerMode " name="mode" value="wxTOKEN_DEFAULT"></parameter></parameters><description>

Constructor. Pass the string to tokenize, a string containing delimiters
and the mode specifying how the string should be tokenized.

</description></function></member>
<member class="wxStringTokenizer" name="CountTokens"><function type="int" name="CountTokens" suffix="const"><description>

Returns the number of tokens in the input string.

</description></function></member>
<member class="wxStringTokenizer" name="HasMoreTokens"><function type="bool" name="HasMoreTokens" suffix="const"><description>

Returns true if the tokenizer has further tokens, false if none are left.

</description></function></member>
<member class="wxStringTokenizer" name="GetNextToken"><function type="wxString" name="GetNextToken"><description>

Returns the next token or empty string if the end of string was reached.

</description></function></member>
<member class="wxStringTokenizer" name="GetPosition"><function type="size_t" name="GetPosition" suffix="const"><description>

Returns the current position (i.e. one index after the last returned
token or 0 if GetNextToken() has never been called) in the original
string.

</description></function></member>
<member class="wxStringTokenizer" name="GetString"><function type="wxString" name="GetString" suffix="const"><description>

Returns the part of the starting string without all token already extracted.

</description></function></member>
<member class="wxStringTokenizer" name="SetString"><function type="void" name="SetString"><parameters><parameter type="const wxString&amp; " name="to_tokenize"></parameter><parameter type="const wxString&amp; " name="delims" value="&quot;"></parameter><parameter type="wxStringTokenizerMode " name="mode" value="wxTOKEN_DEFAULT"></parameter></parameters><description>

Initializes the tokenizer.

Pass the string to tokenize, a string containing delimiters,
and the mode specifying how the string should be tokenized.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSysColourChangedEvent">
<description>
<p class="classdesc">
This class is used for system colour change events, which are generated
when the user changes the colour settings using the control panel.
This is only appropriate under Windows.</p>
</description>
<remarks>

The default event handler for this event propagates the event to child windows, since
Windows only sends the events to top-level windows. If
intercepting this event for a top-level window, remember to call the base class handler,
or to pass the event on to the window's children explicitly.

</remarks>
<parents>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_SYS_COLOUR_CHANGED(func)">Process a wxEVT_SYS_COLOUR_CHANGED event.</event></events>
<seealso>

<ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxSysColourChangedEvent" name="wxSysColourChanged"><function type="" name="wxSysColourChanged"><description>

Constructor.

</description></function></member></members>
<supported>
<platform name="gtk" status="N"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSystemOptions">
<description>
<p class="classdesc">
wxSystemOptions stores option/value pairs that wxWindows itself or
applications can use to alter behaviour at run-time. It can be
used to optimize behaviour that doesn't deserve a distinct API,
but is still important to be able to configure.</p><p class="classdesc">These options are currently recognised by wxWindows:</p><p class="classdesc">\twocolwidtha{7cm}
<table>
<tr><td><b> Option</b></td><td><b> Value</b></td></tr>
<tr><td>no-maskblt</td><td>1 to never use WIN32's MaskBlt function, 0 to allow it to be used where possible. Default: 0.<br/>In some circumstances the MaskBlt function can be slower than using the fallback code, especially if using
DC cacheing. By default, MaskBlt will be used where it is implemented by the operating system and driver.
</td></tr>
</table></p><p class="classdesc">The compile-time option to include or exclude this functionality
is wxUSE_SYSTEM_OPTIONS.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/sysopt.h"/></includes>
<members>
<member class="wxSystemOptions" name="wxSystemOptions"><function type="" name="wxSystemOptions"><description>

Default constructor. You don't need to create an instance of wxSystemOptions
since all of its functions are static.

</description></function></member>
<member class="wxSystemOptions" name="GetOption"><function type="wxString" name="GetOption" suffix="const"><parameters><parameter type="const wxString&amp;" name=" name"></parameter></parameters><seealso>

<ref target="wxsystemoptionssetoption">wxSystemOptions::SetOption</ref>,
<ref target="wxsystemoptionsgetoptionint">wxSystemOptions::GetOptionInt</ref>,
<ref target="wxsystemoptionshasoption">wxSystemOptions::HasOption</ref>

</seealso><description>

Gets an option. The function is case-insensitive to <i> name</i>.

</description></function></member>
<member class="wxSystemOptions" name="GetOptionInt"><function type="int" name="GetOptionInt" suffix="const"><parameters><parameter type="const wxString&amp;" name=" name"></parameter></parameters><seealso>

<ref target="wxsystemoptionssetoption">wxSystemOptions::SetOption</ref>,
<ref target="wxsystemoptionsgetoption">wxSystemOptions::GetOption</ref>,
<ref target="wxsystemoptionshasoption">wxSystemOptions::HasOption</ref>

</seealso><description>

Gets an option as an integer. The function is case-insensitive to <i> name</i>.

</description></function></member>
<member class="wxSystemOptions" name="HasOption"><function type="bool" name="HasOption" suffix="const"><parameters><parameter type="const wxString&amp;" name=" name"></parameter></parameters><seealso>

<ref target="wxsystemoptionssetoption">wxSystemOptions::SetOption</ref>,
<ref target="wxsystemoptionsgetoption">wxSystemOptions::GetOption</ref>,
<ref target="wxsystemoptionsgetoptionint">wxSystemOptions::GetOptionInt</ref>

</seealso><description>

Returns true if the given option is present. The function is case-insensitive to <i> name</i>.

</description></function></member>
<member class="wxSystemOptions" name="SetOption"><function type="void" name="SetOption"><parameters><parameter type="const wxString&amp;" name=" name"></parameter><parameter type="const wxString&amp;" name=" value"></parameter></parameters><description>

</description></function>
<function type="void" name="SetOption"><parameters><parameter type="const wxString&amp;" name=" name"></parameter><parameter type="int" name=" value"></parameter></parameters><seealso>

<ref target="wxsystemoptionsgetoption">wxSystemOptions::GetOption</ref>,
<ref target="wxsystemoptionsgetoptionint">wxSystemOptions::GetOptionInt</ref>,
<ref target="wxsystemoptionshasoption">wxSystemOptions::HasOption</ref>

</seealso><description>

Sets an option. The function is case-insensitive to <i> name</i>.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxSystemSettings">
<description>
<p class="classdesc">
wxSystemSettings allows the application to ask for details about
the system. This can include settings such as standard colours, fonts,
and user interface element sizes.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/settings.h"/></includes>
<seealso>

<ref target="wxfont">wxFont</ref><ref target="wxcolour">wxColour</ref>

</seealso>
<members>
<member class="wxSystemSettings" name="wxSystemSettings"><function type="" name="wxSystemSettings"><description>

Default constructor. You don't need to create an instance of wxSystemSettings
since all of its functions are static.

</description></function></member>
<member class="wxSystemSettings" name="GetColour"><function type="static wxColour" name="GetColour"><parameters><parameter type="wxSystemColour" name=" index"></parameter></parameters><description>

Returns a system colour.

<i> index</i> can be one of:

\twocolwidtha{7cm}
<table>
<tr><td><b> wxSYS_COLOUR_SCROLLBAR</b></td><td>The scrollbar grey area.</td></tr>
<tr><td><b> wxSYS_COLOUR_BACKGROUND</b></td><td>The desktop colour.</td></tr>
<tr><td><b> wxSYS_COLOUR_ACTIVECAPTION</b></td><td>Active window caption.</td></tr>
<tr><td><b> wxSYS_COLOUR_INACTIVECAPTION</b></td><td>Inactive window caption.</td></tr>
<tr><td><b> wxSYS_COLOUR_MENU</b></td><td>Menu background.</td></tr>
<tr><td><b> wxSYS_COLOUR_WINDOW</b></td><td>Window background.</td></tr>
<tr><td><b> wxSYS_COLOUR_WINDOWFRAME</b></td><td>Window frame.</td></tr>
<tr><td><b> wxSYS_COLOUR_MENUTEXT</b></td><td>Menu text.</td></tr>
<tr><td><b> wxSYS_COLOUR_WINDOWTEXT</b></td><td>Text in windows.</td></tr>
<tr><td><b> wxSYS_COLOUR_CAPTIONTEXT</b></td><td>Text in caption, size box and scrollbar arrow box.</td></tr>
<tr><td><b> wxSYS_COLOUR_ACTIVEBORDER</b></td><td>Active window border.</td></tr>
<tr><td><b> wxSYS_COLOUR_INACTIVEBORDER</b></td><td>Inactive window border.</td></tr>
<tr><td><b> wxSYS_COLOUR_APPWORKSPACE</b></td><td>Background colour MDI applications.</td></tr>
<tr><td><b> wxSYS_COLOUR_HIGHLIGHT</b></td><td>Item(s) selected in a control.</td></tr>
<tr><td><b> wxSYS_COLOUR_HIGHLIGHTTEXT</b></td><td>Text of item(s) selected in a control.</td></tr>
<tr><td><b> wxSYS_COLOUR_BTNFACE</b></td><td>Face shading on push buttons.</td></tr>
<tr><td><b> wxSYS_COLOUR_BTNSHADOW</b></td><td>Edge shading on push buttons.</td></tr>
<tr><td><b> wxSYS_COLOUR_GRAYTEXT</b></td><td>Greyed (disabled) text.</td></tr>
<tr><td><b> wxSYS_COLOUR_BTNTEXT</b></td><td>Text on push buttons.</td></tr>
<tr><td><b> wxSYS_COLOUR_INACTIVECAPTIONTEXT</b></td><td>Colour of text in active captions.</td></tr>
<tr><td><b> wxSYS_COLOUR_BTNHIGHLIGHT</b></td><td>Highlight colour for buttons (same as wxSYS_COLOUR_3DHILIGHT).</td></tr>
<tr><td><b> wxSYS_COLOUR_3DDKSHADOW</b></td><td>Dark shadow for three-dimensional display elements.</td></tr>
<tr><td><b> wxSYS_COLOUR_3DLIGHT</b></td><td>Light colour for three-dimensional display elements.</td></tr>
<tr><td><b> wxSYS_COLOUR_INFOTEXT</b></td><td>Text colour for tooltip controls.</td></tr>
<tr><td><b> wxSYS_COLOUR_INFOBK</b></td><td>Background colour for tooltip controls.</td></tr>
<tr><td><b> wxSYS_COLOUR_DESKTOP</b></td><td>Same as wxSYS_COLOUR_BACKGROUND.</td></tr>
<tr><td><b> wxSYS_COLOUR_3DFACE</b></td><td>Same as wxSYS_COLOUR_BTNFACE.</td></tr>
<tr><td><b> wxSYS_COLOUR_3DSHADOW</b></td><td>Same as wxSYS_COLOUR_BTNSHADOW.</td></tr>
<tr><td><b> wxSYS_COLOUR_3DHIGHLIGHT</b></td><td>Same as wxSYS_COLOUR_BTNHIGHLIGHT.</td></tr>
<tr><td><b> wxSYS_COLOUR_3DHILIGHT</b></td><td>Same as wxSYS_COLOUR_BTNHIGHLIGHT.</td></tr>
<tr><td><b> wxSYS_COLOUR_BTNHILIGHT</b></td><td>Same as wxSYS_COLOUR_BTNHIGHLIGHT.</td></tr>
</table>

\pythonnote{This static method is implemented in Python as a
standalone function named <tt> wxSystemSettings_GetColour</tt>}

</description></function></member>
<member class="wxSystemSettings" name="GetFont"><function type="static wxFont" name="GetFont"><parameters><parameter type="wxSystemFont" name=" index"></parameter></parameters><description>

Returns a system font.

<i> index</i> can be one of:

\twocolwidtha{7cm}
<table>
<tr><td><b> wxSYS_OEM_FIXED_FONT</b></td><td>Original equipment manufacturer dependent fixed-pitch font.</td></tr>
<tr><td><b> wxSYS_ANSI_FIXED_FONT</b></td><td>Windows fixed-pitch font.</td></tr>
<tr><td><b> wxSYS_ANSI_VAR_FONT</b></td><td>Windows variable-pitch (proportional) font.</td></tr>
<tr><td><b> wxSYS_SYSTEM_FONT</b></td><td>System font.</td></tr>
<tr><td><b> wxSYS_DEVICE_DEFAULT_FONT</b></td><td>Device-dependent font (Windows NT only).</td></tr>
<tr><td><b> wxSYS_DEFAULT_GUI_FONT</b></td><td>Default font for user interface objects such as menus and dialog boxes.
Not available in versions of Windows earlier than Windows 95 or Windows NT 4.0.</td></tr>
</table>

\pythonnote{This static method is implemented in Python as a
standalone function named <tt> wxSystemSettings_GetFont</tt>}

</description></function></member>
<member class="wxSystemSettings" name="GetMetric"><function type="static int" name="GetMetric"><parameters><parameter type="wxSystemMetric" name=" index"></parameter></parameters><description>

Returns a system metric.

<i> index</i> can be one of:

\twocolwidtha{7cm}
<table>
<tr><td><b> wxSYS_MOUSE_BUTTONS</b></td><td>Number of buttons on mouse, or zero if no mouse was installed.</td></tr>
<tr><td><b> wxSYS_BORDER_X</b></td><td>Width of single border.</td></tr>
<tr><td><b> wxSYS_BORDER_Y</b></td><td>Height of single border.</td></tr>
<tr><td><b> wxSYS_CURSOR_X</b></td><td>Width of cursor.</td></tr>
<tr><td><b> wxSYS_CURSOR_Y</b></td><td>Height of cursor.</td></tr>
<tr><td><b> wxSYS_DCLICK_X</b></td><td>Width in pixels of rectangle within which two successive mouse
clicks must fall to generate a double-click.</td></tr>
<tr><td><b> wxSYS_DCLICK_Y</b></td><td>Height in pixels of rectangle within which two successive mouse
clicks must fall to generate a double-click.</td></tr>
<tr><td><b> wxSYS_DRAG_X</b></td><td>Width in pixels of a rectangle centered on a drag point
to allow for limited movement of the mouse pointer before a drag operation begins.</td></tr>
<tr><td><b> wxSYS_DRAG_Y</b></td><td>Height in pixels of a rectangle centered on a drag point
to allow for limited movement of the mouse pointer before a drag operation begins.</td></tr>
<tr><td><b> wxSYS_EDGE_X</b></td><td>Width of a 3D border, in pixels. </td></tr>
<tr><td><b> wxSYS_EDGE_Y</b></td><td>Height of a 3D border, in pixels. </td></tr>
<tr><td><b> wxSYS_HSCROLL_ARROW_X</b></td><td>Width of arrow bitmap on horizontal scrollbar.</td></tr>
<tr><td><b> wxSYS_HSCROLL_ARROW_Y</b></td><td>Height of arrow bitmap on horizontal scrollbar.</td></tr>
<tr><td><b> wxSYS_HTHUMB_X</b></td><td>Width of horizontal scrollbar thumb.</td></tr>
<tr><td><b> wxSYS_ICON_X</b></td><td>The default width of an icon.</td></tr>
<tr><td><b> wxSYS_ICON_Y</b></td><td>The default height of an icon.</td></tr>
<tr><td><b> wxSYS_ICONSPACING_X</b></td><td>Width of a grid cell for items in large icon view,
in pixels. Each item fits into a rectangle of this size when arranged.</td></tr>
<tr><td><b> wxSYS_ICONSPACING_Y</b></td><td>Height of a grid cell for items in large icon view,
in pixels. Each item fits into a rectangle of this size when arranged.</td></tr>
<tr><td><b> wxSYS_WINDOWMIN_X</b></td><td>Minimum width of a window.</td></tr>
<tr><td><b> wxSYS_WINDOWMIN_Y</b></td><td>Minimum height of a window.</td></tr>
<tr><td><b> wxSYS_SCREEN_X</b></td><td>Width of the screen in pixels.</td></tr>
<tr><td><b> wxSYS_SCREEN_Y</b></td><td>Height of the screen in pixels.</td></tr>
<tr><td><b> wxSYS_FRAMESIZE_X</b></td><td>Width of the window frame for a wxTHICK_FRAME window.</td></tr>
<tr><td><b> wxSYS_FRAMESIZE_Y</b></td><td>Height of the window frame for a wxTHICK_FRAME window.</td></tr>
<tr><td><b> wxSYS_SMALLICON_X</b></td><td>Recommended width of a small icon (in window captions, and small icon view).</td></tr>
<tr><td><b> wxSYS_SMALLICON_Y</b></td><td>Recommended height of a small icon (in window captions, and small icon view).</td></tr>
<tr><td><b> wxSYS_HSCROLL_Y</b></td><td>Height of horizontal scrollbar in pixels.</td></tr>
<tr><td><b> wxSYS_VSCROLL_X</b></td><td>Width of vertical scrollbar in pixels.</td></tr>
<tr><td><b> wxSYS_VSCROLL_ARROW_X</b></td><td>Width of arrow bitmap on a vertical scrollbar.</td></tr>
<tr><td><b> wxSYS_VSCROLL_ARROW_Y</b></td><td>Height of arrow bitmap on a vertical scrollbar.</td></tr>
<tr><td><b> wxSYS_VTHUMB_Y</b></td><td>Height of vertical scrollbar thumb.</td></tr>
<tr><td><b> wxSYS_CAPTION_Y</b></td><td>Height of normal caption area.</td></tr>
<tr><td><b> wxSYS_MENU_Y</b></td><td>Height of single-line menu bar.</td></tr>
<tr><td><b> wxSYS_NETWORK_PRESENT</b></td><td>1 if there is a network present, 0 otherwise.</td></tr>
<tr><td><b> wxSYS_PENWINDOWS_PRESENT</b></td><td>1 if PenWindows is installed, 0 otherwise.</td></tr>
<tr><td><b> wxSYS_SHOW_SOUNDS</b></td><td>Non-zero if the user requires an application to present information visually in situations
where it would otherwise present the information only in audible form; zero otherwise.</td></tr>
<tr><td><b> wxSYS_SWAP_BUTTONS</b></td><td>Non-zero if the meanings of the left and right mouse buttons are swapped; zero otherwise.</td></tr>
</table>

\pythonnote{This static method is implemented in Python as a
standalone function named <tt> wxSystemSettings_GetMetric</tt>}

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTabCtrl">
<description>
<p class="classdesc">
This class represents a tab control, which manages multiple tabs.</p>
</description>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/tabctrl.h"/></includes>
<seealso>

<ref target="wxtabevent">wxTabEvent</ref><ref target="wximagelist">wxImageList</ref>,
<ref target="wxnotebook">wxNotebook</ref>

</seealso>
<members>
<member class="wxTabCtrl" name="wxTabCtrl"><function type="" name="wxTabCtrl"><description>

Default constructor.

</description></function>
<function type="" name="wxTabCtrl"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID " name="id">The window identifier.</parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition">The window position.</parameter><parameter type="const wxSize&amp;" name=" size"></parameter><parameter type="long" name="style" value="0">The window style. Its value is a bit list of zero or more of <b> wxTC_MULTILINE</b>,
 <b> wxTC_RIGHTJUSTIFY</b>, <b> wxTC_FIXEDWIDTH</b> and <b> wxTC_OWNERDRAW</b>.</parameter><parameter type="const wxString&amp; " name="name" value="&quot;tabCtrl&quot;"></parameter></parameters><description>

Constructs a tab control.













</description></function></member>
<member class="wxTabCtrl" name="~wxTabCtrl"><function type="" name="~wxTabCtrl"><description>

Destroys the wxTabCtrl object.

</description></function></member>
<member class="wxTabCtrl" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID " name="id"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp;" name=" size"></parameter><parameter type="long" name="style" value="0"></parameter><parameter type="const wxString&amp; " name="name" value="&quot;tabCtrl&quot;"></parameter></parameters><description>

Creates a tab control. See <ref target="wxtabctrlconstr">wxTabCtrl::wxTabCtrl</ref> for a description
of the parameters.

</description></function></member>
<member class="wxTabCtrl" name="DeleteAllItems"><function type="bool" name="DeleteAllItems"><description>

Deletes all tab items.

</description></function></member>
<member class="wxTabCtrl" name="DeleteItem"><function type="bool" name="DeleteItem"><parameters><parameter type="int" name=" item"></parameter></parameters><description>

Deletes the specified tab item.

</description></function></member>
<member class="wxTabCtrl" name="GetCurFocus"><function type="int" name="GetCurFocus" suffix="const"><description>

Returns the index for the tab with the focus, or -1 if none has the focus.

</description></function></member>
<member class="wxTabCtrl" name="GetImageList"><function type="wxImageList&#42;" name="GetImageList" suffix="const"><seealso>

<ref target="wximagelist">wxImageList</ref><ref target="wxtabctrlsetimagelist">wxTabCtrl::SetImageList</ref>

</seealso><description></description></function></member>
<member class="wxTabCtrl" name="GetItemCount"><function type="int" name="GetItemCount" suffix="const"><description>

Returns the number of tabs in the tab control.

</description></function></member>
<member class="wxTabCtrl" name="GetItemData"><function type="void&#42;" name="GetItemData" suffix="const"><description>

Returns the client data for the given tab.

</description></function></member>
<member class="wxTabCtrl" name="GetItemImage"><function type="int" name="GetItemImage" suffix="const"><description>

Returns the image index for the given tab.

</description></function></member>
<member class="wxTabCtrl" name="GetItemRect"><function type="bool" name="GetItemRect" suffix="const"><parameters><parameter type="int " name="item"></parameter><parameter type="wxRect&amp;" name=" rect"></parameter></parameters><seealso>

<ref target="wxrect">wxRect</ref>

</seealso><description>

Returns the rectangle bounding the given tab.

</description></function></member>
<member class="wxTabCtrl" name="GetItemText"><function type="wxString" name="GetItemText" suffix="const"><description>

Returns the string for the given tab.

</description></function></member>
<member class="wxTabCtrl" name="GetRowCount"><function type="int" name="GetRowCount" suffix="const"><description>

Returns the number of rows in the tab control.

</description></function></member>
<member class="wxTabCtrl" name="GetSelection"><function type="int" name="GetSelection" suffix="const"><seealso>

<ref target="wxtabctrlsetselection">wxTabCtrl::SetSelection</ref>

</seealso><description>

Returns the index for the currently selected tab.

</description></function></member>
<member class="wxTabCtrl" name="HitTest"><function type="int" name="HitTest"><parameters><parameter type="const wxPoint&amp;" name=" pt"></parameter><parameter type="long&amp;" name=" flags"></parameter></parameters><returnvalue>

Returns the zero-based tab index or -1 if no tab is at the specified position.

</returnvalue><description>

Tests whether a tab is at the specified position.







</description></function></member>
<member class="wxTabCtrl" name="InsertItem"><function type="void" name="InsertItem"><parameters><parameter type="int" name=" item"></parameter><parameter type="const wxString&amp;" name=" text"></parameter><parameter type="int " name="imageId" value="-1">Specifies the optional image index for the new item.</parameter><parameter type="void&#42;" name="clientData" value="NULL">Specifies the optional client data for the new item.</parameter></parameters><returnvalue>

true if successful, false otherwise.

</returnvalue><description>

Inserts a new tab.











</description></function></member>
<member class="wxTabCtrl" name="SetItemData"><function type="bool" name="SetItemData"><parameters><parameter type="int" name=" item"></parameter><parameter type="void&#42;" name=" data"></parameter></parameters><description>

Sets the client data for a tab.

</description></function></member>
<member class="wxTabCtrl" name="SetItemImage"><function type="bool" name="SetItemImage"><parameters><parameter type="int" name=" item"></parameter><parameter type="int " name="image"></parameter></parameters><description>

Sets the image index for the given tab. <i> image</i> is an index into
the image list which was set with <ref target="wxtabctrlsetimagelist">wxTabCtrl::SetImageList</ref>.

</description></function></member>
<member class="wxTabCtrl" name="SetImageList"><function type="void" name="SetImageList"><parameters><parameter type="wxImageList&#42;" name=" imageList"></parameter></parameters><seealso>

<ref target="wximagelist">wxImageList</ref>

</seealso><description>

Sets the image list for the tab control.

</description></function></member>
<member class="wxTabCtrl" name="SetItemSize"><function type="void" name="SetItemSize"><parameters><parameter type="const wxSize&amp;" name=" size"></parameter></parameters><description>

Sets the width and height of the tabs.

</description></function></member>
<member class="wxTabCtrl" name="SetItemText"><function type="bool" name="SetItemText"><parameters><parameter type="int" name=" item"></parameter><parameter type="const wxString&amp; " name="text"></parameter></parameters><description>

Sets the text for the given tab.

</description></function></member>
<member class="wxTabCtrl" name="SetPadding"><function type="void" name="SetPadding"><parameters><parameter type="const wxSize&amp;" name=" padding"></parameter></parameters><description>

Sets the amount of space around each tab's icon and label.

</description></function></member>
<member class="wxTabCtrl" name="SetSelection"><function type="int" name="SetSelection"><parameters><parameter type="int" name=" item"></parameter></parameters><seealso>

<ref target="wxtabctrlgetselection">wxTabCtrl::GetSelection</ref>


</seealso><description>

Sets the selection for the given tab, returning the index of the previously
selected tab. Returns -1 if the call was unsuccessful.

</description></function></member></members>
<supported>
<platform name="gtk" status="N"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTabEvent">
<description>
<p class="classdesc">
This class represents the events generated by a tab control.</p>
</description>
<parents>
<classref name="wxCommandEvent"/>
<classref name="wxEvent"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/tabctrl.h"/></includes>
<events>
<event name="EVT_TAB_SEL_CHANGED(id, func)">Process a wxEVT_TAB_SEL_CHANGED event, indicating that
the tab selection has changed.</event><event name="EVT_TAB_SEL_CHANGING(id, func)">Process a wxEVT_TAB_SEL_CHANGING event, indicating that
the tab selection is changing.</event></events>
<seealso>

<ref target="wxtabctrl">wxTabCtrl</ref>

</seealso>
<members>
<member class="wxTabEvent" name="wxTabEvent"><function type="" name="wxTabEvent"><parameters><parameter type="WXTYPE" name="commandType" value="0"></parameter><parameter type="int" name="id" value="0"></parameter></parameters><description>

Constructor.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTaskBarIcon">
<description>
<p class="classdesc">
This class represents a Windows 95 taskbar icon, appearing in the `system tray' and responding to
mouse clicks. An icon has an optional tooltip. This class is only supported for Windows 95/NT.</p>
</description>
<parents>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/taskbar.h"/></includes>
<events>
<event name="EVT_TASKBAR_MOVE(func)">Process a
wxEVT_TASKBAR_MOVE event.</event><event name="EVT_TASKBAR_LEFT_DOWN(func)">Process a
wxEVT_TASKBAR_LEFT_DOWN event.</event><event name="EVT_TASKBAR_LEFT_UP(func)">Process a
wxEVT_TASKBAR_LEFT_UP event.</event><event name="EVT_TASKBAR_RIGHT_DOWN(func)">Process a
wxEVT_TASKBAR_RIGHT_DOWN event.</event><event name="EVT_TASKBAR_RIGHT_UP(func)">Process a
wxEVT_TASKBAR_RIGHT_UP event.</event><event name="EVT_TASKBAR_LEFT_DCLICK(func)">Process a
wxEVT_TASKBAR_LEFT_DCLICK event.</event><event name="EVT_TASKBAR_RIGHT_DCLICK(func)">Process a
wxEVT_TASKBAR_RIGHT_DCLICK event.</event></events>
<members>
<member class="wxTaskBarIcon" name="wxTaskBarIcon"><function type="" name="wxTaskBarIcon"><description>

Default constructor.

</description></function></member>
<member class="wxTaskBarIcon" name="~wxTaskBarIcon"><function type="" name="~wxTaskBarIcon"><description>

Destroys the wxTaskBarIcon object, removing the icon if not already removed.

</description></function></member>
<member class="wxTaskBarIcon" name="IsIconInstalled"><function type="bool" name="IsIconInstalled"><description>

Returns true if <ref target="wxtaskbariconseticon">SetIcon</ref> was called with no subsequent <ref target="wxtaskbariconremoveicon">RemoveIcon</ref>.

</description></function></member>
<member class="wxTaskBarIcon" name="IsOk"><function type="bool" name="IsOk"><description>

Returns true if the object initialized successfully.

</description></function></member>
<member class="wxTaskBarIcon" name="PopupMenu"><function type="bool" name="PopupMenu"><parameters><parameter type="wxMenu&#42;" name=" menu"></parameter></parameters><description>

Pops up a menu at the current mouse position. The events can be handled by
a class derived from wxTaskBarIcon.

</description></function></member>
<member class="wxTaskBarIcon" name="RemoveIcon"><function type="bool" name="RemoveIcon"><description>

Removes the icon previously set with <ref target="wxtaskbariconseticon">SetIcon</ref>.

</description></function></member>
<member class="wxTaskBarIcon" name="SetIcon"><function type="bool" name="SetIcon"><parameters><parameter type="const wxIcon&amp;" name=" icon"></parameter><parameter type="const wxString&amp; " name="tooltip"></parameter></parameters><description>

Sets the icon, and optional tooltip text.


</description></function></member></members>
<supported>
<platform name="gtk" status="N"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="N"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTempFile">
<description>
<p class="classdesc">
wxTempFile provides a relatively safe way to replace the contents of the
existing file. The name is explained by the fact that it may be also used as
just a temporary file if you don't replace the old file contents.</p><p class="classdesc">Usually, when a program replaces the contents of some file it first opens it for
writing, thus losing all of the old data and then starts recreating it. This
approach is not very safe because during the regeneration of the file bad things
may happen: the program may find that there is an internal error preventing it
from completing file generation, the user may interrupt it (especially if file
generation takes long time) and, finally, any other external interrupts (power
supply failure or a disk error) will leave you without either the original file
or the new one.</p><p class="classdesc">wxTempFile addresses this problem by creating a temporary file which is meant to
replace the original file - but only after it is fully written. So, if the user
interrupts the program during the file generation, the old file won't be lost.
Also, if the program discovers itself that it doesn't want to replace the old
file there is no problem - in fact, wxTempFile will <b> not</b> replace the old
file by default, you should explicitly call <ref target="wxtempfilecommit">Commit</ref> 
to do it. Calling <ref target="wxtempfilediscard">Discard</ref> explicitly discards any
modifications: it closes and deletes the temporary file and leaves the original
file unchanged. If you don't call neither of Commit() and Discard(), the
destructor will call Discard() automatically.</p><p class="classdesc">To summarize: if you want to replace another file, create an instance of
wxTempFile passing the name of the file to be replaced to the constructor (you
may also use default constructor and pass the file name to 
<ref target="wxtempfileopen">Open</ref>). Then you can <ref target="wxtempfilewrite">write</ref> 
to wxTempFile using <ref target="wxfile">wxFile</ref>-like functions and later call
Commit() to replace the old file (and close this one) or call Discard() to cancel
the modifications.</p>
</description>
<parents></parents>
<includes>
<header name="wx/file.h"/></includes>
<seealso>

<ref target="wxfile">wxFile</ref>

</seealso>
<members>
<member class="wxTempFile" name="wxTempFile"><function type="" name="wxTempFile"><description>

Default constructor - <ref target="wxtempfileopen">Open</ref> must be used to open the
file.

</description></function></member>
<member class="wxTempFile" name="wxTempFile"><function type="" name="wxTempFile"><parameters><parameter type="const wxString&amp; " name="strName"></parameter></parameters><description>

Associates wxTempFile with the file to be replaced and opens it. You should use 
<ref target="wxtempfileisopened">IsOpened</ref> to verify if the constructor succeeded.

</description></function></member>
<member class="wxTempFile" name="Open"><function type="bool" name="Open"><parameters><parameter type="const wxString&amp; " name="strName"></parameter></parameters><description>

Open the temporary file, returns <tt> true</tt> on success, <tt> false</tt> if an error
occurred.

<i> strName</i> is the name of file to be replaced. The temporary file is always
created in the directory where <i> strName</i> is. In particular, if 
<i> strName</i> doesn't include the path, it is created in the current directory
and the program should have write access to it for the function to succeed.

</description></function></member>
<member class="wxTempFile" name="IsOpened"><function type="bool" name="IsOpened" suffix="const"><description>

Returns <tt> true</tt> if the file was successfully opened.

</description></function></member>
<member class="wxTempFile" name="Write"><function type="bool" name="Write"><parameters><parameter type="const void " name="&#42;p"></parameter><parameter type="size_t " name="n"></parameter></parameters><description>

Write to the file, return <tt> true</tt> on success, <tt> false</tt> on failure.

</description></function></member>
<member class="wxTempFile" name="Write"><function type="bool" name="Write"><parameters><parameter type="const wxString&amp; " name="str"></parameter><parameter type="wxMBConv&amp;" name="conv" value="wxConvLibc"></parameter></parameters><description>

Write to the file, return <tt> true</tt> on success, <tt> false</tt> on failure.

The second argument is only meaningful in Unicode build of wxWindows when
<i> conv</i> is used to convert <i> str</i> to multibyte representation.

</description></function></member>
<member class="wxTempFile" name="Commit"><function type="bool" name="Commit"><description>

Validate changes: deletes the old file of name m_strName and renames the new
file to the old name. Returns <tt> true</tt> if both actions succeeded. If <tt> false</tt> is
returned it may unfortunately mean two quite different things: either that
either the old file couldn't be deleted or that the new file couldn't be renamed
to the old name.

</description></function></member>
<member class="wxTempFile" name="Discard"><function type="void" name="Discard"><description>

Discard changes: the old file contents is not changed, temporary file is
deleted.

</description></function></member>
<member class="wxTempFile" name="~wxTempFile"><function type="" name="~wxTempFile"><description>

Destructor calls <ref target="wxtempfilediscard">Discard()</ref> if temporary file
is still opened.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTextAttr">
<description>
<p class="classdesc">
wxTextAttr represents the character and paragraph attributes, or style, for a range of text in a
<ref target="wxtextctrl">wxTextCtrl</ref>.</p><p class="classdesc">When setting up a wxTextAttr object, pass a bitlist mask to SetFlags to indicate
which style elements should be changed. As a convenience, when you call a
setter such as SetFont, the relevant bit will be set.</p>
</description>
<parents></parents>
<includes>
<header name="wx/textctrl.h"/></includes>
<constants>

The following values can be passed to SetAlignment to determine
paragraph alignment.

<pre>
enum wxTextAttrAlignment
{
    wxTEXT_ALIGNMENT_DEFAULT,
    wxTEXT_ALIGNMENT_LEFT,
    wxTEXT_ALIGNMENT_CENTRE,
    wxTEXT_ALIGNMENT_CENTER = wxTEXT_ALIGNMENT_CENTRE,
    wxTEXT_ALIGNMENT_RIGHT,
    wxTEXT_ALIGNMENT_JUSTIFIED
};
</pre>

These values are passed in a bitlist to SetFlags to determine
what attributes will be considered when setting the attributes
for a text control.

<pre>
#define wxTEXT_ATTR_TEXT_COLOUR             0x0001
#define wxTEXT_ATTR_BACKGROUND_COLOUR       0x0002
#define wxTEXT_ATTR_FONT_FACE               0x0004
#define wxTEXT_ATTR_FONT_SIZE               0x0008
#define wxTEXT_ATTR_FONT_WEIGHT             0x0010
#define wxTEXT_ATTR_FONT_ITALIC             0x0020
#define wxTEXT_ATTR_FONT_UNDERLINE          0x0040
#define wxTEXT_ATTR_FONT \
  wxTEXT_ATTR_FONT_FACE | wxTEXT_ATTR_FONT_SIZE | wxTEXT_ATTR_FONT_WEIGHT \
| wxTEXT_ATTR_FONT_ITALIC | wxTEXT_ATTR_FONT_UNDERLINE
#define wxTEXT_ATTR_ALIGNMENT               0x0080
#define wxTEXT_ATTR_LEFT_INDENT             0x0100
#define wxTEXT_ATTR_RIGHT_INDENT            0x0200
#define wxTEXT_ATTR_TABS                    0x0400
</pre>

</constants>
<members>
<member class="wxTextAttr" name="wxTextAttr"><function type="" name="wxTextAttr"><description>

</description></function>
<function type="" name="wxTextAttr"><parameters><parameter type="const wxColour&amp; " name="colText"></parameter><parameter type="const wxColour&amp; " name="colBack" value="wxNullColour"></parameter><parameter type="const wxFont&amp; " name="font" value="wxNullFont"></parameter><parameter type="wxTextAttrAlignment " name="alignment" value="wxTEXT_ALIGNMENT_DEFAULT"></parameter></parameters><description>

The constructors initialize one or more of the text foreground colour, background
colour, font, and alignment. The values not initialized in the constructor can be set
later, otherwise <ref target="wxtextctrlsetstyle">wxTextCtrl::SetStyle</ref> will use
the default values for them.

</description></function></member>
<member class="wxTextAttr" name="GetAlignment"><function type="wxTextAttrAlignment" name="GetAlignment" suffix="const"><description>

Returns the paragraph alignment.

</description></function></member>
<member class="wxTextAttr" name="GetBackgroundColour"><function type="const wxColour&amp;" name="GetBackgroundColour" suffix="const"><description>

Return the background colour specified by this attribute.

</description></function></member>
<member class="wxTextAttr" name="GetFont"><function type="const wxFont&amp;" name="GetFont" suffix="const"><description>

Return the text font specified by this attribute.

</description></function></member>
<member class="wxTextAttr" name="GetLeftIndent"><function type="int" name="GetLeftIndent" suffix="const"><description>

Returns the left indent in tenths of a millimetre.

</description></function></member>
<member class="wxTextAttr" name="GetRightIndent"><function type="int" name="GetRightIndent" suffix="const"><description>

Returns the right indent in tenths of a millimetre.

</description></function></member>
<member class="wxTextAttr" name="GetTabs"><function type="const wxArrayInt&amp;" name="GetTabs" suffix="const"><description>

Returns the array of integers representing the tab stops. Each
array element specifies the tab stop in tenths of a millimetre.

</description></function></member>
<member class="wxTextAttr" name="GetTextColour"><function type="const wxColour&amp;" name="GetTextColour" suffix="const"><description>

Return the text colour specified by this attribute.

</description></function></member>
<member class="wxTextAttr" name="HasBackgroundColour"><function type="bool" name="HasBackgroundColour" suffix="const"><description>

Returns <tt> true</tt> if this style specifies the background colour to use.

</description></function></member>
<member class="wxTextAttr" name="HasFont"><function type="bool" name="HasFont" suffix="const"><description>

Returns <tt> true</tt> if this style specifies the font to use.

</description></function></member>
<member class="wxTextAttr" name="HasTextColour"><function type="bool" name="HasTextColour" suffix="const"><description>

Returns <tt> true</tt> if this style specifies the foreground colour to use.

</description></function></member>
<member class="wxTextAttr" name="GetFlags"><function type="long" name="GetFlags"><description>

Returns a bitlist indicating which attributes will be set.

</description></function></member>
<member class="wxTextAttr" name="IsDefault"><function type="bool" name="IsDefault" suffix="const"><description>

Returns <tt> true</tt> if this style specifies any non-default attributes.

</description></function></member>
<member class="wxTextAttr" name="SetAlignment"><function type="void" name="SetAlignment"><parameters><parameter type="wxTextAttrAlignment" name=" alignment"></parameter></parameters><description>

Sets the paragraph alignment.

</description></function></member>
<member class="wxTextAttr" name="SetBackgroundColour"><function type="void" name="SetBackgroundColour"><parameters><parameter type="const wxColour&amp; " name="colour"></parameter></parameters><description>

Sets the background colour.

</description></function></member>
<member class="wxTextAttr" name="SetFlags"><function type="void" name="SetFlags"><parameters><parameter type="long" name=" flags"></parameter></parameters><description>

Pass a bitlist indicating which attributes will be set.

</description></function></member>
<member class="wxTextAttr" name="SetFont"><function type="void" name="SetFont"><parameters><parameter type="const wxFont&amp;" name=" font"></parameter></parameters><description>

Sets the text font.

</description></function></member>
<member class="wxTextAttr" name="SetLeftIndent"><function type="void" name="SetLeftIndent"><parameters><parameter type="int " name="indent"></parameter></parameters><description>

Sets the left indent in tenths of a millimetre.

</description></function></member>
<member class="wxTextAttr" name="SetRightIndent"><function type="void" name="SetRightIndent"><parameters><parameter type="int " name="indent"></parameter></parameters><description>

Sets the right indent in tenths of a millimetre.

</description></function></member>
<member class="wxTextAttr" name="SetTabs"><function type="void" name="SetTabs"><parameters><parameter type="const wxArrayInt&amp;" name=" tabs"></parameter></parameters><description>

Sets the array of integers representing the tab stops. Each
array element specifies the tab stop in tenths of a millimetre.

</description></function></member>
<member class="wxTextAttr" name="SetTextColour"><function type="void" name="SetTextColour"><parameters><parameter type="const wxColour&amp; " name="colour"></parameter></parameters><description>

Sets the text colour.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTextCtrl">
<description>
<p class="classdesc">
A text control allows text to be displayed and edited. It may be
single line or multi-line.</p><p class="classdesc"><heading>wxTextCtrl text format</heading></p><p class="classdesc">The multiline text controls always store the text as a sequence of lines
separated by <tt> $\backslash$n</tt> characters, i.e. in the Unix text format even
on non-Unix platforms. This allows the user code to ignore the differences
between the platforms but at a price: the indices in the control such as those
returned by <ref target="wxtextctrlgetinsertionpoint">GetInsertionPoint</ref> or 
<ref target="wxtextctrlgetselection">GetSelection</ref> can <b> not</b> be used as
indices into the string returned by <ref target="wxtextctrlgetvalue">GetValue</ref> as
they're going to be slightly off for platforms using 
<tt> $\backslash$r$\backslash$n</tt> as separator (as Windows does), for example.</p><p class="classdesc">Instead, if you need to obtain a substring between the 2 indices obtained
from the control with the help of the functions mentioned above, you should
use <ref target="wxtextctrlgetrange">GetRange</ref>. And the indices themselves can
only be passed to other methods, for example 
<ref target="wxtextctrlsetinsertionpoint">SetInsertionPoint</ref> or 
<ref target="wxtextctrlsetselection">SetSelection</ref>.</p><p class="classdesc">To summarize: never use the indices returned by (multiline) wxTextCtrl as
indices into the string it contains, but only as arguments to be passed back
to the other wxTextCtrl methods.</p><p class="classdesc"><heading>wxTextCtrl styles</heading></p><p class="classdesc">Multi-line text controls support the styles, i.e. provide a possibility to set
colours and font for individual characters in it (note that under Windows <tt>
wxTE_RICH</tt> style is required for style support). To use the styles you can
either call <ref target="wxtextctrlsetdefaultstyle">SetDefaultStyle</ref> before
inserting the text or call <ref target="wxtextctrlsetstyle">SetStyle</ref> later to
change the style of the text already in the control (the first solution is
much more efficient).</p><p class="classdesc">In either case, if the style doesn't specify some of the attributes (for
example you only want to set the text colour but without changing the font nor
the text background), the values of the default style will be used for them.
If there is no default style, the attributes of the text control itself are
used.</p><p class="classdesc">So the following code correctly describes what it does: the second call
to <ref target="wxtextctrlsetdefaultstyle">SetDefaultStyle</ref> doesn't change the
text foreground colour (which stays red) while the last one doesn't change the
background colour (which stays grey):</p><p class="classdesc"><pre>
    text-&gt;SetDefaultStyle(wxTextAttr(&#42;wxRED));
    text-&gt;AppendText(&quot;Red text\n&quot;);
    text-&gt;SetDefaultStyle(wxTextAttr(wxNullColour, &#42;wxLIGHT_GREY));
    text-&gt;AppendText(&quot;Red on grey text\n&quot;);
    text-&gt;SetDefaultStyle(wxTextAttr(&#42;wxBLUE);
    text-&gt;AppendText(&quot;Blue on grey text\n&quot;);
</pre></p><p class="classdesc"><heading>wxTextCtrl and C++ streams</heading></p><p class="classdesc">This class multiply-inherits from <b> streambuf</b> where compilers allow,
allowing code such as the following:</p><p class="classdesc"><pre>
  wxTextCtrl &#42;control = new wxTextCtrl(...);

  ostream stream(control)

  stream &lt;&lt; 123.456 &lt;&lt; &quot; some text\n&quot;;
  stream.flush();
</pre></p><p class="classdesc">If your compiler does not support derivation from <b> streambuf</b> and gives a
compile error, define the symbol <b> NO_TEXT_WINDOW_STREAM</b> in the
wxTextCtrl header file.</p><p class="classdesc">Note that independently of this setting you can always use wxTextCtrl itself
in a stream-like manner:</p><p class="classdesc"><pre>
  wxTextCtrl &#42;control = new wxTextCtrl(...);

  &#42;control &lt;&lt; 123.456 &lt;&lt; &quot; some text\n&quot;;
</pre></p><p class="classdesc">always works. However the possibility to create an ostream associated with
wxTextCtrl may be useful if you need to redirect the output of a function
taking an ostream as parameter to a text control.</p><p class="classdesc">Another commonly requested need is to redirect <b> std::cout</b> to the text
control. This could be done in the following way:</p><p class="classdesc"><pre>
  #include &lt;iostream&gt;

  wxTextCtrl &#42;control = new wxTextCtrl(...);

  std::streambuf &#42;sbOld = std::cout.rdbuf();
  std::cout.rdbuf(&#42;control);

  // use cout as usual, the output appears in the text control
  ...

  std::cout.rdbuf(sbOld);
</pre></p><p class="classdesc">But wxWindows provides a convenient class to make it even simpler so instead
you may just do</p><p class="classdesc"><pre>
  #include &lt;iostream&gt;

  wxTextCtrl &#42;control = new wxTextCtrl(...);

  wxStreamToTextRedirector redirect(control);

  // all output to cout goes into the text control until the exit from current
  // scope
</pre></p><p class="classdesc">See <ref target="wxstreamtotextredirector">wxStreamToTextRedirector</ref> for more
details.</p>
</description>
<parents>
<classref name="streambuf"/>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/textctrl.h"/></includes>
<windowstyles>
<style name="wxTE_PROCESS_ENTER">The control will generate
the message wxEVENT_TYPE_TEXT_ENTER_COMMAND (otherwise pressing Enter key
is either processed internally by the control or used for navigation between
dialog controls).</style><style name="wxTE_PROCESS_TAB">The control will receive
EVT_CHAR messages for TAB pressed - normally, TAB is used for passing to the
next control in a dialog instead. For the control created with this style,
you can still use Ctrl-Enter to pass to the next control from the keyboard.</style><style name="wxTE_MULTILINE">The text control allows multiple lines.</style><style name="wxTE_PASSWORD">The text will be echoed as asterisks.</style><style name="wxTE_READONLY">The text will not be user-editable.</style><style name="wxTE_RICH">Use rich text control under Win32, this
allows to have more than 64Kb of text in the control even under Win9x. This
style is ignored under other platforms.</style><style name="wxTE_RICH2">Use rich text control version 2.0 or 3.0
under Win32, this style is ignored under other platforms</style><style name="wxTE_AUTO_URL">Highlight the URLs and generate the
wxTextUrlEvents when mouse events occur over them. This style is supported
under Win32 only and requires wxTE_RICH.</style><style name="wxTE_NOHIDESEL">By default, the Windows text control
doesn't show the selection when it doesn't have focus - use this style to force
it to always show it. It doesn't do anything under other platforms.</style><style name="wxHSCROLL">A horizontal scrollbar will be created. No effect under GTK+.</style><style name="wxTE_LEFT">The text in the control will be left-justified (default).</style><style name="wxTE_CENTRE">The text in the control will be centered.</style><style name="wxTE_RIGHT">The text in the control will be right-justified.</style><style name="wxTE_DONTWRAP">Same as {\tt wxHSCROLL</style><style name="wxTE_LINEWRAP">Wrap the lines too long to be shown entirely at any position (wxUniv only currently).</style><style name="wxTE_WORDWRAP">Wrap the lines too long to be shown entirely at word boundaries only (wxUniv only currently).</style></windowstyles>
<events>
<event name="EVT_TEXT(id, func)">Respond to a wxEVT_COMMAND_TEXT_UPDATED event,
generated when the text changes. Notice that this event will always be sent
when the text controls contents changes - whether this is due to user input or
comes from the program itself (for example, if SetValue() is called)</event><event name="EVT_TEXT_ENTER(id, func)">Respond to a wxEVT_COMMAND_TEXT_ENTER event,
generated when enter is pressed in a text control (which must have
wxTE_PROCESS_ENTER style for this event to be generated).</event><event name="EVT_TEXT_URL(id, func)">A mouse event occured over an URL
in the text control (Win32 only)</event><event name="EVT_TEXT_MAXLEN(id, func)">User tried to enter more text
into the control than the limit set by
\helpref{SetMaxLength</event></events>
<members>
<member class="wxTextCtrl" name="wxTextCtrl"><function type="" name="wxTextCtrl"><description>

Default constructor.

</description></function>
<function type="" name="wxTextCtrl"><parameters><parameter type="wxWindow&#42; " name="parent">Parent window. Should not be NULL.</parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp; " name="value" value="``&quot;">Default text value.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Text control position.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Text control size.</parameter><parameter type="long" name="style" value="0">Window style. See <ref target="wxtextctrl">wxTextCtrl</ref>.</parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator">Window validator.</parameter><parameter type="const wxString&amp; " name="name" value="wxTextCtrlNameStr">Window name.</parameter></parameters><seealso>

<ref target="wxtextctrlcreate">wxTextCtrl::Create</ref><ref target="wxvalidator">wxValidator</ref>

</seealso><description></description></function></member>
<member class="wxTextCtrl" name="~wxTextCtrl"><function type="" name="~wxTextCtrl"><description>

Destructor, destroying the text control.

</description></function></member>
<member class="wxTextCtrl" name="AppendText"><function type="void" name="AppendText"><parameters><parameter type="const wxString&amp; " name=" text"></parameter></parameters><seealso>

<ref target="wxtextctrlwritetext">wxTextCtrl::WriteText</ref>

</seealso><remarks>

After the text is appended, the insertion point will be at the end of the text control. If this behaviour is not desired,
the programmer should use <ref target="wxtextctrlgetinsertionpoint">GetInsertionPoint</ref> and <ref target="wxtextctrlsetinsertionpoint">SetInsertionPoint</ref>.

</remarks><description>

Appends the text to the end of the text control.





</description></function></member>
<member class="wxTextCtrl" name="CanCopy"><function type="virtual bool" name="CanCopy"><description>

Returns <tt> true</tt> if the selection can be copied to the clipboard.

</description></function></member>
<member class="wxTextCtrl" name="CanCut"><function type="virtual bool" name="CanCut"><description>

Returns <tt> true</tt> if the selection can be cut to the clipboard.

</description></function></member>
<member class="wxTextCtrl" name="CanPaste"><function type="virtual bool" name="CanPaste"><description>

Returns <tt> true</tt> if the contents of the clipboard can be pasted into the
text control. On some platforms (Motif, GTK) this is an approximation
and returns <tt> true</tt> if the control is editable, <tt> false</tt> otherwise.

</description></function></member>
<member class="wxTextCtrl" name="CanRedo"><function type="virtual bool" name="CanRedo"><description>

Returns <tt> true</tt> if there is a redo facility available and the last operation
can be redone.

</description></function></member>
<member class="wxTextCtrl" name="CanUndo"><function type="virtual bool" name="CanUndo"><description>

Returns <tt> true</tt> if there is an undo facility available and the last operation
can be undone.

</description></function></member>
<member class="wxTextCtrl" name="Clear"><function type="virtual void" name="Clear"><description>

Clears the text in the control.

Note that this function will generate a <tt> wxEVT_COMMAND_TEXT_UPDATED</tt>
event.

</description></function></member>
<member class="wxTextCtrl" name="Copy"><function type="virtual void" name="Copy"><description>

Copies the selected text to the clipboard under Motif and MS Windows.

</description></function></member>
<member class="wxTextCtrl" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp; " name="value" value="``&quot;"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="0"></parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator"></parameter><parameter type="const wxString&amp; " name="name" value="wxTextCtrlNameStr"></parameter></parameters><description>

Creates the text control for two-step construction. Derived classes
should call or replace this function. See <ref target="wxtextctrlconstr">wxTextCtrl::wxTextCtrl</ref>
for further details.

</description></function></member>
<member class="wxTextCtrl" name="Cut"><function type="virtual void" name="Cut"><description>

Copies the selected text to the clipboard and removes the selection.

</description></function></member>
<member class="wxTextCtrl" name="DiscardEdits"><function type="void" name="DiscardEdits"><description>

Resets the internal `modified' flag as if the current edits had been saved.

</description></function></member>
<member class="wxTextCtrl" name="EmulateKeyPress"><function type="bool" name="EmulateKeyPress"><parameters><parameter type="const wxKeyEvent&amp; " name="event"></parameter></parameters><returnvalue>

<tt> true</tt> if the event resulted in a change to the control, <tt> false</tt>
otherwise.

</returnvalue><description>

This functions inserts into the control the character which would have been
inserted if the given key event had occured in the text control. The 
<i> event</i> object should be the same as the one passed to <tt> EVT_KEY_DOWN</tt>
handler previously by wxWindows.

Please note that this function doesn't currently work correctly for all keys
under any platform but MSW.

</description></function></member>
<member class="wxTextCtrl" name="GetDefaultStyle"><function type="const wxTextAttr&amp; " name="GetDefaultStyle" suffix="const"><seealso>

<ref target="wxtextctrlsetdefaultstyle">SetDefaultStyle</ref>

</seealso><description>

Returns the style currently used for the new text.

</description></function></member>
<member class="wxTextCtrl" name="GetInsertionPoint"><function type="virtual long" name="GetInsertionPoint" suffix="const"><description>

Returns the insertion point. This is defined as the zero based index of the
character position to the right of the insertion point. For example, if
the insertion point is at the end of the text control, it is equal to
both <ref target="wxtextctrlgetvalue">GetValue()</ref>.Length() and
<ref target="wxtextctrlgetlastposition">GetLastPosition()</ref>.

The following code snippet safely returns the character at the insertion
point or the zero character if the point is at the end of the control.

<pre>
  char GetCurrentChar(wxTextCtrl &#42;tc) {
    if (tc-&gt;GetInsertionPoint() == tc-&gt;GetLastPosition())
      return '\0';
    return tc-&gt;GetValue&#91;tc-&gt;GetInsertionPoint()];
  }
</pre>

</description></function></member>
<member class="wxTextCtrl" name="GetLastPosition"><function type="virtual long" name="GetLastPosition" suffix="const"><description>

Returns the zero based index of the last position in the text control,
which is equal to the number of characters in the control.

</description></function></member>
<member class="wxTextCtrl" name="GetLineLength"><function type="int" name="GetLineLength" suffix="const"><parameters><parameter type="long" name=" lineNo"></parameter></parameters><returnvalue>

The length of the line, or -1 if <i> lineNo</i> was invalid.

</returnvalue><description>

Gets the length of the specified line, not including any trailing newline
character(s).





</description></function></member>
<member class="wxTextCtrl" name="GetLineText"><function type="wxString" name="GetLineText" suffix="const"><parameters><parameter type="long" name=" lineNo"></parameter></parameters><returnvalue>

The contents of the line.

</returnvalue><description>

Returns the contents of a given line in the text control, not including
any trailing newline character(s).





</description></function></member>
<member class="wxTextCtrl" name="GetNumberOfLines"><function type="int" name="GetNumberOfLines" suffix="const"><remarks>

Note that even empty text controls have one line (where the insertion point
is), so GetNumberOfLines() never returns 0.

For gtk_text (multi-line) controls, the number of lines is
calculated by actually counting newline characters in the buffer. You
may wish to avoid using functions that work with line numbers if you are
working with controls that contain large amounts of text.

</remarks><description>

Returns the number of lines in the text control buffer.

</description></function></member>
<member class="wxTextCtrl" name="GetRange"><function type="virtual wxString" name="GetRange" suffix="const"><parameters><parameter type="long" name=" from"></parameter><parameter type="long" name=" to"></parameter></parameters><description>

Returns the string containing the text staring in the positions <i> from</i> and
up to <i> to</i> in the control. The positions must have been returned by another
wxTextCtrl method.

Please note that the positions in a multiline wxTextCtrl do <b> not</b>
correspond to the indices in the string returned by 
<ref target="wxtextctrlgetvalue">GetValue</ref> because of the different new line
representations (<tt> CR</tt> or <tt> CR LF</tt>) and so this method should be used to
obtain the correct results instead of extracting parts of the entire value. It
may also be more efficient, especially if the control contains a lot of data.

</description></function></member>
<member class="wxTextCtrl" name="GetSelection"><function type="virtual void" name="GetSelection" suffix="const"><parameters><parameter type="long&#42;" name=" from"></parameter><parameter type="long&#42;" name=" to"></parameter></parameters><description>

Gets the current selection span. If the returned values are equal, there was
no selection.

Please note that the indices returned may be used with the other wxTextctrl
methods but don't necessarily represent the correct indices into the string
returned by <ref target="wxtextctrlgetvalue">GetValue()</ref> for multiline controls
under Windows (at least,) you should use
<ref target="wxtextctrlgetstringselection">GetStringSelection()</ref> to get the selected
text.







\pythonnote{The wxPython version of this method returns a tuple
consisting of the from and to values.}

\perlnote{In wxPerl this method takes no parameter and returns a
2-element list <tt> ( from, to )</tt>.}

</description></function></member>
<member class="wxTextCtrl" name="GetStringSelection"><function type="virtual wxString" name="GetStringSelection"><description>

Gets the text currently selected in the control. If there is no selection, the
returned string is empty.

</description></function></member>
<member class="wxTextCtrl" name="GetStyle"><function type="bool" name="GetStyle"><parameters><parameter type="long " name="position"></parameter><parameter type="wxTextAttr&amp; " name="style"></parameter></parameters><seealso>

<ref target="wxtextctrlsetstyle">wxTextCtrl::SetStyle</ref><ref target="wxtextattr">wxTextAttr</ref>

</seealso><description></description></function></member>
<member class="wxTextCtrl" name="GetValue"><function type="wxString" name="GetValue" suffix="const"><description>

Gets the contents of the control. Notice that for a multiline text control,
the lines will be separated by (Unix-style) $\backslash$n characters, even
under Windows where they are separated by a $\backslash$r$\backslash$n
sequence in the native control.

</description></function></member>
<member class="wxTextCtrl" name="IsEditable"><function type="bool" name="IsEditable" suffix="const"><description>

Returns <tt> true</tt> if the controls contents may be edited by user (note that it
always can be changed by the program), i.e. if the control hasn't been put in
read-only mode by a previous call to 
<ref target="wxtextctrlseteditable">SetEditable</ref>.

</description></function></member>
<member class="wxTextCtrl" name="IsModified"><function type="bool" name="IsModified" suffix="const"><description>

Returns <tt> true</tt> if the text has been modified by user. Note that calling 
<ref target="wxtextctrlsetvalue">SetValue</ref> doesn't make the control modified.

</description></function></member>
<member class="wxTextCtrl" name="IsMultiLine"><function type="bool" name="IsMultiLine" suffix="const"><seealso>

<ref target="wxtextctrlissingleline">IsSingleLine</ref>

</seealso><description>

Returns <tt> true</tt> if this is a multi line edit control and <tt> false</tt>
otherwise.

</description></function></member>
<member class="wxTextCtrl" name="IsSingleLine"><function type="bool" name="IsSingleLine" suffix="const"><seealso>

<ref target="wxtextctrlissingleline">IsMultiLine</ref>

</seealso><description>

Returns <tt> true</tt> if this is a single line edit control and <tt> false</tt>
otherwise.

</description></function></member>
<member class="wxTextCtrl" name="LoadFile"><function type="bool" name="LoadFile"><parameters><parameter type="const wxString&amp; " name=" filename"></parameter></parameters><returnvalue>

<tt> true</tt> if successful, <tt> false</tt> otherwise.


</returnvalue><description>

Loads and displays the named file, if it exists.





</description></function></member>
<member class="wxTextCtrl" name="OnDropFiles"><function type="void" name="OnDropFiles"><parameters><parameter type="wxDropFilesEvent&amp; " name="event">The drop files event.</parameter></parameters><seealso>

<ref target="wxdropfilesevent">wxDropFilesEvent</ref>

</seealso><remarks>

This is not implemented on non-Windows platforms.

</remarks><description>

This event handler function implements default drag and drop behaviour, which
is to load the first dropped file into the control.





</description></function></member>
<member class="wxTextCtrl" name="Paste"><function type="virtual void" name="Paste"><description>

Pastes text from the clipboard to the text item.

</description></function></member>
<member class="wxTextCtrl" name="PositionToXY"><function type="bool" name="PositionToXY" suffix="const"><parameters><parameter type="long " name="pos">Position.</parameter><parameter type="long &#42;" name="x">Receives zero based column number.</parameter><parameter type="long &#42;" name="y">Receives zero based line number.</parameter></parameters><seealso>

<ref target="wxtextctrlxytoposition">wxTextCtrl::XYToPosition</ref>

\pythonnote{In PythonPositionToXY() returns a tuple containing the x and
y valuesso (x,y) = PositionToXY() is equivalent to the call described
above.}

\perlnote{In wxPerl this method only takes the <tt> pos</tt> parameterand
returns a 2-element list <tt> ( xy )</tt>.}

</seealso><description></description></function></member>
<member class="wxTextCtrl" name="Redo"><function type="virtual void" name="Redo"><description>

If there is a redo facility and the last operation can be redone, redoes the last operation. Does nothing
if there is no redo facility.

</description></function></member>
<member class="wxTextCtrl" name="Remove"><function type="virtual void" name="Remove"><parameters><parameter type="long" name=" from"></parameter><parameter type="long" name=" to"></parameter></parameters><description>

Removes the text starting at the first given position up to (but not including)
the character at the last position.







</description></function></member>
<member class="wxTextCtrl" name="Replace"><function type="virtual void" name="Replace"><parameters><parameter type="long" name=" from"></parameter><parameter type="long" name=" to"></parameter><parameter type="const wxString&amp; " name="value">The value to replace the existing text with.</parameter></parameters><description>

Replaces the text starting at the first position up to (but not including)
the character at the last position with the given text.









</description></function></member>
<member class="wxTextCtrl" name="SaveFile"><function type="bool" name="SaveFile"><parameters><parameter type="const wxString&amp; " name=" filename"></parameter></parameters><returnvalue>

<tt> true</tt> if the operation was successful, <tt> false</tt> otherwise.

</returnvalue><description>

Saves the contents of the control in a text file.





</description></function></member>
<member class="wxTextCtrl" name="SetDefaultStyle"><function type="bool" name="SetDefaultStyle"><parameters><parameter type="const wxTextAttr&amp; " name="style">The style for the new text.</parameter></parameters><seealso>

<ref target="wxtextctrlgetdefaultstyle">GetDefaultStyle</ref>

</seealso><returnvalue>

<tt> true</tt> on success, <tt> false</tt> if an error occured - may also mean that
the styles are not supported under this platform.

</returnvalue><description>

Changes the default style to use for the new text which is going to be added
to the control using <ref target="wxtextctrlwritetext">WriteText</ref> or
<ref target="wxtextctrlappendtext">AppendText</ref>.

If either of the font, foreground, or background colour is not set in
<i> style</i>, the values of the previous default style are used for them. If
the previous default style didn't set them neither, the global font or colours
of the text control itself are used as fall back.

However if the <i> style</i> parameter is the default wxTextAttr, then the
default style is just reset (instead of being combined with the new style which
wouldn't change it at all).





</description></function></member>
<member class="wxTextCtrl" name="SetEditable"><function type="virtual void" name="SetEditable"><parameters><parameter type="const bool" name=" editable"></parameter></parameters><seealso>

<ref target="wxtextctrliseditable">IsEditable</ref>

</seealso><description>

Makes the text item editable or read-only, overriding the <b> wxTE_READONLY</b> flag.





</description></function></member>
<member class="wxTextCtrl" name="SetInsertionPoint"><function type="virtual void" name="SetInsertionPoint"><parameters><parameter type="long" name=" pos"></parameter></parameters><description>

Sets the insertion point at the given position.





</description></function></member>
<member class="wxTextCtrl" name="SetInsertionPointEnd"><function type="virtual void" name="SetInsertionPointEnd"><description>

Sets the insertion point at the end of the text control. This is equivalent
to <ref target="wxtextctrlsetinsertionpoint">SetInsertionPoint</ref>(<ref target="wxtextctrlgetlastposition">GetLastPosition</ref>()).

</description></function></member>
<member class="wxTextCtrl" name="SetMaxLength"><function type="virtual void" name="SetMaxLength"><parameters><parameter type="unsigned long " name="len"></parameter></parameters><description>

This function sets the maximum number of characters the user can enter into the
control. In other words, it allows to limit the text value length to <i> len</i>
not counting the terminating <tt> NUL</tt> character.

If <i> len</i> is 0, the previously set max length limit, if any, is discarded
and the user may enter as much text as the underlying native text control
widget supports (typically at least 32Kb).

If the user tries to enter more characters into the text control when it
already is filled up to the maximal length, a
<tt> wxEVT_COMMAND_TEXT_MAXLEN</tt> event is sent to notify the program about it
(giving it the possibility to show an explanatory message, for example) and the
extra input is discarded.

Note that this function may only be used with single line text controls.

\wxheading{Compatibility}

Only implemented in wxMSW/wxGTK starting with wxWindows 2.3.2.

</description></function></member>
<member class="wxTextCtrl" name="SetSelection"><function type="virtual void" name="SetSelection"><parameters><parameter type="long" name=" from"></parameter><parameter type="long" name=" to"></parameter></parameters><description>

Selects the text starting at the first position up to (but not including) the
character at the last position. If both parameters are equal to $-1$ all text
in the control is selected.







</description></function></member>
<member class="wxTextCtrl" name="SetStyle"><function type="bool" name="SetStyle"><parameters><parameter type="long " name="start">The start of the range to change.</parameter><parameter type="long " name="end">The end of the range to change.</parameter><parameter type="const wxTextAttr&amp; " name="style">The new style for the range.</parameter></parameters><seealso>

<ref target="wxtextctrlgetstyle">wxTextCtrl::GetStyle</ref><ref target="wxtextattr">wxTextAttr</ref>

</seealso><description></description></function></member>
<member class="wxTextCtrl" name="SetValue"><function type="virtual void" name="SetValue"><parameters><parameter type="const wxString&amp; " name=" value"></parameter></parameters><description>

Sets the text value and marks the control as not-modified (which means that 
<ref target="wxtextctrlismodified">IsModified</ref> would return <tt> false</tt> immediately
after the call to SetValue).

Note that this function will generate a <tt> wxEVT_COMMAND_TEXT_UPDATED</tt>
event.





</description></function></member>
<member class="wxTextCtrl" name="ShowPosition"><function type="void" name="ShowPosition"><parameters><parameter type="long" name=" pos"></parameter></parameters><description>

Makes the line containing the given position visible.





</description></function></member>
<member class="wxTextCtrl" name="Undo"><function type="virtual void" name="Undo"><description>

If there is an undo facility and the last operation can be undone, undoes the last operation. Does nothing
if there is no undo facility.

</description></function></member>
<member class="wxTextCtrl" name="WriteText"><function type="void" name="WriteText"><parameters><parameter type="const wxString&amp; " name=" text"></parameter></parameters><remarks>

Newlines in the text string
are the only control characters allowed, and they will cause appropriate
line breaks.  See <ref target="wxtextctrlinsert">wxTextCtrl::\cinsert</ref> and <ref target="wxtextctrlappendtext">wxTextCtrl::AppendText</ref> for more convenient ways of writing to the window.

After the write operation, the insertion point will be at the end of the inserted text, so subsequent write operations will be appended. To append text after the user may have interacted with the control, call <ref target="wxtextctrlsetinsertionpointend">wxTextCtrl::SetInsertionPointEnd</ref> before writing.

</remarks><description>

Writes the text into the text control at the current insertion position.





</description></function></member>
<member class="wxTextCtrl" name="XYToPosition"><function type="long" name="XYToPosition"><parameters><parameter type="long" name=" x"></parameter><parameter type="long" name=" y"></parameter></parameters><returnvalue>

The position value.

</returnvalue><description>

Converts the given zero based column and line number to a position.







</description></function></member>
<member class="wxTextCtrl" name="operator \cinsert"><function type="wxTextCtrl&amp;" name="operator \cinsert"><parameters><parameter type="const wxString&amp; " name="s"></parameter></parameters><description>

</description></function>
<function type="wxTextCtrl&amp;" name="operator \cinsert"><parameters><parameter type="int" name=" i"></parameter></parameters><description>

</description></function>
<function type="wxTextCtrl&amp;" name="operator \cinsert"><parameters><parameter type="long" name=" i"></parameter></parameters><description>

</description></function>
<function type="wxTextCtrl&amp;" name="operator \cinsert"><parameters><parameter type="float" name=" f"></parameter></parameters><description>

</description></function>
<function type="wxTextCtrl&amp;" name="operator \cinsert"><parameters><parameter type="double" name=" d"></parameter></parameters><description>

</description></function>
<function type="wxTextCtrl&amp;" name="operator \cinsert"><parameters><parameter type="char" name=" c"></parameter></parameters><description>

Operator definitions for appending to a text control, for example:

<pre>
  wxTextCtrl &#42;wnd = new wxTextCtrl(my_frame);

  (&#42;wnd) &lt;&lt; &quot;Welcome to text control number &quot; &lt;&lt; 1 &lt;&lt; &quot;.\n&quot;;
</pre>

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTextDataObject">
<description>
<p class="classdesc">
wxTextDataObject is a specialization of wxDataObject for text data. It can be
used without change to paste data into the <ref target="wxclipboard">wxClipboard</ref> 
or a <ref target="wxdropsource">wxDropSource</ref>. A user may wish to derive a new
class from this class for providing text on-demand in order to minimize memory
consumption when offering data in several formats, such as plain text and RTF
because by default the text is stored in a string in this class, but it might
as well be generated when requested. For this, 
<ref target="wxtextdataobjectgettextlength">GetTextLength</ref> and 
<ref target="wxtextdataobjectgettext">GetText</ref> will have to be overridden.</p><p class="classdesc">Note that if you already have the text inside a string, you will not achieve
any efficiency gain by overriding these functions because copying wxStrings is
already a very efficient operation (data is not actually copied because
wxStrings are reference counted).</p>
</description>
<parents>
<classref name="wxDataObjectSimple"/>
<classref name="wxDataObject"/>

</parents>
<includes>
<header name="wx/dataobj.h"/></includes>
<override>

This class may be used as is, but all of the data transfer functions may be
overridden to increase efficiency.

</override>
<seealso>

<ref target="wxdndoverview">Clipboard and drag and drop overview</ref>
<ref target="wxdataobject">wxDataObject</ref>
<ref target="wxdataobjectsimple">wxDataObjectSimple</ref>
<ref target="wxfiledataobject">wxFileDataObject</ref>
<ref target="wxbitmapdataobject">wxBitmapDataObject</ref>

</seealso>
<members>
<member class="wxTextDataObject" name="wxTextDataObject"><function type="" name="wxTextDataObject"><parameters><parameter type="const wxString&amp; " name="text" value="wxEmptyString"></parameter></parameters><description>

Constructor, may be used to initialise the text (otherwise 
<ref target="wxtextdataobjectsettext">SetText</ref> should be used later).

</description></function></member>
<member class="wxTextDataObject" name="GetTextLength"><function type="virtual size_t" name="GetTextLength" suffix="const"><description>

Returns the data size. By default, returns the size of the text data
set in the constructor or using <ref target="wxtextdataobjectsettext">SetText</ref>.
This can be overridden to provide text size data on-demand. It is recommended
to return the text length plus 1 for a trailing zero, but this is not
strictly required.

</description></function></member>
<member class="wxTextDataObject" name="GetText"><function type="virtual wxString" name="GetText" suffix="const"><description>

Returns the text associated with the data object. You may wish to override
this method when offering data on-demand, but this is not required by
wxWindows' internals. Use this method to get data in text form from
the <ref target="wxclipboard">wxClipboard</ref>.

</description></function></member>
<member class="wxTextDataObject" name="SetText"><function type="virtual void" name="SetText"><parameters><parameter type="const wxString&amp; " name="strText"></parameter></parameters><description>

Sets the text associated with the data object. This method is called
when the data object receives the data and, by default, copies the text into
the member variable. If you want to process the text on the fly you may wish to
override this function.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTextDropTarget">
<description>
<p class="classdesc">
A predefined drop target for dealing with text data.</p>
</description>
<parents>
<classref name="wxDropTarget"/>

</parents>
<includes>
<header name="wx/dnd.h"/></includes>
<seealso>

<ref target="wxdndoverview">Drag and drop overview</ref><ref target="wxdropsource">wxDropSource</ref>
<ref target="wxdroptarget">wxDropTarget</ref><ref target="wxfiledroptarget">wxFileDropTarget</ref>

</seealso>
<members>
<member class="wxTextDropTarget" name="wxTextDropTarget"><function type="" name="wxTextDropTarget"><description>

Constructor.

</description></function></member>
<member class="wxTextDropTarget" name="OnDrop"><function type="virtual bool" name="OnDrop"><parameters><parameter type="long " name="x"></parameter><parameter type="long " name="y"></parameter><parameter type="const void " name="&#42;data"></parameter><parameter type="size_t " name="size"></parameter></parameters><description>

See <ref target="wxdroptargetondrop">wxDropTarget::OnDrop</ref>. This function is implemented
appropriately for text, and calls <ref target="wxtextdroptargetondroptext">wxTextDropTarget::OnDropText</ref>.

</description></function></member>
<member class="wxTextDropTarget" name="OnDropText"><function type="virtual bool" name="OnDropText"><parameters><parameter type="long " name="x">The x coordinate of the mouse.</parameter><parameter type="long " name="y">The y coordinate of the mouse.</parameter><parameter type="const char " name="&#42;data"></parameter></parameters><returnvalue>

Return true to accept the data, false to veto the operation.

</returnvalue><description>

Override this function to receive dropped text.









</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTextEntryDialog">
<description>
<p class="classdesc">
This class represents a dialog that requests a one-line text string from the user.
It is implemented as a generic wxWindows dialog.</p>
</description>
<parents>
<classref name="wxDialog"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/textdlg.h"/></includes>
<seealso>

<ref target="wxtextentrydialogoverview">wxTextEntryDialog overview</ref>

</seealso>
<members>
<member class="wxTextEntryDialog" name="wxTextEntryDialog"><function type="" name="wxTextEntryDialog"><parameters><parameter type="wxWindow&#42; " name="parent">Parent window.</parameter><parameter type="const wxString&amp; " name="message">Message to show on the dialog.</parameter><parameter type="const wxString&amp; " name="caption" value="&quot;Please"></parameter><parameter type="const wxString&amp; " name="defaultValue" value="&quot;&quot;">The default value, which may be the empty string.</parameter><parameter type="long " name="style" value="wxOK">A dialog style, specifying the buttons (wxOK, wxCANCEL)
and an optional wxCENTRE style. Additionally, wxTextCtrl styles (such as
<tt> wxTE_PASSWORD</tt> may be specified here.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Dialog position.</parameter></parameters><description>

Constructor. Use <ref target="wxtextentrydialogshowmodal">wxTextEntryDialog::ShowModal</ref> to show the dialog.













</description></function></member>
<member class="wxTextEntryDialog" name="~wxTextEntryDialog"><function type="" name="~wxTextEntryDialog"><description>

Destructor.

</description></function></member>
<member class="wxTextEntryDialog" name="GetValue"><function type="wxString" name="GetValue" suffix="const"><description>

Returns the text that the user has entered if the user has pressed OK, or the original value
if the user has pressed Cancel.

</description></function></member>
<member class="wxTextEntryDialog" name="SetValue"><function type="void" name="SetValue"><parameters><parameter type="const wxString&amp; " name="value"></parameter></parameters><description>

Sets the default text value.

</description></function></member>
<member class="wxTextEntryDialog" name="ShowModal"><function type="int" name="ShowModal"><description>

Shows the dialog, returning wxID_OK if the user pressed OK, and wxOK_CANCEL
otherwise.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTextFile">
<description>
<p class="classdesc">
The wxTextFile is a simple class which allows to work with text files on line by
line basis. It also understands the differences in line termination characters
under different platforms and will not do anything bad to files with &quot;non
native&quot; line termination sequences - in fact, it can be also used to modify the
text files and change the line termination characters from one type (say DOS) to
another (say Unix).</p><p class="classdesc">One word of warning: the class is not at all optimized for big files and so it
will load the file entirely into memory when opened. Of course, you should not
work in this way with large files (as an estimation, anything over 1 Megabyte is
surely too big for this class). On the other hand, it is not a serious
limitation for the small files like configuration files or programs sources
which are well handled by wxTextFile.</p><p class="classdesc">The typical things you may do with wxTextFile in order are:</p><p class="classdesc"><ul><li> Create and open it: this is done with either 
<ref target="wxtextfilecreate">Create</ref> or <ref target="wxtextfileopen">Open</ref> 
function which opens the file (name may be specified either as the argument to
these functions or in the constructor), reads its contents in memory (in the
case of <tt> Open()</tt>) and closes it.
</li>
<li> Work with the lines in the file: this may be done either with &quot;direct
access&quot; functions like <ref target="wxtextfilegetlinecount">GetLineCount</ref> and 
<ref target="wxtextfilegetline">GetLine</ref> (<i> operator&#91;]</i> does exactly the same
but looks more like array addressing) or with &quot;sequential access&quot; functions
which include <ref target="wxtextfilegetfirstline">GetFirstLine</ref>/
<ref target="wxtextfilegetnextline">GetNextLine</ref> and also 
<ref target="wxtextfilegetlastline">GetLastLine</ref>/<ref target="wxtextfilegetprevline">GetPrevLine</ref>.
For the sequential access functions the current line number is maintained: it is
returned by <ref target="wxtextfilegetcurrentline">GetCurrentLine</ref> and may be
changed with <ref target="wxtextfilegotoline">GoToLine</ref>.
</li>
<li> Add/remove lines to the file: <ref target="wxtextfileaddline">AddLine</ref> and 
<ref target="wxtextfileinsertline">InsertLine</ref> add new lines while 
<ref target="wxtextfileremoveline">RemoveLine</ref> deletes the existing ones.
<ref target="wxtextfileclear">Clear</ref> resets the file to empty.
</li>
<li> Save your changes: notice that the changes you make to the file will <b>
not</b> be saved automatically; calling <ref target="wxtextfileclose">Close</ref> or doing
nothing discards them! To save the changes you must explicitly call 
<ref target="wxtextfilewrite">Write</ref> - here, you may also change the line
termination type if you wish.
</li></ul></p>
</description>
<parents></parents>
<includes>
<header name="wx/textfile.h"/></includes>
<structs>

The following constants identify the line termination type:

<pre>
enum wxTextFileType
{
    wxTextFileType_None,  // incomplete (the last line of the file only)
    wxTextFileType_Unix,  // line is terminated with 'LF' = 0xA = 10 = '\n'
    wxTextFileType_Dos,   //                         'CR' 'LF'
    wxTextFileType_Mac    //                         'CR' = 0xD = 13 = '\r'
};
</pre>

</structs>
<seealso>

<ref target="wxfile">wxFile</ref>

</seealso>
<members>
<member class="wxTextFile" name="wxTextFile"><function type="" name="wxTextFile" suffix="const"><description>

Default constructor, use <ref target="wxtextfilecreate">Create</ref> or 
<ref target="wxtextfileopen">Open</ref> with a file name parameter to initialize the object.

</description></function></member>
<member class="wxTextFile" name="wxTextFile"><function type="" name="wxTextFile" suffix="const"><parameters><parameter type="const wxString&amp; " name="strFile"></parameter></parameters><description>

Constructor does not load the file into memory, use Open() to do it. 

</description></function></member>
<member class="wxTextFile" name="~wxTextFile"><function type="" name="~wxTextFile" suffix="const"><description>

Destructor does nothing.

</description></function></member>
<member class="wxTextFile" name="AddLine"><function type="void" name="AddLine" suffix="const"><parameters><parameter type="const wxString&amp; " name="str"></parameter><parameter type="wxTextFileType " name="type" value="typeDefault"></parameter></parameters><description>

Adds a line to the end of file.

</description></function></member>
<member class="wxTextFile" name="Close"><function type="bool" name="Close" suffix="const"><description>

Closes the file and frees memory, <b> losing all changes</b>. Use <ref target="wxtextfilewrite">Write()</ref> 
if you want to save them.

</description></function></member>
<member class="wxTextFile" name="Create"><function type="bool" name="Create" suffix="const"><description>

</description></function>
<function type="bool" name="Create" suffix="const"><parameters><parameter type="const wxString&amp; " name="strFile"></parameter></parameters><description>

Creates the file with the given name or the name which was given in the
<ref target="wxtextfilector">constructor</ref>. The array of file lines is initially
empty.

It will fail if the file already exists, <ref target="wxtextfileopen">Open</ref> should
be used in this case.

</description></function></member>
<member class="wxTextFile" name="Exists"><function type="bool" name="Exists" suffix="const"><description>

Return true if file exists - the name of the file should have been specified
in the constructor before calling Exists().

</description></function></member>
<member class="wxTextFile" name="IsOpened"><function type="bool" name="IsOpened" suffix="const"><description>

Returns true if the file is currently opened.

</description></function></member>
<member class="wxTextFile" name="GetLineCount"><function type="size_t" name="GetLineCount" suffix="const"><description>

Get the number of lines in the file.

</description></function></member>
<member class="wxTextFile" name="GetLine"><function type="wxString&amp;" name="GetLine" suffix="const"><parameters><parameter type="size_t " name="n"></parameter></parameters><description>

Retrieves the line number <i> n</i> from the file. The returned line may be
modified but you shouldn't add line terminator at the end - this will be done
by wxTextFile.

</description></function></member>
<member class="wxTextFile" name="operator&#91;]"><function type="wxString&amp;" name="operator&#91;]" suffix="const"><parameters><parameter type="size_t " name="n"></parameter></parameters><description>

The same as <ref target="wxtextfilegetline">GetLine</ref>.

</description></function></member>
<member class="wxTextFile" name="GetCurrentLine"><function type="size_t" name="GetCurrentLine" suffix="const"><description>

Returns the current line: it has meaning only when you're using
GetFirstLine()/GetNextLine() functions, it doesn't get updated when
you're using &quot;direct access&quot; functions like GetLine(). GetFirstLine() and
GetLastLine() also change the value of the current line, as well as
GoToLine().

</description></function></member>
<member class="wxTextFile" name="GoToLine"><function type="void" name="GoToLine" suffix="const"><parameters><parameter type="size_t " name="n"></parameter></parameters><description>

Changes the value returned by <ref target="wxtextfilegetcurrentline">GetCurrentLine</ref> 
and used by <ref target="wxtextfilegetfirstline">GetFirstLine()</ref>/<ref target="wxtextfilegetnextline">GetNextLine()</ref>.

</description></function></member>
<member class="wxTextFile" name="Eof"><function type="bool" name="Eof" suffix="const"><description>

Returns true if the current line is the last one.

</description></function></member>
<member class="wxTextFile" name="GetEOL"><function type="static const char&#42;" name="GetEOL" suffix="const"><parameters><parameter type="wxTextFileType " name="type" value="typeDefault"></parameter></parameters><description>

Get the line termination string corresponding to given constant. <i> typeDefault</i> is
the value defined during the compilation and corresponds to the native format
of the platform, i.e. it will be wxTextFileType_Dos under Windows,
wxTextFileType_Unix under Unix (including Mac OS X when compiling with the
Apple Developer Tools) and wxTextFileType_Mac under Mac OS (including
Mac OS X when compiling with CodeWarrior).

</description></function></member>
<member class="wxTextFile" name="GetFirstLine"><function type="wxString&amp;" name="GetFirstLine" suffix="const"><description>

This method together with <ref target="wxtextfilegetnextline">GetNextLine()</ref> 
allows more &quot;iterator-like&quot; traversal of the list of lines, i.e. you may
write something like:

<pre>
wxTextFile file;
...
for ( str = file.GetFirstLine(); !file.Eof(); str = file.GetNextLine() )
{
    // do something with the current line in str
}
// do something with the last line in str
</pre>

</description></function></member>
<member class="wxTextFile" name="GetNextLine"><function type="wxString&amp;" name="GetNextLine"><description>

Gets the next line (see <ref target="wxtextfilegetfirstline">GetFirstLine</ref> for 
the example).

</description></function></member>
<member class="wxTextFile" name="GetPrevLine"><function type="wxString&amp;" name="GetPrevLine"><description>

Gets the previous line in the file.

</description></function></member>
<member class="wxTextFile" name="GetLastLine"><function type="wxString&amp;" name="GetLastLine"><description>

Gets the last line of the file. Together with 
<ref target="wxtextfilegetprevline">GetPrevLine</ref> it allows to enumerate the lines
in the file from the end to the beginning like this:

<pre>
wxTextFile file;
...
for ( str = file.GetLastLine();
      file.GetCurrentLine() &gt; 0;
      str = file.GetPrevLine() )
{
    // do something with the current line in str
}
// do something with the first line in str
</pre>

</description></function></member>
<member class="wxTextFile" name="GetLineType"><function type="wxTextFileType" name="GetLineType" suffix="const"><parameters><parameter type="size_t " name="n"></parameter></parameters><description>

Get the type of the line (see also <ref target="wxtextfilegeteol">GetEOL</ref>)

</description></function></member>
<member class="wxTextFile" name="GuessType"><function type="wxTextFileType" name="GuessType" suffix="const"><description>

Guess the type of file (which is supposed to be opened). If sufficiently
many lines of the file are in DOS/Unix/Mac format, the corresponding value will
be returned. If the detection mechanism fails wxTextFileType_None is returned.

</description></function></member>
<member class="wxTextFile" name="GetName"><function type="const char&#42;" name="GetName" suffix="const"><description>

Get the name of the file.

</description></function></member>
<member class="wxTextFile" name="InsertLine"><function type="void" name="InsertLine" suffix="const"><parameters><parameter type="const wxString&amp; " name="str"></parameter><parameter type="size_t " name="n"></parameter><parameter type="wxTextFileType " name="type" value="typeDefault"></parameter></parameters><description>

Insert a line before the line number <i> n</i>.

</description></function></member>
<member class="wxTextFile" name="Open"><function type="bool" name="Open" suffix="const"><parameters><parameter type="wxMBConv&amp;" name="conv" value="wxConvUTF8"></parameter></parameters><description>

</description></function>
<function type="bool" name="Open" suffix="const"><parameters><parameter type="const wxString&amp; " name="strFile"></parameter><parameter type="wxMBConv&amp;" name="conv" value="wxConvUTF8"></parameter></parameters><description>

Open() opens the file with the given name or the name which was given in the
<ref target="wxtextfilector">constructor</ref> and also loads file in memory on
success. It will fail if the file does not exist, 
<ref target="wxtextfilecreate">Create</ref> should be used in this case.

The <i> conv</i> argument is only meaningful in Unicode build of wxWindows when
it is used to convert the file to wide character representation.

</description></function></member>
<member class="wxTextFile" name="RemoveLine"><function type="void" name="RemoveLine" suffix="const"><parameters><parameter type="size_t " name="n"></parameter></parameters><description>

Delete line number <i> n</i> from the file.

</description></function></member>
<member class="wxTextFile" name="Clear"><function type="void" name="Clear" suffix="const"><description>

Delete all lines from the file, set current line number to 0.

</description></function></member>
<member class="wxTextFile" name="Write"><function type="bool" name="Write" suffix="const"><parameters><parameter type="wxTextFileType " name="typeNew" value="wxTextFileType_None"></parameter><parameter type="wxMBConv&amp;" name="conv" value="wxConvUTF8"></parameter></parameters><description>

Change the file on disk. The <i> typeNew</i> parameter allows you to change the
file format (default argument means &quot;don't change type&quot;) and may be used to
convert, for example, DOS files to Unix.

The <i> conv</i> argument is only meaningful in Unicode build of wxWindows when
it is used to convert all lines to multibyte representation before writing them
them to physical file.

Returns true if operation succeeded, false if it failed.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTextInputStream">
<description>
<p class="classdesc">
This class provides functions that read text datas using an input stream.
So, you can read <i> text</i> floats, integers.</p><p class="classdesc">The wxTextInputStream correctly reads text files (or streams) in DOS, Macintosh
and Unix formats and reports a single newline char as a line ending.</p><p class="classdesc">Operator &gt;&gt; is overloaded and you can use this class like a standard C++ iostream.
Note, however, that the arguments are the fixed size types wxUint32, wxInt32 etc
and on a typical 32-bit computer, none of these match to the &quot;long&quot; type (wxInt32
is defined as int on 32-bit architectures) so that you cannot use long. To avoid
problems (here and elsewhere), make use of wxInt32, wxUint32 and similar types.</p><p class="classdesc">For example:</p><p class="classdesc"><pre>
  wxFileInputStream input( &quot;mytext.txt&quot; );
  wxTextInputStream text( input );
  wxUint8 i1;
  float f2;
  wxString line;

  text &gt;&gt; i1;       // read a 8 bit integer.
  text &gt;&gt; i1 &gt;&gt; f2; // read a 8 bit integer followed by float.
  text &gt;&gt; line;     // read a text line
</pre></p>
</description>
<includes>
<header name="wx/txtstrm.h"/></includes>
<members>
<member class="wxTextInputStream" name="wxTextInputStream"><function type="" name="wxTextInputStream"><parameters><parameter type="wxInputStream&amp;" name=" stream"></parameter></parameters><description>

Constructs a text stream object from an input stream. Only read methods will
be available.





</description></function></member>
<member class="wxTextInputStream" name="~wxTextInputStream"><function type="" name="~wxTextInputStream"><description>

Destroys the wxTextInputStream object.

</description></function></member>
<member class="wxTextInputStream" name="Read8"><function type="wxUint8" name="Read8"><description>

Reads a single byte from the stream.

</description></function></member>
<member class="wxTextInputStream" name="Read16"><function type="wxUint16" name="Read16"><description>

Reads a 16 bit integer from the stream.

</description></function></member>
<member class="wxTextInputStream" name="Read32"><function type="wxUint32" name="Read32"><description>

Reads a 32 bit integer from the stream.

</description></function></member>
<member class="wxTextInputStream" name="ReadDouble"><function type="double" name="ReadDouble"><description>

Reads a double (IEEE encoded) from the stream.

</description></function></member>
<member class="wxTextInputStream" name="ReadLine"><function type="wxString" name="wxTextInputStream::ReadLine"><description>

Reads a line from the input stream and returns it (without the end of line
character).

</description></function></member>
<member class="wxTextInputStream" name="ReadString"><function type="wxString" name="wxTextInputStream::ReadString"><description>

<b> NB:</b> This method is deprecated, use <ref target="wxtextinputstreamreadline">ReadLine</ref> 
or <ref target="wxtextinputstreamreadword">ReadWord</ref> instead.

Same as <ref target="wxtextinputstreamreadline">ReadLine</ref>.

</description></function></member>
<member class="wxTextInputStream" name="ReadWord"><function type="wxString" name="wxTextInputStream::ReadWord"><seealso>

<ref target="wxtextinputstreamsetstringseparators">SetStringSeparators</ref>

</seealso><description>

Reads a word (a sequence of characters until the next separator) from the
input stream.

</description></function></member>
<member class="wxTextInputStream" name="SetStringSeparators"><function type="void" name="SetStringSeparators"><parameters><parameter type="const wxString&amp; " name="sep"></parameter></parameters><description>

Sets the characters which are used to define the word boundaries in 
<ref target="wxtextinputstreamreadword">ReadWord</ref>.

The default separators are the space and <tt> TAB</tt> characters.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTextOutputStream">
<description>
<p class="classdesc">
This class provides functions that write text datas using an output stream.
So, you can write <i> text</i> floats, integers.</p><p class="classdesc">You can also simulate the C++ cout class:</p><p class="classdesc"><pre>
  wxFFileOutputStream output( stderr );
  wxTextOutputStream cout( output );

  cout &lt;&lt; &quot;This is a text line&quot; &lt;&lt; endl;
  cout &lt;&lt; 1234;
  cout &lt;&lt; 1.23456;
</pre></p><p class="classdesc">The wxTextOutputStream writes text files (or streams) on DOS, Macintosh
and Unix in their native formats (concerning the line ending).</p>
</description>
<members>
<member class="wxTextOutputStream" name="wxTextOutputStream"><function type="" name="wxTextOutputStream"><parameters><parameter type="wxOutputStream&amp;" name=" stream"></parameter><parameter type="wxEOL" name="mode" value="wxEOL_NATIVE">The end-of-line mode. One of <b> wxEOL_NATIVE</b>, <b> wxEOL_DOS</b>, <b> wxEOL_MAC</b> and <b> wxEOL_UNIX</b>.</parameter></parameters><description>

Constructs a text stream object from an output stream. Only write methods will
be available.







</description></function></member>
<member class="wxTextOutputStream" name="~wxTextOutputStream"><function type="" name="~wxTextOutputStream"><description>

Destroys the wxTextOutputStream object.

</description></function></member>
<member class="wxTextOutputStream" name="GetMode"><function type="wxEOL" name="wxTextOutputStream::GetMode"><description>

Returns the end-of-line mode. One of <b> wxEOL_DOS</b>, <b> wxEOL_MAC</b> and <b> wxEOL_UNIX</b>.

</description></function></member>
<member class="wxTextOutputStream" name="SetMode"><function type="void" name="wxTextOutputStream::SetMode"><parameters></parameters><description>

Set the end-of-line mode. One of <b> wxEOL_NATIVE</b>, <b> wxEOL_DOS</b>, <b> wxEOL_MAC</b> and <b> wxEOL_UNIX</b>.

</description></function></member>
<member class="wxTextOutputStream" name="Write8"><function type="void" name="wxTextOutputStream::Write8"><parameters></parameters><description>

Writes the single byte <i> i8</i> to the stream.

</description></function></member>
<member class="wxTextOutputStream" name="Write16"><function type="void" name="wxTextOutputStream::Write16"><parameters></parameters><description>

Writes the 16 bit integer <i> i16</i> to the stream.

</description></function></member>
<member class="wxTextOutputStream" name="Write32"><function type="void" name="wxTextOutputStream::Write32"><parameters></parameters><description>

Writes the 32 bit integer <i> i32</i> to the stream.

</description></function></member>
<member class="wxTextOutputStream" name="WriteDouble"><function type="virtual void" name="wxTextOutputStream::WriteDouble"><parameters></parameters><description>

Writes the double <i> f</i> to the stream using the IEEE format.

</description></function></member>
<member class="wxTextOutputStream" name="WriteString"><function type="virtual void" name="wxTextOutputStream::WriteString"><parameters></parameters><description>

Writes <i> string</i> as a line. Depending on the end-of-line mode the end of
line ('$\backslash$n') characters in the string are converted to the correct
line ending terminator.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTextValidator">
<description>
<p class="classdesc">
wxTextValidator validates text controls, providing a variety of filtering behaviours.</p><p class="classdesc">For more information, please see <ref target="validatoroverview">Validator overview</ref>.</p>
</description>
<parents>
<classref name="wxValidator"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/valtext.h"/></includes>
<seealso>

<ref target="validatoroverview">Validator overview</ref><ref target="wxvalidator">wxValidator</ref>,
<ref target="wxgenericvalidator">wxGenericValidator</ref>

</seealso>
<members>
<member class="wxTextValidator" name="wxTextValidator"><function type="" name="wxTextValidator"><parameters><parameter type="const wxTextValidator&amp;" name=" validator"></parameter></parameters><description>

Copy constructor.

</description></function>
<function type="" name="wxTextValidator"><parameters><parameter type="long" name="style" value="wxFILTER_NONE"></parameter><parameter type="wxString&#42; " name="valPtr" value="NULL">A pointer to a wxString variable that contains the value. This variable
should have a lifetime equal to or longer than the validator lifetime (which is usually
determined by the lifetime of the window). </parameter></parameters><description>

Constructor, taking a style and optional pointer to a wxString variable.







</description></function></member>
<member class="wxTextValidator" name="~wxTextValidator"><function type="" name="~wxTextValidator"><description>

Destructor.

</description></function></member>
<member class="wxTextValidator" name="Clone"><function type="virtual wxValidator&#42;" name="Clone" suffix="const"><description>

Clones the text validator using the copy constructor.

</description></function></member>
<member class="wxTextValidator" name="GetExcludeList"><function type="wxStringList&amp;" name="GetExcludeList" suffix="const"><description>

Returns a reference to the exclude list (the list of invalid values).

</description></function></member>
<member class="wxTextValidator" name="GetIncludeList"><function type="wxStringList&amp;" name="GetIncludeList" suffix="const"><description>

Returns a reference to the include list (the list of valid values).

</description></function></member>
<member class="wxTextValidator" name="GetStyle"><function type="long" name="GetStyle" suffix="const"><description>

Returns the validator style.

</description></function></member>
<member class="wxTextValidator" name="OnChar"><function type="void" name="OnChar"><parameters><parameter type="wxKeyEvent&amp;" name=" event"></parameter></parameters><description>

Receives character input from the window and filters it according to the
current validator style.

</description></function></member>
<member class="wxTextValidator" name="SetExcludeList"><function type="void" name="SetExcludeList"><parameters><parameter type="const wxStringList&amp;" name=" stringList"></parameter></parameters><description>

Sets the exclude list (invalid values for the user input).

</description></function></member>
<member class="wxTextValidator" name="SetIncludeList"><function type="void" name="SetIncludeList"><parameters><parameter type="const wxStringList&amp;" name=" stringList"></parameter></parameters><description>

Sets the include list (valid values for the user input).

</description></function></member>
<member class="wxTextValidator" name="SetStyle"><function type="void" name="SetStyle"><parameters><parameter type="long" name=" style"></parameter></parameters><description>

Sets the validator style.

</description></function></member>
<member class="wxTextValidator" name="TransferFromWindow"><function type="virtual bool" name="TransferFromWindow"><parameters></parameters><description>

Transfers the string value to the window.

</description></function></member>
<member class="wxTextValidator" name="TransferToWindow"><function type="virtual bool" name="TransferToWindow"><parameters></parameters><description>

Transfers the window value to the string.

</description></function></member>
<member class="wxTextValidator" name="Validate"><function type="virtual bool" name="Validate"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter></parameters><description>

Validates the window contents against the include or exclude lists, depending
on the validator style.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxThread">
<description>
<p class="classdesc">
A thread is basically a path of execution through a program. Threads are
sometimes called <i> light-weight processes</i>, but the fundamental difference
between threads and processes is that memory spaces of different processes are
separated while all threads share the same address space. While it makes it
much easier to share common data between several threads, it also makes much
easier to shoot oneself in the foot, so careful use of synchronization objects
such as <ref target="wxmutex">mutexes</ref> and/or <ref target="wxcriticalsection">critical sections</ref> is recommended.</p><p class="classdesc">There are two types of threads in wxWindows: <i> detached</i> and <i> joinable</i>
ones, just as in the POSIX thread API (but unlike Win32 threads where all threads
are joinable). The difference between the two is that only joinable threads
can return a return code -- this is returned by the Wait() function. Detached
threads (the default type) cannot be waited for.</p><p class="classdesc">You shouldn't hurry to create all the threads joinable, however, because this
has a disadvantage as well: you <b> must</b> Wait() for a joinable thread or the
system resources used by it will never be freed, and you also must delete the
corresponding wxThread object yourself. In contrast, detached threads are of the
&quot;fire-and-forget&quot; kind: you only have to start a detached thread and it will
terminate and destroy itself.</p><p class="classdesc">This means, of course, that all detached threads <b> must</b> be created on the
heap because the thread will call <tt> delete this;</tt> upon termination. Joinable
threads may be created on the stack although more usually they will be created
on the heap as well. Don't create global thread objects because they allocate
memory in their constructor, which will cause problems for the memory checking
system.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/thread.h"/></includes>
<seealso>

<ref target="wxmutex">wxMutex</ref><ref target="wxcondition">wxCondition</ref><ref target="wxcriticalsection">wxCriticalSection</ref>

</seealso>
<members>
<member class="wxThread" name="wxThread"><function type="" name="wxThread"><parameters><parameter type="wxThreadKind " name="kind" value="wxTHREAD_DETACHED"></parameter></parameters><description>

This constructor creates a new detached (default) or joinable C++ thread object. It
does not create or start execution of the real thread -- for this you should
use the <ref target="wxthreadcreate">Create</ref> and <ref target="wxthreadrun">Run</ref> methods.

The possible values for <i> kind</i> parameters are:

\twocolwidtha{7cm}
<table>
<tr><td><b> wxTHREAD_DETACHED</b></td><td>Create a detached thread.</td></tr>
<tr><td><b> wxTHREAD_JOINABLE</b></td><td>Create a joinable thread</td></tr>
</table>

</description></function></member>
<member class="wxThread" name="~wxThread"><function type="" name="~wxThread"><description>

The destructor frees the resources associated with the thread. Notice that you
should never delete a detached thread -- you may only call
<ref target="wxthreaddelete">Delete</ref> on it or wait until it terminates (and auto
destructs) itself. Because the detached threads delete themselves, they can
only be allocated on the heap.

Joinable threads should be deleted explicitly. The <ref target="wxthreaddelete">Delete</ref> and <ref target="wxthreadkill">Kill</ref> functions
will not delete the C++ thread object. It is also safe to allocate them on
stack.

</description></function></member>
<member class="wxThread" name="Create"><function type="wxThreadError" name="Create"><parameters><parameter type="unsigned int " name="stackSize" value="0"></parameter></parameters><returnvalue>

One of:

\twocolwidtha{7cm}
<table>
<tr><td><b> wxTHREAD_NO_ERROR</b></td><td>There was no error.</td></tr>
<tr><td><b> wxTHREAD_NO_RESOURCE</b></td><td>There were insufficient resources to create a new thread.</td></tr>
<tr><td><b> wxTHREAD_RUNNING</b></td><td>The thread is already running.</td></tr>
</table>

</returnvalue><description>

Creates a new thread. The thread object is created in the suspended state, and you
should call <ref target="wxthreadrun">Run</ref> to start running it.  You may optionally
specify the stack size to be allocated to it (Ignored on platforms that don't
support setting it explicitly, eg. Unix).

</description></function></member>
<member class="wxThread" name="Delete"><function type="void" name="Delete"><description>

Calling <ref target="wxthreaddelete">Delete</ref> is a graceful way to terminate the
thread. It asks the thread to terminate and, if the thread code is well
written, the thread will terminate after the next call to
<ref target="wxthreadtestdestroy">TestDestroy</ref> which should happen quite soon.

However, if the thread doesn't call <ref target="wxthreadtestdestroy">TestDestroy</ref>
often enough (or at all), the function will not return immediately, but wait
until the thread terminates. As it may take a long time, and the message processing
is not stopped during this function execution, message handlers may be
called from inside it!

Delete() may be called for a thread in any state: running, paused or even not
yet created. Moreover, it must be called if <ref target="wxthreadcreate">Create</ref> or
<ref target="wxthreadrun">Run</ref> fail in order to free the memory occupied by the
thread object. However, you should not call Delete() on a detached thread which
already terminated -- doing so will probably result in a crash because the
thread object doesn't exist any more.

For detached threads Delete() will also delete the C++ thread object, but it
will not do this for joinable ones.

This function can only be called from another thread context.

</description></function></member>
<member class="wxThread" name="Entry"><function type="virtual ExitCode" name="Entry"><description>

This is the entry point of the thread. This function is pure virtual and must
be implemented by any derived class. The thread execution will start here.

The returned value is the thread exit code which is only useful for
joinable threads and is the value returned by <ref target="wxthreadwait">Wait</ref>.

This function is called by wxWindows itself and should never be called
directly.

</description></function></member>
<member class="wxThread" name="Exit"><function type="void" name="Exit"><parameters><parameter type="ExitCode " name="exitcode" value="0"></parameter></parameters><description>

This is a protected function of the wxThread class and thus can only be called
from a derived class. It also can only be called in the context of this
thread, i.e. a thread can only exit from itself, not from another thread.

This function will terminate the OS thread (i.e. stop the associated path of
execution) and also delete the associated C++ object for detached threads.
<ref target="wxthreadonexit">wxThread::OnExit</ref> will be called just before exiting.

</description></function></member>
<member class="wxThread" name="GetCPUCount"><function type="static int" name="GetCPUCount"><seealso>

<ref target="wxthreadsetconcurrency">SetConcurrency</ref>

</seealso><description>

Returns the number of system CPUs or -1 if the value is unknown.

</description></function></member>
<member class="wxThread" name="GetCurrentId"><function type="static unsigned long" name="GetCurrentId"><description>

Returns the platform specific thread ID of the current thread as a
long.  This can be used to uniquely identify threads, even if they are
not wxThreads.

</description></function></member>
<member class="wxThread" name="GetId"><function type="unsigned long" name="GetId" suffix="const"><description>

Gets the thread identifier: this is a platform dependent number that uniquely identifies the
thread throughout the system during its existence (i.e. the thread identifiers may be reused).

</description></function></member>
<member class="wxThread" name="GetPriority"><function type="int" name="GetPriority" suffix="const"><description>

Gets the priority of the thread, between zero and 100.

The following priorities are defined:

\twocolwidtha{7cm}
<table>
<tr><td><b> WXTHREAD_MIN_PRIORITY</b></td><td>0</td></tr>
<tr><td><b> WXTHREAD_DEFAULT_PRIORITY</b></td><td>50</td></tr>
<tr><td><b> WXTHREAD_MAX_PRIORITY</b></td><td>100</td></tr>
</table>

</description></function></member>
<member class="wxThread" name="IsAlive"><function type="bool" name="IsAlive" suffix="const"><description>

Returns true if the thread is alive (i.e. started and not terminating).

</description></function></member>
<member class="wxThread" name="IsDetached"><function type="bool" name="IsDetached" suffix="const"><description>

Returns true if the thread is of the detached kind, false if it is a joinable one.

</description></function></member>
<member class="wxThread" name="IsMain"><function type="static bool" name="IsMain"><description>

Returns true if the calling thread is the main application thread.

</description></function></member>
<member class="wxThread" name="IsPaused"><function type="bool" name="IsPaused" suffix="const"><description>

Returns true if the thread is paused.

</description></function></member>
<member class="wxThread" name="IsRunning"><function type="bool" name="IsRunning" suffix="const"><description>

Returns true if the thread is running.

</description></function></member>
<member class="wxThread" name="Kill"><function type="wxThreadError" name="Kill"><description>

Immediately terminates the target thread. <b> This function is dangerous and should
be used with extreme care (and not used at all whenever possible)!</b> The resources
allocated to the thread will not be freed and the state of the C runtime library
may become inconsistent. Use <ref target="wxthreaddelete">Delete()</ref> instead.

For detached threads Kill() will also delete the associated C++ object.
However this will not happen for joinable threads and this means that you will
still have to delete the wxThread object yourself to avoid memory leaks.
In neither case <ref target="wxthreadonexit">OnExit</ref> of the dying thread will be
called, so no thread-specific cleanup will be performed.

This function can only be called from another thread context, i.e. a thread
cannot kill itself.

It is also an error to call this function for a thread which is not running or
paused (in the latter case, the thread will be resumed first) -- if you do it,
a <tt> wxTHREAD_NOT_RUNNING</tt> error will be returned.

</description></function></member>
<member class="wxThread" name="OnExit"><function type="void" name="OnExit"><description>

Called when the thread exits. This function is called in the context of the
thread associated with the wxThread object, not in the context of the main
thread. This function will not be called if the thread was
<ref target="wxthreadkill">killed</ref>.

This function should never be called directly.

</description></function></member>
<member class="wxThread" name="Pause"><function type="wxThreadError" name="Pause"><description>

Suspends the thread. Under some implementations (Win32), the thread is
suspended immediately, under others it will only be suspended when it calls
<ref target="wxthreadtestdestroy">TestDestroy</ref> for the next time (hence, if the
thread doesn't call it at all, it won't be suspended).

This function can only be called from another thread context.

</description></function></member>
<member class="wxThread" name="Run"><function type="wxThreadError" name="Run"><description>

Starts the thread execution. Should be called after
<ref target="wxthreadcreate">Create</ref>.

This function can only be called from another thread context.

</description></function></member>
<member class="wxThread" name="SetPriority"><function type="void" name="SetPriority"><parameters><parameter type="int" name=" priority"></parameter></parameters><description>

Sets the priority of the thread, between 0 and 100. It can only be set
after calling <ref target="wxthreadcreate">Create()</ref> but before calling
<ref target="wxthreadrun">Run()</ref>.

The following priorities are already defined:

\twocolwidtha{7cm}
<table>
<tr><td><b> WXTHREAD_MIN_PRIORITY</b></td><td>0</td></tr>
<tr><td><b> WXTHREAD_DEFAULT_PRIORITY</b></td><td>50</td></tr>
<tr><td><b> WXTHREAD_MAX_PRIORITY</b></td><td>100</td></tr>
</table>

</description></function></member>
<member class="wxThread" name="Sleep"><function type="static void" name="Sleep"><parameters><parameter type="unsigned long " name="milliseconds"></parameter></parameters><description>

Pauses the thread execution for the given amount of time.

This function should be used instead of <ref target="wxsleep">wxSleep</ref> by all worker
threads (i.e. all except the main one).

</description></function></member>
<member class="wxThread" name="Resume"><function type="wxThreadError" name="Resume"><description>

Resumes a thread suspended by the call to <ref target="wxthreadpause">Pause</ref>.

This function can only be called from another thread context.

</description></function></member>
<member class="wxThread" name="SetConcurrency"><function type="static bool" name="SetConcurrency"><parameters><parameter type="size_t " name="level"></parameter></parameters><description>

Sets the thread concurrency level for this process. This is, roughly, the
number of threads that the system tries to schedule to run in parallel.
The value of 0 for <i> level</i> may be used to set the default one.

Returns true on success or false otherwise (for example, if this function is
not implemented for this platform -- currently everything except Solaris).

</description></function></member>
<member class="wxThread" name="TestDestroy"><function type="bool" name="TestDestroy"><description>

This function should be called periodically by the thread to ensure that calls
to <ref target="wxthreadpause">Pause</ref> and <ref target="wxthreaddelete">Delete</ref> will
work. If it returns true, the thread should exit as soon as possible.

</description></function></member>
<member class="wxThread" name="This"><function type="static wxThread &#42;" name="This"><description>

Return the thread object for the calling thread. NULL is returned if the calling thread
is the main (GUI) thread, but <ref target="wxthreadismain">IsMain</ref> should be used to test
whether the thread is really the main one because NULL may also be returned for the thread
not created with wxThread class. Generally speaking, the return value for such a thread
is undefined.

</description></function></member>
<member class="wxThread" name="Yield"><function type="void" name="Yield"><description>

Give the rest of the thread time slice to the system allowing the other threads to run.
See also <ref target="wxthreadsleep">Sleep()</ref>.

</description></function></member>
<member class="wxThread" name="Wait"><function type="ExitCode" name="Wait" suffix="const"><description>

Waits until the thread terminates and returns its exit code or <tt> (ExitCode)-1</tt> on error.

You can only Wait() for joinable (not detached) threads.

This function can only be called from another thread context.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTimeSpan">
<description>
<p class="classdesc">
wxTimeSpan class represents a time interval.</p>
</description>
<parents></parents>
<includes>
<header name="wx/datetime.h"/></includes>
<seealso>

<ref target="wxdatetimeoverview">Date classes overview</ref>,
<ref target="wxdatetime">wxDateTime</ref>

</seealso>
<members>
<member class="" name=""></member>
<member class="" name=""></member>
<member class="" name=""></member>
<member class="" name=""></member>
<member class="" name=""></member>
<member class="" name=""></member>
<member class="wxTimeSpan" name="Abs"><function type="wxTimeSpan" name="Abs" suffix="const"><description>

Returns the absolute value of the timespan: does not modify the
object.

</description></function></member>
<member class="wxTimeSpan" name="Add"><function type="wxTimeSpan" name="Add" suffix="const"><parameters><parameter type="const wxTimeSpan&amp; " name="diff"></parameter></parameters><description>

</description></function>
<function type="wxTimeSpan&amp;" name="Add"><parameters><parameter type="const wxTimeSpan&amp; " name="diff"></parameter></parameters><description>

</description></function>
<function type="wxTimeSpan&amp;" name="operator$+=$"><parameters><parameter type="const wxTimeSpan&amp;" name="diff"></parameter></parameters><description>

Returns the sum of two timespans.

</description></function></member>
<member class="wxTimeSpan" name="Days"><function type="static wxTimespan" name="Days"><parameters><parameter type="long " name="days"></parameter></parameters><description>

Returns the timespan for the given number of days.

</description></function></member>
<member class="wxTimeSpan" name="Day"><function type="static wxTimespan" name="Day"><description>

Returns the timespan for one day.

</description></function></member>
<member class="wxTimeSpan" name="Format"><function type="" name=""><parameters></parameters><description></description></function></member>
<member class="wxTimeSpan" name="GetDays"><function type="int" name="GetDays" suffix="const"><description>

Returns the difference in number of days.

</description></function></member>
<member class="wxTimeSpan" name="GetHours"><function type="int" name="GetHours" suffix="const"><description>

Returns the difference in number of hours.

</description></function></member>
<member class="wxTimeSpan" name="GetMilliseconds"><function type="wxLongLong" name="GetMilliseconds" suffix="const"><description>

Returns the difference in number of milliseconds.

</description></function></member>
<member class="wxTimeSpan" name="GetMinutes"><function type="int" name="GetMinutes" suffix="const"><description>

Returns the difference in number of minutes.

</description></function></member>
<member class="wxTimeSpan" name="GetSeconds"><function type="wxLongLong" name="GetSeconds" suffix="const"><description>

Returns the difference in number of seconds.

</description></function></member>
<member class="wxTimeSpan" name="GetValue"><function type="wxLongLong" name="GetValue" suffix="const"><description>

Returns the internal representation of timespan.

</description></function></member>
<member class="wxTimeSpan" name="GetWeeks"><function type="int" name="GetWeeks" suffix="const"><description>

Returns the difference in number of weeks.

</description></function></member>
<member class="wxTimeSpan" name="Hours"><function type="static wxTimespan" name="Hours"><parameters><parameter type="long " name="hours"></parameter></parameters><description>

Returns the timespan for the given number of hours.

</description></function></member>
<member class="wxTimeSpan" name="Hour"><function type="static wxTimespan" name="Hour"><description>

Returns the timespan for one hour.

</description></function></member>
<member class="wxTimeSpan" name="IsEqualTo"><function type="bool" name="IsEqualTo" suffix="const"><parameters><parameter type="const wxTimeSpan&amp; " name="ts"></parameter></parameters><description>

Returns <tt> true</tt> if two timespans are equal.

</description></function></member>
<member class="wxTimeSpan" name="IsLongerThan"><function type="bool" name="IsLongerThan" suffix="const"><parameters><parameter type="const wxTimeSpan&amp; " name="ts"></parameter></parameters><description>

Compares two timespans: works with the absolute values, i.e. -2
hours is longer than 1 hour. Also, it will return <tt> false</tt> if
the timespans are equal in absolute value.

</description></function></member>
<member class="wxTimeSpan" name="IsNegative"><function type="bool" name="IsNegative" suffix="const"><description>

Returns <tt> true</tt> if the timespan is negative.

</description></function></member>
<member class="wxTimeSpan" name="IsNull"><function type="bool" name="IsNull" suffix="const"><description>

Returns <tt> true</tt> if the timespan is empty.

</description></function></member>
<member class="wxTimeSpan" name="IsPositive"><function type="bool" name="IsPositive" suffix="const"><description>

Returns <tt> true</tt> if the timespan is positive.

</description></function></member>
<member class="wxTimeSpan" name="IsShorterThan"><function type="bool" name="IsShorterThan" suffix="const"><parameters><parameter type="const wxTimeSpan&amp; " name="ts"></parameter></parameters><description>

Compares two timespans: works with the absolute values, i.e. 1
hour is shorter than -2 hours. Also, it will return <tt> false</tt> if
the timespans are equal in absolute value.

</description></function></member>
<member class="wxTimeSpan" name="Minutes"><function type="static wxTimespan" name="Minutes"><parameters><parameter type="long " name="min"></parameter></parameters><description>

Returns the timespan for the given number of minutes.

</description></function></member>
<member class="wxTimeSpan" name="Minute"><function type="static wxTimespan" name="Minute"><description>

Returns the timespan for one minute.

</description></function></member>
<member class="wxTimeSpan" name="Multiply"><function type="wxTimeSpan" name="Multiply" suffix="const"><parameters><parameter type="int " name="n"></parameter></parameters><description>

</description></function>
<function type="wxTimeSpan&amp;" name="Multiply"><parameters><parameter type="int " name="n"></parameter></parameters><description>

</description></function>
<function type="wxTimeSpan&amp;" name="operator$&#42;=$"><parameters><parameter type="int " name="n"></parameter></parameters><description>

Multiplies timespan by a scalar.

</description></function></member>
<member class="wxTimeSpan" name="Negate"><function type="wxTimeSpan" name="Negate" suffix="const"><description>

Returns timespan with inversed sign.

</description></function></member>
<member class="wxTimeSpan" name="Neg"><function type="wxTimeSpan&amp;" name="Neg"><description>

</description></function>
<function type="wxTimeSpan&amp;" name="operator$-$"><description>

Negate the value of the timespan.

</description></function></member>
<member class="wxTimeSpan" name="Seconds"><function type="static wxTimespan" name="Seconds"><parameters><parameter type="long " name="sec"></parameter></parameters><description>

Returns the timespan for the given number of seconds.

</description></function></member>
<member class="wxTimeSpan" name="Second"><function type="static wxTimespan" name="Second"><description>

Returns the timespan for one second.

</description></function></member>
<member class="wxTimeSpan" name="Substract"><function type="wxTimeSpan" name="Substract" suffix="const"><parameters><parameter type="const wxTimeSpan&amp;" name="diff"></parameter></parameters><description>

</description></function>
<function type="wxTimeSpan&amp;" name="Substract"><parameters><parameter type="const wxTimeSpan&amp; " name="diff"></parameter></parameters><description>

</description></function>
<function type="wxTimeSpan&amp;" name="operator$-=$"><parameters><parameter type="const wxTimeSpan&amp;" name="diff"></parameter></parameters><description>

Returns the difference of two timespans.

</description></function></member>
<member class="wxTimeSpan" name="Weeks"><function type="static wxTimespan" name="Weeks"><parameters><parameter type="long " name="weeks"></parameter></parameters><description>

Returns the timespan for the given number of weeks.

</description></function></member>
<member class="wxTimeSpan" name="Week"><function type="static wxTimespan" name="Week"><description>

Returns the timespan for one week.

</description></function></member>
<member class="wxTimeSpan" name="wxTimeSpan"><function type="" name="wxTimeSpan"><description>

Default constructor, constructs a zero timespan.

</description></function>
<function type="" name="wxTimeSpan"><parameters><parameter type="long " name="hours"></parameter><parameter type="long " name="min"></parameter><parameter type="long " name="sec"></parameter><parameter type="long " name="msec"></parameter></parameters><description>

Constructs timespan from separate values for each component, with the date
set to 0. Hours are not restricted to 0..24 range, neither are
minutes, seconds or milliseconds.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTimer">
<description>
<p class="classdesc">
The wxTimer class allows you to execute code at specified intervals. Its
precision is platform-dependent, but in general will not be better than 1ms nor
worse than 1s.</p><p class="classdesc">There are two different ways to use this class:</p><p class="classdesc">\begin{enumerate}
\item You may derive a new class from wxTimer and override the 
<ref target="wxtimernotify">Notify</ref> member to perform the required action.
\item Or you may redirect the notifications to any 
<ref target="wxevthandler">wxEvtHandler</ref> derived object by using the non default
constructor or <ref target="wxtimersetowner">SetOwner</ref>. Then use the <tt> EVT_TIMER</tt> 
macro to connect it to the event handler which will receive 
<ref target="wxtimerevent">wxTimerEvent</ref> notifications.
\item Or you may use a derived class and the <tt> EVT_TIMER</tt> 
macro to connect it to an event handler defined in the derived class.
If the default constructor is used, the timer object will be its
own owner object, since it is derived from wxEvtHandler.
\end{enumerate}</p><p class="classdesc">In any case, you must start the timer with <ref target="wxtimerstart">Start</ref> 
after constructing it before it actually starts sending notifications. It can
be stopped later with <ref target="wxtimerstop">Stop</ref>.</p><p class="classdesc"><b> NB:</b> note that timer can only be used from the main thread currently.</p>
</description>
<parents>
<classref name="wxEvtHandler"/>

</parents>
<includes>
<header name="wx/timer.h"/></includes>
<seealso>

<ref target="wxstarttimer">::wxStartTimer</ref><ref target="wxgetelapsedtime">::wxGetElapsedTime</ref><ref target="wxstopwatch">wxStopWatch</ref>

</seealso>
<members>
<member class="wxTimer" name="wxTimer"><function type="" name="wxTimer"><description>

Default constructor. If you use it to construct the object and don't call 
<ref target="wxtimersetowner">SetOwner</ref> later, you must override 
<ref target="wxtimernotify">Notify</ref> method to process the notifications.

</description></function>
<function type="" name="wxTimer"><parameters><parameter type="wxEvtHandler &#42;" name="owner"></parameter><parameter type="int " name="id" value="-1"></parameter></parameters><description>

Creates a timer and associates it with <i> owner</i>. Please see 
<ref target="wxtimersetowner">SetOwner</ref> for the description of parameters.

</description></function></member>
<member class="wxTimer" name="~wxTimer"><function type="" name="~wxTimer"><description>

Destructor. Stops the timer if it is running.

</description></function></member>
<member class="wxTimer" name="GetInterval"><function type="int" name="GetInterval" suffix="const"><description>

Returns the current interval for the timer (in milliseconds).

</description></function></member>
<member class="wxTimer" name="IsOneShot"><function type="bool" name="IsOneShot" suffix="const"><description>

Returns <tt> true</tt> if the timer is one shot, i.e.\ if it will stop after firing the
first notification automatically.

</description></function></member>
<member class="wxTimer" name="IsRunning"><function type="bool" name="IsRunning" suffix="const"><description>

Returns <tt> true</tt> if the timer is running, <tt> false</tt> if it is stopped.

</description></function></member>
<member class="wxTimer" name="Notify"><function type="void" name="Notify"><description>

This member should be overridden by the user if the default constructor was
used and <ref target="wxtimersetowner">SetOwner</ref> wasn't called.

Perform whatever action which is to be taken periodically here.

</description></function></member>
<member class="wxTimer" name="SetOwner"><function type="void" name="SetOwner"><parameters><parameter type="wxEvtHandler &#42;" name="owner"></parameter><parameter type="int " name="id" value="-1"></parameter></parameters><description>

Associates the timer with the given <i> owner</i>\/ object. When the timer is
running, the owner will receive <ref target="wxtimerevent">timer events</ref> with
id equal to <i> id</i>\/ specified here.

</description></function></member>
<member class="wxTimer" name="Start"><function type="bool" name="Start"><parameters><parameter type="int" name="milliseconds" value="-1"></parameter><parameter type="bool " name="oneShot" value="false"></parameter></parameters><description>

(Re)starts the timer. If <i> milliseconds</i>\/ parameter is -1 (value by default),
the previous value is used. Returns <tt> false</tt> if the timer could not be started,
<tt> true</tt> otherwise (in MS Windows timers are a limited resource).

If <i> oneShot</i>\/ is <tt> false</tt> (the default), the <ref target="wxtimernotify">Notify</ref> 
function will be called repeatedly until the timer is stopped. If <tt> true</tt>,
it will be called only once and the timer will stop automatically. To make your
code more readable you may also use the following symbolic constants
\twocolwidtha{5cm}<table>
<tr><td>wxTIMER_CONTINUOUS</td><td>Start a normal, continuously running, timer</td></tr>
<tr><td>wxTIMER_ONE_SHOT</td><td>Start a one shot timer</td></tr>
</table>


If the timer was already running, it will be stopped by this method before
restarting it.

</description></function></member>
<member class="wxTimer" name="Stop"><function type="void" name="Stop"><description>

Stops the timer.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTimerEvent">
<description>
<p class="classdesc">
wxTimerEvent object is passed to the event handler of timer events.</p><p class="classdesc">For example:</p><p class="classdesc"><pre>
class MyFrame : public wxFrame
{
public:
    ...
    void OnTimer(wxTimerEvent&amp; event);

private:
    wxTimer m_timer;
};

BEGIN_EVENT_TABLE(MyFrame, wxFrame)
    EVT_TIMER(TIMER_ID, MyFrame::OnTimer)
END_EVENT_TABLE()

MyFrame::MyFrame()
       : m_timer(this, TIMER_ID)
{
    m_timer.Start(1000);    // 1 second interval
}

void MyFrame::OnTimer(wxTimerEvent&amp; event)
{
    // do whatever you want to do every second here
}

</pre></p>
</description>
<includes>
<header name="wx/timer.h"/></includes>
<seealso>

<ref target="wxtimer">wxTimer</ref>

</seealso>
<members>
<member class="wxTimerEvent" name="GetInterval"><function type="int" name="GetInterval" suffix="const"><description>

Returns the interval of the timer which generated this event.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTipProvider">
<description>
<p class="classdesc">
This is the class used together with <ref target="wxshowtip">wxShowTip</ref> function.
It must implement <ref target="wxtipprovidergettip">GetTip</ref> function and return the
current tip from it (different tip each time it is called).</p><p class="classdesc">You will never use this class yourself, but you need it to show startup tips
with wxShowTip. Also, if you want to get the tips text from elsewhere than a
simple text file, you will want to derive a new class from wxTipProvider and
use it instead of the one returned by <ref target="wxcreatefiletipprovider">wxCreateFileTipProvider</ref>.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/tipdlg.h"/></includes>
<seealso>

<ref target="tipsoverview">Startup tips overview</ref><ref target="wxshowtip">::wxShowTip</ref>

</seealso>
<members>
<member class="wxTipProvider" name="wxTipProvider"><function type="" name="wxTipProvider"><parameters><parameter type="size_t " name="currentTip">The starting tip index.</parameter></parameters><description>

Constructor.



</description></function></member>
<member class="wxTipProvider" name="GetTip"><function type="wxString" name="GetTip"><description>

Return the text of the current tip and pass to the next one. This function is
pure virtual, it should be implemented in the derived classes.

</description></function></member>
<member class="wxTipProvider" name="PreprocessTip"><function type="virtual wxString" name="PreProcessTip"><parameters><parameter type="const wxString&amp;" name="tip"></parameter></parameters><description>

Returns a modified tip. This function will be called immediately after read,
and before being check whether it is a comment, an empty string or a string 
to translate. You can optionally override this in your custom user-derived class 
to optionally to modify the tip as soon as it is read. You can return any 
modification to the string. If you return wxEmptyString, then this tip is 
skipped, and the next one is read.

</description></function></member>
<member class="wxCurrentTipProvider" name="GetCurrentTip"><function type="size_t" name="GetCurrentTip" suffix="const"><description>

Returns the index of the current tip (i.e. the one which would be returned by 
GetTip).

The program usually remembers the value returned by this function after calling 
<ref target="wxshowtip">wxShowTip</ref>. Note that it is not the same as the value which
was passed to wxShowTip $+ 1$ because the user might have pressed the &quot;Next&quot;
button in the tip dialog.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTipWindow">
<description>
<p class="classdesc">
Shows simple text in a popup tip window on creation. This is used by 
<ref target="wxsimplehelpprovider">wxSimpleHelpProvider</ref> to show popup help. The
window automatically destroys itself when the user clicks on it or it loses the
focus.</p><p class="classdesc">You may also use this class to emulate the tooltips when you need finer
control over them than what the standard tooltips provide.</p>
</description>
<parents>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/tipwin.h"/></includes>
<members>
<member class="wxTipWindow" name="wxTipWindow"><function type="" name="wxTipWindow"><parameters><parameter type="wxWindow&#42; " name="parent">The parent window, must be non <tt> NULL</tt></parameter><parameter type="const wxString&amp; " name="text">The text to show, may contain the new line characters</parameter><parameter type="wxCoord " name="maxLength" value="100"></parameter><parameter type="wxTipWindow&#42;&#42; " name="windowPtr">Simply passed to 
<ref target="wxtipwindowsettipwindowptr">SetTipWindowPtr</ref> below, please see its
documentation for the description of this parameter</parameter></parameters><description>

Constructor. The tip is shown immediately the window is constructed.












</description></function></member>
<member class="wxTipWindow" name="SetTipWindowPtr"><function type="void" name="SetTipWindowPtr"><parameters><parameter type="wxTipWindow&#42;&#42; " name="windowPtr"></parameter></parameters><description>

When the tip window closes itself (which may happen at any moment and
unexpectedly to the caller) it may <tt> NULL</tt> out the pointer pointed to by 
<i> windowPtr</i>. This is helpful to avoid dereferencing the tip window which
had been already closed and deleted.


</description></function></member>
<member class="wxTipWindow" name="SetBoundingRect"><function type="void" name="SetBoundingRect"><parameters><parameter type="const wxRect&amp; " name="rectBound">The bounding rectangle for the mouse in the screen coordinates</parameter></parameters><description>

By default, the tip window disappears when the user clicks the mouse or presses
a keyboard key or if it loses focus in any other way - for example because the
user switched to another application window.

Additionally, if a non empty <i> rectBound</i> is provided, the tip window will
also automatically close if the mouse leaves this area. This is useful to
dismiss the tip mouse when the mouse leaves the object it is associated with.





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class>
<class name="wxToggleButton">
<description>
<p class="classdesc">
wxToggleButton is a button that stays pressed when clicked by the user. In
other words, it is similar to <ref target="wxcheckbox">wxCheckBox</ref> in
functionality but looks like a <ref target="wxbutton">wxButton</ref>.</p><p class="classdesc">You can see wxToggleButton in action in the sixth page of the 
<ref target="samplecontrols">controls</ref> sample.</p><p class="classdesc"><b> NB:</b> This class is only available under wxMSW, wxGTK and wxMotif 
currently.</p>
</description>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/tglbtn.h"/></includes>
<windowstyles>
</windowstyles>
<events>
<event name="EVT_TOGGLEBUTTON(id, func)">Handles button click event.</event></events>
<seealso>

<ref target="wxcheckbox">wxCheckBox</ref><ref target="wxbutton">wxButton</ref>

</seealso>
<members>
<member class="wxToggleButton" name="wxToggleButton"><function type="" name="wxToggleButton"><description>

Default constructor.

</description></function>
<function type="" name="wxToggleButton"><parameters><parameter type="wxWindow&#42; " name="parent">Parent window. Must not be <tt> NULL</tt>.</parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp; " name="label">Text to be displayed next to the toggle button.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Toggle button position. If the position $(-1, -1)$ is specified then a default position is chosen.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Toggle button size. If the default size $(-1, -1)$ is specified then a default size is chosen.</parameter><parameter type="long" name="style" value="0">Window style. See <ref target="wxtogglebutton">wxToggleButton</ref>.</parameter><parameter type="const wxValidator&amp; " name="val"></parameter><parameter type="const wxString&amp; " name="name" value="``checkBox&quot;">Window name.</parameter></parameters><seealso>

<ref target="wxtogglebuttoncreate">wxToggleButton::Create</ref><ref target="wxvalidator">wxValidator</ref>

</seealso><description></description></function></member>
<member class="wxToggleButton" name="~wxToggleButton"><function type="" name="~wxToggleButton"><description>

Destructor, destroying the toggle button.

</description></function></member>
<member class="wxToggleButton" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxString&amp; " name="label"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="0"></parameter><parameter type="const wxValidator&amp; " name="val"></parameter><parameter type="const wxString&amp; " name="name" value="``checkBox&quot;"></parameter></parameters><description>

Creates the toggle button for two-step construction. See <ref target="wxtogglebuttonconstr">wxToggleButton::wxToggleButton</ref>
for details.

</description></function></member>
<member class="wxToggleButton" name="GetValue"><function type="bool" name="GetValue" suffix="const"><returnvalue>

Returns <tt> true</tt> if it is pressed, <tt> false</tt> otherwise.

</returnvalue><description>

Gets the state of the toggle button.

</description></function></member>
<member class="wxToggleButton" name="SetValue"><function type="void" name="SetValue"><parameters><parameter type="const bool" name=" state"></parameter></parameters><description>

Sets the toggle button to the given state. This does not cause a 
<tt> EVT_TOGGLEBUTTON</tt> event to be emitted.





</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="N"/><platform name="os2" status="Y"/></supported>
</class><class name="wxToolBar">
<description>
<p class="classdesc">
The name wxToolBar is defined to be a synonym for one of the following classes:</p><p class="classdesc"><ul><li> <b> wxToolBar95</b> The native Windows 95 toolbar. Used on Windows 95, NT 4 and above.
</li>
<li> <b> wxToolBarMSW</b> A Windows implementation. Used on 16-bit Windows.
</li>
<li> <b> wxToolBarGTK</b> The GTK toolbar.
</li>
<li> <b> wxToolBarSimple</b> A simple implementation, with scrolling.
Used on platforms with no native toolbar control, or where scrolling is required.
</li></ul></p><p class="classdesc">Note that the base class <b> wxToolBarBase</b> defines
automatic scrolling management functionality which is similar
to <ref target="wxscrolledwindow">wxScrolledWindow</ref>, so please refer to this class also.
Not all toolbars support scrolling, but wxToolBarSimple does.</p>
</description>
<remarks>

You may also create a toolbar that is managed by the frame, by
calling <ref target="wxframecreatetoolbar">wxFrame::CreateToolBar</ref>.

Due to the use of native toolbars on the various platforms, certain adaptions will
often have to be made in order to get optimal look on all platforms as some platforms
ignore the values for explicit placement and use their own layout and the meaning
of a &quot;separator&quot; is a vertical line under Windows95 vs. simple space under GTK etc.

<b> wxToolBar95:</b> Note that this toolbar paints tools to reflect user-selected colours.

</remarks>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/toolbar.h" comment="(to allow wxWindows to select an appropriate toolbar class)"/></includes>
<windowstyles>
<style name="wxTB_FLAT">Gives the toolbar a flat look ('coolbar' or 'flatbar' style). Windows 95 and GTK 1.2 only.</style><style name="wxTB_DOCKABLE">Makes the toolbar floatable and dockable. GTK only.</style><style name="wxTB_HORIZONTAL">Specifies horizontal layout.</style><style name="wxTB_VERTICAL">Specifies vertical layout (not available for the GTK and Windows 95
toolbar).</style><style name="wxTB_3DBUTTONS">Gives wxToolBarSimple a mild 3D look to its buttons.</style><style name="wxTB_TEXT">Show the text in the toolbar buttons; by default only icons are shown.</style><style name="wxTB_NOICONS">Specifies no icons in the toolbar buttons; by default they are shown.</style><style name="wxTB_NODIVIDER">Specifies no divider above the toolbar; by default it is shown. Windows only.</style><style name="wxTB_NOALIGN">Specifies no alignment with the parent window. Windows only.</style></windowstyles>
<events>
<event name="EVT_TOOL(id, func)">Process a wxEVT_COMMAND_TOOL_CLICKED event
(a synonym for wxEVT_COMMAND_MENU_SELECTED). Pass the id of the tool.</event><event name="EVT_MENU(id, func)">The same as EVT_TOOL.</event><event name="EVT_TOOL_RANGE(id1, id2, func)">Process a wxEVT_COMMAND_TOOL_CLICKED event
for a range id identifiers. Pass the ids of the tools.</event><event name="EVT_MENU_RANGE(id1, id2, func)">The same as EVT_TOOL_RANGE.</event><event name="EVT_TOOL_RCLICKED(id, func)">Process a wxEVT_COMMAND_TOOL_RCLICKED event.
Pass the id of the tool.</event><event name="EVT_TOOL_RCLICKED_RANGE(id1, id2, func)">Process a wxEVT_COMMAND_TOOL_RCLICKED event
for a range of ids. Pass the ids of the tools.</event><event name="EVT_TOOL_ENTER(id, func)">Process a wxEVT_COMMAND_TOOL_ENTER event.
Pass the id of the toolbar itself. The value of wxCommandEvent::GetSelection is the tool id, or -1 if the mouse cursor has moved off a tool.</event></events>
<seealso>

\overview{Toolbar overview}{wxtoolbaroverview},
<ref target="wxscrolledwindow">wxScrolledWindow</ref>

</seealso>
<members>
<member class="wxToolBar" name="wxToolBar"><function type="" name="wxToolBar"><description>

Default constructor.

</description></function>
<function type="" name="wxToolBar"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID " name="id">Window identifier. If -1, will automatically create an identifier.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Window position. wxDefaultPosition is (-1, -1) which indicates that wxWindows
should generate a default position for the window. If using the wxWindow class directly, supply
an actual position.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Window size. wxDefaultSize is (-1, -1) which indicates that wxWindows
should generate a default size for the window.</parameter><parameter type="long " name="style" value="wxTB_HORIZONTAL">Window style. See <ref target="wxtoolbar">wxToolBar</ref> for details.</parameter><parameter type="const wxString&amp; " name="name" value="wxPanelNameStr">Window name.</parameter></parameters><remarks>

After a toolbar is created, you use <ref target="wxtoolbaraddtool">wxToolBar::AddTool</ref> and
perhaps <ref target="wxtoolbaraddseparator">wxToolBar::AddSeparator</ref>, and then you
must call <ref target="wxtoolbarrealize">wxToolBar::Realize</ref> to construct and display the toolbar
tools.

You may also create a toolbar that is managed by the frame, by
calling <ref target="wxframecreatetoolbar">wxFrame::CreateToolBar</ref>.

</remarks><description>

Constructs a toolbar.















</description></function></member>
<member class="wxToolBar" name="~wxToolBar"><function type="void" name="~wxToolBar"><description>

Toolbar destructor.

</description></function></member>
<member class="wxToolBar" name="AddControl"><function type="bool" name="AddControl"><parameters><parameter type="wxControl&#42;" name=" control"></parameter></parameters><description>

Adds any control to the toolbar, typically e.g. a combobox.



</description></function></member>
<member class="wxToolBar" name="AddSeparator"><function type="void" name="AddSeparator"><seealso>

<ref target="wxtoolbaraddtool">wxToolBar::AddTool</ref><ref target="wxtoolbarsettoolseparation">wxToolBar::SetToolSeparation</ref>

</seealso><description></description></function></member>
<member class="wxToolBar" name="AddTool"><function type="wxToolBarTool&#42;" name="AddTool"><parameters><parameter type="int" name=" toolId"></parameter><parameter type="const wxString&amp;" name=" label"></parameter><parameter type="const wxBitmap&amp;" name=" bitmap1"></parameter><parameter type="const wxString&amp; " name="shortHelpString" value="&quot;&quot;">This string is used for the tools tooltip</parameter><parameter type="wxItemKind" name="kind" value="wxITEM_NORMAL">May be wxITEM_NORMAL for a normal button (default),
wxITEM_CHECK for a checkable tool (such tool stays pressed after it had been
toggled) or wxITEM_RADIO for a checkable tool which makes part of a radio
group of tools each of which is automatically unchecked whenever another button
in the group is checked</parameter></parameters><description>

</description></function>
<function type="wxToolBarTool&#42;" name="AddTool"><parameters><parameter type="int" name=" toolId"></parameter><parameter type="const wxString&amp;" name=" label"></parameter><parameter type="const wxBitmap&amp;" name=" bitmap1"></parameter><parameter type="const wxBitmap&amp;" name="bitmap2" value="wxNullBitmap">The second bitmap specifies the on-state bitmap for a toggle
tool. If this is wxNullBitmap, either an inverted version of the primary bitmap is
used for the on-state of a toggle tool (monochrome displays) or a black
border is drawn around the tool (colour displays) or the pixmap is shown
as a pressed button (GTK). </parameter><parameter type="wxItemKind" name="kind" value="wxITEM_NORMAL">May be wxITEM_NORMAL for a normal button (default),
wxITEM_CHECK for a checkable tool (such tool stays pressed after it had been
toggled) or wxITEM_RADIO for a checkable tool which makes part of a radio
group of tools each of which is automatically unchecked whenever another button
in the group is checked</parameter><parameter type="const wxString&amp; " name="shortHelpString" value="&quot;&quot;">This string is used for the tools tooltip</parameter><parameter type="const wxString&amp; " name="longHelpString" value="&quot;&quot;">This string is shown in the statusbar (if any) of the
parent frame when the mouse pointer is inside the tool</parameter><parameter type="wxObject&#42; " name="clientData" value="NULL">An optional pointer to client data which can be
retrieved later using <ref target="wxtoolbargettoolclientdata">wxToolBar::GetToolClientData</ref>.</parameter></parameters><description>

</description></function>
<function type="wxToolBarTool&#42;" name="AddTool"><parameters><parameter type="wxToolBarTool&#42; " name="tool">The tool to be added.</parameter></parameters><seealso>

<ref target="wxtoolbaraddseparator">wxToolBar::AddSeparator</ref>,
<ref target="wxtoolbaraddchecktool">wxToolBar::AddCheckTool</ref>,
<ref target="wxtoolbaraddradiotool">wxToolBar::AddRadioTool</ref>,
<ref target="wxtoolbarinserttool">wxToolBar::InsertTool</ref>,
<ref target="wxtoolbardeletetool">wxToolBar::DeleteTool</ref>,
<ref target="wxtoolbarrealize">wxToolBar::Realize</ref>

</seealso><remarks>

After you have added tools to a toolbar, you must call <ref target="wxtoolbarrealize">wxToolBar::Realize</ref> in
order to have the tools appear.

</remarks><description>

Adds a tool to the toolbar. The first (short and most commonly used) version
has fewer parameters than the full version at the price of not being able to
specify some of the more rarely used button features. The last version allows
to add an existing tool.



















</description></function></member>
<member class="wxToolBar" name="AddCheckTool"><function type="wxToolBarTool&#42;" name="AddCheckTool"><parameters><parameter type="int" name=" toolId"></parameter><parameter type="const wxString&amp;" name=" label"></parameter><parameter type="const wxBitmap&amp;" name=" bitmap1"></parameter><parameter type="const wxBitmap&amp;" name=" bitmap2"></parameter><parameter type="const wxString&amp; " name="shortHelpString" value="&quot;&quot;"></parameter><parameter type="const wxString&amp; " name="longHelpString" value="&quot;&quot;"></parameter><parameter type="wxObject&#42; " name="clientData" value="NULL"></parameter></parameters><seealso>

<ref target="wxtoolbaraddtool">wxToolBar::AddTool</ref>

</seealso><description>

Adds a new check (or toggle) tool to the toolbar. The parameters are the same
as in <ref target="wxtoolbaraddtool">wxToolBar::AddTool</ref>.

</description></function></member>
<member class="wxToolBar" name="AddRadioTool"><function type="wxToolBarTool&#42;" name="AddRadioTool"><parameters><parameter type="int" name=" toolId"></parameter><parameter type="const wxString&amp;" name=" label"></parameter><parameter type="const wxBitmap&amp;" name=" bitmap1"></parameter><parameter type="const wxBitmap&amp;" name=" bitmap2"></parameter><parameter type="const wxString&amp; " name="shortHelpString" value="&quot;&quot;"></parameter><parameter type="const wxString&amp; " name="longHelpString" value="&quot;&quot;"></parameter><parameter type="wxObject&#42; " name="clientData" value="NULL"></parameter></parameters><seealso>

<ref target="wxtoolbaraddtool">wxToolBar::AddTool</ref>

</seealso><description>

Adds a new radio tool to the toolbar. Consecutive radio tools form a radio
group such that exactly one button in the group is pressed at any moment, in
other words whenever a button in the group is pressed the previously pressed
button is automatically released. You should avoid having the radio groups of
only one element as it would be impossible for the user to use such button.

By default, the first button in the radio group is initially pressed, the
others are not.

</description></function></member>
<member class="wxToolBar" name="DeleteTool"><function type="bool" name="DeleteTool"><parameters><parameter type="int " name="toolId"></parameter></parameters><seealso>

<ref target="wxtoolbardeletetoolbypos">DeleteToolByPos</ref>

</seealso><description>

Removes the specified tool from the toolbar and deletes it. If you don't want
to delete the tool, but just to remove it from the toolbar (to possibly add it
back later), you may use <ref target="wxtoolbarremovetool">RemoveTool</ref> instead.

Note that it is unnecessary to call <ref target="wxtoolbarrealize">Realize</ref> for the
change to take place, it will happen immediately.

Returns true if the tool was deleted, false otherwise.

</description></function></member>
<member class="wxToolBar" name="DeleteToolByPos"><function type="bool" name="DeleteToolByPos"><parameters><parameter type="size_t " name="pos"></parameter></parameters><description>

This function behaves like <ref target="wxtoolbardeletetool">DeleteTool</ref> but it
deletes the tool at the specified position and not the one with the given id.

</description></function></member>
<member class="wxToolBar" name="EnableTool"><function type="void" name="EnableTool"><parameters><parameter type="int " name="toolId">Tool to enable or disable.</parameter><parameter type="const bool" name=" enable"></parameter></parameters><seealso>

<ref target="wxtoolbargettoolenabled">wxToolBar::GetToolEnabled</ref>,
<ref target="wxtoolbartoggletool">wxToolBar::ToggleTool</ref>

</seealso><remarks>

For wxToolBarSimple, does nothing. Some other implementations
will change the visible state of the tool to indicate that it is disabled.

</remarks><description>

Enables or disables the tool.







<b> NB:</b> This function should only be called after 
<ref target="wxtoolbarrealize">Realize</ref>.

</description></function></member>
<member class="wxToolBar" name="FindControl"><function type="wxControl&#42;" name="FindControl"><parameters><parameter type="int " name="id"></parameter></parameters><description>

Returns a pointer to the control identified by <i> id</i> or
NULL if no corresponding control is found.

</description></function></member>
<member class="wxToolBar" name="FindToolForPosition"><function type="wxToolBarTool&#42;" name="FindToolForPosition" suffix="const"><parameters><parameter type="const float" name=" x"></parameter><parameter type="const float" name=" y"></parameter></parameters><remarks>

Used internally, and should not need to be used by the programmer.

</remarks><returnvalue>

A pointer to a tool if a tool is found, or NULL otherwise.

</returnvalue><description>

Finds a tool for the given mouse position.







</description></function></member>
<member class="wxToolBar" name="GetToolSize"><function type="wxSize" name="GetToolSize"><seealso>

<ref target="wxtoolbarsettoolbitmapsize">wxToolBar::SetToolBitmapSize</ref>,
<ref target="wxtoolbargettoolbitmapsize">wxToolBar::GetToolBitmapSize</ref>

</seealso><description>

Returns the size of a whole button, which is usually larger than a tool bitmap because
of added 3D effects.

</description></function></member>
<member class="wxToolBar" name="GetToolBitmapSize"><function type="wxSize" name="GetToolBitmapSize"><seealso>

<ref target="wxtoolbarsettoolbitmapsize">wxToolBar::SetToolBitmapSize</ref>,
<ref target="wxtoolbargettoolsize">wxToolBar::GetToolSize</ref>

</seealso><remarks>

Note that this is the size of the bitmap you pass to <ref target="wxtoolbaraddtool">wxToolBar::AddTool</ref>,
and not the eventual size of the tool button.

</remarks><description>

Returns the size of bitmap that the toolbar expects to have. The default bitmap size is 16 by 15 pixels.

</description></function></member>
<member class="wxToolBar" name="GetMargins"><function type="wxSize" name="GetMargins" suffix="const"><seealso>

<ref target="wxtoolbarsetmargins">wxToolBar::SetMargins</ref>

</seealso><description>

Returns the left/right and top/bottom margins, which are also used for inter-toolspacing.

</description></function></member>
<member class="wxToolBar" name="GetToolClientData"><function type="wxObject&#42;" name="GetToolClientData" suffix="const"><parameters><parameter type="int " name="toolId">Id of the tool, as passed to <ref target="wxtoolbaraddtool">wxToolBar::AddTool</ref>.</parameter></parameters><returnvalue>

Client data, or NULL if there is none.

</returnvalue><description>

Get any client data associated with the tool.





</description></function></member>
<member class="wxToolBar" name="GetToolEnabled"><function type="bool" name="GetToolEnabled" suffix="const"><parameters><parameter type="int " name="toolId">Id of the tool in question.</parameter></parameters><seealso>

<ref target="wxtoolbarenabletool">wxToolBar::EnableTool</ref>

</seealso><returnvalue>

true if the tool is enabled, false otherwise.

</returnvalue><description>

Called to determine whether a tool is enabled (responds to user input).





</description></function></member>
<member class="wxToolBar" name="GetToolLongHelp"><function type="wxString" name="GetToolLongHelp" suffix="const"><parameters><parameter type="int " name="toolId">The tool in question.</parameter></parameters><seealso>

<ref target="wxtoolbarsettoollonghelp">wxToolBar::SetToolLongHelp</ref>,
<ref target="wxtoolbarsettoolshorthelp">wxToolBar::SetToolShortHelp</ref>

</seealso><description>

Returns the long help for the given tool.





</description></function></member>
<member class="wxToolBar" name="GetToolPacking"><function type="int" name="GetToolPacking" suffix="const"><seealso>

<ref target="wxtoolbarsettoolpacking">wxToolBar::SetToolPacking</ref>

</seealso><description>

Returns the value used for packing tools.

</description></function></member>
<member class="wxToolBar" name="GetToolPos"><function type="int" name="GetToolPos" suffix="const"><parameters><parameter type="int " name="toolId"></parameter></parameters><description>

Returns the tool position in the toolbar, or wxNOT_FOUND if the tool is not found.

</description></function></member>
<member class="wxToolBar" name="GetToolSeparation"><function type="int" name="GetToolSeparation" suffix="const"><seealso>

<ref target="wxtoolbarsettoolseparation">wxToolBar::SetToolSeparation</ref>

</seealso><description>

Returns the default separator size.

</description></function></member>
<member class="wxToolBar" name="GetToolShortHelp"><function type="wxString" name="GetToolShortHelp" suffix="const"><parameters><parameter type="int " name="toolId">The tool in question.</parameter></parameters><seealso>

<ref target="wxtoolbargettoollonghelp">wxToolBar::GetToolLongHelp</ref>,
<ref target="wxtoolbarsettoolshorthelp">wxToolBar::SetToolShortHelp</ref>

</seealso><description>

Returns the short help for the given tool.





</description></function></member>
<member class="wxToolBar" name="GetToolState"><function type="bool" name="GetToolState" suffix="const"><parameters><parameter type="int " name="toolId">The tool in question.</parameter></parameters><seealso>

<ref target="wxtoolbartoggletool">wxToolBar::ToggleTool</ref>

</seealso><returnvalue>

true if the tool is toggled on, false otherwise.

</returnvalue><description>

Gets the on/off state of a toggle tool.





</description></function></member>
<member class="wxToolBar" name="InsertControl"><function type="wxToolBarTool &#42;" name="InsertControl"><parameters><parameter type="size_t " name="pos"></parameter><parameter type="wxControl &#42;" name="control"></parameter></parameters><seealso>

<ref target="wxtoolbaraddcontrol">AddControl</ref>,<br/>
<ref target="wxtoolbarinserttool">InsertTool</ref>

</seealso><description>

Inserts the control into the toolbar at the given position.

You must call <ref target="wxtoolbarrealize">Realize</ref> for the change to take place.

</description></function></member>
<member class="wxToolBar" name="InsertSeparator"><function type="wxToolBarTool &#42;" name="InsertSeparator"><parameters><parameter type="size_t " name="pos"></parameter></parameters><seealso>

<ref target="wxtoolbaraddseparator">AddSeparator</ref>,<br/>
<ref target="wxtoolbarinserttool">InsertTool</ref>

</seealso><description>

Inserts the separator into the toolbar at the given position.

You must call <ref target="wxtoolbarrealize">Realize</ref> for the change to take place.

</description></function></member>
<member class="wxToolBar" name="InsertTool"><function type="wxToolBarTool &#42;" name="InsertTool"><parameters><parameter type="size_t " name="pos"></parameter><parameter type="int" name=" toolId"></parameter><parameter type="const wxBitmap&amp;" name=" bitmap1"></parameter><parameter type="const wxBitmap&amp;" name="bitmap2" value="wxNullBitmap"></parameter><parameter type="bool" name="isToggle" value="false"></parameter><parameter type="wxObject&#42; " name="clientData" value="NULL"></parameter><parameter type="const wxString&amp; " name="shortHelpString" value="&quot;&quot;"></parameter><parameter type="const wxString&amp; " name="longHelpString" value="&quot;&quot;"></parameter></parameters><description>

</description></function>
<function type="wxToolBarTool &#42;" name="InsertTool"><parameters><parameter type="size_t " name="pos"></parameter><parameter type="wxToolBarTool&#42; " name="tool"></parameter></parameters><seealso>

<ref target="wxtoolbaraddtool">AddTool</ref>,<br/>
<ref target="wxtoolbarinsertcontrol">InsertControl</ref>,<br/>
<ref target="wxtoolbarinsertseparator">InsertSeparator</ref>

</seealso><description>

Inserts the tool with the specified attributes into the toolbar at the given
position.

You must call <ref target="wxtoolbarrealize">Realize</ref> for the change to take place.

</description></function></member>
<member class="wxToolBar" name="OnLeftClick"><function type="bool" name="OnLeftClick"><parameters><parameter type="int" name=" toolId"></parameter><parameter type="bool" name=" toggleDown"></parameter></parameters><seealso>

<ref target="wxtoolbaronmouseenter">wxToolBar::OnMouseEnter</ref>,
<ref target="wxtoolbaronrightclick">wxToolBar::OnRightClick</ref>

</seealso><returnvalue>

If the tool is a toggle and this function returns false, the toggle
toggle state (internal and visual) will not be changed. This provides a way of
specifying that toggle operations are not permitted in some circumstances.

</returnvalue><description>

Called when the user clicks on a tool with the left mouse button.

This is the old way of detecting tool clicks; although it will still work,
you should use the EVT_MENU or EVT_TOOL macro instead.







</description></function></member>
<member class="wxToolBar" name="OnMouseEnter"><function type="void" name="OnMouseEnter"><parameters><parameter type="int" name=" toolId"></parameter></parameters><remarks>

With some derived toolbar classes, if the mouse moves quickly out of the toolbar, wxWindows may not be able to
detect it. Therefore this function may not always be called when expected.

</remarks><description>

This is called when the mouse cursor moves into a tool or out of
the toolbar.

This is the old way of detecting mouse enter events; although it will still work,
you should use the EVT_TOOL_ENTER macro instead.





</description></function></member>
<member class="wxToolBar" name="OnRightClick"><function type="void" name="OnRightClick"><parameters><parameter type="int" name=" toolId"></parameter><parameter type="float" name=" x"></parameter><parameter type="float" name=" y"></parameter></parameters><seealso>

<ref target="wxtoolbaronmouseenter">wxToolBar::OnMouseEnter</ref>,
<ref target="wxtoolbaronleftclick">wxToolBar::OnLeftClick</ref>

</seealso><remarks>

A typical use of this member might be to pop up a menu.

</remarks><description>

Called when the user clicks on a tool with the right mouse button. The
programmer should override this function to detect right tool clicks.

This is the old way of detecting tool right clicks; although it will still work,
you should use the EVT_TOOL_RCLICKED macro instead.









</description></function></member>
<member class="wxToolBar" name="Realize"><function type="bool" name="Realize"><description>

This function should be called after you have added tools.

If you are using absolute positions for your tools when using a wxToolBarSimple object,
do not call this function. You must call it at all other times.

</description></function></member>
<member class="wxToolBar" name="RemoveTool"><function type="wxToolBarTool &#42;" name="RemoveTool"><parameters><parameter type="int " name="id"></parameter></parameters><seealso>

<ref target="wxtoolbardeletetool">DeleteTool</ref>

</seealso><description>

Removes the given tool from the toolbar but doesn't delete it. This allows to
insert/add this tool back to this (or another) toolbar later.

Note that it is unnecessary to call <ref target="wxtoolbarrealize">Realize</ref> for the
change to take place, it will happen immediately.

</description></function></member>
<member class="wxToolBar" name="SetMargins"><function type="void" name="SetMargins"><parameters><parameter type="const wxSize&amp;" name=" size"></parameter></parameters><description>

</description></function>
<function type="void" name="SetMargins"><parameters><parameter type="int" name=" x"></parameter><parameter type="int" name=" y"></parameter></parameters><seealso>

<ref target="wxtoolbargetmargins">wxToolBar::GetMargins</ref><ref target="wxsize">wxSize</ref>

</seealso><description></description></function></member>
<member class="wxToolBar" name="SetToolBitmapSize"><function type="void" name="SetToolBitmapSize"><parameters><parameter type="const wxSize&amp;" name=" size"></parameter></parameters><seealso>

<ref target="wxtoolbargettoolbitmapsize">wxToolBar::GetToolBitmapSize</ref>,
<ref target="wxtoolbargettoolsize">wxToolBar::GetToolSize</ref>

</seealso><remarks>

This should be called to tell the toolbar what the tool bitmap size is. Call
it before you add tools.

Note that this is the size of the bitmap you pass to <ref target="wxtoolbaraddtool">wxToolBar::AddTool</ref>,
and not the eventual size of the tool button.

</remarks><description>

Sets the default size of each tool bitmap. The default bitmap size is 16 by 15 pixels.





</description></function></member>
<member class="wxToolBar" name="SetToolClientData"><function type="void" name="SetToolClientData"><parameters><parameter type="int " name="id"></parameter><parameter type="wxObject&#42; " name="clientData"></parameter></parameters><description>

Sets the client data associated with the tool.

</description></function></member>
<member class="wxToolBar" name="SetToolLongHelp"><function type="void" name="SetToolLongHelp"><parameters><parameter type="int " name="toolId">The tool in question.</parameter><parameter type="const wxString&amp; " name="helpString">A string for the long help.</parameter></parameters><seealso>

<ref target="wxtoolbargettoollonghelp">wxToolBar::GetToolLongHelp</ref>,
<ref target="wxtoolbarsettoolshorthelp">wxToolBar::SetToolShortHelp</ref>,

</seealso><remarks>

You might use the long help for displaying the tool purpose on the status line.

</remarks><description>

Sets the long help for the given tool.







</description></function></member>
<member class="wxToolBar" name="SetToolPacking"><function type="void" name="SetToolPacking"><parameters><parameter type="int" name=" packing"></parameter></parameters><seealso>

<ref target="wxtoolbargettoolpacking">wxToolBar::GetToolPacking</ref>

</seealso><remarks>

The packing is used for spacing in the vertical direction if the toolbar is horizontal,
and for spacing in the horizontal direction if the toolbar is vertical.

</remarks><description>

Sets the value used for spacing tools. The default value is 1.





</description></function></member>
<member class="wxToolBar" name="SetToolShortHelp"><function type="void" name="SetToolShortHelp"><parameters><parameter type="int " name="toolId">The tool in question.</parameter><parameter type="const wxString&amp; " name="helpString">The string for the short help.</parameter></parameters><seealso>

<ref target="wxtoolbargettoolshorthelp">wxToolBar::GetToolShortHelp</ref><ref target="wxtoolbarsettoollonghelp">wxToolBar::SetToolLongHelp</ref>

</seealso><description></description></function></member>
<member class="wxToolBar" name="SetToolSeparation"><function type="void" name="SetToolSeparation"><parameters><parameter type="int" name=" separation"></parameter></parameters><seealso>

<ref target="wxtoolbaraddseparator">wxToolBar::AddSeparator</ref>

</seealso><description>

Sets the default separator size. The default value is 5.





</description></function></member>
<member class="wxToolBar" name="ToggleTool"><function type="void" name="ToggleTool"><parameters><parameter type="int " name="toolId">Tool in question.</parameter><parameter type="const bool" name=" toggle"></parameter></parameters><seealso>

<ref target="wxtoolbargettoolstate">wxToolBar::GetToolState</ref>
</seealso><remarks>

Only applies to a tool that has been specified as a toggle tool.

</remarks><description>

Toggles a tool on or off. This does not cause any event to get emitted.







</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class>
<class name="wxToolTip">
<description>
<p class="classdesc">
This class holds information about a tooltip associated with a window
(see <ref target="wxwindowsettooltip">wxWindow::SetToolTip</ref>).</p><p class="classdesc">The two static methods, <ref target="wxtooltipenable">wxToolTip::Enable</ref> and
<ref target="wxtooltipsetdelay">wxToolTip::SetDelay</ref> can be used to globally
alter tooltips behaviour.</p>
</description>
<parents>
<classref name="wxObject"/>


</parents>
<members>
<member class="wxToolTip" name="Enable"><function type="static void" name="Enable"><parameters><parameter type="bool " name="flag"></parameter></parameters><description>

Enable or disable tooltips globally.


</description></function></member>
<member class="wxToolTip" name="SetDelay"><function type="static void" name="SetDelay"><parameters><parameter type="long " name="msecs"></parameter></parameters><description>

Set the delay after which the tooltip appears.


</description></function></member>
<member class="wxToolTip" name="wxToolTip"><function type="" name="wxToolTip"><parameters><parameter type="const wxString&amp; " name="tip"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxToolTip" name="SetTip"><function type="void" name="SetTip"><parameters><parameter type="const wxString&amp; " name="tip"></parameter></parameters><description>

Set the tooltip text.


</description></function></member>
<member class="wxToolTip" name="GetTip"><function type="wxString" name="GetTip" suffix="const"><description>

Get the tooltip text.

</description></function></member>
<member class="wxToolTip" name="GetWindow"><function type="wxWindow&#42;" name="GetWindow" suffix="const"><description>

Get the associated window.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTreeCtrl">
<description>
<p class="classdesc">
A tree control presents information as a hierarchy, with items that may be expanded
to show further items. Items in a tree control are referenced by wxTreeItemId handles,
which may be tested for validity by calling wxTreeItemId::IsOk.</p><p class="classdesc">To intercept events from a tree control, use the event table macros described in <ref target="wxtreeevent">wxTreeEvent</ref>.</p>
</description>
<note platform="WIN32">

wxTreeCtrl class uses the standard common treeview control under Win32
implemented in the system library <tt> comctl32.dll</tt>. Some versions of this
library are known to have bugs with handling the tree control colours: the
usual symptom is that the expanded items leave black (or otherwise incorrectly
coloured) background behind them, especially for the controls using non
default background colour. The recommended solution is to upgrade the <tt> comctl32.dll</tt>
to a newer version: see
<a href="http://www.microsoft.com/msdownload/ieplatform/ie/comctrlx86.asp">http://www.microsoft.com/msdownload/ieplatform/ie/comctrlx86.asp</a>.

</note>
<parents>
<classref name="wxControl"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/treectrl.h"/></includes>
<windowstyles>
<style name="wxTR_EDIT_LABELS">Use this style
if you wish the user to be able to edit labels in the tree control.</style><style name="wxTR_NO_BUTTONS">For convenience
to document that no buttons are to be drawn.</style><style name="wxTR_HAS_BUTTONS">Use this style
to show + and - buttons to the left of parent items.</style><style name="wxTR_TWIST_BUTTONS">Use this style
to show Mac-style twister buttons to the left of parent items.
If both wxTR_HAS_BUTTONS and wxTR_TWIST_BUTTONS are given,
twister buttons are generated.  Generic only.</style><style name="wxTR_NO_LINES">Use this style
to hide vertical level connectors.</style><style name="wxTR_FULL_ROW_HIGHLIGHT">Use this style to have the background
colour and the selection highlight extend over the entire horizontal
row of the tree control window. (This flag is ignored under Windows unless you 
specify wxTR_NO_LINES as well.) </style><style name="wxTR_LINES_AT_ROOT">Use this style
to show lines between root nodes.
Only applicable if wxTR_HIDE_ROOT is set and wxTR_NO_LINES is not set.</style><style name="wxTR_HIDE_ROOT">Use this style
to suppress the display of the root node,
effectively causing the first-level nodes
to appear as a series of root nodes.</style><style name="wxTR_ROW_LINES">Use this style
to draw a contrasting border between displayed rows.</style><style name="wxTR_HAS_VARIABLE_ROW_HEIGHT">Use this style
to cause row heights to be just big enough to fit the content.
If not set, all rows use the largest row height.
The default is that this flag is unset.
Generic only.</style><style name="wxTR_SINGLE">For convenience
to document that only one item may be selected at a time.
Selecting another item causes the current selection, if any,
to be deselected.  This is the default.</style><style name="wxTR_MULTIPLE">Use this style
to allow a range of items to be selected.
If a second range is selected, the current range, if any, is deselected.</style><style name="wxTR_EXTENDED">Use this style
to allow disjoint items to be selected.  (Only partially implemented; may not work in all cases.)</style><style name="wxTR_DEFAULT_STYLE">The set of flags that are
closest to the defaults for the native control for a particular toolkit.</style></windowstyles>
<events>
<event name="EVT_TREE_BEGIN_DRAG(id, func)">Begin dragging with the left mouse button.</event><event name="EVT_TREE_BEGIN_RDRAG(id, func)">Begin dragging with the right mouse button.</event><event name="EVT_TREE_BEGIN_LABEL_EDIT(id, func)">Begin editing a label. This can be prevented by calling \helpref{Veto()</event><event name="EVT_TREE_END_LABEL_EDIT(id, func)">Finish editing a label. This can be prevented by calling \helpref{Veto()</event><event name="EVT_TREE_DELETE_ITEM(id, func)">Delete an item.</event><event name="EVT_TREE_GET_INFO(id, func)">Request information from the application.</event><event name="EVT_TREE_SET_INFO(id, func)">Information is being supplied.</event><event name="EVT_TREE_ITEM_ACTIVATED(id, func)">The item has been activated, i.e. chosen by double clicking it with mouse or from keyboard</event><event name="EVT_TREE_ITEM_COLLAPSED(id, func)">The item has been collapsed.</event><event name="EVT_TREE_ITEM_COLLAPSING(id, func)">The item is being collapsed. This can be prevented by calling \helpref{Veto()</event><event name="EVT_TREE_ITEM_EXPANDED(id, func)">The item has been expanded.</event><event name="EVT_TREE_ITEM_EXPANDING(id, func)">The item is being expanded. This can be prevented by calling \helpref{Veto()</event><event name="EVT_TREE_SEL_CHANGED(id, func)">Selection has changed.</event><event name="EVT_TREE_SEL_CHANGING(id, func)">Selection is changing. This can be prevented by calling \helpref{Veto()</event><event name="EVT_TREE_KEY_DOWN(id, func)">A key has been pressed.</event></events>
<seealso>

<ref target="wxtreeitemdata">wxTreeItemData</ref><ref target="wxtreectrloverview">wxTreeCtrl overview</ref><ref target="wxlistbox">wxListBox</ref><ref target="wxlistctrl">wxListCtrl</ref>,
<ref target="wximagelist">wxImageList</ref><ref target="wxtreeevent">wxTreeEvent</ref>

</seealso>
<members>
<member class="wxTreeCtrl" name="wxTreeCtrl"><function type="" name="wxTreeCtrl"><description>

Default constructor.

</description></function>
<function type="" name="wxTreeCtrl"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition">Window position.</parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize">Window size. If the default size (-1, -1) is specified then the window is sized
appropriately.</parameter><parameter type="long" name="style" value="wxTR_HAS_BUTTONS">Window style. See <ref target="wxtreectrl">wxTreeCtrl</ref>.</parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator">Window validator.</parameter><parameter type="const wxString&amp; " name="name" value="``listCtrl&quot;">Window name.</parameter></parameters><seealso>

<ref target="wxtreectrlcreate">wxTreeCtrl::Create</ref><ref target="wxvalidator">wxValidator</ref>

</seealso><description></description></function></member>
<member class="wxTreeCtrl" name="~wxTreeCtrl"><function type="void" name="~wxTreeCtrl"><description>

Destructor, destroying the list control.

</description></function></member>
<member class="wxTreeCtrl" name="AddRoot"><function type="wxTreeItemId" name="AddRoot"><parameters><parameter type="const wxString&amp;" name=" text"></parameter><parameter type="int" name="image" value="-1"></parameter><parameter type="int" name="selImage" value="-1"></parameter><parameter type="wxTreeItemData&#42;" name="data" value="NULL"></parameter></parameters><description>

Adds the root node to the tree, returning the new item.

The <i> image</i> and <i> selImage</i> parameters are an index within
the normal image list specifying the image to use for unselected and
selected items, respectively.
If <i> image</i> &gt; -1 and <i> selImage</i> is -1, the same image is used for
both selected and unselected items.

</description></function></member>
<member class="wxTreeCtrl" name="AppendItem"><function type="wxTreeItemId" name="AppendItem"><parameters><parameter type="const wxTreeItemId&amp; " name="parent"></parameter><parameter type="const wxString&amp;" name=" text"></parameter><parameter type="int" name="image" value="-1"></parameter><parameter type="int" name="selImage" value="-1"></parameter><parameter type="wxTreeItemData&#42;" name="data" value="NULL"></parameter></parameters><description>

Appends an item to the end of the branch identified by <i> parent</i>, return a new item id.

The <i> image</i> and <i> selImage</i> parameters are an index within
the normal image list specifying the image to use for unselected and
selected items, respectively.
If <i> image</i> &gt; -1 and <i> selImage</i> is -1, the same image is used for
both selected and unselected items.

</description></function></member>
<member class="wxTreeCtrl" name="AssignButtonsImageList"><function type="void" name="AssignButtonsImageList"><parameters><parameter type="wxImageList&#42;" name=" imageList"></parameter></parameters><description>

Sets the buttons image list. The button images assigned with this method will
be automatically deleted by wxTreeCtrl as appropriate
(i.e. it takes ownership of the list).

Setting or assigning the button image list enables the display of image buttons.
Once enabled, the only way to disable the display of button images is to set
the button image list to <tt> NULL</tt>.

This function is only available in the generic version.

See also <ref target="wxtreectrlsetbuttonsimagelist">SetButtonsImageList</ref>.

</description></function></member>
<member class="wxTreeCtrl" name="AssignImageList"><function type="void" name="AssignImageList"><parameters><parameter type="wxImageList&#42;" name=" imageList"></parameter></parameters><description>

Sets the normal image list. Image list assigned with this method will
be automatically deleted by wxTreeCtrl as appropriate
(i.e. it takes ownership of the list).

See also <ref target="wxtreectrlsetimagelist">SetImageList</ref>.

</description></function></member>
<member class="wxTreeCtrl" name="AssignStateImageList"><function type="void" name="AssignStateImageList"><parameters><parameter type="wxImageList&#42;" name=" imageList"></parameter></parameters><description>

Sets the state image list. Image list assigned with this method will
be automatically deleted by wxTreeCtrl as appropriate
(i.e. it takes ownership of the list).

See also <ref target="wxtreectrlsetstateimagelist">SetStateImageList</ref>.


</description></function></member>
<member class="wxTreeCtrl" name="Collapse"><function type="void" name="Collapse"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

Collapses the given item.

</description></function></member>
<member class="wxTreeCtrl" name="CollapseAndReset"><function type="void" name="CollapseAndReset"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

Collapses the given item and removes all children.

</description></function></member>
<member class="wxTreeCtrl" name="Create"><function type="bool" name="wxTreeCtrl"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID" name=" id"></parameter><parameter type="const wxPoint&amp;" name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp;" name="size" value="wxDefaultSize"></parameter><parameter type="long" name="style" value="wxTR_HAS_BUTTONS"></parameter><parameter type="const wxValidator&amp; " name="validator" value="wxDefaultValidator"></parameter><parameter type="const wxString&amp; " name="name" value="``listCtrl&quot;"></parameter></parameters><description>

Creates the tree control. See <ref target="wxtreectrlconstr">wxTreeCtrl::wxTreeCtrl</ref> for further details.

</description></function></member>
<member class="wxTreeCtrl" name="Delete"><function type="void" name="Delete"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

Deletes the specified item. A <tt> EVT_TREE_DELETE_ITEM</tt> event will be
generated.

This function may cause a subsequent call to GetNextChild to fail.

</description></function></member>
<member class="wxTreeCtrl" name="DeleteAllItems"><function type="void" name="DeleteAllItems"><description>

Deletes all the items in the control. Note that this may not generate 
<tt> EVT_TREE_DELETE_ITEM</tt> events under some Windows versions although
normally such event is generated for each removed item.

</description></function></member>
<member class="wxTreeCtrl" name="DeleteChildren"><function type="void" name="DeleteChildren"><parameters><parameter type="const wxTreeItemId&amp; " name="item"></parameter></parameters><description>

Deletes all children of the given item (but not the item itself). Note that
this will <b> not</b> generate any events unlike 
<ref target="wxtreectrldelete">Delete</ref> method.

If you have called <ref target="wxtreectrlsetitemhaschildren">wxTreeCtrl::SetItemHasChildren</ref>, you
may need to call it again since <i> DeleteChildren</i> does not automatically
clear the setting.

</description></function></member>
<member class="wxTreeCtrl" name="EditLabel"><function type="void" name="EditLabel"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><seealso>

<ref target="wxtreectrlendeditlabel">wxTreeCtrl::EndEditLabel</ref>,
<ref target="wxtreeevent">wxTreeEvent</ref>

</seealso><description>

Starts editing the label of the given item. This function generates a
EVT_TREE_BEGIN_LABEL_EDIT event which can be vetoed so that no
text control will appear for in-place editing.

If the user changed the label (i.e. s/he does not press ESC or leave
the text control without changes, a EVT_TREE_END_LABEL_EDIT event
will be sent which can be vetoed as well.

</description></function></member>
<member class="wxTreeCtrl" name="EndEditLabel"><function type="void" name="EndEditLabel"><parameters><parameter type="bool " name="cancelEdit"></parameter></parameters><seealso>

<ref target="wxtreectrleditlabel">wxTreeCtrl::EditLabel</ref>

</seealso><description>

Ends label editing. If <i> cancelEdit</i> is <tt> true</tt>, the edit will be cancelled.

This function is currently supported under Windows only.

</description></function></member>
<member class="wxTreeCtrl" name="EnsureVisible"><function type="void" name="EnsureVisible"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

Scrolls and/or expands items to ensure that the given item is visible.

</description></function></member>
<member class="wxTreeCtrl" name="Expand"><function type="void" name="Expand"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

Expands the given item.

</description></function></member>
<member class="wxTreeCtrl" name="GetBoundingRect"><function type="bool" name="GetBoundingRect" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter><parameter type="wxRect&amp; " name="rect"></parameter><parameter type="bool " name="textOnly" value="false"></parameter></parameters><description>

Retrieves the rectangle bounding the <i> item</i>. If <i> textOnly</i> is <tt> true</tt>,
only the rectangle around the item's label will be returned, otherwise the
item's image is also taken into account.

The return value is <tt> true</tt> if the rectangle was successfully retrieved or <tt> false</tt>
if it was not (in this case <i> rect</i> is not changed) - for example, if the
item is currently invisible.

\pythonnote{The wxPython version of this method requires only the
<tt> item</tt> and <tt> textOnly</tt> parameters.  The return value is either a
<tt> wxRect</tt> object or <tt> None</tt>.}

\perlnote{In wxPerl this method only takes the parameters <tt> item</tt> and 
  <tt> textOnly</tt>, and returns a Wx::Rect ( or undef ).}

</description></function></member>
<member class="wxTreeCtrl" name="GetButtonsImageList"><function type="wxImageList&#42;" name="GetButtonsImageList" suffix="const"><description>

Returns the buttons image list (from which application-defined button images are taken).

This function is only available in the generic version.

</description></function></member>
<member class="wxTreeCtrl" name="GetChildrenCount"><function type="size_t" name="GetChildrenCount" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter><parameter type="bool" name="recursively" value="true"></parameter></parameters><description>

Returns the number of items in the branch. If <i> recursively</i> is <tt> true</tt>, returns the total number
of descendants, otherwise only one level of children is counted.

</description></function></member>
<member class="wxTreeCtrl" name="GetCount"><function type="int" name="GetCount" suffix="const"><description>

Returns the number of items in the control.

</description></function></member>
<member class="wxTreeCtrl" name="GetEditControl"><function type="wxTextCtrl &#42;" name="GetEditControl" suffix="const"><description>

Returns the edit control being currently used to edit a label. Returns <tt> NULL</tt>
if no label is being edited.

<b> NB:</b> It is currently only implemented for wxMSW.

</description></function></member>
<member class="wxTreeCtrl" name="GetFirstChild"><function type="wxTreeItemId" name="GetFirstChild" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter><parameter type="long&amp; " name="cookie"></parameter></parameters><seealso>

<ref target="wxtreectrlgetnextchild">wxTreeCtrl::GetNextChild</ref>,
<ref target="wxtreectrlgetnextsibling">wxTreeCtrl::GetNextSibling</ref>

\pythonnote{In wxPython the returned wxTreeItemId and the new cookie
value are both returned as a tuple containing the two values.}

\perlnote{In wxPerl this method only takes the <tt> item</tt> parameterand
  returns a 2-element list <tt> ( itemcookie )</tt>.}

</seealso><description></description></function></member>
<member class="wxTreeCtrl" name="GetFirstVisibleItem"><function type="wxTreeItemId" name="GetFirstVisibleItem" suffix="const"><description>

Returns the first visible item.

</description></function></member>
<member class="wxTreeCtrl" name="GetImageList"><function type="wxImageList&#42;" name="GetImageList" suffix="const"><description>

Returns the normal image list.

</description></function></member>
<member class="wxTreeCtrl" name="GetIndent"><function type="int" name="GetIndent" suffix="const"><description>

Returns the current tree control indentation.

</description></function></member>
<member class="wxTreeCtrl" name="GetItemBackgroundColour"><function type="wxColour" name="GetItemBackgroundColour" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

Returns the background colour of the item.

</description></function></member>
<member class="wxTreeCtrl" name="GetItemData"><function type="wxTreeItemData&#42;" name="GetItemData" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><seealso>

<ref target="wxtreeitemdata">wxTreeItemData</ref>

\pythonnote{wxPython provides the following shortcut method:

\indented{2cm}{<table>
<tr><td><b> GetPyData(item)</b></td><td>Returns the Python Object
associated with the wxTreeItemData for the given item Id.</td></tr>
</table>}
}

\perlnote{wxPerl provides the following shortcut method:
\indented{2cm}{
<table>
<tr><td><b> GetPlData( item )</b></td><td>Returns the Perl data
associated with the Wx::TreeItemData ( it is just the same as
tree-&gt;GetItemData( item )-&gt;GetData(); ).</td></tr>
</table>}
}

</seealso><description>

Returns the tree item data associated with the item.

</description></function></member>
<member class="wxTreeCtrl" name="GetItemFont"><function type="wxFont" name="GetItemFont" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

Returns the font of the item label.

</description></function></member>
<member class="wxTreeCtrl" name="GetItemImage"><function type="int" name="GetItemImage" suffix="const"><parameters><parameter type="const wxTreeItemId&amp; " name="item"></parameter><parameter type="wxTreeItemIcon " name="which" value="wxTreeItemIcon_Normal"></parameter></parameters><description>

Gets the specified item image. The value of <i> which</i> may be:

<ul><li>{wxTreeItemIcon_Normal} to get the normal item image
</li>
<li>{wxTreeItemIcon_Selected} to get the selected item image (i.e. the image
which is shown when the item is currently selected)
</li>
<li>{wxTreeItemIcon_Expanded} to get the expanded image (this only
makes sense for items which have children - then this image is shown when the
item is expanded and the normal image is shown when it is collapsed)
</li>
<li>{wxTreeItemIcon_SelectedExpanded} to get the selected expanded image
(which is shown when an expanded item is currently selected)
</li></ul>

</description></function></member>
<member class="wxTreeCtrl" name="GetItemText"><function type="wxString" name="GetItemText" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

Returns the item label.

</description></function></member>
<member class="wxTreeCtrl" name="GetItemTextColour"><function type="wxColour" name="GetItemTextColour" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

Returns the colour of the item label.

</description></function></member>
<member class="wxTreeCtrl" name="GetLastChild"><function type="wxTreeItemId" name="GetLastChild" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><seealso>

<ref target="wxtreectrlgetfirstchild">GetFirstChild</ref>,
<ref target="wxtreectrlgetnextsibling">wxTreeCtrl::GetNextSibling</ref>,
<ref target="wxtreectrlgetlastchild">GetLastChild</ref>

</seealso><description>

Returns the last child of the item (or an invalid tree item if this item has no children).

</description></function></member>
<member class="wxTreeCtrl" name="GetNextChild"><function type="wxTreeItemId" name="GetNextChild" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter><parameter type="long&amp; " name="cookie"></parameter></parameters><seealso>

<ref target="wxtreectrlgetfirstchild">wxTreeCtrl::GetFirstChild</ref>

\pythonnote{In wxPython the returned wxTreeItemId and the new cookie
value are both returned as a tuple containing the two values.}

\perlnote{In wxPerl this method returns a 2-element list
  <tt> ( itemcookie )</tt>instead of modifying its parameters.}

</seealso><description></description></function></member>
<member class="wxTreeCtrl" name="GetNextSibling"><function type="wxTreeItemId" name="GetNextSibling" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><seealso>

<ref target="wxtreectrlgetprevsibling">wxTreeCtrl::GetPrevSibling</ref>

</seealso><description>

Returns the next sibling of the specified item; call <ref target="wxtreectrlgetprevsibling">wxTreeCtrl::GetPrevSibling</ref> for the previous sibling.

Returns an invalid tree item if there are no further siblings.

</description></function></member>
<member class="wxTreeCtrl" name="GetNextVisible"><function type="wxTreeItemId" name="GetNextVisible" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

Returns the next visible item.

</description></function></member>
<member class="wxTreeCtrl" name="GetItemParent"><function type="wxTreeItemId" name="GetItemParent" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

Returns the item's parent.

</description></function></member>
<member class="wxTreeCtrl" name="GetParent"><function type="wxTreeItemId" name="GetParent" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

<b> NOTE:</b> This function is deprecated and will only work if <tt> WXWIN_COMPATIBILITY_2_2</tt>
is defined.  Use <ref target="wxtreectrlgetitemparent">wxTreeCtrl::GetItemParent</ref> instead.

Returns the item's parent.

\pythonnote{This method is named <tt> GetItemParent</tt> to avoid a name
clash with wxWindow::GetParent.}

</description></function></member>
<member class="wxTreeCtrl" name="GetPrevSibling"><function type="wxTreeItemId" name="GetPrevSibling" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><seealso>

<ref target="wxtreectrlgetnextsibling">wxTreeCtrl::GetNextSibling</ref>

</seealso><description>

Returns the previous sibling of the specified item; call <ref target="wxtreectrlgetnextsibling">wxTreeCtrl::GetNextSibling</ref> for the next sibling.

Returns an invalid tree item if there are no further children.

</description></function></member>
<member class="wxTreeCtrl" name="GetPrevVisible"><function type="wxTreeItemId" name="GetPrevVisible" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

Returns the previous visible item.

</description></function></member>
<member class="wxTreeCtrl" name="GetRootItem"><function type="wxTreeItemId" name="GetRootItem" suffix="const"><description>

Returns the root item for the tree control.

</description></function></member>
<member class="wxTreeCtrl" name="GetItemSelectedImage"><function type="int" name="GetItemSelectedImage" suffix="const"><parameters><parameter type="const wxTreeItemId&amp; " name="item"></parameter></parameters><description>

Gets the selected item image (this function is obsolete, use
<tt> GetItemImage(item, wxTreeItemIcon_Selected</tt>) instead).

</description></function></member>
<member class="wxTreeCtrl" name="GetSelection"><function type="wxTreeItemId" name="GetSelection" suffix="const"><description>

Returns the selection, or an invalid item if there is no selection.
This function only works with the controls without wxTR_MULTIPLE style, use
<ref target="wxtreectrlgetselections">GetSelections</ref> for the controls which do have
this style.

</description></function></member>
<member class="wxTreeCtrl" name="GetSelections"><function type="size_t" name="GetSelections" suffix="const"><parameters><parameter type="wxArrayTreeItemIds&amp; " name="selection"></parameter></parameters><description>

Fills the array of tree items passed in with the currently selected items. This
function can be called only if the control has the wxTR_MULTIPLE style.

Returns the number of selected items.

\pythonnote{The wxPython version of this method accepts no parameters
and returns a Python list of <tt> wxTreeItemId</tt>s.}

\perlnote{In wxPerl this method takes no parameters and returns a list of
 <tt> Wx::TreeItemId</tt>s.}

</description></function></member>
<member class="wxTreeCtrl" name="GetStateImageList"><function type="wxImageList&#42;" name="GetStateImageList" suffix="const"><description>

Returns the state image list (from which application-defined state images are taken).

</description></function></member>
<member class="wxTreeCtrl" name="HitTest"><function type="wxTreeItemId" name="HitTest"><parameters><parameter type="const wxPoint&amp; " name="point"></parameter><parameter type="int&amp; " name="flags"></parameter></parameters><description>

Calculates which (if any) item is under the given point, returning the tree item
id at this point plus extra information <i> flags</i>. <i> flags</i> is a bitlist of the following:

\twocolwidtha{5cm}
<table>
<tr><td>wxTREE_HITTEST_ABOVE</td><td>Above the client area.</td></tr>
<tr><td>wxTREE_HITTEST_BELOW</td><td>Below the client area.</td></tr>
<tr><td>wxTREE_HITTEST_NOWHERE</td><td>In the client area but below the last item.</td></tr>
<tr><td>wxTREE_HITTEST_ONITEMBUTTON</td><td>On the button associated with an item.</td></tr>
<tr><td>wxTREE_HITTEST_ONITEMICON</td><td>On the bitmap associated with an item.</td></tr>
<tr><td>wxTREE_HITTEST_ONITEMINDENT</td><td>In the indentation associated with an item.</td></tr>
<tr><td>wxTREE_HITTEST_ONITEMLABEL</td><td>On the label (string) associated with an item.</td></tr>
<tr><td>wxTREE_HITTEST_ONITEMRIGHT</td><td>In the area to the right of an item.</td></tr>
<tr><td>wxTREE_HITTEST_ONITEMSTATEICON</td><td>On the state icon for a tree view item that is in a user-defined state.</td></tr>
<tr><td>wxTREE_HITTEST_TOLEFT</td><td>To the right of the client area.</td></tr>
<tr><td>wxTREE_HITTEST_TORIGHT</td><td>To the left of the client area.</td></tr>
</table>

\pythonnote{in wxPython both the wxTreeItemId and the flags are
returned as a tuple.}

\perlnote{In wxPerl this method only takes the <tt> point</tt> parameter
  and returns a 2-element list <tt> ( item, flags )</tt>.}

</description></function></member>
<member class="wxTreeCtrl" name="InsertItem"><function type="wxTreeItemId" name="InsertItem"><parameters><parameter type="const wxTreeItemId&amp; " name="parent"></parameter><parameter type="const wxTreeItemId&amp; " name="previous"></parameter><parameter type="const wxString&amp;" name=" text"></parameter><parameter type="int" name="image" value="-1"></parameter><parameter type="int" name="selImage" value="-1"></parameter><parameter type="wxTreeItemData&#42;" name="data" value="NULL"></parameter></parameters><description>

</description></function>
<function type="wxTreeItemId" name="InsertItem"><parameters><parameter type="const wxTreeItemId&amp; " name="parent"></parameter><parameter type="size_t" name=" before"></parameter><parameter type="const wxString&amp;" name=" text"></parameter><parameter type="int" name="image" value="-1"></parameter><parameter type="int" name="selImage" value="-1"></parameter><parameter type="wxTreeItemData&#42;" name="data" value="NULL"></parameter></parameters><description>

Inserts an item after a given one (<i> previous</i>) or before one identified by its position (<i> before</i>).
<i> before</i> must be less than the number of children.

The <i> image</i> and <i> selImage</i> parameters are an index within
the normal image list specifying the image to use for unselected and
selected items, respectively.
If <i> image</i> &gt; -1 and <i> selImage</i> is -1, the same image is used for
both selected and unselected items.

\pythonnote{The second form of this method is called
<tt> InsertItemBefore</tt> in wxPython.}

</description></function></member>
<member class="wxTreeCtrl" name="IsBold"><function type="bool" name="IsBold" suffix="const"><parameters><parameter type="const wxTreeItemId&amp; " name="item"></parameter></parameters><description>

Returns <tt> true</tt> if the given item is in bold state.

See also: <ref target="wxtreectrlsetitembold">SetItemBold</ref>

</description></function></member>
<member class="wxTreeCtrl" name="IsExpanded"><function type="bool" name="IsExpanded" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

Returns <tt> true</tt> if the item is expanded (only makes sense if it has children).

</description></function></member>
<member class="wxTreeCtrl" name="IsSelected"><function type="bool" name="IsSelected" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

Returns <tt> true</tt> if the item is selected.

</description></function></member>
<member class="wxTreeCtrl" name="IsVisible"><function type="bool" name="IsVisible" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

Returns <tt> true</tt> if the item is visible (it might be outside the view, or not expanded).

</description></function></member>
<member class="wxTreeCtrl" name="ItemHasChildren"><function type="bool" name="ItemHasChildren" suffix="const"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

Returns <tt> true</tt> if the item has children.

</description></function></member>
<member class="wxTreeCtrl" name="OnCompareItems"><function type="int" name="OnCompareItems"><parameters><parameter type="const wxTreeItemId&amp; " name="item1"></parameter><parameter type="const wxTreeItemId&amp; " name="item2"></parameter></parameters><description>

Override this function in the derived class to change the sort order of the
items in the tree control. The function should return a negative, zero or
positive value if the first item is less than, equal to or greater than the
second one.

The base class version compares items alphabetically.

See also: <ref target="wxtreectrlsortchildren">SortChildren</ref>

</description></function></member>
<member class="wxTreeCtrl" name="PrependItem"><function type="wxTreeItemId" name="PrependItem"><parameters><parameter type="const wxTreeItemId&amp; " name="parent"></parameter><parameter type="const wxString&amp;" name=" text"></parameter><parameter type="int" name="image" value="-1"></parameter><parameter type="int" name="selImage" value="-1"></parameter><parameter type="wxTreeItemData&#42;" name="data" value="NULL"></parameter></parameters><description>

Appends an item as the first child of <i> parent</i>, return a new item id.

The <i> image</i> and <i> selImage</i> parameters are an index within
the normal image list specifying the image to use for unselected and
selected items, respectively.
If <i> image</i> &gt; -1 and <i> selImage</i> is -1, the same image is used for
both selected and unselected items.

</description></function></member>
<member class="wxTreeCtrl" name="ScrollTo"><function type="void" name="ScrollTo"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

Scrolls the specified item into view.

</description></function></member>
<member class="wxTreeCtrl" name="SelectItem"><function type="bool" name="SelectItem"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

Selects the given item.

</description></function></member>
<member class="wxTreeCtrl" name="SetButtonsImageList"><function type="void" name="SetButtonsImageList"><parameters><parameter type="wxImageList&#42;" name=" imageList"></parameter></parameters><description>

Sets the buttons image list (from which application-defined button images are taken).
The button images assigned with this method will
<b> not</b> be deleted by wxTreeCtrl's destructor, you must delete it yourself.

Setting or assigning the button image list enables the display of image buttons.
Once enabled, the only way to disable the display of button images is to set
the button image list to <tt> NULL</tt>.

This function is only available in the generic version.

See also <ref target="wxtreectrlassignbuttonsimagelist">AssignButtonsImageList</ref>.

</description></function></member>
<member class="wxTreeCtrl" name="SetIndent"><function type="void" name="SetIndent"><parameters><parameter type="int " name="indent"></parameter></parameters><description>

Sets the indentation for the tree control.

</description></function></member>
<member class="wxTreeCtrl" name="SetImageList"><function type="void" name="SetImageList"><parameters><parameter type="wxImageList&#42;" name=" imageList"></parameter></parameters><description>

Sets the normal image list. Image list assigned with this method will
<b> not</b> be deleted by wxTreeCtrl's destructor, you must delete it yourself.

See also <ref target="wxtreectrlassignimagelist">AssignImageList</ref>.


</description></function></member>
<member class="wxTreeCtrl" name="SetItemBackgroundColour"><function type="void" name="SetItemBackgroundColour"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter><parameter type="const wxColour&amp; " name="col"></parameter></parameters><description>

Sets the colour of the item's background.

</description></function></member>
<member class="wxTreeCtrl" name="SetItemBold"><function type="void" name="SetItemBold"><parameters><parameter type="const wxTreeItemId&amp; " name="item"></parameter><parameter type="bool" name="bold" value="true"></parameter></parameters><description>

Makes item appear in bold font if <i> bold</i> parameter is <tt> true</tt> or resets it to
the normal state.

See also: <ref target="wxtreectrlisbold">IsBold</ref>

</description></function></member>
<member class="wxTreeCtrl" name="SetItemData"><function type="void" name="SetItemData"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter><parameter type="wxTreeItemData&#42; " name="data"></parameter></parameters><description>

Sets the item client data.

\pythonnote{wxPython provides the following shortcut method:\par
\indented{2cm}{<table>
<tr><td><b> SetPyData(item, obj)</b></td><td>Associate the given Python
Object with the wxTreeItemData for the given item Id.</td></tr>
</table>}
}

\perlnote{wxPerl provides the following shortcut method:
\indented{2cm}{
<table>
<tr><td><b> SetPlData( item, data )</b></td><td>Sets the Perl data
associated with the Wx::TreeItemData ( it is just the same as
tree-&gt;GetItemData( item )-&gt;SetData( data ); ).</td></tr>
</table>}
}

</description></function></member>
<member class="wxTreeCtrl" name="SetItemFont"><function type="void" name="SetItemFont"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter><parameter type="const wxFont&amp; " name="font"></parameter></parameters><seealso>

<ref target="wxtreectrlsetitembold">SetItemBold</ref>

</seealso><description>

Sets the item's font. All items in the tree should have the same height to avoid
text clipping, so the fonts height should be the same for all of them,
although font attributes may vary.

</description></function></member>
<member class="wxTreeCtrl" name="SetItemHasChildren"><function type="void" name="SetItemHasChildren"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter><parameter type="bool " name="hasChildren" value="true"></parameter></parameters><description>

Force appearance of the button next to the item. This is useful to
allow the user to expand the items which don't have any children now,
but instead adding them only when needed, thus minimizing memory
usage and loading time.

</description></function></member>
<member class="wxTreeCtrl" name="SetItemImage"><function type="void" name="SetItemImage"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter><parameter type="int " name="image"></parameter><parameter type="wxTreeItemIcon " name="which" value="wxTreeItemIcon_Normal"></parameter></parameters><description>

Sets the specified item image. See <ref target="wxtreectrlgetitemimage">GetItemImage</ref>
for the description of the <i> which</i> parameter.

</description></function></member>
<member class="wxTreeCtrl" name="SetItemSelectedImage"><function type="void" name="SetItemSelectedImage"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter><parameter type="int " name="selImage"></parameter></parameters><description>

Sets the selected item image (this function is obsolete, use <tt> SetItemImage(item, wxTreeItemIcon_Selected</tt>) instead).

</description></function></member>
<member class="wxTreeCtrl" name="SetItemText"><function type="void" name="SetItemText"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter><parameter type="const wxString&amp; " name="text"></parameter></parameters><description>

Sets the item label.

</description></function></member>
<member class="wxTreeCtrl" name="SetItemTextColour"><function type="void" name="SetItemTextColour"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter><parameter type="const wxColour&amp; " name="col"></parameter></parameters><description>

Sets the colour of the item's text.

</description></function></member>
<member class="wxTreeCtrl" name="SetStateImageList"><function type="void" name="SetStateImageList"><parameters><parameter type="wxImageList&#42;" name=" imageList"></parameter></parameters><description>

Sets the state image list (from which application-defined state images are taken).
Image list assigned with this method will
<b> not</b> be deleted by wxTreeCtrl's destructor, you must delete it yourself.

See also <ref target="wxtreectrlassignstateimagelist">AssignStateImageList</ref>.

</description></function>
<function type="void" name="SetWindowStyle"><parameters><parameter type="long" name="styles"></parameter></parameters><description>

Sets the mode flags associated with the display of the tree control.
The new mode takes effect immediately.
(Generic only; MSW ignores changes.)

</description></function></member>
<member class="wxTreeCtrl" name="SortChildren"><function type="void" name="SortChildren"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><seealso>

<ref target="wxtreeitemdata">wxTreeItemData</ref><ref target="wxtreectrloncompareitems">OnCompareItems</ref>

</seealso><description></description></function></member>
<member class="wxTreeCtrl" name="Toggle"><function type="void" name="Toggle"><parameters><parameter type="const wxTreeItemId&amp;" name=" item"></parameter></parameters><description>

Toggles the given item between collapsed and expanded states.

</description></function></member>
<member class="wxTreeCtrl" name="Unselect"><function type="void" name="Unselect"><description>

Removes the selection from the currently selected item (if any).

</description></function></member>
<member class="wxTreeCtrl" name="UnselectAll"><function type="void" name="UnselectAll"><description>

This function either behaves the same as <ref target="wxtreectrlunselect">Unselect</ref>
if the control doesn't have wxTR_MULTIPLE style, or removes the selection from
all items if it does have this style.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTreeEvent">
<description>
<p class="classdesc">
A tree event holds information about events associated with wxTreeCtrl objects.</p>
</description>
<parents>
<classref name="wxNotifyEvent"/>
<classref name="wxCommandEvent"/>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/treectrl.h"/></includes>
<events>
<event name="EVT_TREE_BEGIN_DRAG(id, func)">The user has started dragging an item with the left mouse button. The event handler must call {\bf wxTreeEvent::Allow()</event><event name="EVT_TREE_BEGIN_RDRAG(id, func)">The user has started dragging an item with the right mouse button. The event handler must call {\bf wxTreeEvent::Allow()</event><event name="EVT_TREE_BEGIN_LABEL_EDIT(id, func)">Begin editing a label. This can be prevented by calling \helpref{Veto()</event><event name="EVT_TREE_END_DRAG(id, func)">The user has released the mouse after dragging an item.</event><event name="EVT_TREE_END_LABEL_EDIT(id, func)">The user has finished editing a label. This can be prevented by calling \helpref{Veto()</event><event name="EVT_TREE_DELETE_ITEM(id, func)">A tree item has been deleted.</event><event name="EVT_TREE_ITEM_ACTIVATED(id, func)">An item has been activated (e.g. double clicked).</event><event name="EVT_TREE_ITEM_COLLAPSED(id, func)">The item has been collapsed.</event><event name="EVT_TREE_ITEM_COLLAPSING(id, func)">The item is being collapsed. This can be prevented by calling \helpref{Veto()</event><event name="EVT_TREE_ITEM_EXPANDED(id, func)">The item has been expanded.</event><event name="EVT_TREE_ITEM_EXPANDING(id, func)">The item is being expanded. This can be prevented by calling \helpref{Veto()</event><event name="EVT_TREE_ITEM_RIGHT_CLICK(id, func)">The user has clicked the item with the right mouse button.</event><event name="EVT_TREE_ITEM_MIDDLE_CLICK(id, func)">The user has clicked the item with the middle mouse button.</event><event name="EVT_TREE_KEY_DOWN(id, func)">A key has been pressed.</event><event name="EVT_TREE_SEL_CHANGED(id, func)">Selection has changed.</event><event name="EVT_TREE_SEL_CHANGING(id, func)">Selection is changing. This can be prevented by calling \helpref{Veto()</event></events>
<seealso>

<ref target="wxtreectrl">wxTreeCtrl</ref>

</seealso>
<members>
<member class="wxTreeEvent" name="wxTreeEvent"><function type="" name="wxTreeEvent"><parameters><parameter type="WXTYPE " name="commandType" value="0"></parameter><parameter type="int " name="id" value="0"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxTreeEvent" name="GetKeyCode"><function type="int" name="GetKeyCode" suffix="const"><parameters></parameters><description>

Returns the key code if the event was is a key event. Use 
<ref target="wxtreeeventgetkeyevent">GetKeyEvent</ref> to get the values of the
modifier keys for this event (i.e. Shift or Ctrl).

</description></function></member>
<member class="wxTreeEvent" name="GetItem"><function type="wxTreeItemId" name="GetItem" suffix="const"><parameters></parameters><description>

Returns the item (valid for all events).

</description></function></member>
<member class="wxTreeEvent" name="GetKeyEvent"><function type="const wxKeyEvent&amp;" name="GetKeyEvent" suffix="const"><parameters></parameters><description>

Returns the key event for <tt> EVT_TREE_KEY_DOWN</tt> events.

</description></function></member>
<member class="wxTreeEvent" name="GetLabel"><function type="const wxString&amp;" name="GetLabel" suffix="const"><parameters></parameters><description>

Returns the label if the event was a begin or end edit label event.

</description></function></member>
<member class="wxTreeEvent" name="GetOldItem"><function type="wxTreeItemId" name="GetOldItem" suffix="const"><parameters></parameters><description>

Returns the old item index (valid for EVT_TREE_ITEM_CHANGING and CHANGED events)

</description></function></member>
<member class="wxTreeEvent" name="GetPoint()"><function type="wxPoint" name="GetPoint" suffix="const"><parameters></parameters><description>

Returns the position of the mouse pointer if the event is a drag event.

</description></function></member>
<member class="wxTreeEvent" name="IsEditCancelled()"><function type="bool" name="IsEditCancelled" suffix="const"><parameters></parameters><description>

Returns true if the label edit was cancelled. This should be
called from within an EVT_TREE_END_LABEL_EDIT handler.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxTreeItemData">
<description>
<p class="classdesc">
wxTreeItemData is some (arbitrary) user class associated with some item. The
main advantage of having this class is that wxTreeItemData objects are
destroyed automatically by the tree and, as this class has virtual destructor,
it means that the memory and any other resources associated with a tree item
will be automatically freed when it is deleted. Note that we don't use wxObject
as the base class for wxTreeItemData because the size of this class is
critical: in many applications, each tree leaf will have wxTreeItemData
associated with it and number of leaves may be quite big.</p><p class="classdesc">Also please note that because the objects of this class are deleted by the tree
using the operator <tt> delete</tt>, they must always be allocated on the heap
using <tt> new</tt>.</p>
</description>
<parents>
<classref name="wxClientData"/>

</parents>
<includes>
<header name="wx/treectrl.h"/></includes>
<seealso>

<ref target="wxtreectrl">wxTreeCtrl</ref>

</seealso>
<members>
<member class="wxTreeItemData" name="wxTreeItemData"><function type="" name="wxTreeItemData"><description>

Default constructor.

\pythonnote{The wxPython version of this constructor optionally
accepts any Python object as a parameter.  This object is then
associated with the tree item using the wxTreeItemData as a
container.

In addition, the following methods are added in wxPython for accessing
the object:

\indented{2cm}{<table>
<tr><td><b> GetData()</b></td><td>Returns a reference to the Python Object</td></tr>
<tr><td><b> SetData(obj)</b></td><td>Associates a new Python Object with the
wxTreeItemData</td></tr>
</table>}
}

\perlnote{In wxPerl the constructor accepts as parameter an optional scalar,
 and stores it as client data. You may retrieve this data by calling
 <b> GetData()</b>, and set it by calling <b> SetData( data ).</b>
}

</description></function></member>
<member class="wxTreeItemData" name="~wxTreeItemData"><function type="void" name="~wxTreeItemData"><description>

Virtual destructor.

</description></function></member>
<member class="wxTreeItemData" name="GetId"><function type="const wxTreeItem&amp;" name="GetId"><description>

Returns the item associated with this node.

</description></function></member>
<member class="wxTreeItemData" name="SetId"><function type="void" name="SetId"><parameters><parameter type="const wxTreeItemId&amp;" name=" id"></parameter></parameters><description>

Sets the item associated with this node.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxURL">
<description>

</description>
<example>

<pre>
  wxURL url(&quot;http://a.host/a.dir/a.file&quot;);
  wxInputStream &#42;in_stream;

  in_stream = url.GetInputStream();
  // Then, you can use all IO calls of in_stream (See wxStream)
</pre>


</example>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/url.h"/></includes>
<seealso>

<ref target="wxsocketbase">wxSocketBase</ref><ref target="wxprotocol">wxProtocol</ref>

</seealso>
<members>
<member class="wxURL" name="wxURL"><function type="" name="wxURL"><parameters><parameter type="const wxString&amp;" name=" url"></parameter></parameters><description>

Constructs a URL object from the string.  The URL must be valid according
to RFC 1738.  In particular, file URLs must be of the format
'file://hostname/path/to/file'.  It is valid to leave out the hostname
but slashes must remain in place-- i.e. a file URL without a hostname must
contain three consecutive slashes.





</description></function></member>
<member class="wxURL" name="~wxURL"><function type="" name="~wxURL"><description>

Destroys the URL object.

</description></function></member>
<member class="wxURL" name="GetProtocolName"><function type="wxString" name="GetProtocolName" suffix="const"><description>

Returns the name of the protocol which will be used to get the URL.

</description></function></member>
<member class="wxURL" name="GetProtocol"><function type="wxProtocol&amp;" name="GetProtocol"><description>

Returns a reference to the protocol which will be used to get the URL.

</description></function></member>
<member class="wxURL" name="GetPath"><function type="wxString" name="GetPath"><description>

Returns the path of the file to fetch. This path was encoded in the URL.

</description></function></member>
<member class="wxURL" name="GetError"><function type="wxURLError" name="GetError" suffix="const"><description>

Returns the last error. This error refers to the URL parsing or to the protocol.
It can be one of these errors:

\twocolwidtha{7cm}
<table><tr><td><b> wxURL_NOERR</b></td><td>No error.</td></tr>
<tr><td><b> wxURL_SNTXERR</b></td><td>Syntax error in the URL string.</td></tr>
<tr><td><b> wxURL_NOPROTO</b></td><td>Found no protocol which can get this URL.</td></tr>
<tr><td><b> wxURL_NOHOST</b></td><td>An host name is required for this protocol.</td></tr>
<tr><td><b> wxURL_NOPATH</b></td><td>A path is required for this protocol.</td></tr>
<tr><td><b> wxURL_CONNERR</b></td><td>Connection error.</td></tr>
<tr><td><b> wxURL_PROTOERR</b></td><td>An error occurred during negotiation.</td></tr>
</table>
</description></function></member>
<member class="wxURL" name="GetInputStream"><function type="wxInputStream &#42;" name="GetInputStream"><seealso>

<ref target="wxinputstream">wxInputStream</ref>

</seealso><returnvalue>

Returns the initialized stream. You will have to delete it yourself.

</returnvalue><description>

Creates a new input stream on the the specified URL. You can use all but seek
functionality of wxStream. Seek isn't available on all stream. For example,
http or ftp streams doesn't deal with it.

</description></function></member>
<member class="wxURL" name="SetDefaultProxy"><function type="static void" name="SetDefaultProxy"><parameters><parameter type="const wxString&amp;" name=" url_proxy"></parameter></parameters><seealso>

<ref target="wxurlsetproxy">wxURL::SetProxy</ref>

</seealso><description>

Sets the default proxy server to use to get the URL. The string specifies
the proxy like this: &lt;hostname&gt;:&lt;port number&gt;.





</description></function></member>
<member class="wxURL" name="SetProxy"><function type="void" name="SetProxy"><parameters><parameter type="const wxString&amp;" name=" url_proxy"></parameter></parameters><seealso>

<ref target="wxurlsetdefaultproxy">wxURL::SetDefaultProxy</ref>

</seealso><description>

Sets the proxy to use for this URL.

</description></function></member>
<member class="wxURL" name="ConvertToValidURI"><function type="static wxString" name="ConvertToValidURI"><parameters><parameter type="const wxString&amp;" name=" uri"></parameter></parameters><description>

It converts a non-standardized URI to a valid network URI. It encodes non
standard characters.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxUpdateUIEvent">
<description>
<p class="classdesc">
This class is used for pseudo-events which are called by wxWindows
to give an application the chance to update various user interface elements.</p>
</description>
<remarks>

Without update UI events, an application has to work hard to check/uncheck, enable/disable,
and set the text for elements such as menu items and toolbar buttons.
The code for doing this has to be mixed up with the code that is invoked when
an action is invoked for a menu item or button.

With update UI events, you define an event handler to look at the state of
the application and change UI elements accordingly. wxWindows will call your
member functions in idle time, so you don't have to worry where to call this code.
In addition to being a clearer and more declarative method, it also means you
don't have to worry whether you're updating a toolbar or menubar identifier.
The same handler can update a menu item and toolbar button, if the identifier is the same.

Instead of directly manipulating the menu or button, you call functions in the event
object, such as <ref target="wxupdateuieventcheck">wxUpdateUIEvent::Check</ref>. wxWindows
will determine whether such a call has been made, and which UI element to update.

These events will work for popup menus as well as menubars. Just before a menu is popped
up, <ref target="wxmenuupdateui">wxMenu::UpdateUI</ref> is called to process any UI events for
the window that owns the menu.

</remarks>
<parents>
<classref name="wxCommandEvent"/>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/event.h"/></includes>
<events>
<event name="EVT_UPDATE_UI(id, func)">Process a wxEVT_UPDATE_UI event for the command with the given id.</event><event name="EVT_UPDATE_UI_RANGE(id1, id2, func)">Process a wxEVT_UPDATE_UI event for any command with id included in the given range.</event></events>
<seealso>

<ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxUpdateUIEvent" name="wxUpdateUIEvent"><function type="" name="wxUpdateUIEvent"><parameters><parameter type="wxWindowID " name="commandId" value="0"></parameter></parameters><description>

Constructor.

</description></function></member>
<member class="wxUpdateUIEvent" name="m_checked"></member>
<member class="wxUpdateUIEvent" name="m_enabled"></member>
<member class="wxUpdateUIEvent" name="m_setChecked"></member>
<member class="wxUpdateUIEvent" name="m_setEnabled"></member>
<member class="wxUpdateUIEvent" name="m_setText"></member>
<member class="wxUpdateUIEvent" name="m_text"></member>
<member class="wxUpdateUIEvent" name="Check"><function type="void" name="Check"><parameters><parameter type="bool" name=" check"></parameter></parameters><description>

Check or uncheck the UI element.

</description></function></member>
<member class="wxUpdateUIEvent" name="Enable"><function type="void" name="Enable"><parameters><parameter type="bool" name=" enable"></parameter></parameters><description>

Enable or disable the UI element.

</description></function></member>
<member class="wxUpdateUIEvent" name="GetChecked"><function type="bool" name="GetChecked" suffix="const"><description>

Returns true if the UI element should be checked.

</description></function></member>
<member class="wxUpdateUIEvent" name="GetEnabled"><function type="bool" name="GetEnabled" suffix="const"><description>

Returns true if the UI element should be enabled.

</description></function></member>
<member class="wxUpdateUIEvent" name="GetSetChecked"><function type="bool" name="GetSetChecked" suffix="const"><description>

Returns true if the application has called <b> SetChecked</b>. For wxWindows internal use only.

</description></function></member>
<member class="wxUpdateUIEvent" name="GetSetEnabled"><function type="bool" name="GetSetEnabled" suffix="const"><description>

Returns true if the application has called <b> SetEnabled</b>. For wxWindows internal use only.

</description></function></member>
<member class="wxUpdateUIEvent" name="GetSetText"><function type="bool" name="GetSetText" suffix="const"><description>

Returns true if the application has called <b> SetText</b>. For wxWindows internal use only.

</description></function></member>
<member class="wxUpdateUIEvent" name="GetText"><function type="wxString" name="GetText" suffix="const"><description>

Returns the text that should be set for the UI element.

</description></function></member>
<member class="wxUpdateUIEvent" name="SetText"><function type="void" name="SetText"><parameters><parameter type="const wxString&amp;" name=" text"></parameter></parameters><description>

Sets the text for this UI element.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxVListBox">
<description>
<p class="classdesc">
wxVListBox is a listbox-like control with the following two main differences
from a regular listbox: it can have an arbitrarily huge number of items because
it doesn't store them itself but uses <ref target="wxvlistboxondrawitem">OnDrawItem()</ref> 
callback to draw them (so it is a {\Large V}irtual listbox) and its items can
have variable height as determined by 
<ref target="wxvlistboxonmeasureitem">OnMeasureItem()</ref> (so it is also a listbox
with the lines of {\Large V}ariable height).</p><p class="classdesc">Also, as a consequence of its virtual nature, it doesn't have any methods to
append or insert items in it as it isn't necessary to do it: you just have to
call <ref target="wxvlistboxsetitemcount">SetItemCount()</ref> to tell the control how
many items it should display. Of course, this also means that you will never
use this class directly because it has pure virtual functions, but will need to
derive your own class, such as <ref target="wxhtmllistbox">wxHtmlListBox</ref>, from it.</p><p class="classdesc">However it emits the same events as <ref target="wxlistbox">wxListBox</ref> and the same
event macros may be used with it.</p>
</description>
<parents>
<classref name="wxVScrolledWindow"/>

</parents>
<includes>
<header name="wx/vlbox.h"/></includes>
<members>
<member class="wxVListBox" name="wxVListBox"><function type="" name="wxVListBox"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id" value="wxID_ANY"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="size_t " name="countItems" value="0"></parameter><parameter type="long " name="style" value="0"></parameter><parameter type="const wxString&amp; " name="name" value="wxVListBoxNameStr"></parameter></parameters><description>

Normal constructor which calls <ref target="wxvlistboxcreate">Create()</ref> internally.

</description></function>
<function type="" name="wxVListBox"><description>

Default constructor, you must call <ref target="wxvlistboxcreate">Create()</ref> later.


</description></function></member>
<member class="wxVListBox" name="Clear"><function type="void" name="Clear"><description>

Deletes all items from the control.


</description></function></member>
<member class="wxVListBox" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id" value="wxID_ANY"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long " name="style" value="0"></parameter><parameter type="const wxString&amp; " name="name" value="wxVListBoxNameStr"></parameter></parameters><description>

Creates the control. To finish creating it you also should call 
<ref target="wxvlistboxsetitemcount">SetItemCount()</ref> to let it know about the
number of items it contains.

The only special style which may be used with wxVListBox is <tt> wxLB_MULTIPLE</tt> 
which indicates that the listbox should support multiple selection.

Returns <tt> true</tt> on success or <tt> false</tt> if the control couldn't be created


</description></function></member>
<member class="wxVListBox" name="DeselectAll"><function type="bool" name="DeselectAll"><seealso>

<ref target="wxvlistboxselectall">SelectAll</ref><ref target="wxvlistboxselect">Select</ref>


</seealso><description></description></function></member>
<member class="wxVListBox" name="GetFirstSelected"><function type="int" name="GetFirstSelected" suffix="const"><parameters><parameter type="unsigned long&amp; " name="cookie"></parameter></parameters><description>

Returns the index of the first selected item in the listbox or 
<tt> wxNOT_FOUND</tt> if no items are currently selected.

<i> cookie</i> is an opaque parameter which should be passed to the subsequent
calls to <ref target="wxvlistboxgetnextselected">GetNextSelected</ref>. It is needed in
order to allow parallel iterations over the selected items.

Here is a typical example of using these functions:
<pre>
unsigned long cookie;
int item = hlbox-&gt;GetFirstSelected(cookie);
while ( item != wxNOT_FOUND )
{
    ... process item ...
    item = hlbox-&gt;GetNextSelected(cookie);
}
</pre>

This method is only valid for multi selection listboxes.


</description></function></member>
<member class="wxVListBox" name="GetItemCount"><function type="size_t" name="GetItemCount" suffix="const"><seealso>

<ref target="wxvlistboxsetitemcount">SetItemCount()</ref>


</seealso><description>

Get the number of items in the control.

</description></function></member>
<member class="wxVListBox" name="GetMargins"><function type="wxPoint" name="GetMargins" suffix="const"><seealso>

<ref target="wxvlistboxsetmargins">SetMargins</ref>


</seealso><description>

Returns the margins used by the control. The <tt> x</tt> field of the returned
point is the horizontal margine and the <tt> y</tt> field is the vertical one.

</description></function></member>
<member class="wxVListBox" name="GetNextSelected"><function type="int" name="GetNextSelected" suffix="const"><parameters><parameter type="unsigned long&amp; " name="cookie"></parameter></parameters><seealso>

<ref target="wxvlistboxgetfirstselected">GetFirstSelected</ref>


</seealso><description>

Returns the index of the next selected item or <tt> wxNOT_FOUND</tt> if there are
no more.

This method is only valid for multi selection listboxes.

</description></function></member>
<member class="wxVListBox" name="GetSelectedCount"><function type="size_t" name="GetSelectedCount" suffix="const"><seealso>

<ref target="wxvlistboxisselected">IsSelected</ref>,<br/>
<ref target="wxvlistboxgetfirstselected">GetFirstSelected</ref>,<br/>
<ref target="wxvlistboxgetnextselected">GetNextSelected</ref>


</seealso><description>

Returns the number of the items currently selected.

It is valid for both single and multi selection controls. In the former case it
may only return 0 or 1 however.

</description></function></member>
<member class="wxVListBox" name="GetSelection"><function type="int" name="GetSelection" suffix="const"><description>

Get the currently selected item or $-1$ if there is no selection.


</description></function></member>
<member class="wxVListBox" name="GetSelectionBackground"><function type="const wxColour&amp;" name="GetSelectionBackground" suffix="const"><seealso>

<ref target="wxsystemsettingsgetcolour">wxSystemSettings::GetColour</ref>,<br/>
<ref target="wxvlistboxsetselectionbackground">SetSelectionBackground</ref>


</seealso><description>

Returns the background colour used for the selected cells. By default the
standard system colour is used.

</description></function></member>
<member class="wxVListBox" name="HasMultipleSelection"><function type="bool" name="HasMultipleSelection" suffix="const"><description>

Returns <tt> true</tt> if the listbox was created with <tt> wxLB_MULTIPLE</tt> style
and so supports multiple selection or <tt> false</tt> if it is a single selection
listbox.


</description></function></member>
<member class="wxVListBox" name="IsCurrent"><function type="bool" name="IsCurrent" suffix="const"><parameters><parameter type="size_t " name="item"></parameter></parameters><description>

Returns <tt> true</tt> if this item is the current one, <tt> false</tt> otherwise.

Current item is always the same as selected one for the single selection
listbox and in this case this method is equivalent to 
<ref target="wxvlistboxisselected">IsSelected</ref> but they are different for multi
selection listboxes where many items may be selected but only one (at most) is
current.


</description></function></member>
<member class="wxVListBox" name="IsSelected"><function type="bool" name="IsSelected" suffix="const"><parameters><parameter type="size_t " name="item"></parameter></parameters><description>

Returns <tt> true</tt> if this item is selected, <tt> false</tt> otherwise.


</description></function></member>
<member class="wxVListBox" name="OnDrawItem"><function type="void" name="OnDrawItem" suffix="const"><parameters><parameter type="wxDC&amp; " name="dc">The device context to use for drawing</parameter><parameter type="const wxRect&amp; " name="rect">The bounding rectangle for the item being drawn (DC clipping
region is set to this rectangle before calling this function)</parameter><parameter type="size_t " name="n">The index of the item to be drawn</parameter></parameters><description>

The derived class must implement this function to actually draw the item
with the given index on the provided DC.










</description></function></member>
<member class="wxVListBox" name="OnDrawSeparator"><function type="void" name="OnDrawSeparator" suffix="const"><parameters><parameter type="wxDC&amp; " name="dc">The device context to use for drawing</parameter><parameter type="wxRect&amp; " name="rect">The bounding rectangle for the item</parameter><parameter type="size_t " name="n">The index of the item</parameter></parameters><description>

This method may be used to draw separators between the lines. The rectangle
passed to it may be modified, typically to deflate it a bit before passing to
<ref target="wxvlistboxondrawitem">OnDrawItem()</ref>.

The base class version of this method doesn't do anything.










</description></function></member>
<member class="wxVListBox" name="OnMeasureItem"><function type="wxCoord" name="OnMeasureItem" suffix="const"><parameters><parameter type="size_t " name="n"></parameter></parameters><description>

The derived class must implement this method to return the height of the
specified item (in pixels).


</description></function></member>
<member class="wxVListBox" name="Select"><function type="bool" name="Select"><parameters><parameter type="size_t " name="item"></parameter><parameter type="bool " name="select" value="true"></parameter></parameters><description>

Selects or deselects the specified item which must be valid (i.e. not
equal to <tt> wxNOT_FOUND</tt>).

Return <tt> true</tt> if the items selection status has changed or <tt> false</tt>
otherwise.

This function is only valid for the multiple selection listboxes, use 
<ref target="wxvlistboxsetselection">SetSelection</ref> for the single selection ones.


</description></function></member>
<member class="wxVListBox" name="SelectAll"><function type="bool" name="SelectAll"><seealso>

<ref target="wxvlistboxdeselectall">DeselectAll</ref><ref target="wxvlistboxselect">Select</ref>


</seealso><description></description></function></member>
<member class="wxVListBox" name="SelectRange"><function type="bool" name="SelectRange"><parameters><parameter type="size_t " name="from"></parameter><parameter type="size_t " name="to"></parameter></parameters><seealso>

<ref target="wxvlistboxselectall">SelectAll</ref><ref target="wxvlistboxselect">Select</ref>


</seealso><description></description></function>
<function type="void" name="SetItemCount"><parameters><parameter type="size_t " name="count"></parameter></parameters><description>

Set the number of items to be shown in the control.

This is just a synonym for
<ref target="wxvscrolledwindowsetlinecount">wxVScrolledWindow::SetLineCount()</ref>.


</description></function></member>
<member class="wxVListBox" name="SetMargins"><function type="void" name="SetMargins"><parameters><parameter type="const wxPoint&amp; " name="pt"></parameter></parameters><description>

</description></function>
<function type="void" name="SetMargins"><parameters><parameter type="wxCoord " name="x"></parameter><parameter type="wxCoord " name="y"></parameter></parameters><description>

Set the margins: horizontal margin is the distance between the window
border and the item contents while vertical margin is half of the
distance between items.

By default both margins are 0.


</description></function></member>
<member class="wxVListBox" name="SetSelection"><function type="void" name="SetSelection"><parameters><parameter type="int " name="selection"></parameter></parameters><description>

Set the selection to the specified item, if it is $-1$ the selection is
unset. The selected item will be automatically scrolled into view if it isn't
currently visible.

This method may be used both with single and multiple selection listboxes.


</description></function></member>
<member class="wxVListBox" name="SetSelectionBackground"><function type="void" name="SetSelectionBackground"><parameters><parameter type="const wxColour&amp; " name="col"></parameter></parameters><seealso>

<ref target="wxvlistboxgetselectionbackground">GetSelectionBackground</ref>


</seealso><description>

Sets the colour to be used for the selected cells background. The background of
the standard cells may be changed by simply calling 
<ref target="wxwindowsetbackgroundcolour">SetBackgroundColour</ref>.

</description></function></member>
<member class="wxVListBox" name="Toggle"><function type="void" name="Toggle"><parameters><parameter type="size_t " name="item"></parameter></parameters><seealso>

<ref target="wxvlistboxselect">Select</ref>

</seealso><description>

Toggles the state of the specified <i> item</i>, i.e. selects it if it was
unselected and deselects it if it was selected.

This method is only valid for multi selection listboxes.

</description></function></member></members>
<supported>
</supported>
</class><class name="wxVScrolledWindow">
<description>
<p class="classdesc">
In the name of this class, &quot;V&quot; may stand for &quot;variable&quot; because it can be
used for scrolling lines of variable heights; &quot;virtual&quot; because it is not
necessary to know the heights of all lines in advance -- only those which
are shown on the screen need to be measured; or, even, &quot;vertical&quot; because
this class only supports scrolling in one direction currently (this could
and probably will change in the future however).</p><p class="classdesc">In any case, this is a generalization of the 
<ref target="wxscrolledwindow">wxScrolledWindow</ref> class which can be only used when
all lines have the same height. It lacks some other wxScrolledWindow features
however, notably there is currently no support for horizontal scrolling; it
can't scroll another window nor only a rectangle of the window and not its
entire client area.</p><p class="classdesc">To use this class, you need to derive from it and implement 
<ref target="wxvscrolledwindowongetlineheight">OnGetLineHeight()</ref> pure virtual
method. You also must call <ref target="wxvscrolledwindowsetlinecount">SetLineCount</ref> 
to let the base class know how many lines it should display but from that
moment on the scrolling is handled entirely by wxVScrolledWindow, you only
need to draw the visible part of contents in your <tt> OnPaint()</tt> method as
usual. You should use <ref target="wxvscrolledwindowgetfirstvisibleline">GetFirstVisibleLine()</ref> 
and <ref target="wxvscrolledwindowgetlastvisibleline">GetLastVisibleLine()</ref> to
select the lines to display. ote that the device context origin is not shifted
so the first visible line always appears at the point $(0, 0)$ in physical as
well as logical coordinates.</p>
</description>
<parents>
<classref name="wxPanel"/>

</parents>
<includes>
<header name="wx/vscroll.h"/></includes>
<members>
<member class="wxVScrolledWindow" name="wxVScrolledWindow"><function type="" name="wxVScrolledWindow"><parameters><parameter type="wxWindow&#42; " name="parent">The parent window, must not be <tt> NULL</tt></parameter><parameter type="wxWindowID " name="id" value="wxID_ANY">The identifier of this window, <tt> wxID_ANY</tt> by default</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">The initial window position</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">The initial window size</parameter><parameter type="long " name="style" value="0">The window style. There are no special style bits defined for
this class.</parameter><parameter type="const wxString&amp; " name="name" value="wxPanelNameStr">The name for this window; usually not used</parameter></parameters><description>

This is the normal constructor, no need to call Create() after using this one.

Note that <tt> wxVSCROLL</tt> is always automatically added to our style, there is
no need to specify it explicitly.

</description></function>
<function type="" name="wxVScrolledWindow"><description>

Default constructor, you must call <ref target="wxvscrolledwindowcreate">Create()</ref> 
later.
















</description></function></member>
<member class="wxVScrolledWindow" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="wxWindowID " name="id" value="wxID_ANY"></parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition"></parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize"></parameter><parameter type="long " name="style" value="0"></parameter><parameter type="const wxString&amp; " name="name" value="wxPanelNameStr"></parameter></parameters><description>

Same as the <ref target="wxvscrolledwindowctor">non default ctor</ref> but returns
status code: <tt> true</tt> if ok, <tt> false</tt> if the window couldn't have been created.

Just as with the ctor above, <tt> wxVSCROLL</tt> style is always used, there is no
need to specify it explicitly.


</description></function></member>
<member class="wxVScrolledWindow" name="EstimateTotalHeight"><function type="virtual wxCoord" name="EstimateTotalHeight" suffix="const"><description>

This protected function is used internally by wxVScrolledWindow to estimate the
total height of the window when <ref target="wxvscrolledwindowsetlinecount">SetLineCount</ref> 
is called. The default implementation uses the brute force approach if the
number of the items in the control is small enough. Otherwise, it tries to find
the average line height using some lines in the beginning, middle and the end.

If it is undesirable to access all these lines (some of which might be never
shown) just for the total height calculation, you may override the function and
provide your own guess better and/or faster.

Note that although returning a totally wrong value would still work, it risks
to result in very strange scrollbar behaviour so this function should really
try to make the best guess possible.


</description></function></member>
<member class="wxVScrolledWindow" name="GetFirstVisibleLine"><function type="size_t" name="GetFirstVisibleLine" suffix="const"><description>

Returns the index of the first currently visible line.


</description></function></member>
<member class="wxVScrolledWindow" name="GetLastVisibleLine"><function type="size_t" name="GetLastVisibleLine" suffix="const"><description>

Returns the index of the last currently visible line.


</description></function></member>
<member class="wxVScrolledWindow" name="GetLineCount"><function type="size_t" name="GetLineCount" suffix="const"><description>

Get the number of lines this window contains (previously set by 
<ref target="wxvscrolledwindowsetlinecount">SetLineCount()</ref>)


</description></function></member>
<member class="wxVScrolledWindow" name="HitTest"><function type="int" name="HitTest" suffix="const"><parameters><parameter type="wxCoord " name="x"></parameter><parameter type="wxCoord " name="y"></parameter></parameters><description>

</description></function>
<function type="int" name="HitTest" suffix="const"><parameters><parameter type="const wxPoint&amp; " name="pt"></parameter></parameters><description>

Return the item at the specified (in physical coordinates) position or
<tt> wxNOT_FOUND</tt> if none, i.e. if it is below the last item.


</description></function></member>
<member class="wxVScrolledWindow" name="IsVisible"><function type="bool" name="IsVisible" suffix="const"><parameters><parameter type="size_t " name="line"></parameter></parameters><description>

Returns <tt> true</tt> if the given line is (at least partially) visible or 
<tt> false</tt> otherwise.


</description></function></member>
<member class="wxVScrolledWindow" name="OnGetLineHeight"><function type="wxCoord" name="OnGetLineHeight" suffix="const"><parameters><parameter type="size_t " name="n"></parameter></parameters><seealso>

<ref target="wxvscrolledwindowongetlineshint">OnGetLinesHint</ref>


</seealso><description>

This protected virtual function must be overridden in the derived class and it
should return the height of the given line in pixels.

</description></function></member>
<member class="wxVScrolledWindow" name="OnGetLinesHint"><function type="void" name="OnGetLinesHint" suffix="const"><parameters><parameter type="size_t " name="lineMin"></parameter><parameter type="size_t " name="lineMax"></parameter></parameters><description>

This function doesn't have to be overridden but it may be useful to do
it if calculating the lines heights is a relatively expensive operation
as it gives the user code a possibility to calculate several of them at
once.

<tt> OnGetLinesHint()</tt> is normally called just before 
<ref target="wxvscrolledwindowongetlineheight">OnGetLineHeight()</ref> but you
shouldn't rely on the latter being called for all lines in the interval
specified here. It is also possible that OnGetLineHeight() will be
called for the lines outside of this interval, so this is really just a
hint, not a promise.

Finally note that <i> lineMin</i> is inclusive, while <i> lineMax</i> is exclusive,
as usual.


</description></function></member>
<member class="wxVScrolledWindow" name="RefreshLine"><function type="void" name="RefreshLine"><parameters><parameter type="size_t " name="line"></parameter></parameters><seealso>

<ref target="wxvscrolledwindowrefreshlines">RefreshLines</ref>


</seealso><description>

Refreshes the specified line -- it will be redrawn during the next main loop
iteration.

</description></function></member>
<member class="wxVScrolledWindow" name="RefreshLines"><function type="void" name="RefreshLines"><parameters><parameter type="size_t " name="from"></parameter><parameter type="size_t " name="to"></parameter></parameters><seealso>

<ref target="wxvscrolledwindowrefreshline">RefreshLine</ref>


</seealso><description>

Refreshes all lines between <i> from</i> and <i> to</i>, inclusive. <i> from</i>
should be less than or equal to <i> to</i>.

</description></function></member>
<member class="wxVScrolledWindow" name="RefreshAll"><function type="void" name="RefreshAll"><description>

This function completely refreshes the control, recalculating the number of
items shown on screen and repaining them. It should be called when the values
returned by <ref target="wxvscrolledwindowongetlineheight">OnGetLineHeight</ref> change
for some reason and the window must be updated to reflect this.


</description></function></member>
<member class="wxVScrolledWindow" name="ScrollLines"><function type="bool" name="ScrollLines"><parameters><parameter type="int " name="lines"></parameter></parameters><seealso>

<ref target="wxwindowlineup">LineUp</ref><ref target="wxwindowlinedown">LineDown</ref>


</seealso><description></description></function></member>
<member class="wxVScrolledWindow" name="ScrollPages"><function type="bool" name="ScrollPages"><parameters><parameter type="int " name="pages"></parameter></parameters><seealso>

<ref target="wxvscrolledwindowscrolllines">ScrollLines</ref>,<br/>
<ref target="wxwindowpageup">PageUp</ref><ref target="wxwindowpagedown">PageDown</ref>


</seealso><description></description></function></member>
<member class="wxVScrolledWindow" name="ScrollToLine"><function type="bool" name="ScrollToLine"><parameters><parameter type="size_t " name="line"></parameter></parameters><description>

Scroll to the specified line: it will become the first visible line in
the window.

Return <tt> true</tt> if we scrolled the window, <tt> false</tt> if nothing was done.


</description></function></member>
<member class="wxVScrolledWindow" name="SetLineCount"><function type="void" name="SetLineCount"><parameters><parameter type="size_t " name="count"></parameter></parameters><description>

Set the number of lines the window contains: the derived class must
provide the heights for all lines with indices up to the one given here
in its <ref target="wxvscrolledwindowongetlineheight">OnGetLineHeight()</ref>.


</description></function></member></members>
<supported>
</supported>
</class><class name="wxValidator">
<description>
<p class="classdesc">
wxValidator is the base class for a family of validator classes that mediate
between a class of control, and application data.</p><p class="classdesc">A validator has three major roles:</p><p class="classdesc">\begin{enumerate}\itemsep=0pt
\item to transfer data from a C++ variable or own storage to and from a control;
\item to validate data in a control, and show an appropriate error message;
\item to filter events (such as keystrokes), thereby changing the behaviour of the
associated control.
\end{enumerate}</p><p class="classdesc">Validators can be plugged into controls dynamically.</p><p class="classdesc">To specify a default, `null' validator, use the symbol <b> wxDefaultValidator</b>.</p><p class="classdesc">For more information, please see <ref target="validatoroverview">Validator overview</ref>.</p>
</description>
<parents>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/validate.h"/></includes>
<seealso>

<ref target="validatoroverview">Validator overview</ref>
<ref target="wxtextvalidator">wxTextValidator</ref>
<ref target="wxgenericvalidator">wxGenericValidator</ref>,

</seealso>
<members>
<member class="wxValidator" name="wxValidator"><function type="" name="wxValidator"><description>

Constructor.

</description></function></member>
<member class="wxValidator" name="~wxValidator"><function type="" name="~wxValidator"><description>

Destructor.

</description></function></member>
<member class="wxValidator" name="Clone"><function type="virtual wxObject&#42;" name="Clone" suffix="const"><description>

All validator classes must implement the <b> Clone</b> function, which returns
an identical copy of itself. This is because validators are passed to control
constructors as references which must be copied. Unlike objects such as pens
and brushes, it does not make sense to have a reference counting scheme
to do this cloning, because all validators should have separate
data.

This base function returns NULL.

</description></function></member>
<member class="wxValidator" name="GetWindow"><function type="wxWindow&#42;" name="GetWindow" suffix="const"><description>

Returns the window associated with the validator.

</description></function></member>
<member class="wxValidator" name="SetBellOnError"><function type="void" name="SetBellOnError"><parameters><parameter type="bool" name="doIt" value="true"></parameter></parameters><description>

This functions switches on or turns off the error sound produced by the
validators if an invalid key is pressed.

</description></function></member>
<member class="wxValidator" name="SetWindow"><function type="void" name="SetWindow"><parameters><parameter type="wxWindow&#42;" name=" window"></parameter></parameters><description>

Associates a window with the validator.

</description></function></member>
<member class="wxValidator" name="TransferFromWindow"><function type="virtual bool" name="TransferToWindow"><parameters></parameters><description>

This overridable function is called when the value in the window must be
transferred to the validator. Return false if there is a problem.

</description></function></member>
<member class="wxValidator" name="TransferToWindow"><function type="virtual bool" name="TransferToWindow"><parameters></parameters><description>

This overridable function is called when the value associated with the validator must be
transferred to the window. Return false if there is a problem.

</description></function></member>
<member class="wxValidator" name="Validate"><function type="virtual bool" name="Validate"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter></parameters><description>

This overridable function is called when the value in the associated window must be validated.
Return false if the value in the window is not valid; you may pop up an error dialog.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxVariant">
<description>
<p class="classdesc">
The <b> wxVariant</b> class represents a container for any type.
A variant's value can be changed at run time, possibly to a different type of value.</p><p class="classdesc">As standard, wxVariant can store values of type bool, char, double, long, string,
string list, time, date, void pointer, list of strings, and list of variants. However, an application can extend
wxVariant's capabilities by deriving from the class <ref target="wxvariantdata">wxVariantData</ref> and
using the wxVariantData form of the wxVariant constructor or assignment operator
to assign this data to a variant. Actual values for user-defined types will need to be accessed
via the wxVariantData object, unlike the case for basic data types where convenience
functions such as GetLong can be used.</p><p class="classdesc">This class is useful for reducing the programming for certain tasks, such as an editor
for different data types, or a remote procedure call protocol.</p><p class="classdesc">An optional name member is associated with a wxVariant. This might be used, for example, in CORBA
or OLE automation classes, where named parameters are required.</p><p class="classdesc">wxVariant is similar to wxExpr and also to wxPropertyValue. However, wxExpr is efficiency-optimized for
a restricted range of data types, whereas wxVariant is less efficient but more extensible.
wxPropertyValue may be replaced by wxVariant eventually.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/variant.h"/></includes>
<seealso>

<ref target="wxvariantdata">wxVariantData</ref>

</seealso>
<members>
<member class="wxVariant" name="wxVariant"><function type="" name="wxVariant"><description>

Default constructor.

</description></function>
<function type="" name="wxVariant"><parameters><parameter type="const wxVariant&amp; " name="variant"></parameter></parameters><description>

Copy constructor.

</description></function>
<function type="" name="wxVariant"><parameters><parameter type="const char&#42;" name=" value"></parameter><parameter type="const wxString&amp; " name="name" value="``&quot;"></parameter></parameters><description>

</description></function>
<function type="" name="wxVariant"><parameters><parameter type="const wxString&amp;" name=" value"></parameter><parameter type="const wxString&amp; " name="name" value="``&quot;"></parameter></parameters><description>

Construction from a string value.

</description></function>
<function type="" name="wxVariant"><parameters><parameter type="char" name=" value"></parameter><parameter type="const wxString&amp; " name="name" value="``&quot;"></parameter></parameters><description>

Construction from a character value.

</description></function>
<function type="" name="wxVariant"><parameters><parameter type="long" name=" value"></parameter><parameter type="const wxString&amp; " name="name" value="``&quot;"></parameter></parameters><description>

Construction from an integer value. You may need to cast to (long) to
avoid confusion with other constructors (such as the bool constructor).

</description></function>
<function type="" name="wxVariant"><parameters><parameter type="bool" name=" value"></parameter><parameter type="const wxString&amp; " name="name" value="``&quot;"></parameter></parameters><description>

Construction from a boolean value.

</description></function>
<function type="" name="wxVariant"><parameters><parameter type="double" name=" value"></parameter><parameter type="const wxString&amp; " name="name" value="``&quot;"></parameter></parameters><description>

Construction from a double-precision floating point value.

</description></function>
<function type="" name="wxVariant"><parameters><parameter type="const wxList&amp;" name=" value"></parameter><parameter type="const wxString&amp; " name="name" value="``&quot;"></parameter></parameters><description>

Construction from a list of wxVariant objects. This constructor
copies <i> value</i>, the application is still responsible for
deleting <i> value</i> and its contents.

</description></function>
<function type="" name="wxVariant"><parameters><parameter type="const wxStringList&amp;" name=" value"></parameter><parameter type="const wxString&amp; " name="name" value="``&quot;"></parameter></parameters><description>

Construction from a list of strings. This constructor
copies <i> value</i>, the application is still responsible for
deleting <i> value</i> and its contents.

</description></function>
<function type="" name="wxVariant"><parameters><parameter type="void&#42;" name=" value"></parameter><parameter type="const wxString&amp; " name="name" value="``&quot;"></parameter></parameters><description>

Construction from a void pointer.

</description></function>
<function type="" name="wxVariant"><parameters><parameter type="wxObject&#42;" name=" value"></parameter><parameter type="const wxString&amp; " name="name" value="``&quot;"></parameter></parameters><description>

Construction from a wxObject pointer.

</description></function>
<function type="" name="wxVariant"><parameters><parameter type="wxVariantData&#42;" name=" data"></parameter><parameter type="const wxString&amp; " name="name" value="``&quot;"></parameter></parameters><description>

Construction from user-defined data. The variant holds on to the <i> data</i> pointer.

</description></function></member>
<member class="wxVariant" name="~wxVariant"><function type="" name="~wxVariant"><description>

Destructor.

</description></function></member>
<member class="wxVariant" name="Append"><function type="void" name="Append"><parameters><parameter type="const wxVariant&amp;" name=" value"></parameter></parameters><description>

Appends a value to the list.

</description></function></member>
<member class="wxVariant" name="ClearList"><function type="void" name="ClearList"><description>

Deletes the contents of the list.

</description></function></member>
<member class="wxVariant" name="GetCount"><function type="int" name="GetCount" suffix="const"><description>

Returns the number of elements in the list.

</description></function></member>
<member class="wxVariant" name="Delete"><function type="bool" name="Delete"><parameters><parameter type="int " name="item"></parameter></parameters><description>

Deletes the zero-based <i> item</i> from the list.

</description></function></member>
<member class="wxVariant" name="GetBool"><function type="bool" name="GetBool" suffix="const"><description>

Returns the boolean value.

</description></function></member>
<member class="wxVariant" name="GetChar"><function type="char" name="GetChar" suffix="const"><description>

Returns the character value.

</description></function></member>
<member class="wxVariant" name="GetData"><function type="wxVariantData&#42;" name="GetData" suffix="const"><description>

Returns a pointer to the internal variant data.

</description></function></member>
<member class="wxVariant" name="GetDouble"><function type="double" name="GetDouble" suffix="const"><description>

Returns the floating point value.

</description></function></member>
<member class="wxVariant" name="GetLong"><function type="long" name="GetLong" suffix="const"><description>

Returns the integer value.

</description></function></member>
<member class="wxVariant" name="GetName"><function type="const wxString&amp;" name="GetName" suffix="const"><description>

Returns a constant reference to the variant name.

</description></function></member>
<member class="wxVariant" name="GetString"><function type="wxString" name="GetString" suffix="const"><description>

Gets the string value.

</description></function></member>
<member class="wxVariant" name="GetType"><function type="wxString" name="GetType" suffix="const"><description>

Returns the value type as a string. The built-in types are: bool, char, date, double, list, long, string, stringlist, time, void&#42;.

If the variant is null, the value type returned is the string ``null&quot; (not the empty string).

</description></function></member>
<member class="wxVariant" name="GetVoidPtr"><function type="void&#42;" name="GetVoidPtr" suffix="const"><description>

Gets the void pointer value.

</description></function></member>
<member class="wxVariant" name="GetWxObjectPtr"><function type="void&#42;" name="GetWxObjectPtr" suffix="const"><description>

Gets the wxObject pointer value.

</description></function></member>
<member class="wxVariant" name="Insert"><function type="void" name="Insert"><parameters><parameter type="const wxVariant&amp;" name=" value"></parameter></parameters><description>

Inserts a value at the front of the list.

</description></function></member>
<member class="wxVariant" name="IsNull"><function type="bool" name="IsNull" suffix="const"><description>

Returns true if there is no data associated with this variant, false if there is data.

</description></function></member>
<member class="wxVariant" name="IsType"><function type="bool" name="IsType" suffix="const"><parameters><parameter type="const wxString&amp;" name=" type"></parameter></parameters><description>

Returns true if <i> type</i> matches the type of the variant, false otherwise.

</description></function></member>
<member class="wxVariant" name="IsValueKindOf"><function type="bool" name="IsValueKindOf" suffix="const"><parameters><parameter type="const wxClassInfo&#42; type" name=" type"></parameter></parameters><description>

Returns true if the data is derived from the class described by <i> type</i>, false otherwise.

</description></function></member>
<member class="wxVariant" name="MakeNull"><function type="void" name="MakeNull"><description>

Makes the variant null by deleting the internal data.

</description></function></member>
<member class="wxVariant" name="MakeString"><function type="wxString" name="MakeString" suffix="const"><description>

Makes a string representation of the variant value (for any type).

</description></function></member>
<member class="wxVariant" name="Member"><function type="bool" name="Member" suffix="const"><parameters><parameter type="const wxVariant&amp;" name=" value"></parameter></parameters><description>

Returns true if <i> value</i> matches an element in the list.

</description></function></member>
<member class="wxVariant" name="NullList"><function type="void" name="NullList"><description>

Makes an empty list. This differs from a null variant which has no data; a null list
is of type list, but the number of elements in the list is zero.

</description></function></member>
<member class="wxVariant" name="SetData"><function type="void" name="SetData"><parameters><parameter type="wxVariantData&#42;" name=" data"></parameter></parameters><description>

Sets the internal variant data, deleting the existing data if there is any.

</description></function></member>
<member class="wxVariant" name="operator $=$"><function type="void" name="operator $=$"><parameters><parameter type="const wxVariant&amp; " name="value"></parameter></parameters><description>

</description></function>
<function type="void" name="operator $=$"><parameters><parameter type="wxVariantData&#42; " name="value"></parameter></parameters><description>

</description></function>
<function type="void" name="operator $=$"><parameters><parameter type="const wxString&amp; " name="value"></parameter></parameters><description>

</description></function>
<function type="void" name="operator $=$"><parameters><parameter type="const char&#42; " name="value"></parameter></parameters><description>

</description></function>
<function type="void" name="operator $=$"><parameters><parameter type="char " name="value"></parameter></parameters><description>

</description></function>
<function type="void" name="operator $=$"><parameters><parameter type="const long " name="value"></parameter></parameters><description>

</description></function>
<function type="void" name="operator $=$"><parameters><parameter type="const bool " name="value"></parameter></parameters><description>

</description></function>
<function type="void" name="operator $=$"><parameters><parameter type="const double " name="value"></parameter></parameters><description>

</description></function>
<function type="void" name="operator $=$"><parameters><parameter type="void&#42; " name="value"></parameter></parameters><description>

</description></function>
<function type="void" name="operator $=$"><parameters><parameter type="const wxList&amp; " name="value"></parameter></parameters><description>

</description></function>
<function type="void" name="operator $=$"><parameters><parameter type="const wxStringList&amp; " name="value"></parameter></parameters><description>

Assignment operators.

</description></function></member>
<member class="wxVariant" name="operator $==$"><function type="bool" name="operator $==$"><parameters><parameter type="const wxVariant&amp; " name="value"></parameter></parameters><description>

</description></function>
<function type="bool" name="operator $==$"><parameters><parameter type="const wxString&amp; " name="value"></parameter></parameters><description>

</description></function>
<function type="bool" name="operator $==$"><parameters><parameter type="const char&#42; " name="value"></parameter></parameters><description>

</description></function>
<function type="bool" name="operator $==$"><parameters><parameter type="char " name="value"></parameter></parameters><description>

</description></function>
<function type="bool" name="operator $==$"><parameters><parameter type="const long " name="value"></parameter></parameters><description>

</description></function>
<function type="bool" name="operator $==$"><parameters><parameter type="const bool " name="value"></parameter></parameters><description>

</description></function>
<function type="bool" name="operator $==$"><parameters><parameter type="const double " name="value"></parameter></parameters><description>

</description></function>
<function type="bool" name="operator $==$"><parameters><parameter type="void&#42; " name="value"></parameter></parameters><description>

</description></function>
<function type="bool" name="operator $==$"><parameters><parameter type="const wxList&amp; " name="value"></parameter></parameters><description>

</description></function>
<function type="bool" name="operator $==$"><parameters><parameter type="const wxStringList&amp; " name="value"></parameter></parameters><description>

Equality test operators.

</description></function></member>
<member class="wxVariant" name="operator $!=$"><function type="bool" name="operator $!=$"><parameters><parameter type="const wxVariant&amp; " name="value"></parameter></parameters><description>

</description></function>
<function type="bool" name="operator $!=$"><parameters><parameter type="const wxString&amp; " name="value"></parameter></parameters><description>

</description></function>
<function type="bool" name="operator $!=$"><parameters><parameter type="const char&#42; " name="value"></parameter></parameters><description>

</description></function>
<function type="bool" name="operator $!=$"><parameters><parameter type="char " name="value"></parameter></parameters><description>

</description></function>
<function type="bool" name="operator $!=$"><parameters><parameter type="const long " name="value"></parameter></parameters><description>

</description></function>
<function type="bool" name="operator $!=$"><parameters><parameter type="const bool " name="value"></parameter></parameters><description>

</description></function>
<function type="bool" name="operator $!=$"><parameters><parameter type="const double " name="value"></parameter></parameters><description>

</description></function>
<function type="bool" name="operator $!=$"><parameters><parameter type="void&#42; " name="value"></parameter></parameters><description>

</description></function>
<function type="bool" name="operator $!=$"><parameters><parameter type="const wxList&amp; " name="value"></parameter></parameters><description>

</description></function>
<function type="bool" name="operator $!=$"><parameters><parameter type="const wxStringList&amp; " name="value"></parameter></parameters><description>

Inequality test operators.

</description></function></member>
<member class="wxVariant" name="operator $&#91;]$"><function type="wxVariant" name="operator $&#91;]$" suffix="const"><parameters><parameter type="size_t " name="idx"></parameter></parameters><description>

Returns the value at <i> idx</i> (zero-based).

</description></function>
<function type="wxVariant&amp;" name="operator $&#91;]$"><parameters><parameter type="size_t " name="idx"></parameter></parameters><description>

Returns a reference to the value at <i> idx</i> (zero-based). This can be used
to change the value at this index.

</description></function></member>
<member class="wxVariant" name="operator char"><function type="char" name="operator char" suffix="const"><description>

Operator for implicit conversion to a char, using <ref target="wxvariantgetchar">wxVariant::GetChar</ref>.

</description></function></member>
<member class="wxVariant" name="operator double"><function type="double" name="operator double" suffix="const"><description>

Operator for implicit conversion to a double, using <ref target="wxvariantgetdouble">wxVariant::GetDouble</ref>.

</description></function>
<function type="long" name="operator long" suffix="const"><description>

Operator for implicit conversion to a long, using <ref target="wxvariantgetlong">wxVariant::GetLong</ref>.

</description></function></member>
<member class="wxVariant" name="operator wxString"><function type="wxString" name="operator wxString" suffix="const"><description>

Operator for implicit conversion to a string, using <ref target="wxvariantmakestring">wxVariant::MakeString</ref>.

</description></function></member>
<member class="wxVariant" name="operator void&#42;"><function type="void&#42;" name="operator void&#42;" suffix="const"><description>

Operator for implicit conversion to a pointer to a void, using <ref target="wxvariantgetvoidptr">wxVariant::GetVoidPtr</ref>.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxVariantData">
<description>
<p class="classdesc">
The <b> wxVariantData</b> is used to implement a new type for wxVariant. Derive from wxVariantData,
and override the pure virtual functions.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/variant.h"/></includes>
<seealso>

<ref target="wxvariant">wxVariant</ref>

</seealso>
<members>
<member class="wxVariantData" name="wxVariantData"><function type="" name="wxVariantData"><description>

Default constructor.

</description></function></member>
<member class="wxVariantData" name="Copy"><function type="void" name="Copy"><parameters><parameter type="wxVariantData&amp;" name=" data"></parameter></parameters><description>

Copy the data from `this' object to <i> data</i>.

</description></function></member>
<member class="wxVariantData" name="Eq"><function type="bool" name="Eq" suffix="const"><parameters><parameter type="wxVariantData&amp;" name=" data"></parameter></parameters><description>

Returns true if this object is equal to <i> data</i>.

</description></function></member>
<member class="wxVariantData" name="GetType"><function type="wxString" name="GetType" suffix="const"><description>

Returns the string type of the data.

</description></function></member>
<member class="wxVariantData" name="GetValueClassInfo"><function type="wxClassInfo&#42;" name="GetValueClassInfo" suffix="const"><description>

If the data is a wxObject returns a pointer to the objects wxClassInfo structure, if
the data isn't a wxObject the method returns NULL.

</description></function></member>
<member class="wxVariantData" name="Read"><function type="bool" name="Read"><parameters><parameter type="ostream&amp;" name=" stream"></parameter></parameters><description>

</description></function>
<function type="bool" name="Read"><parameters><parameter type="wxString&amp;" name=" string"></parameter></parameters><description>

Reads the data from <i> stream</i> or <i> string</i>.

</description></function></member>
<member class="wxVariantData" name="Write"><function type="bool" name="Write" suffix="const"><parameters><parameter type="ostream&amp;" name=" stream"></parameter></parameters><description>

</description></function>
<function type="bool" name="Write" suffix="const"><parameters><parameter type="wxString&amp;" name=" string"></parameter></parameters><description>

Writes the data to <i> stream</i> or <i> string</i>.


</description></function></member>
<member class="" name=""></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxView">
<description>
<p class="classdesc">
The view class can be used to model the viewing and editing component of
an application's file-based data. It is part of the document/view framework supported by wxWindows,
and cooperates with the <ref target="wxdocument">wxDocument</ref>, <ref target="wxdoctemplate">wxDocTemplate</ref> 
and <ref target="wxdocmanager">wxDocManager</ref> classes.</p>
</description>
<parents>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/docview.h"/></includes>
<seealso>

<ref target="wxviewoverview">wxView overview</ref><ref target="wxdocument">wxDocument</ref><ref target="wxdoctemplate">wxDocTemplate</ref>,
<ref target="wxdocmanager">wxDocManager</ref>

</seealso>
<members>
<member class="wxView" name="m_viewDocument"></member>
<member class="wxView" name="m_viewFrame"></member>
<member class="wxView" name="m_viewTypeName"></member>
<member class="wxView" name="wxView"><function type="" name="wxView"><description>

Constructor. Define your own default constructor to initialize application-specific
data.

</description></function></member>
<member class="wxView" name="~wxView"><function type="" name="~wxView"><description>

Destructor. Removes itself from the document's list of views.

</description></function></member>
<member class="wxView" name="Activate"><function type="virtual void" name="Activate"><parameters><parameter type="bool" name=" activate"></parameter></parameters><description>

Call this from your view frame's OnActivate member to tell the framework which view is
currently active. If your windowing system doesn't call OnActivate, you may need to
call this function from OnMenuCommand or any place where you know the view must
be active, and the framework will need to get the current view.

The prepackaged view frame wxDocChildFrame calls wxView::Activate from its OnActivate member
and from its OnMenuCommand member.

This function calls wxView::OnActivateView.

</description></function></member>
<member class="wxView" name="Close"><function type="virtual bool" name="Close"><parameters><parameter type="bool" name="deleteWindow" value="true"></parameter></parameters><description>

Closes the view by calling OnClose. If <i> deleteWindow</i> is true, this function should
delete the window associated with the view.

</description></function></member>
<member class="wxView" name="GetDocument"><function type="wxDocument&#42;" name="GetDocument" suffix="const"><description>

Gets a pointer to the document associated with the view.

</description></function></member>
<member class="wxView" name="GetDocumentManager"><function type="wxDocumentManager&#42;" name="GetDocumentManager" suffix="const"><description>

Returns a pointer to the document manager instance associated with this view.

</description></function></member>
<member class="wxView" name="GetFrame"><function type="wxWindow &#42;" name="GetFrame"><description>

Gets the frame associated with the view (if any). Note that this ``frame'' is
not a wxFrame at all in the generic MDI implementation which uses the notebook
pages instead of the frames and this is why this method returns a wxWindow and
not a wxFrame.

</description></function></member>
<member class="wxView" name="GetViewName"><function type="wxString" name="GetViewName" suffix="const"><description>

Gets the name associated with the view (passed to the wxDocTemplate constructor).
Not currently used by the framework.

</description></function></member>
<member class="wxView" name="OnActivateView"><function type="virtual void" name="OnActivateView"><parameters><parameter type="bool " name="activate"></parameter><parameter type="wxView &#42;" name="activeView"></parameter><parameter type="wxView &#42;" name="deactiveView"></parameter></parameters><description>

Called when a view is activated by means of wxView::Activate. The default implementation does
nothing.

</description></function></member>
<member class="wxView" name="OnChangeFilename"><function type="virtual void" name="OnChangeFilename"><description>

Called when the filename has changed. The default implementation constructs a
suitable title and sets the title of the view frame (if any).

</description></function></member>
<member class="wxView" name="OnClose"><function type="virtual bool" name="OnClose"><parameters><parameter type="bool" name=" deleteWindow"></parameter></parameters><description>

Implements closing behaviour. The default implementation calls wxDocument::Close
to close the associated document. Does not delete the view. The application
may wish to do some cleaning up operations in this function, <i> if</i> a
call to wxDocument::Close succeeded. For example, if your application's
all share the same window, you need to disassociate the window from the view
and perhaps clear the window. If <i> deleteWindow</i> is true, delete the
frame associated with the view.

</description></function></member>
<member class="wxView" name="OnClosingDocument"><function type="virtual void" name="OnClosingDoocument"><description>

Override this to clean up the view when the document is being
closed.

</description></function></member>
<member class="wxView" name="OnCreate"><function type="virtual bool" name="OnCreate"><parameters><parameter type="wxDocument&#42; " name="doc"></parameter><parameter type="long" name=" flags"></parameter></parameters><description>

wxDocManager or wxDocument creates a wxView via a wxDocTemplate.
Just after the wxDocTemplate creates the wxView, it calls
wxView::OnCreate. In its OnCreate member function, the wxView can create a wxDocChildFrame
or a derived class. This wxDocChildFrame provides user interface
elements to view and/or edit the contents of the wxDocument.

By default, simply returns true. If the function returns false, the
view will be deleted.

</description></function></member>
<member class="wxView" name="OnCreatePrintout"><function type="virtual wxPrintout&#42;" name="OnCreatePrintout"><description>

If the printing framework is enabled in the library, this function returns a
<ref target="wxprintout">wxPrintout</ref> object for the purposes of printing. It should create a new object
every time it is called; the framework will delete objects it creates.

By default, this function returns an instance of wxDocPrintout, which prints
and previews one page by calling wxView::OnDraw.

Override to return an instance of a class other than wxDocPrintout.

</description></function></member>
<member class="wxView" name="OnUpdate"><function type="virtual void" name="OnUpdate"><parameters><parameter type="wxView&#42; " name="sender"></parameter><parameter type="wxObject&#42; " name="hint"></parameter></parameters><description>

Called when the view should be updated. <i> sender</i> is a pointer to the view
that sent the update request, or NULL if no single view requested the update (for instance,
when the document is opened). <i> hint</i> is as yet unused but may in future contain
application-specific information for making updating more efficient.

</description></function></member>
<member class="wxView" name="SetDocument"><function type="void" name="SetDocument"><parameters><parameter type="wxDocument&#42; " name="doc"></parameter></parameters><description>

Associates the given document with the view. Normally called by the
framework.

</description></function></member>
<member class="wxView" name="SetFrame"><function type="void" name="SetFrame"><parameters><parameter type="wxWindow&#42; " name="frame"></parameter></parameters><description>

Sets the frame associated with this view. The application should call this
if possible, to tell the view about the frame.

See <ref target="wxviewgetframe">GetFrame</ref> for the explanation about the mismatch
between the ``Frame'' in the method name and the type of its parameter.

</description></function></member>
<member class="wxView" name="SetViewName"><function type="void" name="SetViewName"><parameters><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Sets the view type name. Should only be called by the framework.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxWave">
<description>
<p class="classdesc">
This class represents a short wave file, in Windows WAV format, that
can be stored in memory and played. Currently this class is implemented
on Windows and GTK (Linux) only.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/wave.h"/></includes>
<members>
<member class="wxWave" name="wxWave"><function type="" name="wxWave"><description>

Default constructor.

</description></function>
<function type="" name="wxWave"><parameters><parameter type="const wxString&amp;" name=" fileName"></parameter><parameter type="bool" name="isResource" value="false">true if <i> fileName</i> is a resource, false if it is a filename.</parameter></parameters><description>

Constructs a wave object from a file or resource. Call <ref target="wxwaveisok">wxWave::IsOk</ref> to
determine whether this succeeded.







</description></function></member>
<member class="wxWave" name="~wxWave"><function type="" name="~wxWave"><description>

Destroys the wxWave object.

</description></function></member>
<member class="wxWave" name="Create"><function type="bool" name="Create"><parameters><parameter type="const wxString&amp;" name=" fileName"></parameter><parameter type="bool" name="isResource" value="false">true if <i> fileName</i> is a resource, false if it is a filename.</parameter></parameters><returnvalue>

true if the call was successful, false otherwise.

</returnvalue><description>

Constructs a wave object from a file or resource.







</description></function></member>
<member class="wxWave" name="IsOk"><function type="bool" name="IsOk" suffix="const"><description>

Returns true if the object contains a successfully loaded file or resource, false otherwise.

</description></function></member>
<member class="wxWave" name="Play"><function type="bool" name="Play" suffix="const"><parameters><parameter type="bool" name="async" value="true"></parameter><parameter type="bool" name="looped" value="false"></parameter></parameters><description>

Plays the wave file synchronously or asynchronously, looped or single-shot.


</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="N"/><platform name="x11" status="N"/><platform name="nanox" status="N"/><platform name="mgl" status="N"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxWindow">
<description>
<p class="classdesc">
wxWindow is the base class for all windows. Any children of the window will be deleted
automatically by the destructor before the window itself is deleted.</p>
</description>
<parents>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/window.h"/></includes>
<windowstyles>
<style name="wxSIMPLE_BORDER">Displays a thin border around the window. wxBORDER is the old name
for this style. </style><style name="wxDOUBLE_BORDER">Displays a double border. Windows only.</style><style name="wxSUNKEN_BORDER">Displays a sunken border.</style><style name="wxRAISED_BORDER">Displays a raised border. GTK only. </style><style name="wxSTATIC_BORDER">Displays a border suitable for a static control. Windows only. </style><style name="wxTRANSPARENT_WINDOW">The window is transparent, that is, it will not receive paint
events. Windows only.</style><style name="wxNO_3D">Prevents the children of this window taking on 3D styles, even though
the application-wide policy is for 3D controls. Windows only.</style><style name="wxTAB_TRAVERSAL">Use this to enable tab traversal for non-dialog windows.</style><style name="wxWANTS_CHARS">Use this to indicate that the window
wants to get all char events - even for keys like TAB or ENTER which are
usually used for dialog navigation and which wouldn't be generated without
this style</style><style name="wxNO_FULL_REPAINT_ON_RESIZE">Disables repainting
the window completely when its size is changed - you will have to repaint the
new window area manually if you use this style. Currently only has an effect for
Windows.</style><style name="wxVSCROLL">Use this style to enable a vertical scrollbar.</style><style name="wxHSCROLL">Use this style to enable a horizontal scrollbar.</style><style name="wxCLIP_CHILDREN">Use this style to eliminate flicker caused by the background being
repainted, then children being painted over them. Windows only.</style></windowstyles>
<seealso>

<ref target="eventhandlingoverview">Event handling overview</ref>

</seealso>
<members>
<member class="wxWindow" name="wxWindow"><function type="" name="wxWindow"><description>

Default constructor.

</description></function>
<function type="" name="wxWindow"><parameters><parameter type="wxWindow&#42;" name=" parent"></parameter><parameter type="wxWindowID " name="id">Window identifier. If -1, will automatically create an identifier.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">Window position. wxDefaultPosition is (-1, -1) which indicates that wxWindows
should generate a default position for the window. If using the wxWindow class directly, supply
an actual position.</parameter><parameter type="const wxSize&amp; " name="size" value="wxDefaultSize">Window size. wxDefaultSize is (-1, -1) which indicates that wxWindows
should generate a default size for the window. If no suitable size can  be found, the
window will be sized to 20x20 pixels so that the window is visible but obviously not
correctly sized. </parameter><parameter type="long " name="style" value="0">Window style. For generic window styles, please see <ref target="wxwindow">wxWindow</ref>.</parameter><parameter type="const wxString&amp; " name="name" value="wxPanelNameStr">Window name.</parameter></parameters><description>

Constructs a window, which can be a child of a frame, dialog or any other non-control window.















</description></function></member>
<member class="wxWindow" name="~wxWindow"><function type="" name="~wxWindow"><seealso>

<ref target="windowdeletionoverview">Window deletion overview</ref>,
<ref target="wxwindowdestroy">wxWindow::Destroy</ref>,
<ref target="wxcloseevent">wxCloseEvent</ref>

</seealso><description>

Destructor. Deletes all subwindows, then deletes itself. Instead of using
the <b> delete</b> operator explicitly, you should normally
use <ref target="wxwindowdestroy">wxWindow::Destroy</ref> so that wxWindows
can delete a window only when it is safe to do so, in idle time.

</description></function></member>
<member class="wxWindow" name="AddChild"><function type="virtual void" name="AddChild"><parameters><parameter type="wxWindow&#42; " name="child">Child window to add.</parameter></parameters><description>

Adds a child window.  This is called automatically by window creation
functions so should not be required by the application programmer.





</description></function></member>
<member class="wxWindow" name="CaptureMouse"><function type="virtual void" name="CaptureMouse"><seealso>

<ref target="wxwindowreleasemouse">wxWindow::ReleaseMouse</ref>

</seealso><description>

Directs all mouse input to this window. Call <ref target="wxwindowreleasemouse">wxWindow::ReleaseMouse</ref> to
release the capture.

Note that wxWindows maintains the stack of windows having captured the mouse
and when the mouse is released the capture returns to the window which had had
captured it previously and it is only really released if there were no previous
window. In particular, this means that you must release the mouse as many times
as you capture it.

</description></function></member>
<member class="wxWindow" name="Center"><function type="void" name="Center"><parameters><parameter type="int" name=" direction"></parameter></parameters><description>

A synonym for <ref target="wxwindowcentre">Centre</ref>.

</description></function></member>
<member class="wxWindow" name="CenterOnParent"><function type="void" name="CenterOnParent"><parameters><parameter type="int" name=" direction"></parameter></parameters><description>

A synonym for <ref target="wxwindowcentreonparent">CentreOnParent</ref>.

</description></function></member>
<member class="wxWindow" name="CenterOnScreen"><function type="void" name="CenterOnScreen"><parameters><parameter type="int" name=" direction"></parameter></parameters><description>

A synonym for <ref target="wxwindowcentreonscreen">CentreOnScreen</ref>.

</description></function></member>
<member class="wxWindow" name="Centre"><function type="void" name="Centre"><parameters><parameter type="int" name="direction" value="wxBOTH">Specifies the direction for the centering. May be <tt> wxHORIZONTAL</tt>, <tt> wxVERTICAL</tt>
or <tt> wxBOTH</tt>. It may also include <tt> wxCENTRE_ON_SCREEN</tt> flag
if you want to center the window on the entire screen and not on its
parent window.</parameter></parameters><seealso>

<ref target="wxwindowcenter">wxWindow::Center</ref>

</seealso><remarks>

If the window is a top level one (i.e. doesn't have a parent), it will be
centered relative to the screen anyhow.

</remarks><description>

Centres the window.





The flag <tt> wxCENTRE_FRAME</tt> is obsolete and should not be used any longer
(it has no effect).

</description></function></member>
<member class="wxWindow" name="CentreOnParent"><function type="void" name="CentreOnParent"><parameters><parameter type="int" name="direction" value="wxBOTH">Specifies the direction for the centering. May be <tt> wxHORIZONTAL</tt>, <tt> wxVERTICAL</tt>
or <tt> wxBOTH</tt>.</parameter></parameters><seealso>

<ref target="wxwindowcenteronscreen">wxWindow::CentreOnScreen</ref>

</seealso><remarks>

This methods provides for a way to center top level windows over their
parents instead of the entire screen.  If there is no parent or if the
window is not a top level window, then behaviour is the same as
<ref target="wxwindowcentre">wxWindow::Centre</ref>.

</remarks><description>

Centres the window on its parent. This is a more readable synonym for
<ref target="wxwindowcentre">Centre</ref>.





</description></function></member>
<member class="wxWindow" name="CentreOnScreen"><function type="void" name="CentreOnScreen"><parameters><parameter type="int" name="direction" value="wxBOTH">Specifies the direction for the centering. May be <tt> wxHORIZONTAL</tt>, <tt> wxVERTICAL</tt>
or <tt> wxBOTH</tt>.</parameter></parameters><seealso>

<ref target="wxwindowcenteronparent">wxWindow::CentreOnParent</ref>

</seealso><description>

Centres the window on screen. This only works for top level windows -
otherwise, the window will still be centered on its parent.





</description></function></member>
<member class="wxWindow" name="Clear"><function type="void" name="Clear"><description>

Clears the window by filling it with the current background colour. Does not
cause an erase background event to be generated.

</description></function></member>
<member class="wxWindow" name="ClientToScreen"><function type="virtual void" name="ClientToScreen" suffix="const"><parameters><parameter type="int&#42; " name="x">A pointer to a integer value for the x coordinate. Pass the client coordinate in, and
a screen coordinate will be passed out.</parameter><parameter type="int&#42; " name="y">A pointer to a integer value for the y coordinate. Pass the client coordinate in, and
a screen coordinate will be passed out.</parameter></parameters><description>

\perlnote{In wxPerl this method returns a 2-element list instead of
modifying its parameters.}

</description></function>
<function type="virtual wxPoint" name="ClientToScreen" suffix="const"><parameters><parameter type="const wxPoint&amp;" name=" pt"></parameter></parameters><description>

Converts to screen coordinates from coordinates relative to this window.







\pythonnote{In place of a single overloaded method name, wxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> ClientToScreen(point)</b></td><td>Accepts and returns a wxPoint</td></tr>
<tr><td><b> ClientToScreenXY(x, y)</b></td><td>Returns a 2-tuple, (x, y)</td></tr>
</table>}
}

</description></function></member>
<member class="wxWindow" name="Close"><function type="bool" name="Close"><parameters><parameter type="bool" name="force" value="false"><tt> false</tt> if the window's close handler should be able to veto the destruction
of this window, <tt> true</tt> if it cannot.</parameter></parameters><seealso>

<ref target="windowdeletionoverview">Window deletion overview</ref>,
<ref target="wxwindowdestroy">wxWindow::Destroy</ref>,
<ref target="wxcloseevent">wxCloseEvent</ref>

</seealso><remarks>

Close calls the <ref target="wxcloseevent">close handler</ref> for the window, providing
an opportunity for the window to choose whether to destroy the window.
Usually it is only used with the top level windows (wxFrame and wxDialog
classes) as the others are not supposed to have any special OnClose() logic.

The close handler should check whether the window is being deleted forcibly,
using <ref target="wxcloseeventgetforce">wxCloseEvent::GetForce</ref>, in which case it
should destroy the window using <ref target="wxwindowdestroy">wxWindow::Destroy</ref>.

<i> Note</i> that calling Close does not guarantee that the window will be
destroyed; but it provides a way to simulate a manual close of a window, which
may or may not be implemented by destroying the window. The default
implementation of wxDialog::OnCloseWindow does not necessarily delete the
dialog, since it will simply simulate an wxID_CANCEL event which is handled by
the appropriate button event handler and may do anything at all.

To guarantee that the window will be destroyed, call 
<ref target="wxwindowdestroy">wxWindow::Destroy</ref> instead

</remarks><description>

This function simply generates a <ref target="wxcloseevent">wxCloseEvent</ref> whose
handler usually tries to close the window. It doesn't close the window itself,
however.





</description></function></member>
<member class="wxWindow" name="ConvertDialogToPixels"><function type="wxPoint" name="ConvertDialogToPixels"><parameters><parameter type="const wxPoint&amp;" name=" pt"></parameter></parameters><description>

</description></function>
<function type="wxSize" name="ConvertDialogToPixels"><parameters><parameter type="const wxSize&amp;" name=" sz"></parameter></parameters><seealso>

<ref target="wxwindowconvertpixelstodialog">wxWindow::ConvertPixelsToDialog</ref>

\pythonnote{In place of a single overloaded method namewxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> ConvertDialogPointToPixels(point)</b></td><td>Accepts and returns a wxPoint</td></tr>
<tr><td><b> ConvertDialogSizeToPixels(size)</b></td><td>Accepts and returns a wxSize</td></tr>
</table>}

Additionallythe following helper functions are defined:\par
\indented{2cm}{<table>
<tr><td><b> wxDLG_PNT(winpoint)</b></td><td>Converts a wxPoint from dialog
units to pixels</td></tr>
<tr><td><b> wxDLG_SZE(winsize)</b></td><td>Converts a wxSize from dialog
units to pixels</td></tr>
</table>}
}


</seealso><description></description></function></member>
<member class="wxWindow" name="ConvertPixelsToDialog"><function type="wxPoint" name="ConvertPixelsToDialog"><parameters><parameter type="const wxPoint&amp;" name=" pt"></parameter></parameters><description>

</description></function>
<function type="wxSize" name="ConvertPixelsToDialog"><parameters><parameter type="const wxSize&amp;" name=" sz"></parameter></parameters><seealso>

<ref target="wxwindowconvertdialogtopixels">wxWindow::ConvertDialogToPixels</ref>


\pythonnote{In place of a single overloaded method namewxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> ConvertDialogPointToPixels(point)</b></td><td>Accepts and returns a wxPoint</td></tr>
<tr><td><b> ConvertDialogSizeToPixels(size)</b></td><td>Accepts and returns a wxSize</td></tr>
</table>}
}

</seealso><description></description></function></member>
<member class="wxWindow" name="Destroy"><function type="virtual bool" name="Destroy"><returnvalue>

<tt> true</tt> if the window has either been successfully deleted, or it has been added
to the list of windows pending real deletion.

</returnvalue><description>

Destroys the window safely. Use this function instead of the delete operator, since
different window classes can be destroyed differently. Frames and dialogs
are not destroyed immediately when this function is called -- they are added
to a list of windows to be deleted on idle time, when all the window's events
have been processed. This prevents problems with events being sent to non-existent
windows.

</description></function></member>
<member class="wxWindow" name="DestroyChildren"><function type="virtual void" name="DestroyChildren"><description>

Destroys all children of a window.  Called automatically by the destructor.

</description></function></member>
<member class="wxWindow" name="Disable"><function type="void" name="Disable"><returnvalue>

Returns <tt> true</tt> if the window has been disabled, <tt> false</tt> if it had been
already disabled before the call to this function.

</returnvalue><description>

Disables the window, same as <ref target="wxwindowenable">Enable(<tt> false</tt>)</ref>.

</description></function></member>
<member class="wxWindow" name="DragAcceptFiles"><function type="virtual void" name="DragAcceptFiles"><parameters><parameter type="bool" name=" accept"></parameter></parameters><remarks>

Windows only.

</remarks><description>

Enables or disables eligibility for drop file events (OnDropFiles).





</description></function></member>
<member class="wxWindow" name="Enable"><function type="virtual bool" name="Enable"><parameters><parameter type="bool" name="enable" value="true">If <tt> true</tt>, enables the window for input. If <tt> false</tt>, disables the window.</parameter></parameters><seealso>

<ref target="wxwindowisenabled">wxWindow::IsEnabled</ref>,
<ref target="wxwindowdisable">wxWindow::Disable</ref>

</seealso><returnvalue>

Returns <tt> true</tt> if the window has been enabled or disabled, <tt> false</tt> if
nothing was done, i.e. if the window had already been in the specified state.

</returnvalue><description>

Enable or disable the window for user input. Note that when a parent window is
disabled, all of its children are disabled as well and they are reenabled again
when the parent is.





</description></function></member>
<member class="wxWindow" name="FindFocus"><function type="static wxWindow&#42;" name="FindFocus"><seealso>

<ref target="wxwindowsetfocus">wxWindow::SetFocus</ref>

</seealso><remarks>

Note that this is a static function, so it can be called without needing a wxWindow pointer.

</remarks><description>

Finds the window or control which currently has the keyboard focus.

</description></function></member>
<member class="wxWindow" name="FindWindow"><function type="wxWindow&#42;" name="FindWindow"><parameters><parameter type="long" name=" id"></parameter></parameters><description>

Find a child of this window, by identifier.

</description></function>
<function type="wxWindow&#42;" name="FindWindow"><parameters><parameter type="const wxString&amp;" name=" name"></parameter></parameters><description>

Find a child of this window, by name.

\pythonnote{In place of a single overloaded method name, wxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> FindWindowById(id)</b></td><td>Accepts an integer</td></tr>
<tr><td><b> FindWindowByName(name)</b></td><td>Accepts a string</td></tr>
</table>}
}

</description></function></member>
<member class="wxWindow" name="FindWindowById"><function type="static wxWindow&#42;" name="FindWindowById"><parameters><parameter type="long" name=" id"></parameter><parameter type="wxWindow&#42;" name="parent" value="NULL"></parameter></parameters><seealso>

<ref target="wxwindowfindwindow">FindWindow</ref>

</seealso><description>

Find the first window with the given <i> id</i>.

If <i> parent</i> is NULL, the search will start from all top-level
frames and dialog boxes; if non-NULL, the search will be limited to the given window hierarchy.
The search is recursive in both cases.

</description></function></member>
<member class="wxWindow" name="FindWindowByName"><function type="static wxWindow&#42;" name="FindWindowByName"><parameters><parameter type="const wxString&amp;" name=" name"></parameter><parameter type="wxWindow&#42;" name="parent" value="NULL"></parameter></parameters><seealso>

<ref target="wxwindowfindwindow">FindWindow</ref>

</seealso><description>

Find a window by its name (as given in a window constructor or <b> Create</b> function call).
If <i> parent</i> is NULL, the search will start from all top-level
frames and dialog boxes; if non-NULL, the search will be limited to the given window hierarchy.
The search is recursive in both cases.

If no window with such name is found, 
<ref target="wxwindowfindwindowbylabel">FindWindowByLabel</ref> is called.

</description></function></member>
<member class="wxWindow" name="FindWindowByLabel"><function type="static wxWindow&#42;" name="FindWindowByLabel"><parameters><parameter type="const wxString&amp;" name=" label"></parameter><parameter type="wxWindow&#42;" name="parent" value="NULL"></parameter></parameters><seealso>

<ref target="wxwindowfindwindow">FindWindow</ref>

</seealso><description>

Find a window by its label. Depending on the type of window, the label may be a window title
or panel item label. If <i> parent</i> is NULL, the search will start from all top-level
frames and dialog boxes; if non-NULL, the search will be limited to the given window hierarchy.
The search is recursive in both cases.

</description></function></member>
<member class="wxWindow" name="Fit"><function type="virtual void" name="Fit"><description>

Sizes the window so that it fits around its subwindows. This function won't do
anything if there are no subwindows.

</description></function></member>
<member class="wxWindow" name="FitInside"><function type="virtual void" name="FitInside"><description>

Similar to <ref target="wxwindowfit">Fit</ref>, but sizes the interior (virtual) size
of a window.  Mainly useful with scrolled windows to reset scrollbars after
sizing changes that do not trigger a size event, and/or scrolled windows without
an interior sizer.  This function similarly won't do anything if there are no
subwindows.

</description></function></member>
<member class="wxWindow" name="Freeze"><function type="virtual void" name="Freeze"><description>

Freezes the window or, in other words, prevents any updates from taking place
on screen, the window is not redrawn at all. <ref target="wxwindowthaw">Thaw</ref> must
be called to reenable window redrawing.

This method is useful for visual appearance optimization (for example, it
is a good idea to use it before inserting large amount of text into a
wxTextCtrl under wxGTK) but is not implemented on all platforms nor for all
controls so it is mostly just a hint to wxWindows and not a mandatory
directive.

</description></function></member>
<member class="wxWindow" name="GetAccessible"><function type="wxAccessibile&#42;" name="GetAccessible"><description>

Returns the accessible object for this window, if any.

See also <ref target="wxaccessible">wxAccessible</ref>.

</description></function></member>
<member class="wxWindow" name="GetAdjustedBestSize"><function type="wxSize" name="GetAdjustedBestSize" suffix="const"><description>

This method is similar to <ref target="wxwindowgetbestsize">GetBestSize</ref>, except
in one thing.  GetBestSize should return the minimum untruncated size of the
window, while this method will return the largest of BestSize and any user
specified minimum size.  ie. it is the minimum size the window should currently
be drawn at, not the minimal size it can possibly tolerate.

</description></function></member>
<member class="wxWindow" name="GetBackgroundColour"><function type="virtual wxColour" name="GetBackgroundColour" suffix="const"><seealso>

<ref target="wxwindowsetbackgroundcolour">wxWindow::SetBackgroundColour</ref>,
<ref target="wxwindowsetforegroundcolour">wxWindow::SetForegroundColour</ref>,
<ref target="wxwindowgetforegroundcolour">wxWindow::GetForegroundColour</ref>

</seealso><description>

Returns the background colour of the window.

</description></function></member>
<member class="wxWindow" name="GetBestSize"><function type="virtual wxSize" name="GetBestSize" suffix="const"><description>

This functions returns the best acceptable minimal size for the window. For
example, for a static control, it will be the minimal size such that the
control label is not truncated. For windows containing subwindows (typically
<ref target="wxpanel">wxPanel</ref>), the size returned by this function will be the
same as the size the window would have had after calling
<ref target="wxwindowfit">Fit</ref>.

</description></function></member>
<member class="wxWindow" name="GetCaret"><function type="wxCaret &#42;" name="GetCaret" suffix="const"><description>

Returns the <ref target="wxcaret">caret</ref> associated with the window.

</description></function></member>
<member class="wxWindow" name="GetCapture"><function type="static wxWindow &#42;" name="GetCapture"><seealso>

<ref target="wxwindowhascapture">wxWindow::HasCapture</ref>
<ref target="wxwindowcapturemouse">wxWindow::CaptureMouse</ref>
<ref target="wxwindowreleasemouse">wxWindow::ReleaseMouse</ref>
<ref target="wxmousecapturechangedevent">wxMouseCaptureChangedEvent</ref>

</seealso><description></description></function></member>
<member class="wxWindow" name="GetCharHeight"><function type="virtual int" name="GetCharHeight" suffix="const"><description>

Returns the character height for this window.

</description></function></member>
<member class="wxWindow" name="GetCharWidth"><function type="virtual int" name="GetCharWidth" suffix="const"><description>

Returns the average character width for this window.

</description></function></member>
<member class="wxWindow" name="GetChildren"><function type="wxList&amp;" name="GetChildren"><description>

Returns a reference to the list of the window's children.

</description></function></member>
<member class="wxWindow" name="GetClientSize"><function type="virtual void" name="GetClientSize" suffix="const"><parameters><parameter type="int&#42; " name="width">Receives the client width in pixels.</parameter><parameter type="int&#42; " name="height">Receives the client height in pixels.</parameter></parameters><description>

\perlnote{In wxPerl this method takes no parameter and returns
a 2-element list <tt> ( width, height )</tt>.}

</description></function>
<function type="virtual wxSize" name="GetClientSize" suffix="const"><seealso>

<ref target="wxwindowgetsize">GetSize</ref>
<ref target="wxwindowgetvirtualsize">GetVirtualSize</ref>

</seealso><description>

This gets the size of the window `client area' in pixels.
The client area is the area which may be drawn on by the programmer,
excluding title bar, border, scrollbars, etc.







\pythonnote{In place of a single overloaded method name, wxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> GetClientSizeTuple()</b></td><td>Returns a 2-tuple of (width, height)</td></tr>
<tr><td><b> GetClientSize()</b></td><td>Returns a wxSize object</td></tr>
</table>}
}

</description></function></member>
<member class="wxWindow" name="GetConstraints"><function type="wxLayoutConstraints&#42;" name="GetConstraints" suffix="const"><description>

Returns a pointer to the window's layout constraints, or NULL if there are none.

</description></function></member>
<member class="wxWindow" name="GetContainingSizer"><function type="const wxSizer &#42;" name="GetContainingSizer" suffix="const"><description>

Return the sizer that this window is a member of, if any, otherwise
<tt> NULL</tt>.

</description></function></member>
<member class="wxWindow" name="GetDropTarget"><function type="wxDropTarget&#42;" name="GetDropTarget" suffix="const"><seealso>

<ref target="wxwindowsetdroptarget">wxWindow::SetDropTarget</ref>,
<ref target="wxdndoverview">Drag and drop overview</ref>

</seealso><description>

Returns the associated drop target, which may be NULL.

</description></function></member>
<member class="wxWindow" name="GetEventHandler"><function type="wxEvtHandler&#42;" name="GetEventHandler" suffix="const"><seealso>

<ref target="wxwindowseteventhandler">wxWindow::SetEventHandler</ref>,
<ref target="wxwindowpusheventhandler">wxWindow::PushEventHandler</ref>,
<ref target="wxwindowpusheventhandler">wxWindow::PopEventHandler</ref>,
<ref target="wxevthandlerprocessevent">wxEvtHandler::ProcessEvent</ref>,
<ref target="wxevthandler">wxEvtHandler</ref>

</seealso><description>

Returns the event handler for this window. By default, the window is its
own event handler.

</description></function></member>
<member class="wxWindow" name="GetExtraStyle"><function type="long" name="GetExtraStyle" suffix="const"><description>

Returns the extra style bits for the window.

</description></function></member>
<member class="wxWindow" name="GetFont"><function type="wxFont&amp;" name="GetFont" suffix="const"><seealso>

<ref target="wxwindowsetfont">wxWindow::SetFont</ref>

</seealso><description>

Returns a reference to the font for this window.

</description></function></member>
<member class="wxWindow" name="GetForegroundColour"><function type="virtual wxColour" name="GetForegroundColour"><seealso>

<ref target="wxwindowsetforegroundcolour">wxWindow::SetForegroundColour</ref>,
<ref target="wxwindowsetbackgroundcolour">wxWindow::SetBackgroundColour</ref>,
<ref target="wxwindowgetbackgroundcolour">wxWindow::GetBackgroundColour</ref>

</seealso><remarks>

The interpretation of foreground colour is open to interpretation according
to the window class; it may be the text colour or other colour, or it may not
be used at all.

</remarks><description>

Returns the foreground colour of the window.

</description></function></member>
<member class="wxWindow" name="GetGrandParent"><function type="wxWindow&#42;" name="GetGrandParent" suffix="const"><description>

Returns the grandparent of a window, or NULL if there isn't one.

</description></function></member>
<member class="wxWindow" name="GetHandle"><function type="void&#42;" name="GetHandle" suffix="const"><description>

Returns the platform-specific handle of the physical window. Cast it to an appropriate
handle, such as <b> HWND</b> for Windows, <b> Widget</b> for Motif or <b> GtkWidget</b> for GTK.

\pythonnote{This method will return an integer in wxPython.}

\perlnote{This method will return an integer in wxPerl.}

</description></function></member>
<member class="wxWindow" name="GetHelpText"><function type="virtual wxString" name="GetHelpText" suffix="const"><seealso>

<ref target="wxwindowsethelptext">SetHelpText</ref><ref target="wxhelpprovider">wxHelpProvider</ref>

</seealso><description></description></function></member>
<member class="wxWindow" name="GetId"><function type="int" name="GetId" suffix="const"><seealso>

<ref target="wxwindowsetid">wxWindow::SetId</ref>,
<ref target="windowids">Window identifiers</ref>

</seealso><remarks>

Each window has an integer identifier. If the application has not provided one
(or the default Id -1) an unique identifier with a negative value will be generated.

</remarks><description>

Returns the identifier of the window.

</description></function></member>
<member class="wxWindow" name="GetLabel"><function type="virtual wxString " name="GetLabel" suffix="const"><remarks>

The interpretation of this function differs from class to class.
For frames and dialogs, the value returned is the title. For buttons or static text controls, it is
the button text. This function can be useful for meta-programs (such as testing
tools or special-needs access programs) which need to identify windows
by name.

</remarks><description>

Generic way of getting a label from any window, for
identification purposes.

</description></function></member>
<member class="wxWindow" name="GetName"><function type="virtual wxString " name="GetName" suffix="const"><seealso>

<ref target="wxwindowsetname">wxWindow::SetName</ref>

</seealso><remarks>

This name is not guaranteed to be unique; it is up to the programmer to supply an appropriate
name in the window constructor or via <ref target="wxwindowsetname">wxWindow::SetName</ref>.

</remarks><description>

Returns the window's name.

</description></function></member>
<member class="wxWindow" name="GetParent"><function type="virtual wxWindow&#42;" name="GetParent" suffix="const"><description>

Returns the parent of the window, or NULL if there is no parent.

</description></function></member>
<member class="wxWindow" name="GetPosition"><function type="virtual void" name="GetPosition" suffix="const"><parameters><parameter type="int&#42; " name="x">Receives the x position of the window.</parameter><parameter type="int&#42; " name="y">Receives the y position of the window.</parameter></parameters><description>

</description></function>
<function type="wxPoint" name="GetPosition" suffix="const"><description>

This gets the position of the window in pixels, relative to the parent window
for the child windows or relative to the display origin for the top level
windows.







\pythonnote{In place of a single overloaded method name, wxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> GetPosition()</b></td><td>Returns a wxPoint</td></tr>
<tr><td><b> GetPositionTuple()</b></td><td>Returns a tuple (x, y)</td></tr>
</table>}
}

\perlnote{In wxPerl there are two methods instead of a single overloaded
method:\par
\indented{2cm}{<table>
<tr><td><b> GetPosition()</b></td><td>Returns a Wx::Point</td></tr>
<tr><td><b> GetPositionXY()</b></td><td>Returns a 2-element list
 <tt> ( x, y )</tt></td></tr>
</table>
}}

</description></function></member>
<member class="wxWindow" name="GetRect"><function type="virtual wxRect" name="GetRect" suffix="const"><description>

Returns the size and position of the window as a <ref target="wxrect">wxRect</ref> object.

</description></function></member>
<member class="wxWindow" name="GetScrollThumb"><function type="virtual int" name="GetScrollThumb"><parameters><parameter type="int " name="orientation"></parameter></parameters><seealso>

<ref target="wxwindowsetscrollbar">wxWindow::SetScrollbar</ref>

</seealso><description>

Returns the built-in scrollbar thumb size.

</description></function></member>
<member class="wxWindow" name="GetScrollPos"><function type="virtual int" name="GetScrollPos"><parameters><parameter type="int " name="orientation"></parameter></parameters><seealso>

See <ref target="wxwindowsetscrollbar">wxWindow::SetScrollbar</ref>

</seealso><description>

Returns the built-in scrollbar position.

</description></function></member>
<member class="wxWindow" name="GetScrollRange"><function type="virtual int" name="GetScrollRange"><parameters><parameter type="int " name="orientation"></parameter></parameters><seealso>

<ref target="wxwindowsetscrollbar">wxWindow::SetScrollbar</ref>

</seealso><description>

Returns the built-in scrollbar range.

</description></function></member>
<member class="wxWindow" name="GetSize"><function type="virtual void" name="GetSize" suffix="const"><parameters><parameter type="int&#42; " name="width">Receives the window width.</parameter><parameter type="int&#42; " name="height">Receives the window height.</parameter></parameters><description>

</description></function>
<function type="virtual wxSize" name="GetSize" suffix="const"><seealso>

<ref target="wxwindowgetclientsize">GetClientSize</ref>,
<ref target="wxwindowgetvirtualsize">GetVirtualSize</ref>

</seealso><description>

This gets the size of the entire window in pixels,
including title bar, border, scrollbars, etc.







\pythonnote{In place of a single overloaded method name, wxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> GetSize()</b></td><td>Returns a wxSize</td></tr>
<tr><td><b> GetSizeTuple()</b></td><td>Returns a 2-tuple (width, height)</td></tr>
</table>}
}

\perlnote{In wxPerl there are two methods instead of a single overloaded
method:\par
\indented{2cm}{<table>
<tr><td><b> GetSize()</b></td><td>Returns a Wx::Size</td></tr>
<tr><td><b> GetSizeWH()</b></td><td>Returns a 2-element list
 <tt> ( width, height )</tt></td></tr>
</table>
}}

</description></function></member>
<member class="wxWindow" name="GetSizer"><function type="wxSizer &#42;" name="GetSizer" suffix="const"><description>

Return the sizer associated with the window by a previous call to
<ref target="wxwindowsetsizer">SetSizer()</ref> or <tt> NULL</tt>.

</description></function></member>
<member class="wxWindow" name="GetTextExtent"><function type="virtual void" name="GetTextExtent" suffix="const"><parameters><parameter type="const wxString&amp; " name="string">String whose extent is to be measured.</parameter><parameter type="int&#42; " name="x">Return value for width.</parameter><parameter type="int&#42; " name="y">Return value for height.</parameter><parameter type="int&#42; " name="descent" value="NULL">Return value for descent (optional).</parameter><parameter type="int&#42; " name="externalLeading" value="NULL">Return value for external leading (optional).</parameter><parameter type="const wxFont&#42; " name="font" value="NULL">Font to use instead of the current window font (optional).</parameter><parameter type="bool" name="use16" value="false">If <tt> true</tt>, <i> string</i> contains 16-bit characters. The default is <tt> false</tt>.</parameter></parameters><description>

Gets the dimensions of the string as it would be drawn on the
window with the currently selected font.


















\pythonnote{In place of a single overloaded method name, wxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> GetTextExtent(string)</b></td><td>Returns a 2-tuple,  (width, height)</td></tr>
<tr><td><b> GetFullTextExtent(string, font=NULL)</b></td><td>Returns a
4-tuple, (width, height, descent, externalLeading) </td></tr>
</table>}
}

\perlnote{In wxPerl this method takes only the <tt> string</tt> and optionally
 <tt> font</tt> parameters, and returns a 4-element list
 <tt> ( x, y, descent, externalLeading )</tt>.}

</description></function></member>
<member class="wxWindow" name="GetTitle"><function type="virtual wxString" name="GetTitle"><seealso>

<ref target="wxwindowsettitle">wxWindow::SetTitle</ref>

</seealso><description>

Gets the window's title. Applicable only to frames and dialogs.

</description></function></member>
<member class="wxWindow" name="GetToolTip"><function type="wxToolTip&#42;" name="GetToolTip" suffix="const"><description>

Get the associated tooltip or NULL if none.

</description></function></member>
<member class="wxWindow" name="GetUpdateRegion"><function type="virtual wxRegion" name="GetUpdateRegion" suffix="const"><seealso>

<ref target="wxregion">wxRegion</ref>,
<ref target="wxregioniterator">wxRegionIterator</ref>

</seealso><description>

Returns the region specifying which parts of the window have been damaged. Should
only be called within an <ref target="wxpaintevent">wxPaintEvent</ref> handler.

</description></function></member>
<member class="wxWindow" name="GetValidator"><function type="wxValidator&#42;" name="GetValidator" suffix="const"><description>

Returns a pointer to the current validator for the window, or NULL if there is none.

</description></function></member>
<member class="wxWindow" name="GetVirtualSize"><function type="void" name="GetVirtualSize" suffix="const"><parameters><parameter type="int&#42; " name="width">Receives the window virtual width.</parameter><parameter type="int&#42; " name="height">Receives the window virtual height.</parameter></parameters><description>

</description></function>
<function type="wxSize" name="GetVirtualSize" suffix="const"><description>

This gets the virtual size of the window in pixels.







<ref target="wxwindowgetsize">GetSize</ref>,
<ref target="wxwindowgetclientsize">GetClientSize</ref>

</description></function></member>
<member class="wxWindow" name="GetWindowStyleFlag"><function type="long" name="GetWindowStyleFlag" suffix="const"><description>

Gets the window style that was passed to the constructor or <b> Create</b>
method. <b> GetWindowStyle()</b> is another name for the same function.

</description></function></member>
<member class="wxWindow" name="HasCapture"><function type="virtual bool" name="HasCapture" suffix="const"><seealso>

<ref target="wxwindowcapturemouse">wxWindow::CaptureMouse</ref>
<ref target="wxwindowreleasemouse">wxWindow::ReleaseMouse</ref>
<ref target="wxmousecapturechangedevent">wxMouseCaptureChangedEvent</ref>

</seealso><description></description></function></member>
<member class="wxWindow" name="Hide"><function type="bool" name="Hide"><description>

Equivalent to calling <ref target="wxwindowshow">Show</ref>(<tt> false</tt>).

</description></function></member>
<member class="wxWindow" name="InitDialog"><function type="void" name="InitDialog"><description>

Sends an <tt> wxEVT_INIT_DIALOG</tt> event, whose handler usually transfers data
to the dialog via validators.

</description></function></member>
<member class="wxWindow" name="IsEnabled"><function type="virtual bool" name="IsEnabled" suffix="const"><seealso>

<ref target="wxwindowenable">wxWindow::Enable</ref>

</seealso><description>

Returns <tt> true</tt> if the window is enabled for input, <tt> false</tt> otherwise.

</description></function></member>
<member class="wxWindow" name=""></member>
<member class="wxWindow" name="IsRetained"><function type="virtual bool" name="IsRetained" suffix="const"><remarks>

Retained windows are only available on X platforms.

</remarks><description>

Returns <tt> true</tt> if the window is retained, <tt> false</tt> otherwise.

</description></function></member>
<member class="wxWindow" name="IsShown"><function type="virtual bool" name="IsShown" suffix="const"><description>

Returns <tt> true</tt> if the window is shown, <tt> false</tt> if it has been hidden.

</description></function></member>
<member class="wxWindow" name="IsTopLevel"><function type="bool" name="IsTopLevel" suffix="const"><description>

Returns <tt> true</tt> if the given window is a top-level one. Currently all frames and
dialogs are considered to be top-level windows (even if they have a parent
window).

</description></function></member>
<member class="wxWindow" name="Layout"><function type="void" name="Layout"><description>

Invokes the constraint-based layout algorithm or the sizer-based algorithm
for this window.

See <ref target="wxwindowsetautolayout">wxWindow::SetAutoLayout</ref>: when auto
layout is on, this function gets called automatically when the window is resized.

</description></function></member>
<member class="wxWindow" name="LineDown"></member>
<member class="wxWindow" name="LineUp"></member>
<member class="wxWindow" name="Lower"><function type="void" name="Lower"><description>

Lowers the window to the bottom of the window hierarchy if it is a managed window (dialog
or frame).

</description></function></member>
<member class="wxWindow" name="MakeModal"><function type="virtual void" name="MakeModal"><parameters><parameter type="bool " name="flag">If <tt> true</tt>, this call disables all other windows in the application so that
the user can only interact with this window. If <tt> false</tt>, the effect is reversed.</parameter></parameters><description>

Disables all other windows in the application so that
the user can only interact with this window. (This function
is not implemented anywhere).





</description></function></member>
<member class="wxWindow" name="Move"><function type="void" name="Move"><parameters><parameter type="int" name=" x"></parameter><parameter type="int" name=" y"></parameter></parameters><description>

</description></function>
<function type="void" name="Move"><parameters><parameter type="const wxPoint&amp;" name=" pt"></parameter></parameters><seealso>

<ref target="wxwindowsetsize">wxWindow::SetSize</ref>

\pythonnote{In place of a single overloaded method namewxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> Move(point)</b></td><td>Accepts a wxPoint</td></tr>
<tr><td><b> MoveXY(xy)</b></td><td>Accepts a pair of integers</td></tr>
</table>}
}


</seealso><description></description></function></member>
<member class="wxWindow" name="PageDown"></member>
<member class="wxWindow" name="PageUp"></member>
<member class="wxWindow" name="PopEventHandler"><function type="wxEvtHandler&#42;" name="PopEventHandler" suffix="const"><parameters><parameter type="bool " name="deleteHandler" value="false">If this is <tt> true</tt>, the handler will be deleted after it is removed. The
default value is <tt> false</tt>.</parameter></parameters><seealso>

<ref target="wxwindowseteventhandler">wxWindow::SetEventHandler</ref>,
<ref target="wxwindowgeteventhandler">wxWindow::GetEventHandler</ref>,
<ref target="wxwindowpusheventhandler">wxWindow::PushEventHandler</ref>,
<ref target="wxevthandlerprocessevent">wxEvtHandler::ProcessEvent</ref>,
<ref target="wxevthandler">wxEvtHandler</ref>

</seealso><description>

Removes and returns the top-most event handler on the event handler stack.





</description></function></member>
<member class="wxWindow" name="PopupMenu"><function type="bool" name="PopupMenu"><parameters><parameter type="wxMenu&#42; " name="menu">Menu to pop up.</parameter><parameter type="const wxPoint&amp; " name="pos">The position where the menu will appear.</parameter></parameters><description>

</description></function>
<function type="bool" name="PopupMenu"><parameters><parameter type="wxMenu&#42; " name="menu">Menu to pop up.</parameter><parameter type="int " name="x">Required x position for the menu to appear.</parameter><parameter type="int " name="y">Required y position for the menu to appear.</parameter></parameters><seealso>

<ref target="wxmenu">wxMenu</ref>

\wxheading{Remarks}

Just before the menu is popped up<ref target="wxmenuupdateui">wxMenu::UpdateUI</ref> is called
to ensure that the menu items are in the correct state. The menu does not get deleted
by the window.

\pythonnote{In place of a single overloaded method namewxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> PopupMenu(menupoint)</b></td><td>Specifies position with a wxPoint</td></tr>
<tr><td><b> PopupMenuXY(menuxy)</b></td><td>Specifies position with two integers (xy)</td></tr>
</table>}
}

</seealso><description></description></function></member>
<member class="wxWindow" name="PushEventHandler"><function type="void" name="PushEventHandler"><parameters><parameter type="wxEvtHandler&#42; " name="handler">Specifies the handler to be pushed.</parameter></parameters><seealso>

<ref target="wxwindowseteventhandler">wxWindow::SetEventHandler</ref>,
<ref target="wxwindowgeteventhandler">wxWindow::GetEventHandler</ref>,
<ref target="wxwindowpusheventhandler">wxWindow::PopEventHandler</ref>,
<ref target="wxevthandlerprocessevent">wxEvtHandler::ProcessEvent</ref>,
<ref target="wxevthandler">wxEvtHandler</ref>

</seealso><remarks>

An event handler is an object that is capable of processing the events
sent to a window. By default, the window is its own event handler, but
an application may wish to substitute another, for example to allow
central implementation of event-handling for a variety of different
window classes.

<ref target="wxwindowpusheventhandler">wxWindow::PushEventHandler</ref> allows
an application to set up a chain of event handlers, where an event not handled by one event handler is
handed to the next one in the chain. Use <ref target="wxwindowpopeventhandler">wxWindow::PopEventHandler</ref> to
remove the event handler.

</remarks><description>

Pushes this event handler onto the event stack for the window.





</description></function></member>
<member class="wxWindow" name="Raise"><function type="void" name="Raise"><description>

Raises the window to the top of the window hierarchy if it is a managed window (dialog
or frame).

</description></function></member>
<member class="wxWindow" name="Refresh"><function type="virtual void" name="Refresh"><parameters><parameter type="bool" name="eraseBackground" value="true">If <tt> true</tt>, the background will be
erased.</parameter><parameter type="const wxRect&#42; " name="rect" value="NULL">If non-NULL, only the given rectangle will
be treated as damaged.</parameter></parameters><seealso>

<ref target="wxwindowrefreshrect">wxWindow::RefreshRect</ref>

</seealso><description>

Causes a message or event to be generated to repaint the
window.







</description></function></member>
<member class="wxWindow" name="RefreshRect"><function type="virtual void" name="Refresh"><parameters><parameter type="const wxRect&amp; " name="rect"></parameter></parameters><description>

Redraws the contents of the given rectangle: the area inside it will be
repainted.

This is the same as <ref target="wxwindowrefresh">Refresh</ref> but has a nicer syntax.

</description></function></member>
<member class="wxWindow" name="ReleaseMouse"><function type="virtual void" name="ReleaseMouse"><seealso>

<ref target="wxwindowcapturemouse">wxWindow::CaptureMouse</ref>
<ref target="wxwindowhascapture">wxWindow::HasCapture</ref>
<ref target="wxwindowreleasemouse">wxWindow::ReleaseMouse</ref>
<ref target="wxmousecapturechangedevent">wxMouseCaptureChangedEvent</ref>

</seealso><description></description></function></member>
<member class="wxWindow" name="RemoveChild"><function type="virtual void" name="RemoveChild"><parameters><parameter type="wxWindow&#42; " name="child">Child window to remove.</parameter></parameters><description>

Removes a child window.  This is called automatically by window deletion
functions so should not be required by the application programmer.





</description></function></member>
<member class="wxWindow" name="RemoveEventHandler"><function type="bool" name="RemoveEventHandler"><parameters><parameter type="wxEvtHandler &#42;" name="handler">The event handler to remove, must be non <tt> NULL</tt> and
must be present in this windows event handlers chain</parameter></parameters><seealso>

<ref target="wxwindowpusheventhandler">PushEventHandler</ref>,
<ref target="wxwindowpopeventhandler">PopEventHandler</ref>

</seealso><returnvalue>

Returns <tt> true</tt> if it was found and <tt> false</tt> otherwise (this also results
in an assert failure so this function should only be called when the
handler is supposed to be there).

</returnvalue><description>

Find the given <i> handler</i> in the windows event handler chain and remove (but
not delete) it from it.





</description></function></member>
<member class="wxWindow" name="Reparent"><function type="virtual bool" name="Reparent"><parameters><parameter type="wxWindow&#42; " name="newParent">New parent.</parameter></parameters><description>

Reparents the window, i.e the window will be removed from its
current parent window (e.g. a non-standard toolbar in a wxFrame)
and then re-inserted into another. Available on Windows and GTK.





</description></function></member>
<member class="wxWindow" name="ScreenToClient"><function type="virtual void" name="ScreenToClient" suffix="const"><parameters><parameter type="int&#42; " name="x">Stores the screen x coordinate and receives the client x coordinate.</parameter><parameter type="int&#42; " name="y">Stores the screen x coordinate and receives the client x coordinate.</parameter></parameters><description>

</description></function>
<function type="virtual wxPoint" name="ScreenToClient" suffix="const"><parameters><parameter type="const wxPoint&amp; " name="pt">The screen position for the second form of the function.</parameter></parameters><description>

Converts from screen to client window coordinates.









\pythonnote{In place of a single overloaded method name, wxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> ScreenToClient(point)</b></td><td>Accepts and returns a wxPoint</td></tr>
<tr><td><b> ScreenToClientXY(x, y)</b></td><td>Returns a 2-tuple, (x, y)</td></tr>
</table>}
}

</description></function></member>
<member class="wxWindow" name="ScrollLines"><function type="virtual bool" name="ScrollLines"><parameters><parameter type="int " name="lines"></parameter></parameters><seealso>

<ref target="wxwindowscrollpages">ScrollPages</ref>

</seealso><remarks>

This function is currently only implemented under MSW and wxTextCtrl under
wxGTK (it also works for wxScrolledWindow derived classes under all
platforms).

</remarks><returnvalue>

Returns <tt> true</tt> if the window was scrolled, <tt> false</tt> if it was already
on top/bottom and nothing was done.

</returnvalue><description>

Scrolls the window by the given number of lines down (if <i> lines</i> is
positive) or up.

</description></function></member>
<member class="wxWindow" name="ScrollPages"><function type="virtual bool" name="ScrollPages"><parameters><parameter type="int " name="pages"></parameter></parameters><seealso>

<ref target="wxwindowscrolllines">ScrollLines</ref>

</seealso><remarks>

This function is currently only implemented under MSW and wxTextCtrl under
wxGTK (it also works for wxScrolledWindow derived classes under all
platforms).

</remarks><returnvalue>

Returns <tt> true</tt> if the window was scrolled, <tt> false</tt> if it was already
on top/bottom and nothing was done.

</returnvalue><description>

Scrolls the window by the given number of pages down (if <i> pages</i> is
positive) or up.

</description></function></member>
<member class="wxWindow" name="ScrollWindow"><function type="virtual void" name="ScrollWindow"><parameters><parameter type="int " name="dx">Amount to scroll horizontally.</parameter><parameter type="int " name="dy">Amount to scroll vertically.</parameter><parameter type="const wxRect&#42;" name="rect" value="NULL">Rectangle to invalidate. If this is NULL, the whole window is invalidated. If you
pass a rectangle corresponding to the area of the window exposed by the scroll, your painting handler
can optimize painting by checking for the invalidated region. This parameter is ignored under GTK.</parameter></parameters><remarks>

Use this function to optimise your scrolling implementations, to minimise the area that must be
redrawn. Note that it is rarely required to call this function from a user program.

</remarks><description>

Physically scrolls the pixels in the window and move child windows accordingly.









</description></function></member>
<member class="wxWindow" name="SetAcceleratorTable"><function type="virtual void" name="SetAcceleratorTable"><parameters><parameter type="const wxAcceleratorTable&amp;" name=" accel"></parameter></parameters><description>

Sets the accelerator table for this window. See <ref target="wxacceleratortable">wxAcceleratorTable</ref>.

</description></function></member>
<member class="wxWindow" name="SetAccessible"><function type="void" name="SetAccessible"><parameters><parameter type="wxAccessibile&#42;" name=" accessible"></parameter></parameters><description>

Sets the accessible for this window. Any existing accessible for this window
will be deleted first, if not identical to <i> accessible</i>.

See also <ref target="wxaccessible">wxAccessible</ref>.

</description></function></member>
<member class="wxWindow" name="SetAutoLayout"><function type="void" name="SetAutoLayout"><parameters><parameter type="bool" name=" autoLayout"></parameter></parameters><seealso>

<ref target="wxwindowsetconstraints">wxWindow::SetConstraints</ref>

</seealso><description>

Determines whether the <ref target="wxwindowlayout">wxWindow::Layout</ref> function will
be called automatically when the window is resized. It is called implicitly by 
<ref target="wxwindowsetsizer">wxWindow::SetSizer</ref> but if you use 
<ref target="wxwindowsetconstraints">wxWindow::SetConstraints</ref> you should call it
manually or otherwise the window layout won't be correctly updated when its
size changes.





</description></function></member>
<member class="wxWindow" name="SetBackgroundColour"><function type="virtual void" name="SetBackgroundColour"><parameters><parameter type="const wxColour&amp; " name="colour">The colour to be used as the background colour.</parameter></parameters><seealso>

<ref target="wxwindowgetbackgroundcolour">wxWindow::GetBackgroundColour</ref>,
<ref target="wxwindowsetforegroundcolour">wxWindow::SetForegroundColour</ref>,
<ref target="wxwindowgetforegroundcolour">wxWindow::GetForegroundColour</ref>,
<ref target="wxwindowclear">wxWindow::Clear</ref>,
<ref target="wxwindowrefresh">wxWindow::Refresh</ref>,
<ref target="wxeraseevent">wxEraseEvent</ref>

</seealso><remarks>

The background colour is usually painted by the default
<ref target="wxeraseevent">wxEraseEvent</ref> event handler function
under Windows and automatically under GTK.

Note that setting the background colour does not cause an immediate refresh, so you
may wish to call <ref target="wxwindowclear">wxWindow::Clear</ref> or <ref target="wxwindowrefresh">wxWindow::Refresh</ref> after
calling this function.

Use this function with care under GTK as the new appearance of the window might
not look equally well when used with &quot;Themes&quot;, i.e GTK's ability to change its
look as the user wishes with run-time loadable modules.

</remarks><description>

Sets the background colour of the window.





</description></function></member>
<member class="wxWindow" name="SetCaret"><function type="void" name="SetCaret" suffix="const"><parameters><parameter type="wxCaret &#42;" name="caret"></parameter></parameters><description>

Sets the <ref target="wxcaret">caret</ref> associated with the window.

</description></function></member>
<member class="wxWindow" name="SetClientSize"><function type="virtual void" name="SetClientSize"><parameters><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter></parameters><description>

</description></function>
<function type="virtual void" name="SetClientSize"><parameters><parameter type="const wxSize&amp;" name=" size"></parameter></parameters><description>

This sets the size of the window client area in pixels. Using this function to size a window
tends to be more device-independent than <ref target="wxwindowsetsize">wxWindow::SetSize</ref>, since the application need not
worry about what dimensions the border or title bar have when trying to fit the window
around panel items, for example.









\pythonnote{In place of a single overloaded method name, wxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> SetClientSize(size)</b></td><td>Accepts a wxSize</td></tr>
<tr><td><b> SetClientSizeWH(width, height)</b></td><td></td></tr>
</table>}
}

</description></function></member>
<member class="wxWindow" name="SetContainingSizer"><function type="void" name="SetContainingSizer"><parameters><parameter type="wxSizer&#42; " name="sizer"></parameter></parameters><description>

This normally does not need to be called by user code.  It is called
when a window is added to a sizer, and is used so the window can
remove itself from the sizer when it is destroyed.

</description></function></member>
<member class="wxWindow" name="SetCursor"><function type="virtual void" name="SetCursor"><parameters><parameter type="const wxCursor&amp;" name="cursor">Specifies the cursor that the window should normally display.</parameter></parameters><seealso>

<ref target="wxsetcursor">::wxSetCursor</ref><ref target="wxcursor">wxCursor</ref>

</seealso><description></description></function></member>
<member class="wxWindow" name="SetConstraints"><function type="void" name="SetConstraints"><parameters><parameter type="wxLayoutConstraints&#42; " name="constraints">The constraints to set. Pass NULL to disassociate and delete the window's
constraints.</parameter></parameters><remarks>

You must call <ref target="wxwindowsetautolayout">wxWindow::SetAutoLayout</ref> to tell a window to use
the constraints automatically in OnSize; otherwise, you must override OnSize and call Layout()
explicitly. When setting both a wxLayoutConstraints and a <ref target="wxsizer">wxSizer</ref>, only the
sizer will have effect.

</remarks><description>

Sets the window to have the given layout constraints. The window
will then own the object, and will take care of its deletion.
If an existing layout constraints object is already owned by the
window, it will be deleted.





</description></function></member>
<member class="wxWindow" name="SetDropTarget"><function type="void" name="SetDropTarget"><parameters><parameter type="wxDropTarget&#42;" name=" target"></parameter></parameters><seealso>

<ref target="wxwindowgetdroptarget">wxWindow::GetDropTarget</ref>,
<ref target="wxdndoverview">Drag and drop overview</ref>

</seealso><description>

Associates a drop target with this window.

If the window already has a drop target, it is deleted.

</description></function></member>
<member class="wxWindow" name="SetEventHandler"><function type="void" name="SetEventHandler"><parameters><parameter type="wxEvtHandler&#42; " name="handler">Specifies the handler to be set.</parameter></parameters><seealso>

<ref target="wxwindowgeteventhandler">wxWindow::GetEventHandler</ref>,
<ref target="wxwindowpusheventhandler">wxWindow::PushEventHandler</ref>,
<ref target="wxwindowpusheventhandler">wxWindow::PopEventHandler</ref>,
<ref target="wxevthandlerprocessevent">wxEvtHandler::ProcessEvent</ref>,
<ref target="wxevthandler">wxEvtHandler</ref>

</seealso><remarks>

An event handler is an object that is capable of processing the events
sent to a window. By default, the window is its own event handler, but
an application may wish to substitute another, for example to allow
central implementation of event-handling for a variety of different
window classes.

It is usually better to use <ref target="wxwindowpusheventhandler">wxWindow::PushEventHandler</ref> since
this sets up a chain of event handlers, where an event not handled by one event handler is
handed to the next one in the chain.

</remarks><description>

Sets the event handler for this window.





</description></function></member>
<member class="wxWindow" name="SetExtraStyle"><function type="void" name="SetExtraStyle"><parameters><parameter type="long " name="exStyle"></parameter></parameters><description>

Sets the extra style bits for the window. The currently defined extra style
bits are:

\twocolwidtha{5cm}<table>
<tr><td>\windowstyle{wxWS_EX_VALIDATE_RECURSIVELY}</td><td>TransferDataTo/FromWindow()
and Validate() methods will recursively descend into all children of the
window if it has this style flag set.</td></tr>
<tr><td>\windowstyle{wxWS_EX_BLOCK_EVENTS}</td><td>Normally, the command
events are propagated upwards to the window parent recursively until a handler
for them is found. Using this style allows to prevent them from being
propagated beyond this window. Notice that wxDialog has this style on by
default for the reasons explained in the
<ref target="eventprocessing">event processing overview</ref>.</td></tr>
<tr><td>\windowstyle{wxWS_EX_TRANSIENT}</td><td>This can be used to prevent a
window from being used as an implicit parent for the dialogs which were
created without a parent. It is useful for the windows which can disappear at
any moment as creating children of such windows results in fatal problems.</td></tr>
<tr><td>\windowstyle{wxFRAME_EX_CONTEXTHELP}</td><td>Under Windows, puts a query button on the
caption. When pressed, Windows will go into a context-sensitive help mode and wxWindows will send
a wxEVT_HELP event if the user clicked on an application window.
This style cannot be used together with wxMAXIMIZE_BOX or wxMINIMIZE_BOX, so
you should use the style of
<tt> wxDEFAULT_FRAME_STYLE &amp; \textasciitilde(wxMINIMIZE_BOX | wxMAXIMIZE_BOX)</tt> for the
frames having this style (the dialogs don't have minimize nor maximize box by
default)</td></tr>
</table>

</description></function></member>
<member class="wxWindow" name="SetFocus"><function type="virtual void" name="SetFocus"><seealso>

<ref target="wxfocusevent">wxFocusEvent</ref>

</seealso><description>

This sets the window to receive keyboard input.

</description></function></member>
<member class="wxWindow" name="SetFocusFromKbd"><function type="virtual void" name="SetFocusFromKbd"><description>

This function is called by wxWindows keyboard navigation code when the user
gives the focus to this window from keyboard (e.g. using <tt> TAB</tt> key).
By default this method simply calls <ref target="wxwindowsetfocus">SetFocus</ref> but
can be overridden to do something in addition to this in the derived classes.

</description></function></member>
<member class="wxWindow" name="SetFont"><function type="void" name="SetFont"><parameters><parameter type="const wxFont&amp; " name="font">Font to associate with this window.</parameter></parameters><seealso>

<ref target="wxwindowgetfont">wxWindow::GetFont</ref>

</seealso><description>

Sets the font for this window.





</description></function></member>
<member class="wxWindow" name="SetForegroundColour"><function type="virtual void" name="SetForegroundColour"><parameters><parameter type="const wxColour&amp; " name="colour">The colour to be used as the foreground colour.</parameter></parameters><seealso>

<ref target="wxwindowgetforegroundcolour">wxWindow::GetForegroundColour</ref>,
<ref target="wxwindowsetbackgroundcolour">wxWindow::SetBackgroundColour</ref>,
<ref target="wxwindowgetbackgroundcolour">wxWindow::GetBackgroundColour</ref>

</seealso><remarks>

The interpretation of foreground colour is open to interpretation according
to the window class; it may be the text colour or other colour, or it may not
be used at all.

Note that when using this functions under GTK, you will disable the so called &quot;themes&quot;,
i.e. the user chosen appearance of windows and controls, including the themes of
their parent windows.

</remarks><description>

Sets the foreground colour of the window.





</description></function></member>
<member class="wxWindow" name="SetHelpText"><function type="virtual void" name="SetHelpText"><parameters><parameter type="const wxString&amp; " name="helpText"></parameter></parameters><seealso>

<ref target="wxwindowgethelptext">GetHelpText</ref><ref target="wxhelpprovider">wxHelpProvider</ref>

</seealso><description></description></function></member>
<member class="wxWindow" name="SetId"><function type="void" name="SetId"><parameters><parameter type="int" name=" id"></parameter></parameters><seealso>

<ref target="wxwindowgetid">wxWindow::GetId</ref>,
<ref target="windowids">Window identifiers</ref>

</seealso><remarks>

Each window has an integer identifier. If the application has not provided one,
an identifier will be generated. Normally, the identifier should be provided
on creation and should not be modified subsequently.

</remarks><description>

Sets the identifier of the window.

</description></function></member>
<member class="wxWindow" name="SetName"><function type="virtual void" name="SetName"><parameters><parameter type="const wxString&amp; " name="name">A name to set for the window.</parameter></parameters><seealso>

<ref target="wxwindowgetname">wxWindow::GetName</ref>

</seealso><description>

Sets the window's name.





</description></function></member>
<member class="wxWindow" name="SetPalette"><function type="virtual void" name="SetPalette"><parameters><parameter type="wxPalette&#42; " name="palette"></parameter></parameters><description>

Obsolete - use <ref target="wxdcsetpalette">wxDC::SetPalette</ref> instead.

</description></function></member>
<member class="wxWindow" name="SetScrollbar"><function type="virtual void" name="SetScrollbar"><parameters><parameter type="int " name="orientation">Determines the scrollbar whose page size is to be set. May be wxHORIZONTAL or wxVERTICAL.</parameter><parameter type="int " name="position">The position of the scrollbar in scroll units.</parameter><parameter type="int " name="thumbSize">The size of the thumb, or visible portion of the scrollbar, in scroll units.</parameter><parameter type="int " name="range">The maximum position of the scrollbar.</parameter><parameter type="bool " name="refresh" value="true"><tt> true</tt> to redraw the scrollbar, <tt> false</tt> otherwise.</parameter></parameters><seealso>

<ref target="scrollingoverview">Scrolling overview</ref>,
<ref target="wxscrollbar">wxScrollBar</ref><ref target="wxscrolledwindow">wxScrolledWindow</ref>

\begin{comment}
</seealso><description></description></function></member>
<member class="wxWindow" name="SetScrollPage"><function type="virtual void" name="SetScrollPage"><parameters><parameter type="int " name="orientation">Determines the scrollbar whose page size is to be set. May be wxHORIZONTAL or wxVERTICAL.</parameter><parameter type="int " name="pageSize">Page size in scroll units.</parameter><parameter type="bool " name="refresh" value="true"><tt> true</tt> to redraw the scrollbar, <tt> false</tt> otherwise.</parameter></parameters><seealso>

<ref target="wxwindowsetscrollpos">wxWindow::SetScrollPos</ref>,
<ref target="wxwindowsetscrollpos">wxWindow::GetScrollPos</ref>,
<ref target="wxwindowsetscrollpage">wxWindow::GetScrollPage</ref>,
<ref target="wxscrollbar">wxScrollBar</ref><ref target="wxscrolledwindow">wxScrolledWindow</ref>
\end{comment}

</seealso><description></description></function></member>
<member class="wxWindow" name="SetScrollPos"><function type="virtual void" name="SetScrollPos"><parameters><parameter type="int " name="orientation">Determines the scrollbar whose position is to be set. May be wxHORIZONTAL or wxVERTICAL.</parameter><parameter type="int " name="pos">Position in scroll units.</parameter><parameter type="bool " name="refresh" value="true"><tt> true</tt> to redraw the scrollbar, <tt> false</tt> otherwise.</parameter></parameters><seealso>

<ref target="wxwindowsetscrollbar">wxWindow::SetScrollbar</ref>,
<ref target="wxwindowsetscrollpos">wxWindow::GetScrollPos</ref>,
<ref target="wxwindowgetscrollthumb">wxWindow::GetScrollThumb</ref>,
<ref target="wxscrollbar">wxScrollBar</ref><ref target="wxscrolledwindow">wxScrolledWindow</ref>

\begin{comment}
</seealso><description></description></function></member>
<member class="wxWindow" name="SetScrollRange"><function type="virtual void" name="SetScrollRange"><parameters><parameter type="int " name="orientation">Determines the scrollbar whose range is to be set. May be wxHORIZONTAL or wxVERTICAL.</parameter><parameter type="int " name="range">Scroll range.</parameter><parameter type="bool " name="refresh" value="true"><tt> true</tt> to redraw the scrollbar, <tt> false</tt> otherwise.</parameter></parameters><seealso>

<ref target="wxwindowsetscrollpos">wxWindow::SetScrollPos</ref>,
<ref target="wxwindowsetscrollpage">wxWindow::SetScrollPage</ref>,
<ref target="wxwindowsetscrollpos">wxWindow::GetScrollPos</ref>,
<ref target="wxwindowsetscrollpage">wxWindow::GetScrollPage</ref>,
<ref target="wxscrollbar">wxScrollBar</ref><ref target="wxscrolledwindow">wxScrolledWindow</ref>
\end{comment}

</seealso><description></description></function></member>
<member class="wxWindow" name="SetSize"><function type="virtual void" name="SetSize"><parameters><parameter type="int" name=" x"></parameter><parameter type="int" name=" y"></parameter><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter><parameter type="int" name="sizeFlags" value="wxSIZE_AUTO">Indicates the interpretation of other parameters. It is a bit list of the following:

<b> wxSIZE_AUTO_WIDTH</b>: a -1 width value is taken to indicate
a wxWindows-supplied default width.<br/>
<b> wxSIZE_AUTO_HEIGHT</b>: a -1 height value is taken to indicate
a wxWindows-supplied default width.<br/>
<b> wxSIZE_AUTO</b>: -1 size values are taken to indicate
a wxWindows-supplied default size.<br/>
<b> wxSIZE_USE_EXISTING</b>: existing dimensions should be used
if -1 values are supplied.<br/>
<b> wxSIZE_ALLOW_MINUS_ONE</b>: allow dimensions of -1 and less to be interpreted
as real dimensions, not default values.
</parameter></parameters><description>

</description></function>
<function type="virtual void" name="SetSize"><parameters><parameter type="const wxRect&amp;" name=" rect"></parameter></parameters><description>

Sets the size and position of the window in pixels.

</description></function>
<function type="virtual void" name="SetSize"><parameters><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter></parameters><description>

</description></function>
<function type="virtual void" name="SetSize"><parameters><parameter type="const wxSize&amp;" name=" size"></parameter></parameters><seealso>

<ref target="wxwindowmove">wxWindow::Move</ref>

\pythonnote{In place of a single overloaded method namewxPython
implements the following methods:\par
\indented{2cm}{<table>
<tr><td><b> SetDimensions(xywidthheightsizeFlags=wxSIZE_AUTO)</b></td><td></td></tr>
<tr><td><b> SetSize(size)</b></td><td></td></tr>
<tr><td><b> SetPosition(point)</b></td><td></td></tr>
</table>}
}

</seealso><description></description></function></member>
<member class="wxWindow" name="SetSizeHints"><function type="virtual void" name="SetSizeHints"><parameters><parameter type="int" name="minW" value="-1">Specifies the minimum width allowable.</parameter><parameter type="int" name="minH" value="-1">Specifies the minimum height allowable.</parameter><parameter type="int" name="maxW" value="-1">Specifies the maximum width allowable.</parameter><parameter type="int" name="maxH" value="-1">Specifies the maximum height allowable.</parameter><parameter type="int" name="incW" value="-1">Specifies the increment for sizing the width (Motif/Xt only).</parameter><parameter type="int" name="incH" value="-1">Specifies the increment for sizing the height (Motif/Xt only).</parameter></parameters><remarks>

If this function is called, the user will not be able to size the window outside the
given bounds.

The resizing increments are only significant under Motif or Xt.

</remarks><description>

Allows specification of minimum and maximum window sizes, and window size increments.
If a pair of values is not set (or set to -1), the default values will be used.















</description></function></member>
<member class="wxWindow" name="SetSizer"><function type="void" name="SetSizer"><parameters><parameter type="wxSizer&#42; " name="sizer">The sizer to set. Pass NULL to disassociate and conditionally delete
the window's sizer.  See below.</parameter><parameter type="bool " name="deleteOld" value="true">If true (the default), this will delete any prexisting sizer.
Pass false if you wish to handle deleting the old sizer yourself.</parameter></parameters><remarks>

SetSizer now enables and disables Layout automatically, but prior to wxWindows 2.3.3
the following applied:

You must call <ref target="wxwindowsetautolayout">wxWindow::SetAutoLayout</ref> to tell a window to use
the sizer automatically in OnSize; otherwise, you must override OnSize and call Layout()
explicitly. When setting both a wxSizer and a <ref target="wxlayoutconstraints">wxLayoutConstraints</ref>,
only the sizer will have effect.

</remarks><description>

Sets the window to have the given layout sizer. The window
will then own the object, and will take care of its deletion.
If an existing layout constraints object is already owned by the
window, it will be deleted if the deleteOld parameter is true.

Note that this function will also call 
<ref target="wxwindowsetautolayout">SetAutoLayout</ref> implicitly with <tt> true</tt>
parameter if the <i> sizer</i>\/ is non-NULL and <tt> false</tt> otherwise.







</description></function></member>
<member class="wxWindow" name="SetSizerAndFit"><function type="void" name="SetSizerAndFit"><parameters><parameter type="wxSizer&#42; " name="sizer"></parameter><parameter type="bool " name="deleteOld" value="true"></parameter></parameters><description>

The same as <ref target="wxwindowsetsizer">SetSizer</ref>, except it also sets the size hints
for the window based on the sizer's minimum size.

</description></function></member>
<member class="wxWindow" name="SetTitle"><function type="virtual void" name="SetTitle"><parameters><parameter type="const wxString&amp; " name="title">The window's title.</parameter></parameters><seealso>

<ref target="wxwindowgettitle">wxWindow::GetTitle</ref>

</seealso><description>

Sets the window's title. Applicable only to frames and dialogs.





</description></function></member>
<member class="wxWindow" name="SetThemeEnabled"><function type="virtual void" name="SetThemeEnabled"><parameters><parameter type="bool " name="enable"></parameter></parameters><description>

This function tells a window if it should use the system's &quot;theme&quot; code
to draw the windows' background instead if its own background drawing
code. This does not always have any effect since the underlying platform
obviously needs to support the notion of themes in user defined windows.
One such platform is GTK+ where windows can have (very colourful) backgrounds
defined by a user's selected theme.

Dialogs, notebook pages and the status bar have this flag set to true
by default so that the default look and feel is simulated best.

</description></function></member>
<member class="wxWindow" name="SetValidator"><function type="virtual void" name="SetValidator"><parameters><parameter type="const wxValidator&amp;" name=" validator"></parameter></parameters><description>

Deletes the current validator (if any) and sets the window validator, having called wxValidator::Clone to
create a new validator of this type.

</description></function></member>
<member class="wxWindow" name="SetToolTip"><function type="void" name="SetToolTip"><parameters><parameter type="const wxString&amp; " name="tip"></parameter></parameters><description>

</description></function>
<function type="void" name="SetToolTip"><parameters><parameter type="wxToolTip&#42; " name="tip"></parameter></parameters><description>

Attach a tooltip to the window.

See also: <ref target="wxwindowgettooltip">GetToolTip</ref>,
 <ref target="wxtooltip">wxToolTip</ref>

</description></function></member>
<member class="wxWindow" name="SetVirtualSize"><function type="void" name="SetVirtualSize"><parameters><parameter type="int" name=" width"></parameter><parameter type="int" name=" height"></parameter></parameters><description>

</description></function>
<function type="void" name="SetVirtualSize"><parameters><parameter type="const wxSize&amp;" name=" size"></parameter></parameters><description>

Sets the virtual size of the window in pixels.

</description></function></member>
<member class="wxWindow" name="SetVirtualSizeHints"><function type="virtual void" name="SetVirtualSizeHints"><parameters><parameter type="int" name=" minW"></parameter><parameter type="int" name=" minH"></parameter><parameter type="int" name="maxW" value="-1">Specifies the maximum width allowable.</parameter><parameter type="int" name="maxH" value="-1">Specifies the maximum height allowable.</parameter></parameters><remarks>

If this function is called, the user will not be able to size the virtual area
of the window outside the given bounds.

</remarks><description>

Allows specification of minimum and maximum virtual window sizes.
If a pair of values is not set (or set to -1), the default values
will be used.











</description></function></member>
<member class="wxWindow" name="SetWindowStyle"><function type="void" name="SetWindowStyle"><parameters><parameter type="long" name=" style"></parameter></parameters><description>

Identical to <ref target="wxwindowsetwindowstyleflag">SetWindowStyleFlag</ref>.

</description></function></member>
<member class="wxWindow" name="SetWindowStyleFlag"><function type="virtual void" name="SetWindowStyleFlag"><parameters><parameter type="long" name=" style"></parameter></parameters><seealso>

<ref target="wxwindowgetwindowstyleflag">GetWindowStyleFlag</ref>

</seealso><description>

Sets the style of the window. Please note that some styles cannot be changed
after the window creation and that <ref target="wxwindowrefresh">Refresh()</ref> might
be called after changing the others for the change to take place immediately.

See <ref target="windowstyles">Window styles</ref> for more information about flags.

</description></function></member>
<member class="wxWindow" name="Show"><function type="virtual bool" name="Show"><parameters><parameter type="bool" name="show" value="true">If <tt> true</tt> displays the window. Otherwise, hides it.</parameter></parameters><seealso>

<ref target="wxwindowisshown">wxWindow::IsShown</ref>

</seealso><returnvalue>

<tt> true</tt> if the window has been shown or hidden or <tt> false</tt> if nothing was
done because it already was in the requested state.

</returnvalue><description>

Shows or hides the window. You may need to call <ref target="wxwindowraise">Raise</ref>
for a top level window if you want to bring it to top, although this is not
needed if Show() is called immediately after the frame creation.





</description></function></member>
<member class="wxWindow" name="Thaw"><function type="virtual void" name="Thaw"><description>

Reenables window updating after a previous call to
<ref target="wxwindowfreeze">Freeze</ref>.

</description></function></member>
<member class="wxWindow" name="TransferDataFromWindow"><function type="virtual bool" name="TransferDataFromWindow"><seealso>

<ref target="wxwindowtransferdatatowindow">wxWindow::TransferDataToWindow</ref>,
<ref target="wxvalidator">wxValidator</ref><ref target="wxwindowvalidate">wxWindow::Validate</ref>

</seealso><description></description></function></member>
<member class="wxWindow" name="TransferDataToWindow"><function type="virtual bool" name="TransferDataToWindow"><seealso>

<ref target="wxwindowtransferdatafromwindow">wxWindow::TransferDataFromWindow</ref>,
<ref target="wxvalidator">wxValidator</ref><ref target="wxwindowvalidate">wxWindow::Validate</ref>

</seealso><description></description></function></member>
<member class="wxWindow" name="Update"><function type="virtual void" name="Update"><description>

Calling this method immediately repaints the invalidated area of the window
while this would usually only happen when the flow of control returns to the
event loop. Notice that this function doesn't refresh the window and does
nothing if the window hadn't been already repainted. Use 
<ref target="wxwindowrefresh">Refresh</ref> first if you want to immediately redraw the
window unconditionally.

</description></function></member>
<member class="wxWindow" name="Validate"><function type="virtual bool" name="Validate"><seealso>

<ref target="wxwindowtransferdatafromwindow">wxWindow::TransferDataFromWindow</ref>,
<ref target="wxwindowtransferdatafromwindow">wxWindow::TransferDataFromWindow</ref>,
<ref target="wxvalidator">wxValidator</ref>

</seealso><returnvalue>

Returns <tt> false</tt> if any of the validations failed.

</returnvalue><description>

Validates the current values of the child controls using their validators.

If the window has <tt> wxWS_EX_VALIDATE_RECURSIVELY</tt> extra style flag set,
the method will also call Validate() of all child windows.

</description></function></member>
<member class="wxWindow" name="WarpPointer"><function type="void" name="WarpPointer"><parameters><parameter type="int" name=" x"></parameter><parameter type="int" name=" y"></parameter></parameters><description>

Moves the pointer to the given position on the window.

<b> NB: </b> This function is not supported under Mac because Apple Human
Interface Guidelines forbid moving the mouse cursor programmatically.







</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxWindowDC">
<description>
<p class="classdesc">
A wxWindowDC must be constructed if an application wishes to paint on the
whole area of a window (client and decorations).
This should normally be constructed as a temporary stack object; don't store
a wxWindowDC object.</p><p class="classdesc">To draw on a window from inside <b> OnPaint</b>, construct a <ref target="wxpaintdc">wxPaintDC</ref> object.</p><p class="classdesc">To draw on the client area of a window from outside <b> OnPaint</b>, construct a <ref target="wxclientdc">wxClientDC</ref> object.</p><p class="classdesc">To draw on the whole window including decorations, construct a <ref target="wxwindowdc">wxWindowDC</ref> object
(Windows only).</p>
</description>
<parents>
<classref name="wxDC"/>

</parents>
<includes>
<header name="wx/dcclient.h"/></includes>
<seealso>

<ref target="wxdc">wxDC</ref><ref target="wxmemorydc">wxMemoryDC</ref><ref target="wxpaintdc">wxPaintDC</ref>,
<ref target="wxclientdc">wxClientDC</ref><ref target="wxscreendc">wxScreenDC</ref>

</seealso>
<members>
<member class="wxWindowDC" name="wxWindowDC"><function type="" name="wxWindowDC"><parameters><parameter type="wxWindow&#42;" name=" window"></parameter></parameters><description>

Constructor. Pass a pointer to the window on which you wish to paint.



</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="P"/><platform name="nanox" status="P"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxWindowDisabler">
<description>
<p class="classdesc">
This class disables all windows of the application (may be with the exception
of one of them) in its constructor and enables them back in its destructor.
This comes in handy when you want to indicate to the user that the application
is currently busy and cannot respond to user input.</p>
</description>
<parents>


</parents>
<includes>
<header name="wx/utils.h"/></includes>
<seealso>

<ref target="wxbusycursor">wxBusyCursor</ref>

</seealso>
<members>
<member class="wxWindowDisabler" name="wxWindowDisabler"><function type="" name="wxWindowDisabler"><parameters><parameter type="wxWindow &#42;" name="winToSkip" value="NULL"></parameter></parameters><description>

Disables all top level windows of the applications with the exception of 
<i> winToSkip</i> if it is not <tt> NULL</tt>.

</description></function></member>
<member class="wxWindowDisabler" name="~wxWindowDisabler"><function type="" name="~wxWindowDisabler"><description>

Reenables back the windows disabled by the constructor.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxWizard">
<description>
<p class="classdesc">
wxWizard is the central class for implementing `wizard-like' dialogs. These
dialogs are mostly familiar to Windows users and are nothing else but a
sequence of `pages' each of them displayed inside a dialog which has the
buttons to pass to the next (and previous) pages.</p><p class="classdesc">The wizards are typically used to decompose a complex dialog into several
simple steps and are mainly useful to the novice users, hence it is important
to keep them as simple as possible.</p><p class="classdesc">To show a wizard dialog, you must first create an object of wxWizard class
using either the non default constructor or a default one followed by call to 
<ref target="wxwizardcreate">Create</ref> function. Then you should add all pages you
want the wizard to show and call <ref target="wxwizardrunwizard">RunWizard</ref>.
Finally, don't forget to call <tt> wizard-&gt;Destroy()</tt>.</p><p class="classdesc"><heading>Extended styles</heading></p><p class="classdesc">Use the <ref target="wxwindowsetextrastyle">wxWindow::SetExtraStyle</ref> function to set the following
style. You will need to use two-step construction (use the default constructor, call <b> SetExtraStyle</b>, then call <b> Create</b>).</p><p class="classdesc">\twocolwidtha{5cm}<table>
<tr><td>\windowstyle{wxWIZARD_EX_HELPBUTTON}</td><td>Shows a Help button using wxID_HELP.</td></tr>
</table></p><p class="classdesc">See also <ref target="wxdialog">wxDialog</ref> for other extended styles.</p>
</description>
<parents>
<classref name="wxDialog"/>
<classref name="wxPanel"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/wizard.h"/></includes>
<events>
<event name="EVT_WIZARD_PAGE_CHANGED(id, func)">The page has been just
changed (this event can not be vetoed).</event><event name="EVT_WIZARD_PAGE_CHANGING(id, func)">The page is being
changed (this event can be vetoed).</event><event name="EVT_WIZARD_CANCEL(id, func)">The user attempted to cancel
the wizard (this event may also be vetoed).</event><event name="EVT_WIZARD_HELP(id, func)">The wizard help button was pressed.</event><event name="EVT_WIZARD_FINISHED(id, func)">The wizard finished button was pressed.</event></events>
<seealso>

<ref target="wxwizardevent">wxWizardEvent</ref><ref target="wxwizardpage">wxWizardPage</ref><ref target="samplewizard">wxWizard sample</ref>

</seealso>
<members>
<member class="wxWizard" name="wxWizard"><function type="" name="wxWizard"><description>

Default constructor. Use this if you wish to derive from wxWizard and then call 
<ref target="wxwizardcreate">Create</ref>, for example if you wish to set an extra style
with <ref target="wxwindowsetextrastyle">wxWindow::SetExtraStyle</ref> between the two
calls.

</description></function>
<function type="" name="wxWizard"><parameters><parameter type="wxWindow&#42; " name="parent">The parent window, may be NULL.</parameter><parameter type="int " name="id" value="-1">The id of the dialog, will usually be just $-1$.</parameter><parameter type="const wxString&amp; " name="title" value="wxEmptyString">The title of the dialog.</parameter><parameter type="const wxBitmap&amp; " name="bitmap" value="wxNullBitmap">The default bitmap used in the left side of the wizard. See
also <ref target="wxwizardpagegetbitmap">GetBitmap</ref>.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">The position of the dialog, it will be centered on the screen
by default.</parameter></parameters><description>

Constructor which really creates the wizard -- if you use this constructor, you
shouldn't call <ref target="wxwizardcreate">Create</ref>.

Notice that unlike almost all other wxWindows classes, there is no <i> size</i> 
parameter in wxWizard constructor because the wizard will have a predefined
default size by default. If you want to change this, you should use the 
<ref target="wxwizardsetpagesize">SetPageSize</ref> function.













</description></function></member>
<member class="wxWizard" name="Create"><function type="bool" name="Create"><parameters><parameter type="wxWindow&#42; " name="parent">The parent window, may be NULL.</parameter><parameter type="int " name="id" value="-1">The id of the dialog, will usually be just $-1$.</parameter><parameter type="const wxString&amp; " name="title" value="wxEmptyString">The title of the dialog.</parameter><parameter type="const wxBitmap&amp; " name="bitmap" value="wxNullBitmap">The default bitmap used in the left side of the wizard. See
also <ref target="wxwizardpagegetbitmap">GetBitmap</ref>.</parameter><parameter type="const wxPoint&amp; " name="pos" value="wxDefaultPosition">The position of the dialog, it will be centered on the screen
by default.</parameter></parameters><description>

Creates the wizard dialog. Must be called if the default constructor had been
used to create the object.

Notice that unlike almost all other wxWindows classes, there is no <i> size</i> 
parameter in wxWizard constructor because the wizard will have a predefined
default size by default. If you want to change this, you should use the 
<ref target="wxwizardsetpagesize">SetPageSize</ref> function.













</description></function></member>
<member class="wxWizard" name="FitToPage"><function type="void" name="FitToPage"><parameters><parameter type="const wxWizardPage&#42; " name="firstPage"></parameter></parameters><description>

Sets the page size to be big enough for all the pages accessible via the
given <i> firstPage</i>, i.e. this page, its next page and so on.

This method may be called more than once and it will only change the page size
if the size required by the new page is bigger than the previously set one.
This is useful if the decision about which pages to show is taken during the
run-time as in this case, the wizard won't be able to get to all pages starting
from a single one and you should call <i> Fit</i> separately for the others.

</description></function></member>
<member class="wxWizard" name="GetCurrentPage"><function type="wxWizardPage&#42;" name="GetCurrentPage" suffix="const"><description>

Get the current page while the wizard is running. <tt> NULL</tt> is returned if 
<ref target="wxwizardrunwizard">RunWizard()</ref> is not being executed now.

</description></function></member>
<member class="wxWizard" name="GetPageSize"><function type="wxSize" name="GetPageSize" suffix="const"><description>

Returns the size available for the pages.

</description></function></member>
<member class="wxWizard" name="HasNextPage"><function type="virtual bool" name="HasNextPage"><parameters><parameter type="wxWizardPage &#42;" name="page"></parameter></parameters><seealso>

<ref target="wxwizardhasprevpage">HasPrevPage</ref>

</seealso><description>

Return <tt> true</tt> if this page is not the last one in the wizard. The base
class version implements this by calling 
<ref target="wxwizardpagegetnext">page-&gt;GetNext</ref> but this could be undesirable if,
for example, the pages are created on demand only.

</description></function></member>
<member class="wxWizard" name="HasPrevPage"><function type="virtual bool" name="HasPrevPage"><parameters><parameter type="wxWizardPage &#42;" name="page"></parameter></parameters><seealso>

<ref target="wxwizardhasnextpage">HasNextPage</ref>

</seealso><description>

Return <tt> true</tt> if this page is not the last one in the wizard. The base
class version implements this by calling 
<ref target="wxwizardpagegetprev">page-&gt;GetPrev</ref> but this could be undesirable if,
for example, the pages are created on demand only.

</description></function></member>
<member class="wxWizard" name="RunWizard"><function type="bool" name="RunWizard"><parameters><parameter type="wxWizardPage&#42; " name="firstPage"></parameter></parameters><description>

Executes the wizard starting from the given page, returns <tt> true</tt> if it was
successfully finished or <tt> false</tt> if user cancelled it. The <i> firstPage</i> 
can not be <tt> NULL</tt>.

</description></function></member>
<member class="wxWizard" name="SetPageSize"><function type="void" name="SetPageSize"><parameters><parameter type="const wxSize&amp; " name="sizePage"></parameter></parameters><description>

Sets the minimal size to be made available for the wizard pages. The wizard
will take into account the size of the bitmap (if any) itself. Also, the
wizard will never be smaller than the default size.

The recommended way to use this function is to layout all wizard pages using
the sizers (even though the wizard is not resizeable) and then use 
<ref target="wxsizercalcmin">wxSizer::CalcMin</ref> in a loop to calculate the maximum
of minimal sizes of the pages and pass it to SetPageSize().

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxWizardEvent">
<description>
<p class="classdesc">
wxWizardEvent class represents an event generated by the
<ref target="wxwizard">wizard</ref>: this event is first sent to the page itself and,
if not processed there, goes up the window hierarchy as usual.</p>
</description>
<parents>
<classref name="wxNotifyEvent"/>
<classref name="wxCommandEvent"/>
<classref name="wxEvent"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/wizard.h"/></includes>
<events>
<event name="EVT_WIZARD_PAGE_CHANGED(id, func)">The page has been just
changed (this event can not be vetoed).</event><event name="EVT_WIZARD_PAGE_CHANGING(id, func)">The page is being
changed (this event can be vetoed).</event><event name="EVT_WIZARD_CANCEL(id, func)">The user attempted to cancel
the wizard (this event may also be vetoed).</event><event name="EVT_WIZARD_HELP(id, func)">The wizard help button was pressed.</event><event name="EVT_WIZARD_FINISHED(id, func)">The wizard finished button was pressed.</event></events>
<seealso>

<ref target="wxwizard">wxWizard</ref><ref target="samplewizard">wxWizard sample</ref>

</seealso>
<members>
<member class="wxWizardEvent" name="wxWizardEvent"><function type="" name="wxWizardEvent"><parameters><parameter type="wxEventType " name="type" value="wxEVT_NULL"></parameter><parameter type="int " name="id" value="-1"></parameter><parameter type="bool " name="direction" value="true"></parameter></parameters><description>

Constructor. It is not normally used by the user code as the objects of this
type are constructed by wxWizard.

</description></function></member>
<member class="wxWizardEvent" name="GetDirection"><function type="bool" name="GetDirection" suffix="const"><description>

Return the direction in which the page is changing: for <tt>
EVT_WIZARD_PAGE_CHANGING</tt>, return <tt> true</tt> if we're going forward or
false otherwise and for <tt> EVT_WIZARD_PAGE_CHANGED</tt> return <tt> true</tt> if
we came from the previous page and <tt> false</tt> if we returned from the next
one.

</description></function></member>
<member class="wxWizardEvent" name="GetPage"><function type="wxWizardPage&#42;" name="GetPage" suffix="const"><description>

Returns the <ref target="wxwizardpage">wxWizardPage</ref> which was active when this
event was generated.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxWizardPage">
<description>
<p class="classdesc">
wxWizardPage is one of the screens in <ref target="wxwizard">wxWizard</ref>: it must
know what are the following and preceding pages (which may be <tt> NULL</tt> for the
first/last page). Except for this extra knowledge, wxWizardPage is just a
panel, so the controls may be placed directly on it in the usual way.</p><p class="classdesc">This class allows the programmer to decide the order of pages in the wizard
dynamically (during run-time) and so provides maximal flexibility. Usually,
however, the order of pages is known in advance in which case 
<ref target="wxwizardpagesimple">wxWizardPageSimple</ref> class is enough and it is simpler
to use.</p>
</description>
<parents>
<classref name="wxPanel"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/wizard.h"/></includes>
<override>

To use this class, you must override <ref target="wxwizardpagegetprev">GetPrev</ref> 
and <ref target="wxwizardpagegetnext">GetNext</ref> pure virtual functions (or you
may use <ref target="wxwizardpagesimple">wxWizardPageSimple</ref> instead).

<ref target="wxwizardpagegetbitmap">GetBitmap</ref> can also be overridden, but this
should be very rarely needed.

</override>
<seealso>

<ref target="wxwizard">wxWizard</ref><ref target="samplewizard">wxWizard sample</ref>

</seealso>
<members>
<member class="wxWizardPage" name="wxWizardPage"><function type="" name="wxWizardPage"><parameters><parameter type="wxWizard&#42; " name="parent">The parent wizard</parameter><parameter type="const wxBitmap&amp; " name="bitmap" value="wxNullBitmap">The page-specific bitmap if different from the global one</parameter><parameter type="const wxChar " name="&#42;resource" value="NULL"></parameter></parameters><description>

Constructor accepts an optional bitmap which will be used for this page
instead of the default one for this wizard (note that all bitmaps used should
be of the same size). Notice that no other parameters are needed because the
wizard will resize and reposition the page anyhow.









</description></function></member>
<member class="wxWizardPage" name="GetPrev"><function type="wxWizardPage&#42;" name="GetPrev" suffix="const"><seealso>

<ref target="wxwizardpagegetnext">GetNext</ref>

</seealso><description>

Get the page which should be shown when the user chooses the <tt> &quot;Back&quot;</tt>
button: if <tt> NULL</tt> is returned, this button will be disabled. The first
page of the wizard will usually return <tt> NULL</tt> from here, but the others
will not.

</description></function></member>
<member class="wxWizardPage" name="GetNext"><function type="wxWizardPage&#42;" name="GetNext" suffix="const"><seealso>

<ref target="wxwizardpagegetprev">GetPrev</ref>

</seealso><description>

Get the page which should be shown when the user chooses the <tt> &quot;Next&quot;</tt>
button: if <tt> NULL</tt> is returned, this button will be disabled. The last
page of the wizard will usually return <tt> NULL</tt> from here, but the others
will not.

</description></function></member>
<member class="wxWizardPage" name="GetBitmap"><function type="wxBitmap" name="GetBitmap" suffix="const"><description>

This method is called by wxWizard to get the bitmap to display alongside the
page. By default, <tt> m_bitmap</tt> member variable which was set in the 
<ref target="wxwizardpagewxwizardpage">constructor</ref>.

If the bitmap was not explicitly set (i.e. if <tt> wxNullBitmap</tt> is returned),
the default bitmap for the wizard should be used.

The only cases when you would want to override this function is if the page
bitmap depends dynamically on the user choices, i.e. almost never.
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxWizardPageSimple">
<description>
<p class="classdesc">
wxWizardPageSimple is the simplest possible 
<ref target="wxwizardpage">wxWizardPage</ref> implementation: it just returns the
pointers given to its constructor from GetNext() and GetPrev() functions.</p><p class="classdesc">This makes it very easy to use the objects of this class in the wizards where
the pages order is known statically - on the other hand, if this is not the
case you must derive your own class from <ref target="wxwizardpage">wxWizardPage</ref> 
instead.</p>
</description>
<parents>
<classref name="wxWizardPage"/>
<classref name="wxPanel"/>
<classref name="wxWindow"/>
<classref name="wxEvtHandler"/>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/wizard.h"/></includes>
<seealso>

<ref target="wxwizard">wxWizard</ref><ref target="samplewizard">wxWizard sample</ref>

</seealso>
<members>
<member class="wxWizardPageSimple" name="wxWizardPageSimple"><function type="" name="wxWizardPageSimple"><parameters><parameter type="wxWizard&#42; " name="parent" value="NULL"></parameter><parameter type="wxWizardPage&#42; " name="prev" value="NULL"></parameter><parameter type="wxWizardPage&#42; " name="next" value="NULL"></parameter><parameter type="const wxBitmap&amp; " name="bitmap" value="wxNullBitmap"></parameter></parameters><description>

Constructor takes the previous and next pages. They may be modified later by
<ref target="wxwizardpagesimplesetprev">SetPrev()</ref> or 
<ref target="wxwizardpagesimplesetnext">SetNext()</ref>.

</description></function></member>
<member class="wxWizardPageSimple" name="SetPrev"><function type="void" name="SetPrev"><parameters><parameter type="wxWizardPage&#42; " name="prev"></parameter></parameters><description>

Sets the previous page.

</description></function></member>
<member class="wxWizardPageSimple" name="SetNext"><function type="void" name="SetNext"><parameters><parameter type="wxWizardPage&#42; " name="next"></parameter></parameters><description>

Sets the next page.

</description></function></member>
<member class="wxWizardPageSimple" name="Chain"><function type="static void" name="Chain"><parameters><parameter type="wxWizardPageSimple&#42; " name="first"></parameter><parameter type="wxWizardPageSimple&#42; " name="second"></parameter></parameters><description>

A convenience function to make the pages follow each other.

Example:
<pre>
    wxRadioboxPage &#42;page3 = new wxRadioboxPage(wizard);
    wxValidationPage &#42;page4 = new wxValidationPage(wizard);

    wxWizardPageSimple::Chain(page3, page4);
</pre>

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxXmlResource">
<description>
<p class="classdesc">
This is the main class for interacting with the XML-based resource system.</p><p class="classdesc">The class holds XML resources from one or more .xml files, binary files or zip archive files.</p><p class="classdesc">See <ref target="xrcoverview">XML-based resource system overview</ref> for details.</p><p class="classdesc"><b> NOTE:</b> XRC is not yet a part of the core wxWindows library, so
please see the overview for how to compile and link it. Otherwise if you
try to use it, you will get link errors.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/xrc/xmlres.h"/></includes>
<structs>

<pre>
enum wxXmlResourceFlags
{
    wxXRC_USE_LOCALE     = 1,
    wxXRC_NO_SUBCLASSING = 2
};
</pre>

</structs>
<members>
<member class="wxXmlResource" name="wxXmlResource"><function type="" name="wxXmlResource"><parameters><parameter type="const wxString&amp; " name="filemask">The XRC file, archive file, or wildcard specification that will be used to
load all resource files inside a zip archive.</parameter><parameter type="int " name="flags" value="wxXRC_USE_LOCALE">wxXRC_USE_LOCALE: translatable strings will be translated via _().
wxXRC_NO_SUBCLASSING: subclass property of object nodes will be ignored
(useful for previews in XRC editors).</parameter></parameters><description>

Constructor.

</description></function>
<function type="" name="wxXmlResource"><parameters><parameter type="int " name="flags" value="wxXRC_USE_LOCALE">wxXRC_USE_LOCALE: translatable strings will be translated via _().
wxXRC_NO_SUBCLASSING: subclass property of object nodes will be ignored
(useful for previews in XRC editors).</parameter></parameters><description>

Constructor.





</description></function></member>
<member class="wxXmlResource" name="~wxXmlResource"><function type="" name="~wxXmlResource"><description>

Destructor.

</description></function></member>
<member class="wxXmlResource" name="AddHandler"><function type="void" name="AddHandler"><parameters><parameter type="wxXmlResourceHandler&#42; " name="handler"></parameter></parameters><description>

Initializes only a specific handler (or custom handler). Convention says
that the handler name is equal to the control's name plus 'XmlHandler', for example
wxTextCtrlXmlHandler, wxHtmlWindowXmlHandler. The XML resource compiler
(wxxrc) can create include file that contains initialization code for
all controls used within the resource.

</description></function></member>
<member class="wxXmlResource" name="AttachUnknownControl"><function type="bool" name="AttachUnknownControl"><parameters><parameter type="const wxString&amp; " name="name"></parameter><parameter type="wxWindow&#42; " name="control"></parameter><parameter type="wxWindow&#42; " name="parent" value="NULL"></parameter></parameters><description>

Attaches an unknown control to the given panel/window/dialog.
Unknown controls are used in conjunction with &lt;object class=&quot;unknown&quot;&gt;.

</description></function></member>
<member class="wxXmlResource" name="ClearHandlers"><function type="void" name="ClearHandlers"><description>

Removes all handlers.

</description></function></member>
<member class="wxXmlResource" name="CompareVersion"><function type="int" name="CompareVersion" suffix="const"><parameters><parameter type="int " name="major"></parameter><parameter type="int " name="minor"></parameter><parameter type="int " name="release"></parameter><parameter type="int " name="revision"></parameter></parameters><description>

Compares the XRC version to the argument. Returns -1 if the XRC version
is less than the argument, +1 if greater, and 0 if they equal.

</description></function></member>
<member class="wxXmlResource" name="CreateResFromNode"><function type="wxObject&#42;" name="CreateResFromNode"><parameters><parameter type="wxXmlNode&#42; " name="node"></parameter><parameter type="wxObject&#42; " name="parent"></parameter><parameter type="wxObject&#42; " name="instance" value="NULL"></parameter></parameters><description>

Creates a resource from information in the given node.

</description></function></member>
<member class="wxXmlResource" name="DoFindResource"><function type="wxXmlNode&#42;" name="DoFindResource"><parameters><parameter type="wxXmlNode&#42; " name="parent"></parameter><parameter type="const wxString&amp; " name="name"></parameter><parameter type="const wxString&amp; " name="classname"></parameter><parameter type="bool " name="recursive"></parameter></parameters><description>

Helper function: finds a resource (calls UpdateResources) and returns a node containing it.

</description></function></member>
<member class="wxXmlResource" name="FindResource"><function type="wxXmlNode&#42;" name="FindResource"><parameters><parameter type="const wxString&amp; " name="name"></parameter><parameter type="const wxString&amp; " name="classname"></parameter><parameter type="bool " name="recursive" value="false"></parameter></parameters><description>

Finds a resource (calls UpdateResources) and returns a node containing it.

</description></function></member>
<member class="wxXmlResource" name="Get"><function type="wxXmlResource&#42;" name="Get"><description>

Gets the global resources object or creates one if none exists.

</description></function></member>
<member class="wxXmlResource" name="GetFlags"><function type="int" name="GetFlags"><description>

Returns flags, which may be a bitlist of wxXRC_USE_LOCALE and wxXRC_NO_SUBCLASSING.

</description></function></member>
<member class="wxXmlResource" name="GetVersion"><function type="long" name="GetVersion" suffix="const"><description>

Returns version information (a.b.c.d = d+ 256&#42;c + 256^2&#42;b + 256\textasciitilde3&#42;a).

</description></function></member>
<member class="wxXmlResource" name="GetXRCID"><function type="int" name="GetXRCID"><parameters><parameter type="const wxChar&#42; " name="str_id"></parameter></parameters><description>

Returns a numeric ID that is equivalent to the string ID used in an XML
resource. To be used in event tables.
The macro <tt> XRCID(name)</tt> is provided for convenience.

</description></function></member>
<member class="wxXmlResource" name="InitAllHandlers"><function type="void" name="InitAllHandlers"><description>

Initializes handlers for all supported controls/windows. This will
make the executable quite big because it forces linking against
most of the wxWindows library.

</description></function></member>
<member class="wxXmlResource" name="Load"><function type="bool" name="Load"><parameters><parameter type="const wxString&amp; " name="filemask"></parameter></parameters><description>

Loads resources from XML files that match given filemask.
This method understands VFS (see filesys.h).

</description></function></member>
<member class="wxXmlResource" name="LoadBitmap"><function type="wxBitmap" name="LoadBitmap"><parameters><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Loads a bitmap resource from a file.

</description></function></member>
<member class="wxXmlResource" name="LoadDialog"><function type="wxDialog&#42;" name="LoadDialog"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Loads a dialog. <i> dlg</i> points to a parent window (if any).

</description></function>
<function type="bool" name="LoadDialog"><parameters><parameter type="wxDialog&#42; " name="dlg"></parameter><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Loads a dialog. <i> dlg</i> points to parent window (if any).

This form is used to finish creation of an already existing instance (the main reason
for this is that you may want to use derived class with a new event table).

Example:

<pre>
  MyDialog dlg;
  wxTheXmlResource-&gt;LoadDialog(&amp;dlg, mainFrame, &quot;my_dialog&quot;);
  dlg-&gt;ShowModal();
</pre>

</description></function></member>
<member class="wxXmlResource" name="LoadFrame"><function type="bool" name="LoadFrame"><parameters><parameter type="wxFrame&#42; " name="frame"></parameter><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Loads a frame.

</description></function></member>
<member class="wxXmlResource" name="LoadIcon"><function type="wxIcon" name="LoadIcon"><parameters><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Loads an icon resource from a file.

</description></function></member>
<member class="wxXmlResource" name="LoadMenu"><function type="wxMenu&#42;" name="LoadMenu"><parameters><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Loads menu from resource. Returns NULL on failure.

</description></function></member>
<member class="wxXmlResource" name="LoadMenuBar"><function type="wxMenuBar&#42;" name="LoadMenuBar"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Loads a menubar from resource. Returns NULL on failure.

</description></function>
<function type="wxMenuBar&#42;" name="LoadMenuBar"><parameters><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Loads a menubar from resource. Returns NULL on failure.

</description></function></member>
<member class="wxXmlResource" name="LoadPanel"><function type="wxPanel&#42;" name="LoadPanel"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Loads a panel. <i> panel</i> points to parent window (if any).

</description></function>
<function type="bool" name="LoadPanel"><parameters><parameter type="wxPanel&#42; " name="panel"></parameter><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Loads a panel. <i> panel</i> points to parent window (if any). This form
is used to finish creation of an already existing instance.

</description></function></member>
<member class="wxXmlResource" name="LoadToolBar"><function type="wxToolBar&#42;" name="LoadToolBar"><parameters><parameter type="wxWindow&#42; " name="parent"></parameter><parameter type="const wxString&amp; " name="name"></parameter></parameters><description>

Loads a toolbar.

</description></function></member>
<member class="wxXmlResource" name="Set"><function type="wxXmlResource&#42;" name="Set"><parameters><parameter type="wxXmlResource&#42; " name="res"></parameter></parameters><description>

Sets the global resources object and returns a pointer to the previous one (may be NULL).

</description></function></member>
<member class="wxXmlResource" name="SetFlags"><function type="int" name="SetFlags"><description>

Sets flags (bitlist of wxXRC_USE_LOCALE and wxXRC_NO_SUBCLASSING).

</description></function></member>
<member class="wxXmlResource" name="UpdateResources"><function type="void" name="UpdateResources"><description>

Scans the resources list for unloaded files and loads them. Also reloads
files that have been modified since the last load.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxXmlResourceHandler">
<description>
<p class="classdesc">
wxXmlResourceHandler is an abstract base class for resource handlers
capable of creating a control from an XML node.</p><p class="classdesc">See <ref target="xrcoverview">XML-based resource system overview</ref> for details.</p><p class="classdesc"><b> NOTE:</b> XRC is not yet a part of the core wxWindows library, so
please see the overview for how to compile and link it. Otherwise if you
try to use it, you will get link errors.</p>
</description>
<parents>
<classref name="wxObject"/>

</parents>
<includes>
<header name="wx/xrc/xmlres.h"/></includes>
<members>
<member class="wxXmlResourceHandler" name="wxXmlResourceHandler"><function type="" name="wxXmlResourceHandler"><description>

Default constructor.

</description></function></member>
<member class="wxXmlResourceHandler" name="~wxXmlResourceHandler"><function type="" name="~wxXmlResourceHandler"><description>

Destructor.

</description></function></member>
<member class="wxXmlResourceHandler" name="AddStyle"><function type="void" name="AddStyle"><parameters><parameter type="const wxString&amp; " name="name"></parameter><parameter type="int " name="value"></parameter></parameters><description>

Add a style flag (e.g. wxMB_DOCKABLE) to the list of flags
understood by this handler.

</description></function></member>
<member class="wxXmlResourceHandler" name="AddWindowStyles"><function type="void" name="AddWindowStyles"><description>

Add styles common to all wxWindow-derived classes.

</description></function></member>
<member class="wxXmlResourceHandler" name="CanHandle"><function type="bool" name="CanHandle"><parameters><parameter type="wxXmlNode&#42; " name="node"></parameter></parameters><note>

You must <b> not</b> call any wxXmlResourceHandler methods except 
<ref target="wxxmlresourcehandlerisofclass">IsOfClass</ref> from this method! The instance
is not yet initialized with node data at the time CanHandle is called and it is only
safe to operate on <i> node</i> directly or to call IsOfClass.

</note><description>

Returns true if it understands this node and can create
a resource from it, false otherwise.

</description></function></member>
<member class="wxXmlResourceHandler" name="CreateChildren"><function type="void" name="CreateChildren"><parameters><parameter type="wxObject&#42; " name="parent"></parameter><parameter type="bool " name="this_hnd_only" value="false"></parameter></parameters><description>

Creates children.

</description></function></member>
<member class="wxXmlResourceHandler" name="CreateChildrenPrivately"><function type="void" name="CreateChildrenPrivately"><parameters><parameter type="wxObject&#42; " name="parent"></parameter><parameter type="wxXmlNode&#42; " name="rootnode" value="NULL"></parameter></parameters><description>

Helper function.

</description></function></member>
<member class="wxXmlResourceHandler" name="CreateResFromNode"><function type="wxObject&#42;" name="CreateResFromNode"><parameters><parameter type="wxXmlNode&#42; " name="node"></parameter><parameter type="wxObject&#42; " name="parent"></parameter><parameter type="wxObject&#42; " name="instance" value="NULL"></parameter></parameters><description>

Creates a resource from a node.

</description></function></member>
<member class="wxXmlResourceHandler" name="CreateResource"><function type="wxObject&#42;" name="CreateResource"><parameters><parameter type="wxXmlNode&#42; " name="node"></parameter><parameter type="wxObject&#42; " name="parent"></parameter><parameter type="wxObject&#42; " name="instance"></parameter></parameters><description>

Creates an object (menu, dialog, control, ...) from an XML node.
Should check for validity. <i> parent</i> is a higher-level object (usually window, dialog or panel)
that is often necessary to create the resource.
If <b> instance</b> is non-NULL it should not create a new instance via 'new' but
should rather use this one, and call its Create method.

</description></function></member>
<member class="wxXmlResourceHandler" name="DoCreateResource"><function type="wxObject&#42;" name="DoCreateResource"><description>

Called from CreateResource after variables
were filled.

</description></function></member>
<member class="wxXmlResourceHandler" name="GetBitmap"><function type="wxBitmap" name="GetBitmap"><parameters><parameter type="const wxString&amp; " name="param" value="wxT(&quot;bitmap&quot;)"></parameter><parameter type="wxSize " name="size" value="wxDefaultSize"></parameter></parameters><description>

Gets a bitmap.

</description></function></member>
<member class="wxXmlResourceHandler" name="GetBool"><function type="bool" name="GetBool"><parameters><parameter type="const wxString&amp; " name="param"></parameter><parameter type="bool " name="defaultv" value="false"></parameter></parameters><description>

Gets a bool flag (1, t, yes, on, true are true, everything else is false).

</description></function></member>
<member class="wxXmlResourceHandler" name="GetColour"><function type="wxColour" name="GetColour"><parameters><parameter type="const wxString&amp; " name="param"></parameter></parameters><description>

Gets colour in HTML syntax (\#RRGGBB).

</description></function></member>
<member class="wxXmlResourceHandler" name="GetCurFileSystem"><function type="wxFileSystem&amp;" name="GetCurFileSystem"><description>

Returns the current file system.

</description></function></member>
<member class="wxXmlResourceHandler" name="GetDimension"><function type="wxCoord" name="GetDimension"><parameters><parameter type="const wxString&amp; " name="param"></parameter><parameter type="wxCoord " name="defaultv" value="0"></parameter></parameters><description>

Gets a dimension (may be in dialog units).

</description></function></member>
<member class="wxXmlResourceHandler" name="GetFont"><function type="wxFont" name="GetFont"><parameters><parameter type="const wxString&amp; " name="param" value="wxT(&quot;font&quot;)"></parameter></parameters><description>

Gets a font.

</description></function></member>
<member class="wxXmlResourceHandler" name="GetID"><function type="int" name="GetID"><description>

Returns the XRCID.

</description></function></member>
<member class="wxXmlResourceHandler" name="GetIcon"><function type="wxIcon" name="GetIcon"><parameters><parameter type="const wxString&amp; " name="param" value="wxT(&quot;icon&quot;)"></parameter><parameter type="wxSize " name="size" value="wxDefaultSize"></parameter></parameters><description>

Returns an icon.

</description></function></member>
<member class="wxXmlResourceHandler" name="GetLong"><function type="long" name="GetLong"><parameters><parameter type="const wxString&amp; " name="param"></parameter><parameter type="long " name="defaultv" value="0"></parameter></parameters><description>

Gets the integer value from the parameter.

</description></function></member>
<member class="wxXmlResourceHandler" name="GetName"><function type="wxString" name="GetName"><description>

Returns the resource name.

</description></function></member>
<member class="wxXmlResourceHandler" name="GetNodeContent"><function type="wxString" name="GetNodeContent"><parameters><parameter type="wxXmlNode&#42; " name="node"></parameter></parameters><description>

Gets node content from wxXML_ENTITY_NODE.

</description></function></member>
<member class="wxXmlResourceHandler" name="GetParamNode"><function type="wxXmlNode&#42;" name="GetParamNode"><parameters><parameter type="const wxString&amp; " name="param"></parameter></parameters><description>

Finds the node or returns NULL.

</description></function></member>
<member class="wxXmlResourceHandler" name="GetParamValue"><function type="wxString" name="GetParamValue"><parameters><parameter type="const wxString&amp; " name="param"></parameter></parameters><description>

Finds the parameter value or returns the empty string.

</description></function></member>
<member class="wxXmlResourceHandler" name="GetPosition"><function type="wxPoint" name="GetPosition"><parameters><parameter type="const wxString&amp; " name="param" value="wxT(&quot;pos&quot;)"></parameter></parameters><description>

Gets the position (may be in dialog units).

</description></function></member>
<member class="wxXmlResourceHandler" name="GetSize"><function type="wxSize" name="GetSize"><parameters><parameter type="const wxString&amp; " name="param" value="wxT(&quot;size&quot;)"></parameter></parameters><description>

Gets the size (may be in dialog units).

</description></function></member>
<member class="wxXmlResourceHandler" name="GetStyle"><function type="int" name="GetStyle"><parameters><parameter type="const wxString&amp; " name="param" value="wxT(&quot;style&quot;)"></parameter><parameter type="int " name="defaults" value="0"></parameter></parameters><description>

Gets style flags from text in form &quot;flag | flag2| flag3 |...&quot;
Only understands flags added with AddStyle.

</description></function></member>
<member class="wxXmlResourceHandler" name="GetText"><function type="wxString" name="GetText"><parameters><parameter type="const wxString&amp; " name="param"></parameter></parameters><description>

Gets text from param and does some conversions:

<ul><li> replaces $\backslash$n, $\backslash$r, $\backslash$t by respective characters (according to C syntax)
</li>
<li> replaces <tt>$</tt> by <tt>&amp;</tt> and {\tt} by <tt>$</tt> (needed for <tt>_File</tt> to <tt>&amp;File</tt>
translation because of XML syntax)
</li>
<li> calls wxGetTranslations (unless disabled in wxXmlResource)
</li></ul>

</description></function></member>
<member class="wxXmlResourceHandler" name="HasParam"><function type="bool" name="HasParam"><parameters><parameter type="const wxString&amp; " name="param"></parameter></parameters><description>

Check to see if a parameter exists.

</description></function></member>
<member class="wxXmlResourceHandler" name="IsOfClass"><function type="bool" name="IsOfClass"><parameters><parameter type="wxXmlNode&#42; " name="node"></parameter><parameter type="const wxString&amp; " name="classname"></parameter></parameters><description>

Convenience function. Returns true if the node has a property class equal to classname,
e.g. &lt;object class=&quot;wxDialog&quot;&gt;.

</description></function></member>
<member class="wxXmlResourceHandler" name="SetParentResource"><function type="void" name="SetParentResource"><parameters><parameter type="wxXmlResource&#42; " name="res"></parameter></parameters><description>

Sets the parent resource.

</description></function></member>
<member class="wxXmlResourceHandler" name="SetupWindow"><function type="void" name="SetupWindow"><parameters><parameter type="wxWindow&#42; " name="wnd"></parameter></parameters><description>

Sets common window options.

</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxZipInputStream">
<description>
<p class="classdesc">
This class is input stream from ZIP archive. The archive
must be local file (accessible via FILE&#42;).
It has all features including GetSize and seeking.</p>
</description>
<note>

If you need to enumerate files in ZIP archive, you can use 
<ref target="wxfilesystem">wxFileSystem</ref> together with wxZipFSHandler (see 
<ref target="fs">the overview</ref>.


</note>
<parents>
<classref name="wxInputStream"/>

</parents>
<includes>
<header name="wx/zipstrm.h"/></includes>
<members>
<member class="wxZipInputStream" name="wxZipInputStream"><function type="" name="wxZipInputStream"><parameters><parameter type="const wxString&amp; " name="archive">name of ZIP file</parameter><parameter type="const wxString&amp; " name="file">name of file stored in the archive</parameter></parameters><description>

Constructor.







</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxZlibInputStream">
<description>
<p class="classdesc">
This stream uncompresses all data read from it. It uses the &quot;filtered&quot;
stream to get new compressed data.</p>
</description>
<parents>
<classref name="wxFilterInputStream"/>

</parents>
<includes>
<header name="wx/zstream.h"/></includes>
<members>
</members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class><class name="wxZlibOutputStream">
<description>
<p class="classdesc">
This stream compresses all data written to it, and passes the compressed data
to the &quot;filtered&quot; stream.</p>
</description>
<parents>
<classref name="wxFilterOutputStream"/>

</parents>
<includes>
<header name="wx/zstream.h"/></includes>
<seealso>

<ref target="wxoutputstream">wxOutputStream</ref>


</seealso>
<members>
<member class="wxZlibOutputStream" name="wxZlibOutputStream"><function type="" name="wxZlibOutputStream"><parameters><parameter type="wxOutputStream&amp;" name=" stream"></parameter><parameter type="int" name="level" value="-1"></parameter></parameters><description>

Creates a new write-only compressed stream. <i> level</i> means level of 
compression. It is number between 0 and 9 (including these values) where
0 means no compression and 9 best but slowest compression. -1 is default
value (currently equivalent to 6).
</description></function></member></members>
<supported>
<platform name="gtk" status="Y"/><platform name="win32" status="Y"/><platform name="motif" status="Y"/><platform name="x11" status="Y"/><platform name="nanox" status="Y"/><platform name="mgl" status="Y"/><platform name="macos" status="Y"/><platform name="os2" status="Y"/></supported>
</class></classes>
