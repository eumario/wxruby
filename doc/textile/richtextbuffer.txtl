h1(#wxrichtextbuffer). Wx::RichTextBuffer

This class represents the whole buffer associated with a "RichTextCtrl":richtextctrl.html.

h2. Derived from

RichTextParagraphLayoutBox

h2. Data structures

h2. See also

"TextAttr":textattr.html, "RichTextAttr":richtextattr.html, "RichTextCtrl":richtextctrl.html

<div id="methods">

h2. Methods

* "RichTextBuffer.new":#RichTextBuffer_new
* "RichTextBuffer#add_event_handler":#RichTextBuffer_addeventhandler
* "RichTextBuffer#add_handler":#RichTextBuffer_addhandler
* "RichTextBuffer#add_paragraph":#RichTextBuffer_addparagraph
* "RichTextBuffer#batching_undo":#RichTextBuffer_batchingundo
* "RichTextBuffer#begin_alignment":#RichTextBuffer_beginalignment
* "RichTextBuffer#begin_batch_undo":#RichTextBuffer_beginbatchundo
* "RichTextBuffer#begin_bold":#RichTextBuffer_beginbold
* "RichTextBuffer#begin_character_style":#RichTextBuffer_begincharacterstyle
* "RichTextBuffer#begin_font":#RichTextBuffer_beginfont
* "RichTextBuffer#begin_font_size":#RichTextBuffer_beginfontsize
* "RichTextBuffer#begin_italic":#RichTextBuffer_beginitalic
* "RichTextBuffer#begin_left_indent":#RichTextBuffer_beginleftindent
* "RichTextBuffer#begin_line_spacing":#RichTextBuffer_beginlinespacing
* "RichTextBuffer#begin_list_style":#RichTextBuffer_beginliststyle
* "RichTextBuffer#begin_numbered_bullet":#RichTextBuffer_beginnumberedbullet
* "RichTextBuffer#begin_paragraph_spacing":#RichTextBuffer_beginparagraphspacing
* "RichTextBuffer#begin_paragraph_style":#RichTextBuffer_beginparagraphstyle
* "RichTextBuffer#begin_right_indent":#RichTextBuffer_beginrightindent
* "RichTextBuffer#begin_style":#RichTextBuffer_beginstyle
* "RichTextBuffer#begin_suppress_undo":#RichTextBuffer_beginsuppressundo
* "RichTextBuffer#begin_standard_bullet":#RichTextBuffer_beginstandardbullet
* "RichTextBuffer#begin_symbol_bullet":#RichTextBuffer_beginsymbolbullet
* "RichTextBuffer#begin_text_colour":#RichTextBuffer_begintextcolour
* "RichTextBuffer#begin_underline":#RichTextBuffer_beginunderline
* "RichTextBuffer#begin_url":#RichTextBuffer_beginurl
* "RichTextBuffer#can_paste_from_clipboard":#RichTextBuffer_canpastefromclipboard
* "RichTextBuffer#clean_up_handlers":#RichTextBuffer_cleanuphandlers
* "RichTextBuffer#clear":#RichTextBuffer_clear
* "RichTextBuffer#clear_list_style":#RichTextBuffer_clearliststyle
* "RichTextBuffer#clear_style_stack":#RichTextBuffer_clearstylestack
* "RichTextBuffer#clone":#RichTextBuffer_clone
* "RichTextBuffer#copy":#RichTextBuffer_copy
* "RichTextBuffer#copy_to_clipboard":#RichTextBuffer_copytoclipboard
* "RichTextBuffer#delete_range_with_undo":#RichTextBuffer_deleterangewithundo
* "RichTextBuffer#dump":#RichTextBuffer_dump
* "RichTextBuffer#end_alignment":#RichTextBuffer_endalignment
* "RichTextBuffer#end_all_styles":#RichTextBuffer_endallstyles
* "RichTextBuffer#end_batch_undo":#RichTextBuffer_endbatchundo
* "RichTextBuffer#end_bold":#RichTextBuffer_endbold
* "RichTextBuffer#end_character_style":#RichTextBuffer_endcharacterstyle
* "RichTextBuffer#end_font":#RichTextBuffer_endfont
* "RichTextBuffer#end_font_size":#RichTextBuffer_endfontsize
* "RichTextBuffer#end_italic":#RichTextBuffer_enditalic
* "RichTextBuffer#end_left_indent":#RichTextBuffer_endleftindent
* "RichTextBuffer#end_line_spacing":#RichTextBuffer_endlinespacing
* "RichTextBuffer#end_list_style":#RichTextBuffer_endliststyle
* "RichTextBuffer#end_numbered_bullet":#RichTextBuffer_endnumberedbullet
* "RichTextBuffer#end_paragraph_spacing":#RichTextBuffer_endparagraphspacing
* "RichTextBuffer#end_paragraph_style":#RichTextBuffer_endparagraphstyle
* "RichTextBuffer#end_right_indent":#RichTextBuffer_endrightindent
* "RichTextBuffer#end_style":#RichTextBuffer_endstyle
* "RichTextBuffer#end_suppress_undo":#RichTextBuffer_endsuppressundo
* "RichTextBuffer#end_symbol_bullet":#RichTextBuffer_endsymbolbullet
* "RichTextBuffer#end_standard_bullet":#RichTextBuffer_endstandardbullet
* "RichTextBuffer#end_text_colour":#RichTextBuffer_endtextcolour
* "RichTextBuffer#end_underline":#RichTextBuffer_endunderline
* "RichTextBuffer#end_url":#RichTextBuffer_endurl
* "RichTextBuffer#find_handler":#RichTextBuffer_findhandler
* "RichTextBuffer#find_handler_filename_or_type":#RichTextBuffer_findhandlerfilenameortype
* "RichTextBuffer#get_basic_style":#RichTextBuffer_getbasicstyle
* "RichTextBuffer#get_batched_command":#RichTextBuffer_getbatchedcommand
* "RichTextBuffer#get_command_processor":#RichTextBuffer_getcommandprocessor
* "RichTextBuffer#get_default_style":#RichTextBuffer_getdefaultstyle
* "RichTextBuffer#get_ext_wildcard":#RichTextBuffer_getextwildcard
* "RichTextBuffer#get_handlers":#RichTextBuffer_gethandlers
* "RichTextBuffer#get_renderer":#RichTextBuffer_getrenderer
* "RichTextBuffer#get_style":#RichTextBuffer_getstyle
* "RichTextBuffer#get_style_for_range":#RichTextBuffer_getstyleforrange
* "RichTextBuffer#get_style_sheet":#RichTextBuffer_getstylesheet
* "RichTextBuffer#get_style_stack_size":#RichTextBuffer_getstylestacksize
* "RichTextBuffer#get_uncombined_style":#RichTextBuffer_getuncombinedstyle
* "RichTextBuffer#hit_test":#RichTextBuffer_hittest
* "RichTextBuffer#init":#RichTextBuffer_init
* "RichTextBuffer#init_standard_handlers":#RichTextBuffer_initstandardhandlers
* "RichTextBuffer#insert_handler":#RichTextBuffer_inserthandler
* "RichTextBuffer#insert_image_with_undo":#RichTextBuffer_insertimagewithundo
* "RichTextBuffer#insert_newline_with_undo":#RichTextBuffer_insertnewlinewithundo
* "RichTextBuffer#insert_text_with_undo":#RichTextBuffer_inserttextwithundo
* "RichTextBuffer#is_modified":#RichTextBuffer_ismodified
* "RichTextBuffer#load_file":#RichTextBuffer_loadfile
* "RichTextBuffer#modify":#RichTextBuffer_modify
* "RichTextBuffer#number_list":#RichTextBuffer_numberlist
* "RichTextBuffer#paste_from_clipboard":#RichTextBuffer_pastefromclipboard
* "RichTextBuffer#promote_list":#RichTextBuffer_promotelist
* "RichTextBuffer#remove_event_handler":#RichTextBuffer_removeeventhandler
* "RichTextBuffer#remove_handler":#RichTextBuffer_removehandler
* "RichTextBuffer#reset_and_clear_commands":#RichTextBuffer_resetandclearcommands
* "RichTextBuffer#save_file":#RichTextBuffer_savefile
* "RichTextBuffer#set_basic_style":#RichTextBuffer_setbasicstyle
* "RichTextBuffer#set_default_style":#RichTextBuffer_setdefaultstyle
* "RichTextBuffer#set_list_style":#RichTextBuffer_setliststyle
* "RichTextBuffer#set_renderer":#RichTextBuffer_setrenderer
* "RichTextBuffer#set_style":#RichTextBuffer_setstyle
* "RichTextBuffer#set_style_sheet":#RichTextBuffer_setstylesheet
* "RichTextBuffer#submit_action":#RichTextBuffer_submitaction
* "RichTextBuffer#suppressing_undo":#RichTextBuffer_suppressingundo

</div>


h3(#RichTextBuffer_wxrichtextbuffer). RichTextBuffer.new

  *RichTextBuffer.new*(%(arg-type)"RichTextBuffer":richtextbuffer.html% obj)

Copy constructor.

  *destructor*()

Destructor.

h3(#RichTextBuffer_addeventhandler). RichTextBuffer#add_event_handler

 Boolean *add_event_handler*(%(arg-type)"EvtHandler":evthandler.html% handler)

Adds an event handler to the buffer's list of handlers. A buffer associated with
a contol has the control as the only event handler, but the application is free
to add more if further notification is required. All handlers are notified
of an event originating from the buffer, such as the replacement of a style sheet
during loading. The buffer never deletes any of the event handlers, unless 
"RichTextBuffer#remove_event_handler":richtextbuffer.html#RichTextBuffer_removeeventhandler is
called with  as the second argument.

h3(#RichTextBuffer_addhandler). RichTextBuffer#add_handler

  *add_handler*(%(arg-type)"RichTextFileHandler":richtextfilehandler.html% handler)

Adds a file handler.

h3(#RichTextBuffer_addparagraph). RichTextBuffer#add_paragraph

 "Range":range.html *add_paragraph*(%(arg-type)String% text)

Adds a paragraph of text.

h3(#RichTextBuffer_batchingundo). RichTextBuffer#batching_undo

 Boolean *batching_undo*()

Returns  if the buffer is currently collapsing commands into a single notional command.

h3(#RichTextBuffer_beginalignment). RichTextBuffer#begin_alignment

 Boolean *begin_alignment*(%(arg-type)"TextAttrAlignment":textattralignment.html% alignment)

Begins using alignment.

h3(#RichTextBuffer_beginbatchundo). RichTextBuffer#begin_batch_undo

 Boolean *begin_batch_undo*(%(arg-type)String% cmdName)

Begins collapsing undo/redo commands. Note that this may not work properly
if combining commands that delete or insert content, changing ranges for
subsequent actions.

_cmdName_ should be the name of the combined command that will appear
next to Undo and Redo in the edit menu.

h3(#RichTextBuffer_beginbold). RichTextBuffer#begin_bold

 Boolean *begin_bold*()

Begin applying bold.

h3(#RichTextBuffer_begincharacterstyle). RichTextBuffer#begin_character_style

 Boolean *begin_character_style*(%(arg-type)String% characterStyle)

Begins applying the named character style.

h3(#RichTextBuffer_beginfont). RichTextBuffer#begin_font

 Boolean *begin_font*(%(arg-type)"Font":font.html% font)

Begins using this font.

h3(#RichTextBuffer_beginfontsize). RichTextBuffer#begin_font_size

 Boolean *begin_font_size*(%(arg-type)Integer% pointSize)

Begins using the given point size.

h3(#RichTextBuffer_beginitalic). RichTextBuffer#begin_italic

 Boolean *begin_italic*()

Begins using italic.

h3(#RichTextBuffer_beginleftindent). RichTextBuffer#begin_left_indent

 Boolean *begin_left_indent*(%(arg-type)Integer% leftIndent,  %(arg-type)Integer% leftSubIndent = 0)

Begin using _leftIndent_ for the left indent, and optionally _leftSubIndent_ for
the sub-indent. Both are expressed in tenths of a millimetre.

The sub-indent is an offset from the left of the paragraph, and is used for all but the
first line in a paragraph. A positive value will cause the first line to appear to the left
of the subsequent lines, and a negative value will cause the first line to be indented
relative to the subsequent lines.

h3(#RichTextBuffer_beginlinespacing). RichTextBuffer#begin_line_spacing

 Boolean *begin_line_spacing*(%(arg-type)Integer% lineSpacing)

Begins line spacing using the specified value. _spacing_ is a multiple, where 10 means single-spacing,
15 means 1.5 spacing, and 20 means double spacing. The following constants are
defined for convenience:



 #define TEXT_ATTR_LINE_SPACING_NORMAL         10
 #define TEXT_ATTR_LINE_SPACING_HALF           15
 #define TEXT_ATTR_LINE_SPACING_TWICE          20
 


h3(#RichTextBuffer_beginliststyle). RichTextBuffer#begin_list_style

 Boolean *begin_list_style*(%(arg-type)String% listStyle,  %(arg-type)Integer% level=1, 
                          %(arg-type)Integer% number=1)

Begins using a specified list style. Optionally, you can also pass a level and a number.

h3(#RichTextBuffer_beginnumberedbullet). RichTextBuffer#begin_numbered_bullet

 Boolean *begin_numbered_bullet*(%(arg-type)Integer% bulletNumber,  %(arg-type)Integer% leftIndent, 
                               %(arg-type)Integer% leftSubIndent, 
                               %(arg-type)Integer% bulletStyle = TEXT_ATTR_BULLET_STYLE_ARABIC|TEXT_ATTR_BULLET_STYLE_PERIOD)

Begins a numbered bullet. This call will be needed for each item in the list, and the
application should take care of incrementing the numbering.

_bulletNumber_ is a number, usually starting with 1.

_leftIndent_ and _leftSubIndent_ are values in tenths of a millimetre.

_bulletStyle_ is a bitlist of the following values:



 #define TEXT_ATTR_BULLET_STYLE_NONE               0x00000000
 #define TEXT_ATTR_BULLET_STYLE_ARABIC             0x00000001
 #define TEXT_ATTR_BULLET_STYLE_LETTERS_UPPER      0x00000002
 #define TEXT_ATTR_BULLET_STYLE_LETTERS_LOWER      0x00000004
 #define TEXT_ATTR_BULLET_STYLE_ROMAN_UPPER        0x00000008
 #define TEXT_ATTR_BULLET_STYLE_ROMAN_LOWER        0x00000010
 #define TEXT_ATTR_BULLET_STYLE_SYMBOL             0x00000020
 #define TEXT_ATTR_BULLET_STYLE_BITMAP             0x00000040
 #define TEXT_ATTR_BULLET_STYLE_PARENTHESES        0x00000080
 #define TEXT_ATTR_BULLET_STYLE_PERIOD             0x00000100
 #define TEXT_ATTR_BULLET_STYLE_STANDARD           0x00000200
 #define TEXT_ATTR_BULLET_STYLE_RIGHT_PARENTHESIS  0x00000400
 #define TEXT_ATTR_BULLET_STYLE_OUTLINE            0x00000800
 #define TEXT_ATTR_BULLET_STYLE_ALIGN_LEFT         0x00000000
 #define TEXT_ATTR_BULLET_STYLE_ALIGN_RIGHT        0x00001000
 #define TEXT_ATTR_BULLET_STYLE_ALIGN_CENTRE       0x00002000
 


RichTextBuffer uses indentation to render a bulleted item. The left indent is the distance between
the margin and the bullet. The content of the paragraph, including the first line, starts
at leftMargin + leftSubIndent. So the distance between the left edge of the bullet and the
left of the actual paragraph is leftSubIndent.

h3(#RichTextBuffer_beginparagraphspacing). RichTextBuffer#begin_paragraph_spacing

 Boolean *begin_paragraph_spacing*(%(arg-type)Integer% before,  %(arg-type)Integer% after)

Begins paragraph spacing; pass the before-paragraph and after-paragraph spacing in tenths of
a millimetre.

h3(#RichTextBuffer_beginparagraphstyle). RichTextBuffer#begin_paragraph_style

 Boolean *begin_paragraph_style*(%(arg-type)String% paragraphStyle)

Begins applying the named paragraph style.

h3(#RichTextBuffer_beginrightindent). RichTextBuffer#begin_right_indent

 Boolean *begin_right_indent*(%(arg-type)Integer% rightIndent)

Begins a right indent, specified in tenths of a millimetre.

h3(#RichTextBuffer_beginstyle). RichTextBuffer#begin_style

 Boolean *begin_style*(%(arg-type)"RichTextAttr":richtextattr.html% style)

Begins using a specified style.

h3(#RichTextBuffer_beginsuppressundo). RichTextBuffer#begin_suppress_undo

 Boolean *begin_suppress_undo*()

Begins suppressing undo/redo commands. The way undo is suppressed may be implemented
differently by each command. If not dealt with by a command implementation, then
it will be implemented automatically by not storing the command in the undo history
when the action is submitted to the command processor.

h3(#RichTextBuffer_beginstandardbullet). RichTextBuffer#begin_standard_bullet

 Boolean *begin_standard_bullet*(%(arg-type)String% bulletName,  %(arg-type)Integer% leftIndent, 
                               %(arg-type)Integer% leftSubIndent, 
                               %(arg-type)Integer% bulletStyle = TEXT_ATTR_BULLET_STYLE_STANDARD)

Begins applying a standard bullet, using one of the standard bullet names (currently @standard/circle@ or @standard/square@.
See "begin_numbered_bullet":#RichTextBuffer_beginnumberedbullet for an explanation of how indentation is used to render the bulleted paragraph.

h3(#RichTextBuffer_beginsymbolbullet). RichTextBuffer#begin_symbol_bullet

 Boolean *begin_symbol_bullet*(%(arg-type)"Char":char.html% symbol,  %(arg-type)Integer% leftIndent, 
                             %(arg-type)Integer% leftSubIndent, 
                             %(arg-type)Integer% bulletStyle = TEXT_ATTR_BULLET_STYLE_SYMBOL)

Begins applying a symbol bullet, using a character from the current font. See "begin_numbered_bullet":#RichTextBuffer_beginnumberedbullet for
an explanation of how indentation is used to render the bulleted paragraph.

h3(#RichTextBuffer_begintextcolour). RichTextBuffer#begin_text_colour

 Boolean *begin_text_colour*(%(arg-type)"Colour":colour.html% colour)

Begins using the specified text foreground colour.

h3(#RichTextBuffer_beginunderline). RichTextBuffer#begin_underline

 Boolean *begin_underline*()

Begins using underline.

h3(#RichTextBuffer_beginurl). RichTextBuffer#begin_url

 Boolean *begin_url*(%(arg-type)String% url,  %(arg-type)String% characterStyle = '')

Begins applying TEXT_ATTR_URL to the content. Pass a URL and optionally, a character style to apply,
since it is common to mark a URL with a familiar style such as blue text with underlining.

h3(#RichTextBuffer_canpastefromclipboard). RichTextBuffer#can_paste_from_clipboard

 Boolean *can_paste_from_clipboard*()

Returns  if content can be pasted from the clipboard.

h3(#RichTextBuffer_cleanuphandlers). RichTextBuffer#clean_up_handlers

  *clean_up_handlers*()

Cleans up the file handlers.

h3(#RichTextBuffer_clear). RichTextBuffer#clear

  *clear*()

Clears the buffer.

h3(#RichTextBuffer_clearliststyle). RichTextBuffer#clear_list_style

 Boolean *clear_list_style*(%(arg-type)Range% range, 
                          %(arg-type)Integer% flags $=$ RICHTEXT_SETSTYLE_WITH_UNDO)

 Boolean *clear_list_style*(%(arg-type)Range% range, 
                          %(arg-type)Integer% flags $=$ RICHTEXT_SETSTYLE_WITH_UNDO)

Clears the list style from the given range, clearing list-related attributes and applying any named paragraph style associated with each paragraph.

_flags_ is a bit list of the following:


* RICHTEXT_SETSTYLE_WITH_UNDO: specifies that this command will be undoable.


See also "RichTextBuffer#set_list_style":richtextbuffer.html#RichTextBuffer_setliststyle, "RichTextBuffer#promote_list":richtextbuffer.html#RichTextBuffer_promotelist, "RichTextBuffer#number_list":richtextbuffer.html#RichTextBuffer_numberlist.

h3(#RichTextBuffer_clearstylestack). RichTextBuffer#clear_style_stack

  *clear_style_stack*()

Clears the style stack.

h3(#RichTextBuffer_clone). RichTextBuffer#clone

 "RichTextObject":richtextobject.html *clone*()

Clones the object.

h3(#RichTextBuffer_copy). RichTextBuffer#copy

  *copy*(%(arg-type)"RichTextBuffer":richtextbuffer.html% obj)

Copies the given buffer.

h3(#RichTextBuffer_copytoclipboard). RichTextBuffer#copy_to_clipboard

 Boolean *copy_to_clipboard*(%(arg-type)Range% range)

Copy the given range to the clipboard.

h3(#RichTextBuffer_deleterangewithundo). RichTextBuffer#delete_range_with_undo

 Boolean *delete_range_with_undo*(%(arg-type)Range% range, 
                                %(arg-type)"RichTextCtrl":richtextctrl.html% ctrl)

Submits a command to delete the given range.

h3(#RichTextBuffer_dump). RichTextBuffer#dump

  *dump*()

  *dump*(%(arg-type)"TextOutputStream":textoutputstream.html% stream)

Dumps the contents of the buffer for debugging purposes.

h3(#RichTextBuffer_endalignment). RichTextBuffer#end_alignment

 Boolean *end_alignment*()

Ends alignment.

h3(#RichTextBuffer_endallstyles). RichTextBuffer#end_all_styles

 Boolean *end_all_styles*()

Ends all styles that have been started with a Begin... command.

h3(#RichTextBuffer_endbatchundo). RichTextBuffer#end_batch_undo

 Boolean *end_batch_undo*()

Ends collapsing undo/redo commands, and submits the combined command.

h3(#RichTextBuffer_endbold). RichTextBuffer#end_bold

 Boolean *end_bold*()

Ends using bold.

h3(#RichTextBuffer_endcharacterstyle). RichTextBuffer#end_character_style

 Boolean *end_character_style*()

Ends using the named character style.

h3(#RichTextBuffer_endfont). RichTextBuffer#end_font

 Boolean *end_font*()

Ends using a font.

h3(#RichTextBuffer_endfontsize). RichTextBuffer#end_font_size

 Boolean *end_font_size*()

Ends using a point size.

h3(#RichTextBuffer_enditalic). RichTextBuffer#end_italic

 Boolean *end_italic*()

Ends using italic.

h3(#RichTextBuffer_endleftindent). RichTextBuffer#end_left_indent

 Boolean *end_left_indent*()

Ends using a left indent.

h3(#RichTextBuffer_endlinespacing). RichTextBuffer#end_line_spacing

 Boolean *end_line_spacing*()

Ends using a line spacing.

h3(#RichTextBuffer_endliststyle). RichTextBuffer#end_list_style

 Boolean *end_list_style*()

Ends using a specified list style.

h3(#RichTextBuffer_endnumberedbullet). RichTextBuffer#end_numbered_bullet

 Boolean *end_numbered_bullet*()

Ends a numbered bullet.

h3(#RichTextBuffer_endparagraphspacing). RichTextBuffer#end_paragraph_spacing

 Boolean *end_paragraph_spacing*()

Ends paragraph spacing.

h3(#RichTextBuffer_endparagraphstyle). RichTextBuffer#end_paragraph_style

 Boolean *end_paragraph_style*()

Ends applying a named character style.

h3(#RichTextBuffer_endrightindent). RichTextBuffer#end_right_indent

 Boolean *end_right_indent*()

Ends using a right indent.

h3(#RichTextBuffer_endstyle). RichTextBuffer#end_style

 Boolean *end_style*()

Ends the current style.

h3(#RichTextBuffer_endsuppressundo). RichTextBuffer#end_suppress_undo

 Boolean *end_suppress_undo*()

Ends suppressing undo/redo commands.

h3(#RichTextBuffer_endsymbolbullet). RichTextBuffer#end_symbol_bullet

 Boolean *end_symbol_bullet*()

Ends using a symbol bullet.

h3(#RichTextBuffer_endstandardbullet). RichTextBuffer#end_standard_bullet

 Boolean *end_standard_bullet*()

Ends using a standard bullet.

h3(#RichTextBuffer_endtextcolour). RichTextBuffer#end_text_colour

 Boolean *end_text_colour*()

Ends using a text foreground colour.

h3(#RichTextBuffer_endunderline). RichTextBuffer#end_underline

 Boolean *end_underline*()

Ends using underline.

h3(#RichTextBuffer_endurl). RichTextBuffer#end_url

 Boolean *end_url*()

Ends applying a URL.

h3(#RichTextBuffer_findhandler). RichTextBuffer#find_handler

 "RichTextFileHandler":richtextfilehandler.html *find_handler*(%(arg-type)Integer% imageType)

Finds a handler by type.

 "RichTextFileHandler":richtextfilehandler.html *find_handler*(%(arg-type)String% extension, 
                                    %(arg-type)Integer% imageType)

Finds a handler by extension and type.

 "RichTextFileHandler":richtextfilehandler.html *find_handler*(%(arg-type)String% name)

Finds a handler by name.

h3(#RichTextBuffer_findhandlerfilenameortype). RichTextBuffer#find_handler_filename_or_type

 "RichTextFileHandler":richtextfilehandler.html *find_handler_filename_or_type*(%(arg-type)String% filename, 
                                                     %(arg-type)Integer% imageType)

Finds a handler by filename or, if supplied, type.

h3(#RichTextBuffer_getbasicstyle). RichTextBuffer#get_basic_style

 "RichTextAttr":richtextattr.html *get_basic_style*()

Gets the basic (overall) style. This is the style of the whole buffer
before further styles are applied, unlike the default style, which only
affects the style currently being applied (for example, setting the
default style to bold will cause subsequently inserted text to be bold).

h3(#RichTextBuffer_getbatchedcommand). RichTextBuffer#get_batched_command

 "RichTextCommand":richtextcommand.html *get_batched_command*()

Gets the collapsed command.

h3(#RichTextBuffer_getcommandprocessor). RichTextBuffer#get_command_processor

 "CommandProcessor":commandprocessor.html *get_command_processor*()

Gets the command processor. A text buffer always creates its own command processor when it is
initialized.

h3(#RichTextBuffer_getdefaultstyle). RichTextBuffer#get_default_style

 "RichTextAttr":richtextattr.html *get_default_style*()

Returns the current default style, affecting the style currently being applied (for example, setting the default
style to bold will cause subsequently inserted text to be bold).

h3(#RichTextBuffer_getextwildcard). RichTextBuffer#get_ext_wildcard

 String *get_ext_wildcard*(%(arg-type)Boolean% combine = false,  %(arg-type)Boolean% save = false, 
                         %(arg-type)"ArrayInt":arrayint.html% types = nil)

Gets a wildcard incorporating all visible handlers. If _types_ is present,
it will be filled with the file type corresponding to each filter. This can be
used to determine the type to pass to "load_file":#RichTextBuffer_loadfile given a selected filter.

h3(#RichTextBuffer_gethandlers). RichTextBuffer#get_handlers

 "List":list.html *get_handlers*()

Returns the list of file handlers.

h3(#RichTextBuffer_getrenderer). RichTextBuffer#get_renderer

 "RichTextRenderer":richtextrenderer.html *get_renderer*()

Returns the object to be used to render certain aspects of the content, such as bullets.

h3(#RichTextBuffer_getstyle). RichTextBuffer#get_style

 "RichTextAttr":richtextattr.html *get_style*(%(arg-type)Integer% position)

Gets the attributes at the given position.

This function gets the combined style - that is, the style you see on the screen as a result
of combining base style, paragraph style and character style attributes. To get the character
or paragraph style alone, use "get_uncombined_style":#RichTextBuffer_getuncombinedstyle.

h3(#RichTextBuffer_getstyleforrange). RichTextBuffer#get_style_for_range

 "RichTextAttr":richtextattr.html *get_style_for_range*(%(arg-type)Range% range)

This function gets a style representing the common, combined attributes
in the given range.  Attributes which have different values within the
specified range will not be included the style flags.

The function is used to get the attributes to display in the formatting
dialog: the user can edit the attributes common to the selection, and
optionally specify the values of further attributes to be applied
uniformly.

To apply the edited attributes, you can use "set_style":#RichTextBuffer_setstyle specifying
the RICHTEXT_SETSTYLE_OPTIMIZE flag, which will only apply attributes that are different
from the _combined_ attributes within the range. So, the user edits the effective, displayed attributes
for the range, but his choice won't be applied unnecessarily to content. As an example,
say the style for a paragraph specifies bold, but the paragraph text doesn't specify a weight. The
combined style is bold, and this is what the user will see on-screen and in the formatting
dialog. The user now specifies red text, in addition to bold. When applying with
SetStyle, the content font weight attributes won't be changed to bold because this is already specified
by the paragraph. However the text colour attributes _will_ be changed to
show red.

h3(#RichTextBuffer_getstylesheet). RichTextBuffer#get_style_sheet

 "RichTextStyleSheet":richtextstylesheet.html *get_style_sheet*()

Returns the current style sheet associated with the buffer, if any.

h3(#RichTextBuffer_getstylestacksize). RichTextBuffer#get_style_stack_size

 size_t *get_style_stack_size*()

Get the size of the style stack, for example to check correct nesting.

h3(#RichTextBuffer_getuncombinedstyle). RichTextBuffer#get_uncombined_style

  "RichTextAttr":richtextattr.html  *get_uncombined_style*(%(arg-type)Integer% position)

Gets the attributes at the given position.

This function gets the _uncombined style_ - that is, the attributes associated with the
paragraph or character content, and not necessarily the combined attributes you see on the
screen. To get the combined attributes, use "get_style":#RichTextBuffer_getstyle.

If you specify (any) paragraph attribute in _style_'s flags, this function will fetch
the paragraph attributes. Otherwise, it will return the character attributes.

h3(#RichTextBuffer_hittest). RichTextBuffer#hit_test

 Integer *hit_test*(%(arg-type)"DC":dc.html% dc,      %(arg-type)"Point":point.html% pt, 
                  %(arg-type)Integer% textPosition)

Finds the text position for the given position, putting the position in _textPosition_ if
one is found. _pt_ is in logical units (a zero y position is
at the beginning of the buffer).

The function returns one of the following values:



 // The point was not on this object
 #define RICHTEXT_HITTEST_NONE     0x01
 // The point was before the position returned from HitTest
 #define RICHTEXT_HITTEST_BEFORE   0x02
 // The point was after the position returned from HitTest
 #define RICHTEXT_HITTEST_AFTER    0x04
 // The point was on the position returned from HitTest
 #define RICHTEXT_HITTEST_ON       0x08
 // The point was on space outside content
 #define RICHTEXT_HITTEST_OUTSIDE  0x10
 


h3(#RichTextBuffer_init). RichTextBuffer#init

  *init*()

Initialisation.

h3(#RichTextBuffer_initstandardhandlers). RichTextBuffer#init_standard_handlers

  *init_standard_handlers*()

Initialises the standard handlers. Currently, only the plain text loading/saving handler
is initialised by default.

h3(#RichTextBuffer_inserthandler). RichTextBuffer#insert_handler

  *insert_handler*(%(arg-type)"RichTextFileHandler":richtextfilehandler.html% handler)

Inserts a handler at the front of the list.

h3(#RichTextBuffer_insertimagewithundo). RichTextBuffer#insert_image_with_undo

 Boolean *insert_image_with_undo*(%(arg-type)Integer% pos, 
                                %(arg-type)"RichTextImageBlock":richtextimageblock.html% imageBlock, 
                                %(arg-type)"RichTextCtrl":richtextctrl.html% ctrl)

Submits a command to insert the given image.

h3(#RichTextBuffer_insertnewlinewithundo). RichTextBuffer#insert_newline_with_undo

 Boolean *insert_newline_with_undo*(%(arg-type)Integer% pos, 
                                  %(arg-type)"RichTextCtrl":richtextctrl.html% ctrl)

Submits a command to insert a newline.

h3(#RichTextBuffer_inserttextwithundo). RichTextBuffer#insert_text_with_undo

 Boolean *insert_text_with_undo*(%(arg-type)Integer% pos,  %(arg-type)String% text, 
                               %(arg-type)"RichTextCtrl":richtextctrl.html% ctrl)

Submits a command to insert the given text.

h3(#RichTextBuffer_ismodified). RichTextBuffer#is_modified

 Boolean *is_modified*()

Returns  if the buffer has been modified.

h3(#RichTextBuffer_loadfile). RichTextBuffer#load_file

 Boolean *load_file*(%(arg-type)"InputStream":inputstream.html% stream, 
                   %(arg-type)Integer% type = RICHTEXT_TYPE_ANY)

Loads content from a stream.

 Boolean *load_file*(%(arg-type)String% filename,  %(arg-type)Integer% type = RICHTEXT_TYPE_ANY)

Loads content from a file.

h3(#RichTextBuffer_modify). RichTextBuffer#modify

  *modify*(%(arg-type)Boolean% modify = true)

Marks the buffer as modified or unmodified.

h3(#RichTextBuffer_numberlist). RichTextBuffer#number_list

 Boolean *number_list*(%(arg-type)Range% range, 
                     %(arg-type)"RichTextListStyleDefinition":richtextliststyledefinition.html% style, 
                     %(arg-type)Integer% flags $=$ RICHTEXT_SETSTYLE_WITH_UNDO,  %(arg-type)Integer% startFrom = -1,  %(arg-type)Integer% listLevel = -1)

 Boolean *number*(%(arg-type)Range% range,  %(arg-type)String% styleName, 
                %(arg-type)Integer% flags $=$ RICHTEXT_SETSTYLE_WITH_UNDO, 
                %(arg-type)Integer% startFrom = -1, 
                %(arg-type)Integer% listLevel = -1)

Numbers the paragraphs in the given range. Pass flags to determine how the attributes are set.
Either the style definition or the name of the style definition (in the current sheet) can be passed.

_flags_ is a bit list of the following:


* RICHTEXT_SETSTYLE_WITH_UNDO: specifies that this command will be undoable.
* RICHTEXT_SETSTYLE_RENUMBER: specifies that numbering should start from _startFrom_, otherwise existing attributes are used.
* RICHTEXT_SETSTYLE_SPECIFY_LEVEL: specifies that _listLevel_ should be used as the level for all paragraphs, otherwise the current indentation will be used.


See also "RichTextBuffer#set_list_style":richtextbuffer.html#RichTextBuffer_setliststyle, "RichTextBuffer#promote_list":richtextbuffer.html#RichTextBuffer_promotelist, "RichTextBuffer#clear_list_style":richtextbuffer.html#RichTextBuffer_clearliststyle.

h3(#RichTextBuffer_pastefromclipboard). RichTextBuffer#paste_from_clipboard

 Boolean *paste_from_clipboard*(%(arg-type)Integer% position)

Pastes the clipboard content to the buffer at the given position.

h3(#RichTextBuffer_promotelist). RichTextBuffer#promote_list

 Boolean *promote_list*(%(arg-type)Integer% promoteBy,  %(arg-type)Range% range, 
                      %(arg-type)"RichTextListStyleDefinition":richtextliststyledefinition.html% style, 
                      %(arg-type)Integer% flags $=$ RICHTEXT_SETSTYLE_WITH_UNDO, 
                      %(arg-type)Integer% listLevel = -1)

 Boolean *promote_list*(%(arg-type)Integer% promoteBy,  %(arg-type)Range% range, 
                      %(arg-type)String% styleName, 
                      %(arg-type)Integer% flags $=$ RICHTEXT_SETSTYLE_WITH_UNDO, 
                      %(arg-type)Integer% listLevel = -1)

Promotes or demotes the paragraphs in the given range. A positive _promoteBy_ produces a smaller indent, and a negative number
produces a larger indent. Pass flags to determine how the attributes are set.
Either the style definition or the name of the style definition (in the current sheet) can be passed.

_flags_ is a bit list of the following:


* RICHTEXT_SETSTYLE_WITH_UNDO: specifies that this command will be undoable.
* RICHTEXT_SETSTYLE_RENUMBER: specifies that numbering should start from _startFrom_, otherwise existing attributes are used.
* RICHTEXT_SETSTYLE_SPECIFY_LEVEL: specifies that _listLevel_ should be used as the level for all paragraphs, otherwise the current indentation will be used.


See also "RichTextBuffer#set_list_style":richtextbuffer.html#RichTextBuffer_setliststyle, See also "RichTextBuffer#set_list_style":richtextbuffer.html#RichTextBuffer_setliststyle, "RichTextBuffer#clear_list_style":richtextbuffer.html#RichTextBuffer_clearliststyle.

h3(#RichTextBuffer_removeeventhandler). RichTextBuffer#remove_event_handler

 Boolean *remove_event_handler*(%(arg-type)"EvtHandler":evthandler.html% handler, 
                              %(arg-type)Boolean% deleteHandler = false)

Removes an event handler from the buffer's list of handlers, deleting the object if _deleteHandler_ is .

h3(#RichTextBuffer_removehandler). RichTextBuffer#remove_handler

 Boolean *remove_handler*(%(arg-type)String% name)

Removes a handler.

h3(#RichTextBuffer_resetandclearcommands). RichTextBuffer#reset_and_clear_commands

  *reset_and_clear_commands*()

Clears the buffer, adds a new blank paragraph, and clears the command history.

h3(#RichTextBuffer_savefile). RichTextBuffer#save_file

 Boolean *save_file*(%(arg-type)"OutputStream":outputstream.html% stream, 
                   %(arg-type)Integer% type = RICHTEXT_TYPE_ANY)

Saves content to a stream.

 Boolean *save_file*(%(arg-type)String% filename,  %(arg-type)Integer% type = RICHTEXT_TYPE_ANY)

Saves content to a file.

h3(#RichTextBuffer_setbasicstyle). RichTextBuffer#set_basic_style

  *set_basic_style*(%(arg-type)"RichTextAttr":richtextattr.html% style)

Sets the basic (overall) style. This is the style of the whole
buffer before further styles are applied, unlike the default style, which
only affects the style currently being applied (for example, setting the default
style to bold will cause subsequently inserted text to be bold).

h3(#RichTextBuffer_setdefaultstyle). RichTextBuffer#set_default_style

  *set_default_style*(%(arg-type)"RichTextAttr":richtextattr.html% style)

Sets the default style, affecting the style currently being applied (for example, setting the default
style to bold will cause subsequently inserted text to be bold).

This is not cumulative - setting the default style will replace the previous default style.

h3(#RichTextBuffer_setliststyle). RichTextBuffer#set_list_style

 Boolean *set_list_style*(%(arg-type)Range% range, 
                        %(arg-type)"RichTextListStyleDefinition":richtextliststyledefinition.html% style, 
                        %(arg-type)Integer% flags $=$ RICHTEXT_SETSTYLE_WITH_UNDO,  %(arg-type)Integer% startFrom = -1,  %(arg-type)Integer% listLevel = -1)

 Boolean *set_list_style*(%(arg-type)Range% range,  %(arg-type)String% styleName, 
                        %(arg-type)Integer% flags $=$ RICHTEXT_SETSTYLE_WITH_UNDO, 
                        %(arg-type)Integer% startFrom = -1, 
                        %(arg-type)Integer% listLevel = -1)

Sets the list attributes for the given range, passing flags to determine how the attributes are set.
Either the style definition or the name of the style definition (in the current sheet) can be passed.

_flags_ is a bit list of the following:


* RICHTEXT_SETSTYLE_WITH_UNDO: specifies that this command will be undoable.
* RICHTEXT_SETSTYLE_RENUMBER: specifies that numbering should start from _startFrom_, otherwise existing attributes are used.
* RICHTEXT_SETSTYLE_SPECIFY_LEVEL: specifies that _listLevel_ should be used as the level for all paragraphs, otherwise the current indentation will be used.


See also "RichTextBuffer#number_list":richtextbuffer.html#RichTextBuffer_numberlist, "RichTextBuffer#promote_list":richtextbuffer.html#RichTextBuffer_promotelist, "RichTextBuffer#clear_list_style":richtextbuffer.html#RichTextBuffer_clearliststyle.

h3(#RichTextBuffer_setrenderer). RichTextBuffer#set_renderer

  *set_renderer*(%(arg-type)"RichTextRenderer":richtextrenderer.html% renderer)

Sets _renderer_ as the object to be used to render certain aspects of the content, such as bullets.
You can override default rendering by deriving a new class from RichTextRenderer or RichTextStdRenderer,
overriding one or more virtual functions, and setting an instance of the class using this function.

h3(#RichTextBuffer_setstyle). RichTextBuffer#set_style

 Boolean *set_style*(%(arg-type)Range% range,  %(arg-type)"RichTextAttr":richtextattr.html% style, 
                   %(arg-type)Integer% flags = RICHTEXT_SETSTYLE_WITH_UNDO)


Sets the attributes for the given range. Pass flags to determine how the attributes are set.

The end point of range is specified as the last character position of the span of text.
So, for example, to set the style for a character at position 5, use the range (5,5).
This differs from the RichTextCtrl API, where you would specify (5,6).

_flags_ may contain a bit list of the following values:


* RICHTEXT_SETSTYLE_NONE: no style flag.
* RICHTEXT_SETSTYLE_WITH_UNDO: specifies that this operation should be undoable.
* RICHTEXT_SETSTYLE_OPTIMIZE: specifies that the style should not be applied if the
combined style at this point is already the style in question.
* RICHTEXT_SETSTYLE_PARAGRAPHS_ONLY: specifies that the style should only be applied to paragraphs,
and not the content. This allows content styling to be preserved independently from that of e.g. a named paragraph style.
* RICHTEXT_SETSTYLE_CHARACTERS_ONLY: specifies that the style should only be applied to characters,
and not the paragraph. This allows content styling to be preserved independently from that of e.g. a named paragraph style.
* RICHTEXT_SETSTYLE_RESET: resets (clears) the existing style before applying the new style.
* RICHTEXT_SETSTYLE_REMOVE: removes the specified style. Only the style flags are used in this operation.


h3(#RichTextBuffer_setstylesheet). RichTextBuffer#set_style_sheet

  *set_style_sheet*(%(arg-type)"RichTextStyleSheet":richtextstylesheet.html% styleSheet)

Sets the current style sheet, if any. This will allow the application to use
named character and paragraph styles found in the style sheet.

h3(#RichTextBuffer_submitaction). RichTextBuffer#submit_action

 Boolean *submit_action*(%(arg-type)"RichTextAction":richtextaction.html% action)

Submit an action immediately, or delay it according to whether collapsing is on.

h3(#RichTextBuffer_suppressingundo). RichTextBuffer#suppressing_undo

 Boolean *suppressing_undo*()

Returns  if undo suppression is currently on.

