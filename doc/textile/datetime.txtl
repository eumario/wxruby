h1(#wxdatetime). Wx::DateTime

DateTime class represents an absolute moment in the time.

h2. Types

The type @DateTime_t@ is typedefed as @unsigned short@ and is used
to contain the number of years, hours, minutes, seconds and milliseconds.

h2. Constants

Global constant @DefaultDateTime@ and synonym for it @InvalidDateTime@ are defined. This constant will be different from any valid
DateTime object.

All the following constants are defined inside DateTime class (i.e., to refer to
them you should prepend their names with @DateTime::@).

Time zone symbolic names:


     enum TZ
     {
         // the time in the current time zone
         Local,
 
         // zones from GMT (= Greenwhich Mean Time): they're guaranteed to be
         // consequent numbers, so writing something like `GMT0 + offset' is
         // safe if abs(offset) <= 12
 
         // underscore stands for minus
         GMT_12, GMT_11, GMT_10, GMT_9, GMT_8, GMT_7,
         GMT_6, GMT_5, GMT_4, GMT_3, GMT_2, GMT_1,
         GMT0,
         GMT1, GMT2, GMT3, GMT4, GMT5, GMT6,
         GMT7, GMT8, GMT9, GMT10, GMT11, GMT12,
         // Note that GMT12 and GMT_12 are not the same: there is a difference
         // of exactly one day between them
 
         // some symbolic names for TZ
 
         // Europe
         WET = GMT0,                         // Western Europe Time
         WEST = GMT1,                        // Western Europe Summer Time
         CET = GMT1,                         // Central Europe Time
         CEST = GMT2,                        // Central Europe Summer Time
         EET = GMT2,                         // Eastern Europe Time
         EEST = GMT3,                        // Eastern Europe Summer Time
         MSK = GMT3,                         // Moscow Time
         MSD = GMT4,                         // Moscow Summer Time
 
         // US and Canada
         AST = GMT_4,                        // Atlantic Standard Time
         ADT = GMT_3,                        // Atlantic Daylight Time
         EST = GMT_5,                        // Eastern Standard Time
         EDT = GMT_4,                        // Eastern Daylight Saving Time
         CST = GMT_6,                        // Central Standard Time
         CDT = GMT_5,                        // Central Daylight Saving Time
         MST = GMT_7,                        // Mountain Standard Time
         MDT = GMT_6,                        // Mountain Daylight Saving Time
         PST = GMT_8,                        // Pacific Standard Time
         PDT = GMT_7,                        // Pacific Daylight Saving Time
         HST = GMT_10,                       // Hawaiian Standard Time
         AKST = GMT_9,                       // Alaska Standard Time
         AKDT = GMT_8,                       // Alaska Daylight Saving Time
 
         // Australia
 
         A_WST = GMT8,                       // Western Standard Time
         A_CST = GMT12 + 1,                  // Central Standard Time (+9.5)
         A_EST = GMT10,                      // Eastern Standard Time
         A_ESST = GMT11,                     // Eastern Summer Time
 
         // Universal Coordinated Time = the new and politically correct name
         // for GMT
         UTC = GMT0
     };
 

Month names: Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec and
Inv_Month for an invalid.month value are the values of @DateTime::Month@
enum.

Likewise, Sun, Mon, Tue, Wed, Thu, Fri, Sat, and Inv_WeekDay are the values in
@DateTime::WeekDay@ enum.

Finally, Inv_Year is defined to be an invalid value for year parameter.

"get_month_name()":#DateTime_getmonthname() and
"get_week_day_name":#DateTime_getweekdayname functions use the following
flags:


     enum NameFlags
     {
         Name_Full = 0x01,       // return full name
         Name_Abbr = 0x02        // return abbreviated name
     };
 

Several functions accept an extra parameter specifying the calendar to use
(although most of them only support now the Gregorian calendar). This
parameters is one of the following values:


     enum Calendar
     {
         Gregorian,  // calendar currently in use in Western countries
         Julian      // calendar in use since -45 until the 1582 (or later)
     };
 

Date calculations often depend on the country and DateTime allows to set the
country whose conventions should be used using
"set_country":#DateTime_setcountry. It takes one of the following
values as parameter:


     enum Country
     {
         Country_Unknown, // no special information for this country
         Country_Default, // set the default country with SetCountry() method
                          // or use the default country with any other
 
         Country_WesternEurope_Start,
         Country_EEC = Country_WesternEurope_Start,
         France,
         Germany,
         UK,
         Country_WesternEurope_End = UK,
 
         Russia,
 
         USA
     };
 

Different parts of the world use different conventions for the week start.
In some countries, the week starts on Sunday, while in others -- on Monday.
The ISO standard doesn't address this issue, so we support both conventions in
the functions whose result depends on it ("get_week_of_year":#DateTime_getweekofyear and
"get_week_of_month":#DateTime_getweekofmonth).

The desired behvaiour may be specified by giving one of the following
constants as argument to these functions:


     enum WeekFlags
     {
         Default_First,   // Sunday_First for US, Monday_First for the rest
         Monday_First,    // week starts with a Monday
         Sunday_First     // week starts with a Sunday
     };
 

h2. Derived from

No base class

h2. See also

"Date classes overview":datetimeoverview.html, "TimeSpan":timespan.html, "DateSpan":datespan.html, "CalendarCtrl":calendarctrl.html

h2. Function groups


h3(#datetimestaticfunctions). Static functions

For convenience, all static functions are collected here. These functions
either set or return the static variables of DateSpan (the country), return
the current moment, year, month or number of days in it, or do some general
calendar-related actions.

Please note that although several function accept an extra _Calendar_
parameter, it is currently ignored as only the Gregorian calendar is
supported. Future versions will support other calendars.



"set_country":#DateTime_setcountry

"get_country":#DateTime_getcountry

"is_west_european_country":#DateTime_iswesteuropeancountry

"get_current_year":#DateTime_getcurrentyear

"convert_year_to_bc":#DateTime_convertyeartobc

"get_current_month":#DateTime_getcurrentmonth

"is_leap_year":#DateTime_isleapyear

"get_century":#DateTime_getcentury

"get_number_of_days":#DateTime_getnumberofdays

"get_number_of_days":#DateTime_getnumberofdays

"get_month_name":#DateTime_getmonthname

"get_week_day_name":#DateTime_getweekdayname

"get_am_pm_strings":#DateTime_getampmstrings

"IsDSTApplicable":datetimeisdstapplicable.html

"get_begin_dst":#DateTime_getbegindst

"get_end_dst":#DateTime_getenddst

"Now":datetimenow.html

"UNow":datetimeunow.html

"Today":datetimetoday.html


h3(#datetimeconstructors). Constructors, assignment operators and setters

Constructors and various @Set()@ methods are collected here. If you
construct a date object from separate values for day, month and year, you
should use "is_valid":#DateTime_isvalid method to check that the
values were correct as constructors can not return an error code.

"DateTime()":datetimewxdatetimedef.html

"DateTime(time_t)":datetimewxdatetimetimet.html

"DateTime(struct tm)":datetimewxdatetimetm.html

"DateTime(double jdn)":datetimewxdatetimejdn.html

"DateTime(h, m, s, ms)":datetimewxdatetimetime.html

"DateTime(day, mon, year, h, m, s, ms)":datetimewxdatetimedate.html

"set_to_current":#DateTime_settocurrent

"Set(time_t)":datetimesettimet.html

"Set(struct tm)":datetimesettm.html

"Set(double jdn)":datetimesetjdn.html

"Set(h, m, s, ms)":datetimesettime.html

"Set(day, mon, year, h, m, s, ms)":datetimesetdate.html

"set_from_dos(unsigned long ddt)":#DateTime_setfromdos(unsigned long ddt)

"reset_time":#DateTime_resettime

"set_year":#DateTime_setyear

"set_month":#DateTime_setmonth

"set_day":#DateTime_setday

"set_hour":#DateTime_sethour

"set_minute":#DateTime_setminute

"set_second":#DateTime_setsecond

"set_millisecond":#DateTime_setmillisecond

"operator$=$(time_t)":datetimeoperatoreqtimet.html

"operator$=$(struct tm)":datetimeoperatoreqtm.html 

h3(#datetimeaccessors). Accessors

Here are the trivial accessors. Other functions, which might have to perform
some more complicated calculations to find the answer are under the
"Calendar calculations":datetimecalculations.html section.

"is_valid":#DateTime_isvalid

"get_ticks":#DateTime_getticks

"get_year":#DateTime_getyear

"get_month":#DateTime_getmonth

"get_day":#DateTime_getday

"get_week_day":#DateTime_getweekday

"get_hour":#DateTime_gethour

"get_minute":#DateTime_getminute

"get_second":#DateTime_getsecond

"get_millisecond":#DateTime_getmillisecond

"get_day_of_year":#DateTime_getdayofyear

"get_week_of_year":#DateTime_getweekofyear

"get_week_of_month":#DateTime_getweekofmonth

"get_year_day":#DateTime_getyearday

"is_work_day":#DateTime_isworkday

"is_gregorian_date":#DateTime_isgregoriandate

"get_as_dos":#DateTime_getasdos


h3(#datecomparison). Date comparison

There are several function to allow date comparison. To supplement them, a few
global operators $>$, $<$ etc taking DateTime are defined.

"is_equal_to":#DateTime_isequalto

"is_earlier_than":#DateTime_isearlierthan

"is_later_than":#DateTime_islaterthan

"is_strictly_between":#DateTime_isstrictlybetween

"is_between":#DateTime_isbetween

"is_same_date":#DateTime_issamedate

"is_same_time":#DateTime_issametime

"is_equal_up_to":#DateTime_isequalupto


h3(#datearithmetics). Date arithmetics

These functions carry out "arithmetics":tdatearithm.html on the DateTime
objects. As explained in the overview, either TimeSpan or DateSpan may be
added to DateTime, hence all functions are overloaded to accept both
arguments.

Also, both @Add()@ and @Subtract()@ have both const and non-const
version. The first one returns a new object which represents the
sum/difference of the original one with the argument while the second form
modifies the object to which it is applied. The operators $-=$ and $+=$ are
defined to be equivalent to the second forms of these functions.

"Add(TimeSpan)":datetimeaddts.html

"Add(DateSpan)":datetimeaddds.html

"Subtract(TimeSpan)":datetimesubtractts.html

"Subtract(DateSpan)":datetimesubtractds.html

"Subtract(DateTime)":datetimesubtractdt.html

"oparator$+=$(TimeSpan)":datetimeaddts.html

"oparator$+=$(DateSpan)":datetimeaddds.html

"oparator$-=$(TimeSpan)":datetimesubtractts.html

"oparator$-=$(DateSpan)":datetimesubtractds.html


h3(#datetimeparsing). Parsing and formatting dates

These functions convert DateTime objects to and from text. The
conversions to text are mostly trivial: you can either do it using the default
date and time representations for the current locale (
"format_date":#DateTime_formatdate and
"format_time":#DateTime_formattime), using the international standard
representation defined by ISO 8601 (
"FormatISODate":datetimeformatisodate.html and
"FormatISOTime":datetimeformatisotime.html) or by specifying any format
at all and using "Format":datetimeformat.html directly.

The conversions from text are more interesting, as there are much more
possibilities to care about. The simplest cases can be taken care of with
"parse_format":#DateTime_parseformat which can parse any date in the
given (rigid) format. "parse_rfc_822__date":#DateTime_parserfc822date is
another function for parsing dates in predefined format -- the one of RFC 822
which (still...) defines the format of email messages on the Internet. This
format can not be described with @strptime(3)@-like format strings used by
"Format":datetimeformat.html, hence the need for a separate function.

But the most interesting functions are
"parse_time":#DateTime_parsetime,
"parse_date":#DateTime_parsedate and
"parse_date_time":#DateTime_parsedatetime. They try to parse the date
ans time (or only one of them) in `free' format, i.e. allow them to be
specified in any of possible ways. These functions will usually be used to
parse the (interactive) user input which is not bound to be in any predefined
format. As an example, "parse_date_time":#DateTime_parsedatetime can
parse the strings such as @"tomorrow"@, @"March first"@ and even
@"next Sunday"@.

"parse_rfc_822__date":#DateTime_parserfc822date

"parse_format":#DateTime_parseformat

"parse_date_time":#DateTime_parsedatetime

"parse_date":#DateTime_parsedate

"parse_time":#DateTime_parsetime

"Format":datetimeformat.html

"format_date":#DateTime_formatdate

"format_time":#DateTime_formattime

"FormatISODate":datetimeformatisodate.html

"FormatISOTime":datetimeformatisotime.html


h3(#datetimecalculations). Calendar calculations

The functions in this section perform the basic calendar calculations, mostly
related to the week days. They allow to find the given week day in the
week with given number (either in the month or in the year) and so on.

All (non-const) functions in this section don't modify the time part of the
DateTime -- they only work with the date part of it.

"set_to_week_day_in_same_week":#DateTime_settoweekdayinsameweek

"get_week_day_in_same_week":#DateTime_getweekdayinsameweek

"set_to_next_week_day":#DateTime_settonextweekday

"get_next_week_day":#DateTime_getnextweekday

"set_to_prev_week_day":#DateTime_settoprevweekday

"get_prev_week_day":#DateTime_getprevweekday

"set_to_week_day":#DateTime_settoweekday

"get_week_day":#DateTime_getweekday

"set_to_last_week_day":#DateTime_settolastweekday

"get_last_week_day":#DateTime_getlastweekday

"set_to_week_of_year":#DateTime_settoweekofyear

"set_to_last_month_day":#DateTime_settolastmonthday

"get_last_month_day":#DateTime_getlastmonthday

"set_to_year_day":#DateTime_settoyearday

"get_year_day":#DateTime_getyearday


h3(#astronomyhistoryfunctions). Astronomical/historical functions

Some degree of support for the date units used in astronomy and/or history is
provided. You can construct a DateTime object from a
"JDN":datetimesetjdn.html and you may also get its JDN,
"MJD":datetimegetmodifiedjuliandaynumber.html or
"Rata Die number":datetimegetratadie.html from it.

"DateTime(double jdn)":datetimewxdatetimejdn.html

"Set(double jdn)":datetimesetjdn.html

"get_julian_day_number":#DateTime_getjuliandaynumber

"GetJDN":datetimegetjdn.html

"get_modified_julian_day_number":#DateTime_getmodifiedjuliandaynumber

"GetMJD":datetimegetmjd.html

"get_rata_die":#DateTime_getratadie


h3(#datetimedstzone). Time zone and DST support

Please see the "time zone overview":tdatetimezones.html for more
information about time zones. Normally, these functions should be rarely used.

"from_timezone":#DateTime_fromtimezone

"to_timezone":#DateTime_totimezone

"make_timezone":#DateTime_maketimezone

"make_from_timezone":#DateTime_makefromtimezone

"ToUTC":datetimetoutc.html

"MakeUTC":datetimemakeutc.html

"get_begin_dst":#DateTime_getbegindst

"get_end_dst":#DateTime_getenddst

"IsDST":datetimeisdst.html

2

h4. Members





h3(#DateTime_convertyeartobc). DateTime#convert_year_to_bc

 Integer *convert_year_to_bc*(%(arg-type)Integer% year)

Converts the year in absolute notation (i.e. a number which can be negative,
positive or zero) to the year in BC/AD notation. For the positive years,
nothing is done, but the year 0 is year 1 BC and so for other years there is a
difference of 1.

This function should be used like this:


     DateTime dt(...);
     int y = dt.GetYear();
     printf("The year is 


h3(#DateTime_getampmstrings). DateTime#get_am_pm_strings

  *get_am_pm_strings*(%(arg-type)String% am,  %(arg-type)String% pm)

Returns the translations of the strings @AM@ and @PM@ used for time
formatting for the current locale. Either of the pointers may be @NULL@ if
the corresponding value is not needed.


h3(#DateTime_getbegindst). DateTime#get_begin_dst

 "DateTime":datetime.html *get_begin_dst*(%(arg-type)Integer% year = Inv_Year, 
                          %(arg-type)Country% country = Country_Default)

Get the beginning of DST for the given country in the given year (current one
by default). This function suffers from limitations described in
"DST overview":tdatedst.html.

h4. See also

"get_end_dst":#DateTime_getenddst


h3(#DateTime_getcountry). DateTime#get_country

 Country *get_country*()

Returns the current default country. The default country is used for DST
calculations, for example.

h4. See also

"set_country":#DateTime_setcountry


h3(#DateTime_getcurrentyear). DateTime#get_current_year

 Integer *get_current_year*(%(arg-type)Calendar% cal = Gregorian)

Get the current year in given calendar (only Gregorian is currently supported).


h3(#DateTime_getcurrentmonth). DateTime#get_current_month

 Month *get_current_month*(%(arg-type)Calendar% cal = Gregorian)

Get the current month in given calendar (only Gregorian is currently supported).


h3(#DateTime_getcentury). DateTime#get_century

 Integer *get_century*(%(arg-type)Integer% year = Inv_Year)

Get the current century, i.e. first two digits of the year, in given calendar
(only Gregorian is currently supported).


h3(#DateTime_getenddst). DateTime#get_end_dst

 "DateTime":datetime.html *get_end_dst*(%(arg-type)Integer% year = Inv_Year, 
                        %(arg-type)Country% country = Country_Default)

Returns the end of DST for the given country in the given year (current one by
default).

h4. See also

"get_begin_dst":#DateTime_getbegindst


h3(#DateTime_getmonthname). DateTime#get_month_name

 String *get_month_name*(%(arg-type)Month% month,  %(arg-type)NameFlags% flags = Name_Full)

Gets the full (default) or abbreviated (specify @Name_Abbr@ name of the
given month.

h4. See also

"get_week_day_name":#DateTime_getweekdayname


h3(#DateTime_getnumberofdays). DateTime#get_number_of_days

 "DateTime_t":datetime_t.html *get_number_of_days*(%(arg-type)Integer% year, 
                                 %(arg-type)Calendar% cal = Gregorian)

 "DateTime_t":datetime_t.html *get_number_of_days*(%(arg-type)Month% month, 
                                 %(arg-type)Integer% year = Inv_Year, 
                                 %(arg-type)Calendar% cal = Gregorian)

Returns the number of days in the given year or in the given month of the
year.

The only supported value for _cal_ parameter is currently @Gregorian@.




h3(#DateTime_gettimenow). DateTime#get_time_now

 time_t *get_time_now*()

Returns the current time.


h3(#DateTime_gettmnow). DateTime#get_tm_now

 struct tm *get_tm_now*()

Returns the current time broken down.


h3(#DateTime_getweekdayname). DateTime#get_week_day_name

 String *get_week_day_name*(%(arg-type)WeekDay% weekday,  %(arg-type)NameFlags% flags = Name_Full)

Gets the full (default) or abbreviated (specify @Name_Abbr@ name of the
given week day.

h4. See also

"get_month_name":#DateTime_getmonthname


h3(#DateTime_isleapyear). DateTime#is_leap_year

 Boolean *is_leap_year*(%(arg-type)Integer% year = Inv_Year,  %(arg-type)Calendar% cal = Gregorian)

Returns @true@ if the _year_ is a leap one in the specified calendar.

This functions supports Gregorian and Julian calendars.


h3(#DateTime_iswesteuropeancountry). DateTime#is_west_european_country

 Boolean *is_west_european_country*(%(arg-type)Country% country = Country_Default)

This function returns @true@ if the specified (or default) country is one
of Western European ones. It is used internally by DateTime to determine the
DST convention and date and time formatting rules.


h3(#DateTime_isdstapplicable). DateTime#is_dst_applicable

 Boolean *is_dst_applicable*(%(arg-type)Integer% year = Inv_Year, 
                           %(arg-type)Country% country = Country_Default)

Returns @true@ if DST was used n the given year (the current one by
default) in the given country.


h3(#DateTime_now). DateTime#now

 "DateTime":datetime.html *now*()

Returns the object corresponding to the current time.

Example:


     DateTime now = DateTime::Now();
     printf("Current time in Paris:\t

Note that this function is accurate up to second:
"DateTime#unow":datetime.html#DateTime_unow should be used for better precision
(but it is less efficient and might not be available on all platforms).

h4. See also

"Today":datetimetoday.html


h3(#DateTime_setcountry). DateTime#set_country

  *set_country*(%(arg-type)Country% country)

Sets the country to use by default. This setting influences the DST
calculations, date formatting and other things.

The possible values for _country_ parameter are enumerated in
"DateTime constants section":datetime.html.

h4. See also

"get_country":#DateTime_getcountry


h3(#DateTime_today). DateTime#today

 "DateTime":datetime.html *today*()

Returns the object corresponding to the midnight of the current day (i.e. the
same as "Now()":datetimenow.html, but the time part is set to $0$).

h4. See also

"Now":datetimenow.html


h3(#DateTime_unow). DateTime#unow

 "DateTime":datetime.html *unow*()

Returns the object corresponding to the current time including the
milliseconds if a function to get time with such precision is available on the
current platform (supported under most Unices and Win32).

h4. See also

"Now":datetimenow.html



h3(#DateTime_wxdatetimedef). DateTime.new

h3(#DateTime_wxdatetimetimet). DateTime.new

 "DateTime":datetime.html *DateTime.new*(%(arg-type)time_t% timet)

Same as "Set":datetimewxdatetimetimet.html.




h3(#DateTime_wxdatetimetm). DateTime.new

 "DateTime":datetime.html *DateTime.new*(%(arg-type)struct tm% tm)

Same as "Set":datetimewxdatetimetm.html




h3(#DateTime_wxdatetimejdn). DateTime.new

 "DateTime":datetime.html *DateTime.new*(%(arg-type)double% jdn)

Same as "Set":datetimewxdatetimejdn.html




h3(#DateTime_wxdatetimetime). DateTime.new

 "DateTime":datetime.html *DateTime.new*(%(arg-type)DateTime_t% hour, 
                         %(arg-type)DateTime_t% minute = 0, 
                         %(arg-type)DateTime_t% second = 0, 
                         %(arg-type)DateTime_t% millisec = 0)

Same as "Set":datetimewxdatetimetime.html




h3(#DateTime_wxdatetimedate). DateTime.new

 "DateTime":datetime.html *DateTime.new*(%(arg-type)DateTime_t% day, 
                         %(arg-type)Month% month = Inv_Month,  %(arg-type)Integer% Inv_Year, %(arg-type)DateTime_t% hour = 0, 
                         %(arg-type)DateTime_t% minute = 0, 
                         %(arg-type)DateTime_t% second = 0, 
                         %(arg-type)DateTime_t% millisec = 0)

Same as "Set":datetimesetdate.html




h3(#DateTime_settocurrent). DateTime#set_to_current

 "DateTime":datetime.html *set_to_current*()

Sets the date and time of to the current values. Same as assigning the result
of "Now()":datetimenow.html to this object.


h3(#DateTime_settimet). DateTime#set

 "DateTime":datetime.html *set*(%(arg-type)time_t% timet)

Constructs the object from _timet_ value holding the number of seconds
since Jan 1, 1970.




h3(#DateTime_settm). DateTime#set

 "DateTime":datetime.html *set*(%(arg-type)struct tm% tm)

Sets the date and time from the broken down representation in the standard
@tm@ structure.




h3(#DateTime_setjdn). DateTime#set

 "DateTime":datetime.html *set*(%(arg-type)double% jdn)

Sets the date from the so-called _Julian Day Number_.

By definition, the Julian Day Number, usually abbreviated as JDN, of a
particular instant is the fractional number of days since 12 hours Universal
Coordinated Time (Greenwich mean noon) on January 1 of the year -4712 in the
Julian proleptic calendar.




h3(#DateTime_settime). DateTime#set

 "DateTime":datetime.html *set*(%(arg-type)DateTime_t% hour,  %(arg-type)DateTime_t% minute = 0, 
                %(arg-type)DateTime_t% second = 0, 
                %(arg-type)DateTime_t% millisec = 0)

Sets the date to be equal to "Today":datetimetoday.html and the time
from supplied parameters.




h3(#DateTime_setdate). DateTime#set

 "DateTime":datetime.html *set*(%(arg-type)DateTime_t% day,  %(arg-type)Month% month = Inv_Month, 
                %(arg-type)Integer% year = Inv_Year, 
                %(arg-type)DateTime_t% hour = 0, 
                %(arg-type)DateTime_t% minute = 0, 
                %(arg-type)DateTime_t% second = 0, 
                %(arg-type)DateTime_t% millisec = 0)

Sets the date and time from the parameters.


h3(#DateTime_resettime). DateTime#reset_time

 "DateTime":datetime.html *reset_time*()

Reset time to midnight (00:00:00) without changing the date.


h3(#DateTime_setyear). DateTime#set_year

 "DateTime":datetime.html *set_year*(%(arg-type)Integer% year)

Sets the year without changing other date components.


h3(#DateTime_setmonth). DateTime#set_month

 "DateTime":datetime.html *set_month*(%(arg-type)Month% month)

Sets the month without changing other date components.


h3(#DateTime_setday). DateTime#set_day

 "DateTime":datetime.html *set_day*(%(arg-type)DateTime_t% day)

Sets the day without changing other date components.


h3(#DateTime_sethour). DateTime#set_hour

 "DateTime":datetime.html *set_hour*(%(arg-type)DateTime_t% hour)

Sets the hour without changing other date components.


h3(#DateTime_setminute). DateTime#set_minute

 "DateTime":datetime.html *set_minute*(%(arg-type)DateTime_t% minute)

Sets the minute without changing other date components.


h3(#DateTime_setsecond). DateTime#set_second

 "DateTime":datetime.html *set_second*(%(arg-type)DateTime_t% second)

Sets the second without changing other date components.


h3(#DateTime_setmillisecond). DateTime#set_millisecond

 "DateTime":datetime.html *set_millisecond*(%(arg-type)DateTime_t% millisecond)

Sets the millisecond without changing other date components.


h3(#DateTime_operatoreqtimet). DateTime#=

 "DateTime":datetime.html *operator*(%(arg-type)time_t% timet)

Same as "Set":datetimesettimet.html.


h3(#DateTime_operatoreqtm). DateTime#=

 "DateTime":datetime.html *operator*(%(arg-type)struct tm% tm)

Same as "Set":datetimesettm.html.



h3(#DateTime_isvalid). DateTime#is_valid

 Boolean *is_valid*()

Returns @true@ if the object represents a valid time moment.


h3(#DateTime_gettm). DateTime#get_tm

 Tm *get_tm*(%(arg-type)TimeZone% tz = Local)

Returns broken down representation of the date and time.


h3(#DateTime_getticks). DateTime#get_ticks

 time_t *get_ticks*()

Returns the number of seconds since Jan 1, 1970. An assert failure will occur
if the date is not in the range covered by @time_t@ type.


h3(#DateTime_getyear). DateTime#get_year

 Integer *get_year*(%(arg-type)TimeZone% tz = Local)

Returns the year in the given timezone (local one by default).


h3(#DateTime_getmonth). DateTime#get_month

 Month *get_month*(%(arg-type)TimeZone% tz = Local)

Returns the month in the given timezone (local one by default).


h3(#DateTime_getday). DateTime#get_day

 "DateTime_t":datetime_t.html *get_day*(%(arg-type)TimeZone% tz = Local)

Returns the day in the given timezone (local one by default).


h3(#DateTime_getweekday). DateTime#get_week_day

 WeekDay *get_week_day*(%(arg-type)TimeZone% tz = Local)

Returns the week day in the given timezone (local one by default).


h3(#DateTime_gethour). DateTime#get_hour

 "DateTime_t":datetime_t.html *get_hour*(%(arg-type)TimeZone% tz = Local)

Returns the hour in the given timezone (local one by default).


h3(#DateTime_getminute). DateTime#get_minute

 "DateTime_t":datetime_t.html *get_minute*(%(arg-type)TimeZone% tz = Local)

Returns the minute in the given timezone (local one by default).


h3(#DateTime_getsecond). DateTime#get_second

 "DateTime_t":datetime_t.html *get_second*(%(arg-type)TimeZone% tz = Local)

Returns the seconds in the given timezone (local one by default).


h3(#DateTime_getmillisecond). DateTime#get_millisecond

 "DateTime_t":datetime_t.html *get_millisecond*(%(arg-type)TimeZone% tz = Local)

Returns the milliseconds in the given timezone (local one by default).


h3(#DateTime_getdayofyear). DateTime#get_day_of_year

 "DateTime_t":datetime_t.html *get_day_of_year*(%(arg-type)TimeZone% tz = Local)

Returns the day of the year (in $1$ range) in the given timezone
(local one by default).


h3(#DateTime_getweekofyear). DateTime#get_week_of_year

 "DateTime_t":datetime_t.html *get_week_of_year*(%(arg-type)WeekFlags% flags = Monday_First, 
                               %(arg-type)TimeZone% tz = Local)

Returns the number of the week of the year this date is in. The first week of
the year is, according to international standards, the one containing Jan 4 or,
equivalently, the first week which has Thursday in this year. Both of these
definitions are the same as saying that the first week of the year must contain
more than half of its days in this year. Accordingly, the week number will
always be in $1$ range ($52$ for non leap years).

The function depends on the "week start":datetime.html convention
specified by the _flags_ argument but its results for
@Sunday_First@ are not well-defined as the ISO definition quoted above
applies to the weeks starting on Monday only.


h3(#DateTime_getweekofmonth). DateTime#get_week_of_month

 "DateTime_t":datetime_t.html *get_week_of_month*(%(arg-type)WeekFlags% flags = Monday_First, 
                                %(arg-type)TimeZone% tz = Local)

Returns the ordinal number of the week in the month (in $1$  range).

As "get_week_of_year":#DateTime_getweekofyear, this function supports
both conventions for the week start. See the description of these
"week start":datetime.html conventions.


h3(#DateTime_isworkday). DateTime#is_work_day

 Boolean *is_work_day*(%(arg-type)Country% country = Country_Default)

Returns @true@ is this day is not a holiday in the given country.


h3(#DateTime_isgregoriandate). DateTime#is_gregorian_date

 Boolean *is_gregorian_date*(%(arg-type)GregorianAdoption% country = Gr_Standard)

Returns @true@ if the given date is later than the date of adoption of the
Gregorian calendar in the given country (and hence the Gregorian calendar
calculations make sense for it).



h3(#DateTime_setfromdos). DateTime#set_from_dos

 "DateTime":datetime.html *set*(%(arg-type)Integer% ddt)

Sets the date from the date and time in
DOShttp://developer.novell.com/ndk/doc/smscomp/index.html?page=/ndk/doc/smscomp/sms_docs/data/hc2vlu5i.html
format.


h3(#DateTime_getasdos). DateTime#get_as_dos

 Integer *get_as_dos*()

Returns the date and time in
DOShttp://developer.novell.com/ndk/doc/smscomp/index.html?page=/ndk/doc/smscomp/sms_docs/data/hc2vlu5i.html
format.



h3(#DateTime_isequalto). DateTime#is_equal_to

 Boolean *is_equal_to*(%(arg-type)DateTime% datetime)

Returns @true@ if the two dates are strictly identical.


h3(#DateTime_isearlierthan). DateTime#is_earlier_than

 Boolean *is_earlier_than*(%(arg-type)DateTime% datetime)

Returns @true@ if this date precedes the given one.


h3(#DateTime_islaterthan). DateTime#is_later_than

 Boolean *is_later_than*(%(arg-type)DateTime% datetime)

Returns @true@ if this date is later than the given one.


h3(#DateTime_isstrictlybetween). DateTime#is_strictly_between

 Boolean *is_strictly_between*(%(arg-type)DateTime% t1,  %(arg-type)DateTime% t2)

Returns @true@ if this date lies strictly between the two others,

h4. See also

"is_between":#DateTime_isbetween


h3(#DateTime_isbetween). DateTime#is_between

 Boolean *is_between*(%(arg-type)DateTime% t1,  %(arg-type)DateTime% t2)

Returns @true@ if "is_strictly_between":#DateTime_isstrictlybetween
is @true@ or if the date is equal to one of the limit values.

h4. See also

"is_strictly_between":#DateTime_isstrictlybetween


h3(#DateTime_issamedate). DateTime#is_same_date

 Boolean *is_same_date*(%(arg-type)DateTime% dt)

Returns @true@ if the date is the same without comparing the time parts.


h3(#DateTime_issametime). DateTime#is_same_time

 Boolean *is_same_time*(%(arg-type)DateTime% dt)

Returns @true@ if the time is the same (although dates may differ).


h3(#DateTime_isequalupto). DateTime#is_equal_up_to

 Boolean *is_equal_up_to*(%(arg-type)DateTime% dt,  %(arg-type)TimeSpan% ts)

Returns @true@ if the date is equal to another one up to the given time
interval, i.e. if the absolute difference between the two dates is less than
this interval.



h3(#DateTime_addts). DateTime#add

 "DateTime":datetime.html *add*(%(arg-type)TimeSpan% diff)

 "DateTime":datetime.html *add*(%(arg-type)TimeSpan% diff)

 "DateTime":datetime.html *operator$+=$*(%(arg-type)TimeSpan% diff)

Adds the given time span to this object.





h3(#DateTime_addds). DateTime#add

 "DateTime":datetime.html *add*(%(arg-type)DateSpan% diff)

 "DateTime":datetime.html *add*(%(arg-type)DateSpan% diff)

 "DateTime":datetime.html *operator$+=$*(%(arg-type)DateSpan% diff)

Adds the given date span to this object.





h3(#DateTime_subtractts). DateTime#subtract

 "DateTime":datetime.html *subtract*(%(arg-type)TimeSpan% diff)

 "DateTime":datetime.html *subtract*(%(arg-type)TimeSpan% diff)

 "DateTime":datetime.html *operator$-=$*(%(arg-type)TimeSpan% diff)

Subtracts the given time span from this object.





h3(#DateTime_subtractds). DateTime#subtract

 "DateTime":datetime.html *subtract*(%(arg-type)DateSpan% diff)

 "DateTime":datetime.html *subtract*(%(arg-type)DateSpan% diff)

 "DateTime":datetime.html *operator$-=$*(%(arg-type)DateSpan% diff)

Subtracts the given date span from this object.





h3(#DateTime_subtractdt). DateTime#subtract

 "TimeSpan":timespan.html *subtract*(%(arg-type)DateTime% dt)

Subtracts another date from this one and returns the difference between them
as TimeSpan.



h3(#DateTime_parserfc822date). DateTime#parse_rfc_822__date

 "Char":char.html *parse_rfc_822__date*(%(arg-type)Char% date)

Parses the string _date_ looking for a date formatted according to the RFC
822 in it. The exact description of this format may, of course, be found in
the RFC (section $5$), but, briefly, this is the format used in the headers of
Internet email messages and one of the most common strings expressing date in
this format may be something like @"Sat, 18 Dec 1999 00:48:30 +0100"@.

Returns @NULL@ if the conversion failed, otherwise return the pointer to
the character immediately following the part of the string which could be
parsed. If the entire string contains only the date in RFC 822 format,
the returned pointer will be pointing to a @NUL@ character.

This function is intentionally strict, it will return an error for any string
which is not RFC 822 compliant. If you need to parse date formatted in more
free ways, you should use "parse_date_time":#DateTime_parsedatetime or
"parse_date":#DateTime_parsedate instead.


h3(#DateTime_parseformat). DateTime#parse_format

 "Char":char.html *parse_format*(%(arg-type)Char% date, 
                     %(arg-type)Char% format = DefaultDateTimeFormat, 
                     %(arg-type)DateTime% dateDef = DefaultDateTime)

This function parses the string _date_ according to the given
_format_. The system @strptime(3)@ function is used whenever available,
but even if it is not, this function is still implemented, although support
for locale-dependent format specifiers such as @"\%c"@, @"\%x"@ or @"\%X"@ may
not be perfect and GNU extensions such as @"\%z"@ and @"\%Z"@ are
not implemented. This function does handle the month and weekday
names in the current locale on all platforms, however.

Please see the description of the ANSI C function @strftime(3)@ for the syntax
of the format string.

The _dateDef_ parameter is used to fill in the fields which could not be
determined from the format string. For example, if the format is @"\%d"@ (the
ay of the month), the month and the year are taken from _dateDef_. If
it is not specified, "Today":datetimetoday.html is used as the
default date.

Returns @NULL@ if the conversion failed, otherwise return the pointer to
the character which stopped the scan.


h3(#DateTime_parsedatetime). DateTime#parse_date_time

 "Char":char.html *parse_date_time*(%(arg-type)Char% datetime)

Parses the string _datetime_ containing the date and time in free format.
This function tries as hard as it can to interpret the given string as date
and time. Unlike "parse_rfc_822__date":#DateTime_parserfc822date, it
will accept anything that may be accepted and will only reject strings which
can not be parsed in any way at all.

Returns @NULL@ if the conversion failed, otherwise return the pointer to
the character which stopped the scan.  This method is currently not
implemented, so always returns NULL.


h3(#DateTime_parsedate). DateTime#parse_date

 "Char":char.html *parse_date*(%(arg-type)Char% date)

This function is like "parse_date_time":#DateTime_parsedatetime, but it
only allows the date to be specified. It is thus less flexible then
"parse_date_time":#DateTime_parsedatetime, but also has less chances to
misinterpret the user input.

Returns @NULL@ if the conversion failed, otherwise return the pointer to
the character which stopped the scan.


h3(#DateTime_parsetime). DateTime#parse_time

 "Char":char.html *parse_time*(%(arg-type)Char% time)

This functions is like "parse_date_time":#DateTime_parsedatetime, but
only allows the time to be specified in the input string.

Returns @NULL@ if the conversion failed, otherwise return the pointer to
the character which stopped the scan.


h3(#DateTime_format). DateTime#format

 String  *format*(%(arg-type)Char% format = DefaultDateTimeFormat,  %(arg-type)TimeZone% tz = Local)

This function does the same as the standard ANSI C @strftime(3)@ function.
Please see its description for the meaning of _format_ parameter.

It also accepts a few Widgets-specific extensions: you can optionally specify
the width of the field to follow using @printf(3)@-like syntax and the
format specification @\%l@ can be used to get the number of milliseconds.

h4. See also

"parse_format":#DateTime_parseformat


h3(#DateTime_formatdate). DateTime#format_date

 String  *format_date*()

Identical to calling "Format()":datetimeformat.html with @"\%x"@
argument (which means `preferred date representation for the current locale').


h3(#DateTime_formattime). DateTime#format_time

 String  *format_time*()

Identical to calling "Format()":datetimeformat.html with @"\%X"@
argument (which means `preferred time representation for the current locale').


h3(#DateTime_formatisodate). DateTime#format_iso_date

 String  *format_iso_date*()

This function returns the date representation in the ISO 8601 format
(YYYY-MM-DD).


h3(#DateTime_formatisotime). DateTime#format_iso_time

 String  *format_iso_time*()

This function returns the time representation in the ISO 8601 format
(HH:MM:SS).



h3(#DateTime_settoweekdayinsameweek). DateTime#set_to_week_day_in_same_week

 "DateTime":datetime.html *set_to_week_day_in_same_week*(%(arg-type)WeekDay% weekday, 
                                         %(arg-type)WeekFlags% flags = @Monday_First@)

Adjusts the date so that it will still lie in the same week as before, but its
week day will be the given one.

Returns the reference to the modified object itself.


h3(#DateTime_getweekdayinsameweek). DateTime#get_week_day_in_same_week

 "DateTime":datetime.html *get_week_day_in_same_week*(%(arg-type)WeekDay% weekday, 
                                      %(arg-type)WeekFlags% flags = @Monday_First@)

Returns the copy of this object to which
"set_to_week_day_in_same_week":#DateTime_settoweekdayinsameweek was
applied.


h3(#DateTime_settonextweekday). DateTime#set_to_next_week_day

 "DateTime":datetime.html *set_to_next_week_day*(%(arg-type)WeekDay% weekday)

Sets the date so that it will be the first _weekday_ following the current
date.

Returns the reference to the modified object itself.


h3(#DateTime_getnextweekday). DateTime#get_next_week_day

 "DateTime":datetime.html *get_next_week_day*(%(arg-type)WeekDay% weekday)

Returns the copy of this object to which
"set_to_next_week_day":#DateTime_settonextweekday was applied.


h3(#DateTime_settoprevweekday). DateTime#set_to_prev_week_day

 "DateTime":datetime.html *set_to_prev_week_day*(%(arg-type)WeekDay% weekday)

Sets the date so that it will be the last _weekday_ before the current
date.

Returns the reference to the modified object itself.


h3(#DateTime_getprevweekday). DateTime#get_prev_week_day

 "DateTime":datetime.html *get_prev_week_day*(%(arg-type)WeekDay% weekday)

Returns the copy of this object to which
"set_to_prev_week_day":#DateTime_settoprevweekday was applied.


h3(#DateTime_settoweekday). DateTime#set_to_week_day

 Boolean *set_to_week_day*(%(arg-type)WeekDay% weekday,  %(arg-type)Integer% n = 1, 
                         %(arg-type)Month% month = Inv_Month, 
                         %(arg-type)Integer% year = Inv_Year)

Sets the date to the _n_-th _weekday_ in the given month of the given
year (the current month and year are used by default). The parameter _n_
may be either positive (counting from the beginning of the month) or negative
(counting from the end of it).

For example, @SetToWeekDay(2, DateTime::Wed)@ will set the date to the
second Wednesday in the current month and
@SetToWeekDay(-1, DateTime::Sun)@ -- to the last Sunday in it.

Returns @true@ if the date was modified successfully, @false@
otherwise meaning that the specified date doesn't exist.


h3(#DateTime_getweekday2). DateTime#get_week_day

 "DateTime":datetime.html *get_week_day*(%(arg-type)WeekDay% weekday,  %(arg-type)Integer% n = 1, 
                         %(arg-type)Month% month = Inv_Month, 
                         %(arg-type)Integer% year = Inv_Year)

Returns the copy of this object to which
"set_to_week_day":#DateTime_settoweekday was applied.


h3(#DateTime_settolastweekday). DateTime#set_to_last_week_day

 Boolean *set_to_last_week_day*(%(arg-type)WeekDay% weekday,  %(arg-type)Month% month = Inv_Month, 
                              %(arg-type)Integer% year = Inv_Year)

The effect of calling this function is the same as of calling
@SetToWeekDay(-1, weekday, month, year)@. The date will be set to the last
_weekday_ in the given month and year (the current ones by default).

Always returns @true@.


h3(#DateTime_getlastweekday). DateTime#get_last_week_day

 "DateTime":datetime.html *get_last_week_day*(%(arg-type)WeekDay% weekday, 
                              %(arg-type)Month% month = Inv_Month, 
                              %(arg-type)Integer% year = Inv_Year)

Returns the copy of this object to which
"set_to_last_week_day":#DateTime_settolastweekday was applied.


h3(#DateTime_settoweekofyear). DateTime#set_to_week_of_year

 "DateTime":datetime.html *set_to_week_of_year*(%(arg-type)Integer% year, 
                                %(arg-type)DateTime_t% numWeek, 
                                %(arg-type)WeekDay% weekday = Mon)

Set the date to the given weekday in the week number numWeek of the
given year . The number should be in range $1$.

Note that the returned date may be in a different year than the one passed to
this function because both the week $1$ and week $52$ or $53$ (for leap years)
contain days from different years. See
"get_week_of_year":#DateTime_getweekofyear for the explanation of how the
year weeks are counted.


h3(#DateTime_settolastmonthday). DateTime#set_to_last_month_day

 "DateTime":datetime.html *set_to_last_month_day*(%(arg-type)Month% month = Inv_Month, 
                                  %(arg-type)Integer% year = Inv_Year)

Sets the date to the last day in the specified month (the current one by
default).

Returns the reference to the modified object itself.


h3(#DateTime_getlastmonthday). DateTime#get_last_month_day

 "DateTime":datetime.html *get_last_month_day*(%(arg-type)Month% month = Inv_Month, 
                               %(arg-type)Integer% year = Inv_Year)

Returns the copy of this object to which
"set_to_last_month_day":#DateTime_settolastmonthday was applied.


h3(#DateTime_settoyearday). DateTime#set_to_year_day

 "DateTime":datetime.html *set_to_year_day*(%(arg-type)DateTime_t% yday)

Sets the date to the day number _yday_ in the same year (i.e., unlike the
other functions, this one does not use the current year). The day number
should be in the range $1$ for the leap years and $1$ for
the other ones.

Returns the reference to the modified object itself.


h3(#DateTime_getyearday). DateTime#get_year_day

 "DateTime":datetime.html *get_year_day*(%(arg-type)DateTime_t% yday)

Returns the copy of this object to which
"set_to_year_day":#DateTime_settoyearday was applied.



h3(#DateTime_getjuliandaynumber). DateTime#get_julian_day_number

 double *get_julian_day_number*()

Returns the "JDN":datetimesetjdn.html corresponding to this date. Beware
of rounding errors!

h4. See also

"get_modified_julian_day_number":#DateTime_getmodifiedjuliandaynumber


h3(#DateTime_getjdn). DateTime#get_jdn

 double *get_jdn*()

Synonym for "get_julian_day_number":#DateTime_getjuliandaynumber.


h3(#DateTime_getmodifiedjuliandaynumber). DateTime#get_modified_julian_day_number

 double *get_modified_julian_day_number*()

Returns the _Modified Julian Day Number_ (MJD) which is, by definition,
equal to $JDN - 2400000.5$. The MJDs are simpler to work with as the integral
MJDs correspond to midnights of the dates in the Gregorian calendar and not th
noons like JDN. The MJD $0$ is Nov 17, 1858.


h3(#DateTime_getmjd). DateTime#get_mjd

 double *get_mjd*()

Synonym for "get_modified_julian_day_number":#DateTime_getmodifiedjuliandaynumber.


h3(#DateTime_getratadie). DateTime#get_rata_die

 double *get_rata_die*()

Return the _Rata Die number_ of this date.

By definition, the Rata Die number is a date specified as the number of days
relative to a base date of December 31 of the year 0. Thus January 1 of the
year 1 is Rata Die day 1.



h3(#DateTime_fromtimezone). DateTime#from_timezone

 "DateTime":datetime.html *from_timezone*(%(arg-type)TimeZone% tz, 
                          %(arg-type)Boolean% noDST = false)

Transform the date from the given time zone to the local one. If _noDST_ is 
@true@, no DST adjustments will be made.

Returns the date in the local time zone.


h3(#DateTime_totimezone). DateTime#to_timezone

 "DateTime":datetime.html *to_timezone*(%(arg-type)TimeZone% tz,  %(arg-type)Boolean% noDST = false)

Transform the date to the given time zone. If _noDST_ is @true@, no
DST adjustments will be made.

Returns the date in the new time zone.


h3(#DateTime_maketimezone). DateTime#make_timezone

 "DateTime":datetime.html *make_timezone*(%(arg-type)TimeZone% tz, 
                          %(arg-type)Boolean% noDST = false)

Modifies the object in place to represent the date in another time zone. If
_noDST_ is @true@, no DST adjustments will be made.


h3(#DateTime_makefromtimezone). DateTime#make_from_timezone

 "DateTime":datetime.html *make_from_timezone*(%(arg-type)TimeZone% tz, 
                               %(arg-type)Boolean% noDST = false)

Same as "from_timezone":#DateTime_fromtimezone but modifies the object
in place.


h3(#DateTime_toutc). DateTime#to_utc

 "DateTime":datetime.html *to_utc*(%(arg-type)Boolean% noDST = false)

This is the same as calling "to_timezone":#DateTime_totimezone with
the argument @GMT0@.


h3(#DateTime_makeutc). DateTime#make_utc

 "DateTime":datetime.html *make_utc*(%(arg-type)Boolean% noDST = false)

This is the same as calling "make_timezone":#DateTime_maketimezone with
the argument @GMT0@.


h3(#DateTime_isdst). DateTime#is_dst

 Integer *is_dst*(%(arg-type)Country% country = Country_Default)

Returns @true@ if the DST is applied for this date in the given country.

h4. See also

"get_begin_dst":#DateTime_getbegindst and
"get_end_dst":#DateTime_getenddst

