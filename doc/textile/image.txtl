h1(#wximage). Wx::Image

This class encapsulates a platform-independent image. An image can be
created from data, or using
"Bitmap#convert_to_image":bitmap.html#Bitmap_converttoimage. An image
can be loaded from a file in a variety of formats. Functions are
available to set and get image bits, so it can be used for basic image
manipulation.

An Image cannot (currently) be drawn directly to a "DC":dc.html. Instead,
a platform-specific "Bitmap":bitmap.html object must be created from it
using the "Bitmap.from_image":bitmap.html#Bitmap_fromimage class method.
This bitmap can then be drawn in a device context, using
"DC#draw_bitmap":dc.html#DC_drawbitmap.

One colour value of the image may be used as a mask colour which will
lead to the automatic creation of a "Mask":mask.html object associated
to the bitmap object.

h2. Alpha channel support

Wx::Image supports alpha channel data: in addition to a byte for the
red, green and blue colour components for each pixel it also stores a
byte representing the pixel opacity. An alpha value of 0 corresponds
to a transparent pixel (null opacity) while a value of 255 means that
the pixel is 100% opaque.

Unlike RGB data, not all images have an alpha channel and before using
"get_alpha":#Image_getalpha you should check if this image contains an
alpha channel with "has_alpha":#Image_hasalpha. Note that currently only
images loaded from PNG files with transparency information will have an
alpha channel but alpha support will be added to the other formats as
well (as well as support for saving images with alpha channel which also
isn't implemented).

h2. Available image handlers

The following image handlers are available and are initialised
automatically when wxRuby is loaded.

|BMPHandler|For loading and saving, always installed.|
|PNGHandler|For loading (including alpha support) and saving.|
|JPEGHandler|For loading and saving.|
|GIFHandler|Only for loading, due to legal issues.|
|PCXHandler|For loading and saving (see below).|
|PNMHandler|For loading and saving (see below).|
|TIFFHandler|For loading and saving.|
|TGAHandler|For loading only.|
|IFFHandler|For loading only.|
|XPMHandler|For loading and saving.|
|ICOHandler|For loading and saving.|
|CURHandler|For loading and saving.|
|ANIHandler|For loading only.|


When saving in PCX format, *PCXHandler* will count the number of
different colours in the image; if there are 256 or less colours, it will
save as 8 bit, else it will save as 24 bit.

Loading PNMs only works for ASCII or raw RGB images. When saving in
PNM format, *PNMHandler* will always save as raw RGB.

h2. Derived from

"Object":object.html

h2. See also

"Bitmap":bitmap.html,

<div id="methods">

h2. Methods

* "Image.new":#Image_new
* "Image.from_bitmap":#Image_frombitmap
* "Image.read":#Image_read
* "Image#blur":#Image_blur
* "Image#blur_horizontal":#Image_blurhorizontal
* "Image#blur_vertical":#Image_blurvertical
* "Image#compute_histogram":#Image_computehistogram
* "Image#convert_alpha_to_mask":#Image_convertalphatomask
* "Image#convert_to_bitmap":#Image_converttobitmap
* "Image#convert_to_greyscale":#Image_converttogreyscale
* "Image#convert_to_mono":#Image_converttomono
* "Image#copy":#Image_copy
* "Image#create":#Image_create
* "Image#destroy":#Image_destroy
* "Image#find_first_unused_colour":#Image_findfirstunusedcolour
* "Image#get_image_ext_wildcard":#Image_getimageextwildcard
* "Image#get_alpha":#Image_getalpha
* "Image#get_alpha_data":#Image_getalphadata
* "Image#get_blue":#Image_getblue
* "Image#get_data":#Image_getrgbdata
* "Image#get_rgb_data":#Image_getrgbdata
* "Image#get_green":#Image_getgreen
* "Image#get_image_count":#Image_getimagecount
* "Image#get_height":#Image_getheight
* "Image#get_mask_blue":#Image_getmaskblue
* "Image#get_mask_green":#Image_getmaskgreen
* "Image#get_mask_red":#Image_getmaskred
* "Image#get_or_find_mask_colour":#Image_getorfindmaskcolour
* "Image#get_palette":#Image_getpalette
* "Image#get_red":#Image_getred
* "Image#get_sub_image":#Image_getsubimage
* "Image#get_width":#Image_getwidth
* "HSVValue::HSVValue":#Image_HSVValue
* "Image#hs_vto_rgb":#Image_hsvtorgb
* "Image#has_alpha":#Image_hasalpha
* "Image#has_mask":#Image_hasmask
* "Image#get_option":#Image_getoption
* "Image#get_option_int":#Image_getoptionint
* "Image#has_option":#Image_hasoption
* "Image#init_alpha":#Image_initalpha
* "Image#is_transparent":#Image_istransparent
* "Image#load_file":#Image_loadfile
* "Image#load_stream":#Image_loadstream
* "Image#is_ok":#Image_isok
* "RGBValue::RGBValue":#Image_RGBValue
* "Image#rg_bto_hsv":#Image_rgbtohsv
* "Image#mirror":#Image_mirror
* "Image#replace":#Image_replace
* "Image#rescale":#Image_rescale
* "Image#resize":#Image_resize
* "Image#rotate":#Image_rotate
* "Image#rotate_hue":#Image_rotatehue
* "Image#rotate_90":#Image_rotate90
* "Image#save_file":#Image_savefile
* "Image#scale":#Image_scale
* "Image#size":#Image_size
* "Image#set_alpha":#Image_setalpha
* "Image#set_alpha_data":#Image_setalphadata
* "Image#set_data":#Image_setrgbdata
* "Image#set_rgb_data":#Image_setrgbdata
* "Image#set_mask":#Image_setmask
* "Image#set_mask_colour":#Image_setmaskcolour
* "Image#set_mask_from_image":#Image_setmaskfromimage
* "Image#set_option":#Image_setoption
* "Image#set_palette":#Image_setpalette
* "Image#set_rgb":#Image_setrgb
* "Image#write":#Image_write

</div>

h3(#Image_new). Image.new

  *Image.new*(%(arg-type)"Image":image.html% image)

Copy constructor, uses "reference counting":trefcount.html.

  *Image.new*(%(arg-type)String% file_name,  %(arg-type)Integer% type = BITMAP_TYPE_ANY, %(arg-type)Integer% index = -1)

  *Image.new*(%(arg-type)String% file_name,  %(arg-type)String% mimetype,  %(arg-type)Integer% index = -1)

Loads an image from a file. The type should specify the file type; the
index argument is only needed for image file types which support
multiple images, such as GIF or TIF.

  *Image.new*(%(arg-type)Integer% width,  %(arg-type)Integer% height, 
               %(arg-type)Boolean% clear=true)

Creates an image with the given width and height.  If _clear_ is true,
the new image will be initialized to black.  Otherwise, the image data
will be uninitialized.

  *Image.new*(%(arg-type)Integer% width, %(arg-type)Integer% height, 
               %(arg-type)String% data)

Creates an image from given data string, with the given width and
height. See "set_data":#Image_setdata for a description of the raw data
format. The string's length should be equal to width x height x 3.


  *Image.new*(%(arg-type)"String":char.html% xpmData)

Creates an image from XPM data.

h4. Parameters

* _width_ Specifies the width of the image.
* _height_ Specifies the height of the image.
* _name_ Name of the file from which to load the image.
* _type_ May be one of the following:


|BITMAP_TYPE_BMP|Load a Windows bitmap file.|
|BITMAP_TYPE_GIF|Load a GIF bitmap file.|
|BITMAP_TYPE_JPEG|Load a JPEG bitmap file.|
|BITMAP_TYPE_PNG|Load a PNG bitmap file.|
|BITMAP_TYPE_PCX|Load a PCX bitmap file.|
|BITMAP_TYPE_PNM|Load a PNM bitmap file.|
|BITMAP_TYPE_TIF|Load a TIFF bitmap file.|
|BITMAP_TYPE_TGA|Load a TGA bitmap file.|
|BITMAP_TYPE_XPM|Load a XPM bitmap file.|
|BITMAP_TYPE_ICO|Load a Windows icon file (ICO).|
|BITMAP_TYPE_CUR|Load a Windows cursor file (CUR).|
|BITMAP_TYPE_ANI|Load a Windows animated cursor file (ANI).|
|BITMAP_TYPE_ANY|Will try to autodetect the format.|

* _mimetype_ MIME type string (for example 'image/jpeg')
* _index_ Index of the image to load in the case that the image file contains multiple images.
This is only used by GIF, ICO and TIFF handlers. The default value (-1) means
"choose the default image" and is interpreted as the first image (index=0) by
the GIF and TIFF handler and as the largest and most colourful one by the ICO handler.
* _xpmData_ A pointer to XPM image data.

h4. Remarks

Depending on how wxWidgets has been configured, not all formats may be
available. In standard wxRuby, all of standard file types listed above
are supported on all platforms; the only exceptions are Windows-only
icon and cursor files, which are only available on Windows.

Note: you can use "get_option_int":#Image_getoptionint to get the
hotspot for loaded cursor file:

  hotspot_x = image.get_option_int(IMAGE_OPTION_CUR_HOTSPOT_X)
  hotspot_y = image.get_option_int(IMAGE_OPTION_CUR_HOTSPOT_Y)
 
h4. See also

"Image#load_file":image.html#Image_loadfile


h3(#Image_frombitmap). Image.from_bitmap

  *Image.from_bitmap*(%(arg-type)"Bitmap":bitmap.html% bitmap)

Creates a new image from an platform-dependent bitmap, preserving mask
information.


h3(#Image_read). Image.read

  *Image.read*(%(arg-type)IO% an_io, %(arg-type)Integer% type = BITMAP_TYPE_ANY, %(arg-type)Integer% index = -1) )

  *Image.read*(%(arg-type)IO% an_io,  %(arg-type)String% mimetype,  %(arg-type)Integer% index = -1)

Creates a new image using data read from _an_io_. _an_io_ may be any
ruby object which implements a _read_ method and similar basic IO
operations, such as a @File@, @IO@, @Socket@ or @StringIO@ object.

The _type_ and _mimetype_ parameters have the same meaning as in the
standard constructor.

h3(#Image_blur). Image#blur

 "Image":image.html *blur*(%(arg-type)Integer% blurRadius)

Blurs the image in both horizontal and vertical directions by the specified pixel
_blurRadius_. This should not be used when using a single mask colour
for transparency.

h4. See also
v
"blur_horizontal":#Image_blurhorizontal
"blur_vertical":#Image_blurvertical


h3(#Image_horzblur). Image#blur_horizontal

 "Image":image.html *blur_horizontal*(%(arg-type)Integer% blurRadius)

Blurs the image in the horizontal direction only. This should not be used
when using a single mask colour for transparency.
h4. See also

"Blur":imageblur.html
"blur_vertical":#Image_blurvertical


h3(#Image_vertblur). Image#blur_vertical

 "Image":image.html *blur_vertical*(%(arg-type)Integer% blurRadius)

Blurs the image in the vertical direction only. This should not be used
when using a single mask colour for transparency.

h4. See also

"Blur":imageblur.html
"blur_horizontal":#Image_blurhorizontal


h3(#Image_computehistogram). Image#compute_histogram

 Integer *compute_histogram*(%(arg-type)"ImageHistogram":imagehistogram.html% histogram)

Computes the histogram of the image. _histogram_ is a reference to
ImageHistogram object. ImageHistogram is a specialization of
"HashMap":hashmap.html "template" and is defined as follows:


 class WXDLLEXPORT ImageHistogramEntry
 {
 public:
     ImageHistogramEntry() : index(0), value(0) {}
     unsigned long index;
     unsigned long value;
 };
 
 WX_DECLARE_EXPORTED_HASH_MAP(unsigned long, ImageHistogramEntry,
                              IntegerHash, IntegerEqual,
                              ImageHistogram);
 

h4. Return value

Returns number of colours in the histogram.


h3(#Image_convertalphatomask). Image#convert_alpha_to_mask

 Boolean *convert_alpha_to_mask*(%(arg-type)Integer% threshold = $128$)

If the image has alpha channel, this method converts it to mask. All pixels
with alpha value less than threshold are replaced with mask colour
and the alpha channel is removed. Mask colour is chosen automatically using
"find_first_unused_colour":#Image_findfirstunusedcolour.

If the image image doesn't have alpha channel,
ConvertAlphaToMask does nothing.

h4. Return value

 if FindFirstUnusedColour returns ,  otherwise.


h3(#Image_converttobitmap). Image#convert_to_bitmap

 "Bitmap":bitmap.html *convert_to_bitmap*()

Deprecated, use equivalent "Bitmap constructor":bitmapctor.html
(which takes Image and depth as its arguments) instead.


h3(#Image_converttogreyscale). Image#convert_to_greyscale

 "Image":image.html *convert_to_greyscale*(%(arg-type)Float% lr = 0.299, 
                              %(arg-type)Float% lg = 0.587, 
                              %(arg-type)Float% lb = 0.114)

Returns a greyscale version of the image. The returned image uses the luminance
component of the original to calculate the greyscale. Defaults to using
ITU-T BT.601 when converting to YUV, where every pixel equals
(R * _lr_) + (G * _lg_) + (B * _lb_).


h3(#wxbitmapconverttomono). Image#convert_to_mono

 "Image":image.html *convert_to_mono*(%(arg-type)Integer% r,  %(arg-type)Integer% g, 
                         %(arg-type)Integer% b)

Returns monochromatic version of the image. The returned image has white
colour where the original has _(r,g,b)_ colour and black colour
everywhere else.


h3(#Image_copy). Image#copy

 "Image":image.html *copy*()

Returns an identical copy of the image.


h3(#Image_create). Image#create

 Boolean *create*(%(arg-type)Integer% width,  %(arg-type)Integer% height, 
                %(arg-type)Boolean% clear=true)

Creates a fresh image.  If _clear_ is true, the new image will be initialized to black.
Otherwise, the image data will be uninitialized.

h4. Parameters

* _width_ The width of the image in pixels.
* _height_ The height of the image in pixels.

h4. Return value

true if the call succeeded, false otherwise.


h3(#Image_destroy). Image#destroy

  *destroy*()

Destroys the image data.


h3(#Image_findfirstunusedcolour). Image#find_first_unused_colour

 Boolean *find_first_unused_colour*(%(arg-type)Integer% r,  %(arg-type)Integer% g, 
                                  %(arg-type)Integer% b, 
                                  %(arg-type)Integer% startR = 1, 
                                  %(arg-type)Integer% startG = 0, 
                                  %(arg-type)Integer% startB = 0)

h4. Parameters

* _r,g,b_ Pointers to variables to save the colour.
* _startR,startG,startB_ Initial values of the colour. Returned colour
will have RGB values equal to or greater than these.

Finds the first colour that is never used in the image. The search begins at
given initial colour and continues by increasing R, G and B components (in this
order) by 1 until an unused colour is found or the colour space exhausted.

h4. Return value

Returns false if there is no unused colour left, true on success.

h4. Notes

Note that this method involves computing the histogram, which is
computationally intensive operation.


h3(#Image_getimageextwildcard). Image#get_image_ext_wildcard

 String *get_image_ext_wildcard*()

Iterates all registered ImageHandler objects, and returns a string containing file extension masks
suitable for passing to file open/save dialog boxes.

h4. Return value

The format of the returned string is "(*.ext1;*.ext2)|*.ext1;*.ext2".

It is usually a good idea to prepend a description before passing the result to the dialog.


h3(#Image_getalpha). Image#get_alpha

 Integer *get_alpha*(%(arg-type)Integer% x,  %(arg-type)Integer% y)

Returns the alpha value for the given pixel. This function may only be called
for images with alpha channel, use "has_alpha":#Image_hasalpha to
check for this.

The returned value is the _opacity_ of the image, i.e. the value of _0_
corresponds to the transparent pixels while the value of _255_ to the opaque
ones.

h3(#Image_getalphadata). Image#get_alpha_data

 String *get_alpha_data*()

Returns the raw alpha data as a string. This is most often used when doing direct image manipulation.
The returned string contains a sequence of bytes (characters) each of which represents the alpha value
of a pixel in the range 0 to 255.


h3(#Image_getblue). Image#get_blue

 Integer *get_blue*(%(arg-type)Integer% x,  %(arg-type)Integer% y)

Returns the blue intensity at the given coordinate.


h3(#Image_getrgbdata). Image#get_rgb_data

 String *get_rgb_data*()
 String *get_data*()

Returns the raw image data as a string. This is most often used when
doing direct image manipulation. The returned string contains a sequence
of bytes (characters) each of which represents the value of one red,
green or blue component in the range 0 to 255. 

The values are in a series of triplets in RGB-RGB-RGB-RGB format from
top-to-bottom, left-to-right order. Thus the first RGB triplet
corresponds to the pixel first pixel of the first row, the second one to
the second pixel of the first row and so on until the end of the first
row, with second row following after it and so on.

To extract the integer values for the RGB components, use Ruby's
String.unpack method; for example, to convert the whole data string to a
set of integer values:

 <pre>
 my_image.rgb_data.unpack("C*") # returns something like [255, 128, 0, 255 ...]</pre>

This would mean that the first pixel had a red value of 255, a green
value of 128, and a blue value of 0; the second pixel a red value of
255, and so on.

Note that unlike the C++ wxWidgets API, the returned string is a copy of
the internal data; methods that alter the string will *not* change the
Image's content. If you wish to do this, alter the string then call
"set_rgb_data":#Image_setrgbdata, for example:

 my_image.rgb_data = my_image.rgb_data.reverse

This would flip the image diagonally around it's bottom-left to
top-right axis, and swap the red and blue components of each pixel,
leaving the green the same. If you understand why this is the result,
you can consider yourself in a good position to make use of these
methods.

The get_data form is provided for backward compatibility but is not recommended. It 
may be deprecated in a subsequent version of wxRuby. 

h3(#Image_getgreen). Image#get_green

 Integer *get_green*(%(arg-type)Integer% x,  %(arg-type)Integer% y)

Returns the green intensity at the given coordinate.


h3(#Image_getimagecount). Image#get_image_count

 Integer *get_image_count*(%(arg-type)String% filename,  %(arg-type)Integer% type = BITMAP_TYPE_ANY)

If the image file contains more than one image and the image handler is capable
of retrieving these individually, this function will return the number of
available images.

* _name_ Name of the file to query.
* _type_ May be one of the following:


|BITMAP_TYPE_BMP|Load a Windows bitmap file.|
|BITMAP_TYPE_GIF|Load a GIF bitmap file.|
|BITMAP_TYPE_JPEG|Load a JPEG bitmap file.|
|BITMAP_TYPE_PNG|Load a PNG bitmap file.|
|BITMAP_TYPE_PCX|Load a PCX bitmap file.|
|BITMAP_TYPE_PNM|Load a PNM bitmap file.|
|BITMAP_TYPE_TIF|Load a TIFF bitmap file.|
|BITMAP_TYPE_XPM|Load a XPM bitmap file.|
|BITMAP_TYPE_ICO|Load a Windows icon file (ICO).|
|BITMAP_TYPE_CUR|Load a Windows cursor file (CUR).|
|BITMAP_TYPE_ANI|Load a Windows animated cursor file (ANI).|
|BITMAP_TYPE_ANY|Will try to autodetect the format.|


h4. Return value

Number of available images. For most image handlers, this is 1 (exceptions
are TIFF and ICO formats).

h3(#Image_getheight). Image#get_height

 Integer *get_height*()

Gets the height of the image in pixels.


h3(#Image_getmaskblue). Image#get_mask_blue

 Integer *get_mask_blue*()

Gets the blue value of the mask colour.


h3(#Image_getmaskgreen). Image#get_mask_green

 Integer *get_mask_green*()

Gets the green value of the mask colour.


h3(#Image_getmaskred). Image#get_mask_red

 Integer *get_mask_red*()

Gets the red value of the mask colour.

h3(#Image_getgetorsetmaskcolour). Image#get_or_find_mask_colour

 Array *get_or_find_mask_colour*()

Get the current mask colour or find a suitable unused colour that could
be used as a mask colour. 

Returns four values. This first is a Boolean: @true@ if the image
currently has a mask, or false if not. The remaining three values are
Integers containing the red, green and blue values of the mask.


h3(#Image_getpalette). Image#get_palette

 "Palette":palette.html *get_palette*()

Not currently supported in wxRuby. 

Returns the palette associated with the image. Currently the palette is
only used when converting to Bitmap under Windows. Some of the Image
handlers have been modified to set the palette if one exists in the
image file (usually 256 or less colour images in GIF or PNG format).

h3(#Image_getred). Image#get_red

 Integer *get_red*(%(arg-type)Integer% x,  %(arg-type)Integer% y)

Returns the red intensity at the given coordinate.


h3(#Image_getsubimage). Image#get_sub_image

 "Image":image.html *get_sub_image*(%(arg-type)"Rect":rect.html% rect)

Returns a sub image of the current one as long as the rect belongs entirely to
the image.


h3(#Image_getwidth). Image#get_width

 Integer *get_width*()

Gets the width of the image in pixels.

h4. See also

"Image#get_height":image.html#Image_getheight


h3(#hsvvaluehsvvalue). HSVValue::HSVValue

  *hsv_value*(%(arg-type)Float% h = 0.0,  %(arg-type)Float% s = 0.0,  %(arg-type)Float% v = 0.0)

Constructor for HSVValue, an object that contains values for hue, saturation and value which
represent the value of a color. It is used by "Image#hs_vto_rgb":image.html#Image_hsvtorgb
and "Image#rg_bto_hsv":image.html#Image_rgbtohsv, which
converts between HSV color space and RGB color space.





h3(#Image_hsvtorgb). Image#hs_vto_rgb

 "Image::RGBValue":image::rgbvalue.html *hs_vto_rgb*(%(arg-type)"HSVValue":hsvvalue.html% hsv)

Converts a color in HSV color space to RGB color space.


h3(#Image_hasalpha). Image#has_alpha

 Boolean *has_alpha*()

Returns true if this image has alpha channel, false otherwise.

h4. See also

"get_alpha":#Image_getalpha, "set_alpha":#Image_setalpha


h3(#Image_hasmask). Image#has_mask

 Boolean *has_mask*()

Returns true if there is a mask active, false otherwise.


h3(#Image_getoption). Image#get_option

 String *get_option*(%(arg-type)String% name)

Gets a user-defined option. The function is case-insensitive to _name_.

For example, when saving as a JPEG file, the option *quality* is
used, which is a number between 0 and 100 (0 is terrible, 100 is very good).

h4. See also

"Image#set_option":image.html#Image_setoption, "Image#get_option_int":image.html#Image_getoptionint, "Image#has_option":image.html#Image_hasoption


h3(#Image_getoptionint). Image#get_option_int

 Integer *get_option_int*(%(arg-type)String% name)

Gets a user-defined option as an integer. The function is case-insensitive to _name_.

If the given option is not present, the function returns $0$. Use
"Image#has_option":image.html#Image_hasoption is $0$ is a possibly valid value
for the option.

Options for PNGHandler

|IMAGE_OPTION_PNG_FORMAT|Format for saving a PNG file.|
|IMAGE_OPTION_PNG_BITDEPTH|Bit depth for every channel (R/G/B/A).|


Supported values for IMAGE_OPTION_PNG_FORMAT:

|PNG_TYPE_COLOUR|Stores RGB image.|
|PNG_TYPE_GREY|Stores grey image, converts from RGB.|
|PNG_TYPE_GREY_RED|Stores grey image, uses red value as grey.|



h4. See also

"Image#set_option":image.html#Image_setoption, "Image#get_option":image.html#Image_getoption


h3(#Image_hasoption). Image#has_option

 Boolean *has_option*(%(arg-type)String% name)

Returns true if the given option is present. The function is case-insensitive to _name_.

h4. See also

"Image#set_option":image.html#Image_setoption, "Image#get_option":image.html#Image_getoption, "Image#get_option_int":image.html#Image_getoptionint


h3(#Image_initalpha). Image#init_alpha

  *init_alpha*()

Initializes the image alpha channel data. It is an error to call it
if the image already has alpha data. If it doesn't, alpha data will be
by default initialized to all pixels being fully opaque. But if the image has a
a mask colour, all mask pixels will be completely transparent.


h3(#Image_istransparent). Image#is_transparent

 Boolean *is_transparent*(%(arg-type)Integer% x,  %(arg-type)Integer% y, 
                            %(arg-type)Integer% threshold = 128)

Returns @true@ if the given pixel is transparent, i.e. either it the
image has a mask, and the pixel has the mask colour, or the image has
alpha channel and alpha value of this pixel is strictly less than
threshold.

h3(#Image_loadfile). Image#load_file

 Boolean *load_file*(%(arg-type)String% name,  %(arg-type)Integer% type = BITMAP_TYPE_ANY, 
                   %(arg-type)Integer% index = -1)

 Boolean *load_file*(%(arg-type)String% name,  %(arg-type)String% mimetype, 
                   %(arg-type)Integer% index = -1)

Loads an image from a file. If no handler type is provided, the library will
try to autodetect the format.

h4. Parameters

* _name_ Name of the file from which to load the image.
* _type_ One of the following values:


|*BITMAP_TYPE_BMP*|Load a Windows image file.|
|*BITMAP_TYPE_GIF*|Load a GIF image file.|
|*BITMAP_TYPE_JPEG*|Load a JPEG image file.|
|*BITMAP_TYPE_PCX*|Load a PCX image file.|
|*BITMAP_TYPE_PNG*|Load a PNG image file.|
|*BITMAP_TYPE_PNM*|Load a PNM image file.|
|*BITMAP_TYPE_TIF*|Load a TIFF image file.|
|*BITMAP_TYPE_XPM*|Load a XPM image file.|
|*BITMAP_TYPE_ICO*|Load a Windows icon file (ICO).|
|*BITMAP_TYPE_CUR*|Load a Windows cursor file (CUR).|
|BITMAP_TYPE_ANI|Load a Windows animated cursor file (ANI).|
|*BITMAP_TYPE_ANY*|Will try to autodetect the format.|

* _mimetype_ MIME type string (for example 'image/jpeg')
* _index_ Index of the image to load in the case that the image file contains multiple images.
This is only used by GIF, ICO and TIFF handlers. The default value (-1) means
"choose the default image" and is interpreted as the first image (index=0) by
the GIF and TIFF handler and as the largest and most colourful one by the ICO handler.

h4. Remarks

Depending on how Widgets has been configured, not all formats may be available.

Note: you can use "get_option_int":#Image_getoptionint to get the
hotspot for loaded cursor file:

     int hotspot_x = image.GetOptionInt(IMAGE_OPTION_CUR_HOTSPOT_X);
     int hotspot_y = image.GetOptionInt(IMAGE_OPTION_CUR_HOTSPOT_Y);
 
 

h4. Return value

true if the operation succeeded, false otherwise. If the optional index parameter is out of range,
false is returned and a call to Wx::log_error takes place.

h4. See also

"Image#save_file":image.html#Image_savefile

h3(#Image_loadstream). Image#load_stream

 Boolean *load_stream*(%(arg-type)IO% an_io,  %(arg-type)Integer% type = BITMAP_TYPE_ANY, 
                   %(arg-type)Integer% index = -1)

 Boolean *load_stream*(%(arg-type)IO% an_io,  %(arg-type)String% mimetype, 
                   %(arg-type)Integer% index = -1)

Loads image data from an IO-like object. It is normally simpler to use
"Image.read":#Image_read to read data from an IO; see that method for
more information on the parameters.


h3(#Image_isok). Image#is_ok

 Boolean *is_ok*()

Returns true if image data is present.


h3(#rgbvaluergbvalue). RGBValue::RGBValue

  *rgb_value*(%(arg-type)Integer% r = 0,  %(arg-type)Integer% g = 0,  %(arg-type)Integer% b = 0)

Constructor for RGBValue, an object that contains values for red, green and blue which
represent the value of a color. It is used by "Image#hs_vto_rgb":image.html#Image_hsvtorgb
and "Image#rg_bto_hsv":image.html#Image_rgbtohsv, which
converts between HSV color space and RGB color space.




h3(#Image_rgbtohsv). Image#rg_bto_hsv

 "Image::HSVValue":image::hsvvalue.html *rg_bto_hsv*(%(arg-type)"RGBValue":rgbvalue.html% rgb)

Converts a color in RGB color space to HSV color space.


h3(#Image_mirror). Image#mirror

 "Image":image.html *mirror*(%(arg-type)Boolean% horizontally = true)

Returns a mirrored copy of the image. The parameter _horizontally_
indicates the orientation.


h3(#Image_replace). Image#replace

  *replace*(%(arg-type)Integer% r1,  %(arg-type)Integer% g1,  %(arg-type)Integer% b1, 
         %(arg-type)Integer% r2, 
          %(arg-type)Integer% g2, 
          %(arg-type)Integer% b2)

Replaces the colour specified by _r1,g1,b1_ by the colour _r2,g2,b2_.


h3(#Image_rescale). Image#rescale

 "Image":image.html *rescale*(%(arg-type)Integer% width,  %(arg-type)Integer% height, 
                 %(arg-type)Integer% quality = IMAGE_QUALITY_NORMAL)

Changes the size of the image in-place by scaling it: after a call to this function,
the image will have the given width and height.

For a description of the _quality_ parameter, see the "Scale":imagescale.html function.

Returns the (modified) image itself.

h4. See also

"Scale":imagescale.html


h3(#Image_resize). Image#resize

 "Image":image.html *resize*(%(arg-type)"Size":size.html% size,  %(arg-type)"Point":point.html% pos, 
                %(arg-type)Integer% red = -1, 
                %(arg-type)Integer% green = -1, 
                %(arg-type)Integer% blue = -1)

Changes the size of the image in-place without scaling it by adding either a border
with the given colour or cropping as necessary. The image is pasted into a new
image with the given _size_ and background colour at the position _pos_
relative to the upper left of the new image. If _red = green = blue = -1_
then use either the  current mask colour if set or find, use, and set a
suitable mask colour for any newly exposed areas.

Returns the (modified) image itself.

h4. See also

"Size":imagesize.html


h3(#Image_rotate). Image#rotate

 "Image":image.html *rotate*(%(arg-type)Float% angle,  %(arg-type)"Point":point.html% rotationCentre, 
                %(arg-type)Boolean% interpolating = true, 
                %(arg-type)"Point":point.html% offsetAfterRotation = nil)

Rotates the image about the given point, by _angle_ radians. Passing true
to _interpolating_ results in better image quality, but is slower. If the
image has a mask, then the mask colour is used for the uncovered pixels in the
rotated image background. Else, black (rgb 0, 0, 0) will be used.

Returns the rotated image, leaving this image intact.


h3(#Image_rotatehue). Image#rotate_hue

  *rotate_hue*(%(arg-type)Float% angle)

Rotates the hue of each pixel in the image by _angle_, which is a double in
the range of -1.0 to +1.0, where -1.0 corresponds to -360 degrees and +1.0 corresponds
to +360 degrees.


h3(#Image_rotate90). Image#rotate_90

 "Image":image.html *rotate_90*(%(arg-type)Boolean% clockwise = true)

Returns a copy of the image rotated 90 degrees in the direction
indicated by _clockwise_.


h3(#Image_savefile). Image#save_file

 Boolean *save_file*(%(arg-type)String% name,  %(arg-type)Integer% type)

 Boolean *save_file*(%(arg-type)String% name,  %(arg-type)String% mimetype)

Saves an image in the named file.

 Boolean *save_file*(%(arg-type)String% name)

Saves an image in the named file. File type is determined from the
extension of the file name. Note that this function may fail if the
extension is not recognized! You can use one of the forms above to save
images to files with non-standard extensions.

h4. Parameters

* _name_ Name of the file to save the image to.
* _type_ Currently these types can be used:


|*BITMAP_TYPE_BMP*|Save a BMP image file.|
|*BITMAP_TYPE_JPEG*|Save a JPEG image file.|
|*BITMAP_TYPE_PNG*|Save a PNG image file.|
|*BITMAP_TYPE_PCX*|Save a PCX image file (tries to save as 8-bit if possible, falls back to 24-bit otherwise).|
|*BITMAP_TYPE_PNM*|Save a PNM image file (as raw RGB always).|
|*BITMAP_TYPE_TIF*|Save a TIFF image file.|
|*BITMAP_TYPE_XPM*|Save a XPM image file.|
|*BITMAP_TYPE_ICO*|Save a Windows icon file (ICO) (the size may be up to 255 wide by 127 high. A single image is saved in 8 colors at the size supplied).|
|*BITMAP_TYPE_CUR*|Save a Windows cursor file (CUR).|

* _mimetype_ MIME type.

h4. Return value

true if the operation succeeded, false otherwise.

h4. Remarks

Depending on how Widgets has been configured, not all formats may be available.

Note: you can use "get_option_int":#Image_getoptionint to set the
hotspot before saving an image into a cursor file (default hotspot is in
the centre of the image):

     image.set_option(IMAGE_OPTION_CUR_HOTSPOT_X, hotspotX);
     image.set_option(IMAGE_OPTION_CUR_HOTSPOT_Y, hotspotY);
  

h4. See also

"Image#load_file":#Image_loadfile, "Image#write":#Image_write


h3(#Image_scale). Image#scale

 "Image":image.html *scale*(%(arg-type)Integer% width,  %(arg-type)Integer% height, 
               %(arg-type)Integer% quality = IMAGE_QUALITY_NORMAL)

Returns a scaled version of the image. This is also useful for
scaling bitmaps in general as the only other way to scale bitmaps
is to blit a MemoryDC into another MemoryDC.

* _quality_ Determines what method to use for resampling the image.  Can be one of the following:


|*IMAGE_QUALITY_NORMAL*|Uses the normal default scaling method of pixel replication|
|*IMAGE_QUALITY_HIGH*|Uses bicubic and box averaging resampling methods for upsampling and downsampling respectively|


It should be noted that although using IMAGE_QUALITY_HIGH produces much nicer
looking results it is a slower method.  Downsampling will use the box averaging method
which seems to operate very fast.  If you are upsampling larger images using
this method you will most likely notice that it is a bit slower and in extreme cases
it will be quite substantially slower as the bicubic algorithm has to process a lot of
data.

It should also be noted that the high quality scaling may not work as expected
when using a single mask colour for transparency, as the scaling will blur the
image and will therefore remove the mask partially. Using the alpha channel
will work.

Example:

  # get the bitmap from somewhere
  bmp = Wx::Bitmap.new(...)

  # rescale it to have size of 32*32
  if bmp.width != 32 or bmp.height != 32 )
    img = Wx::Image.from_bitmap(bmp)
    bmp = Wx::Bitmap.from_image( img.scale(32, 32) )
  end

h4. See also

"Rescale":imagerescale.html

h3(#Image_size). Image#size

 "Image":image.html *size*(%(arg-type)"Size":size.html% size,  %(arg-type)"Point":point.html% pos, 
              %(arg-type)Integer% red = -1, 
              %(arg-type)Integer% green = -1, 
              %(arg-type)Integer% blue = -1)

Returns a resized version of this image without scaling it by adding either a border
with the given colour or cropping as necessary. The image is pasted into a new
image with the given _size_ and background colour at the position _pos_
relative to the upper left of the new image. If _red = green = blue = -1_
then use either the current mask colour if set or find, use, and set a
suitable mask colour for any newly exposed areas.

h4. See also

"Resize":imageresize.html

h3(#Image_setalpha). Image#set_alpha

  *set_alpha*(%(arg-type)Integer% x,  %(arg-type)Integer% y,  %(arg-type)Integer% alpha)

Sets the alpha value for the given pixel. This function should only be
called if the image has alpha channel data, use
"has_alpha":#Image_hasalpha to check for this.

h3(#Image_setalphadata). Image#set_alpha_data

  *set_alpha_data*(%(arg-type)String% alpha = @nil@)

This function is similar to "set_data":#Image_setdata, setting the alpha
channel from a string. It has similar restrictions; don't use it if you
don't know what you're doing.

The string should contain one byte (character) for each pixel,
representing the transparency in the range 0 to 255. If necessary, use
Ruby's Array#pack with the C* to create a suitable string.

Unlike set_rgb_data this method may be passed @nil@ in which case the
function will allocate the alpha array internally -- this is useful to
add alpha channel data to an image which doesn't have any.


h3(#Image_setrgbdata). Image#set_rgb_data

  *set_rgb_data*(%(arg-type)String% data)
  *set_data*(%(arg-type)String% data)

Sets the raw image data from a string without performing checks. Don't
use this method if you aren't sure you know what you are doing.

The string should contain three bytes (characters) for each pixel in the
image, representing the red, green and blue components in a range of 0
to 255, reading top-to-bottom, left-to-right. If you were creating this
from scratch, you can use Ruby's Array#pack to create the string.

For example, a four-pixel image with pure-red pixels in the left and
pure-blue pixels on the right could be set with string data created
thus:

 <pre>[ 255, 0, 0,
   0, 0, 255,
   255, 0, 0,
   0, 0, 255 ].pack("C*")</pre>

The set_data form is provided for backward compatibility but is not recommended. It 
may be deprecated in a subsequent version of wxRuby. 

h3(#Image_setmask). Image#set_mask

  *set_mask*(%(arg-type)Boolean% has_mask = true)

Specifies whether there is a mask or not. The area of the mask is determined by the current mask colour.


h3(#Image_setmaskcolour). Image#set_mask_colour

  *set_mask_colour*(%(arg-type)Integer% red,  %(arg-type)Integer% green,  %(arg-type)Integer% blue)

Sets the mask colour for this image (and tells the image to use the mask).


h3(#Image_setmaskfromimage). Image#set_mask_from_image

 Boolean *set_mask_from_image*(%(arg-type)"Image":image.html% mask,  %(arg-type)Integer% mr, 
                             %(arg-type)Integer% mg, 
                             %(arg-type)Integer% mb)

h4. Parameters

* _mask_ The mask image to extract mask shape from. Must have same dimensions as the image.
* _mr,mg,mb_ RGB value of pixels in _mask_ that will be used to create the mask.

Sets image's mask so that the pixels that have RGB value of _mr,mg,mb_
in _mask_ will be masked in the image. This is done by first finding an
unused colour in the image, setting this colour as the mask colour and then
using this colour to draw all pixels in the image who corresponding pixel
in _mask_ has given RGB value.

h4. Return value

Returns false if _mask_ does not have same dimensions as the image or if
there is no unused colour left. Returns true if the mask was successfully
applied.

h4. Notes

Note that this method involves computing the histogram, which is
computationally intensive operation.


h3(#Image_setoption). Image#set_option

  *set_option*(%(arg-type)String% name,  %(arg-type)String% value)

  *set_option*(%(arg-type)String% name,  %(arg-type)Integer% value)

Sets a user-defined option. The function is case-insensitive to _name_.

For example, when saving as a JPEG file, the option *quality* is
used, which is a number between 0 and 100 (0 is terrible, 100 is very good).

h4. See also

"Image#get_option":image.html#Image_getoption, "Image#get_option_int":image.html#Image_getoptionint, "Image#has_option":image.html#Image_hasoption


h3(#Image_setpalette). Image#set_palette

  *set_palette*(%(arg-type)"Palette":palette.html% palette)

Associates a palette with the image. The palette may be used when converting
Image to Bitmap (MSW only at present) or in file save operations (none
as yet). Not supported in wxRuby.


h3(#Image_setrgb). Image#set_rgb

  *set_rgb*(%(arg-type)Integer% x,  %(arg-type)Integer% y,  
            %(arg-type)Integer% red, %(arg-type)Integer% green, %(arg-type)Integer% blue)

Sets the colour of the pixel at the given coordinate using red, green
and blue intensities. The red, green and blue values should be in the
range 0 to 255.

This routine performs bounds-checks for the coordinate so it can be
considered a safe way to manipulate the data, but in some cases this
might be too slow so that the data will have to be set directly. In that
case you will have to use the "set_rgb_data":#Image_setrgbdata method.

h3(#Image_write). Image#write

 Boolean *write*(%(arg-type)IO% an_io,  %(arg-type)Integer% type)

 Boolean *write*(%(arg-type)IO% an_io,  %(arg-type)String% mimetype)

Writes the image data in the specified image format to an IO-like
object. _an_io_ may be any Ruby IO-like object which responds to _write_
and other basic IO methods. For example, it may be an @IO@, a @File@, a
@Socket@ or a @StringIO@.

See also "save_file":#Image_savefile for more information on the
supported output formats.
