h1(#wxprogressdialog). Wx::ProgressDialog

This class represents a dialog that shows a short message and a
progress bar. Optionally, it can display an ABORT button.

h2. Derived from

"Dialog":dialog.html

"Window":window.html

"EvtHandler":evthandler.html

"Object":object.html

<div id="methods">

h2. Methods

* "ProgressDialog.new":#ProgressDialog_new
* "ProgressDialog#resume":#ProgressDialog_resume
* "ProgressDialog#update":#ProgressDialog_update

</div>


h3(#ProgressDialog_new). ProgressDialog.new

  *ProgressDialog.new*(%(arg-type)String% title,  %(arg-type)String% message, 
                      %(arg-type)Integer% maximum = 100, 
                     %(arg-type)"Window":window.html% parent = nil, 
                      %(arg-type)Integer% style = PD_AUTO_HIDE | PD_APP_MODAL)

Constructor. Creates the dialog, displays it and disables user input
for other windows, or, if PD_APP_MODAL flag is not given, for its parent
window only.

h4. Parameters

* _title_ Dialog title to show in titlebar.
* _message_ Message displayed above the progress bar.
* _maximum_ Maximum value for the progress bar.
* _parent_ Parent window.
* _style_ The dialog style. This is the combination of the following
bitmask constants defined in wx/defs.h:



|*PD_APP_MODAL*|Make the progress dialog modal. If this flag isnot given, it is only "locally" modal - that is the input to the parentwindow is disabled, but not to the other ones.|
|*PD_AUTO_HIDE*|Causes the progress dialog to disappearfrom screen as soon as the maximum value of the progress meter has beenreached.|
|*PD_SMOOTH*|Causes smooth progress of the gauge control.|
|*PD_CAN_ABORT*|This flag tells the dialog that it should have a"Cancel" button which the user may press. If this happens, the next call to  "Update()":progressdialogupdate.html will return false.|
|*PD_CAN_SKIP*|This flag tells the dialog that it should have a"Skip" button which the user may press. If this happens, the next call to  "Update()":progressdialogupdate.html will return true in its skip parameter.|
|*PD_ELAPSED_TIME*|This flag tells the dialog that it should show elapsed time (since creating the dialog).|
|*PD_ESTIMATED_TIME*|This flag tells the dialog that it should show estimated time.|
|*PD_REMAINING_TIME*|This flag tells the dialog that it should show remaining time.|


  *destructor*()

Destructor. Deletes the dialog and enables all top level windows.

h3(#ProgressDialog_resume). ProgressDialog#resume

  *resume*()

Can be used to continue with the dialog, after the user had chosen
ABORT.

h3(#ProgressDialog_update). ProgressDialog#update

 Boolean *update*(  %(arg-type)Integer% value,    %(arg-type)String% newmsg = "", 
                  %(arg-type)Boolean% skip = nil)

Updates the dialog, setting the progress bar to the new value and, if
given changes the message above it. Returns true unless the Cancel button
has been pressed.

If false is returned, the application can either immediately destroy the dialog
or ask the user for the confirmation and if the abort is not confirmed the
dialog may be resumed with "Resume":progressdialogresume.html function.

h4. Parameters

* _value_ The new value of the progress meter. It should be less than or
equal to the maximum value given to the constructor and the dialog is closed if
it is equal to the maximum.
* _newmsg_ The new messages for the progress dialog text, if it is
empty (which is the default) the message is not changed.
* _skip_ If "Skip" button was pressed since last 
"Update":progressdialogupdate.html call the skip is true.

