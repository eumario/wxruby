h1(#wxglcanvas). Wx::GLCanvas

GLCanvas is a class for displaying OpenGL graphics. There are 
wrappers for OpenGL on Windows, and GTK+ and Motif.

The recommended way to use this class :

Create a GLCanvas window using the first constructor, create an instance of a GLContext 
that is initialized with the previous GLCanvas instance, then use either 
"GLCanvas#set_current":glcanvas.html#GLCanvas_setcurrent_rec with the instance of the GLContext or 
"GLContext#set_current":glcontext.html#GLContext_setcurrent with the instance of the GLCanvas to bind 
the OpenGL state that is represented by the rendering context to the canvas, 
and then call "GLCanvas#swap_buffers":glcanvas.html#GLCanvas_swapbuffers to swap the buffers of the OpenGL canvas 
and thus show your current output.

The following ways are provided for backward compatibility but are deprecated 
(they will be removed in future versions of wxRuby) :

Create a wxGLCanvas window using one of the other three constructors, call "GLCanvas#set_current":glcanvas.html#GLCanvas_setcurrent_deprec 
to direct normal OpenGL commands to the window, and then call "GLCanvas#swap_buffers":glcanvas.html#GLCanvas_swapbuffers to 
show the OpenGL buffer on the window.


To set up the attributes for the rendering context (number of bits for the depth buffer,
number of bits for the stencil buffer and so on) you should set up the correct values of
the _attrib_list_ parameter. The values that should be set up and their meanings will be described below.

h2. Derived from

"Window":window.html

"EvtHandler":evthandler.html

"Object":object.html

h2. Window styles

There are no specific window styles for this class.

See also "window styles overview":windowstyles.html.

h2. Constants

The generic GL implementation doesn't support many of these options, such as stereo, auxiliary buffers,
alpha channel, and accum buffer. Other implementations may support them.



|@WX::GL_RGBA@|Use true colour|
|@WX::GL_BUFFER_SIZE@|Bits for buffer if not WX_GL_RGBA|
|@WX::GL_LEVEL@|0 for main buffer, >0 for overlay, <0 for underlay|
|@WX::GL_DOUBLEBUFFER@|Use doublebuffer|
|@WX::GL_STEREO@|Use stereoscopic display|
|@WX::GL_AUX_BUFFERS@|Number of auxiliary buffers (not all implementation support this option)|
|@WX::GL_MIN_RED@|Use red buffer with most bits (> MIN_RED bits)|
|@WX::GL_MIN_GREEN@|Use green buffer with most bits (> MIN_GREEN bits) |
|@WX::GL_MIN_BLUE@|Use blue buffer with most bits (> MIN_BLUE bits) |
|@WX::GL_MIN_ALPHA@|Use alpha buffer with most bits (> MIN_ALPHA bits)|
|@WX::GL_DEPTH_SIZE@|Bits for Z-buffer (0,16,32)|
|@WX::GL_STENCIL_SIZE@|Bits for stencil buffer|
|@WX::GL_MIN_ACCUM_RED@|Use red accum buffer with most bits (> MIN_ACCUM_RED bits)|
|@WX::GL_MIN_ACCUM_GREEN@|Use green buffer with most bits (> MIN_ACCUM_GREEN bits)|
|@WX::GL_MIN_ACCUM_BLUE@|Use blue buffer with most bits (> MIN_ACCUM_BLUE bits)|
|@WX::GL_MIN_ACCUM_ALPHA@|Use blue buffer with most bits (> MIN_ACCUM_ALPHA bits)|


h2. See also

"GLContext":glcontext.html

<div id="methods">

h2. Methods

* "GLCanvas.new":#GLCanvas_new
* "GLCanvas#set_current":#GLCanvas_setcurrent_rec
* "GLCanvas#set_current":#GLCanvas_setcurrent_deprec
* "GLCanvas#set_colour":#GLCanvas_setcolour
* "GLCanvas#swap_buffers":#GLCanvas_swapbuffers

</div>



h3(#GLCanvas_constr). GLCanvas.new

  *GLCanvas.new*(%(arg-type)"Window":window.html% parent, 
               %(arg-type)Integer% id = ID_ANY, 
               %(arg-type)Integer% attrib_list = [Wx::GL_RGBA, Wx::GL_DOUBLEBUFFER], 
               %(arg-type)"Point":point.html% pos = DEFAULT_POSITION, 
               %(arg-type)"Size":size.html% size = DEFAULT_SIZE, 
               %(arg-type)Integer% style=FULL_REPAINT_ON_RESIZE, 
               %(arg-type)String% name="GLCanvas", 
               %(arg-type)"Palette":palette.html% palette = NULL_PALETTE)

  *GLCanvas.new*(%(arg-type)"Window":window.html% parent,  %(arg-type)Integer% id = ID_ANY, 
               %(arg-type)"Point":point.html% pos = DEFAULT_POSITION, 
               %(arg-type)"Size":size.html% size = DEFAULT_SIZE, 
               %(arg-type)Integer% style=0, 
               %(arg-type)String% name="GLCanvas", 
               %(arg-type)Integer% attrib_list = 0, 
               %(arg-type)"Palette":palette.html% palette = NULL_PALETTE)

  *GLCanvas.new*(%(arg-type)"Window":window.html% parent,  %(arg-type)"GLContext":glcontext.html% shared_context, 
               %(arg-type)Integer% id = ID_ANY, 
               %(arg-type)"Point":point.html% pos = DEFAULT_POSITION, 
               %(arg-type)"Size":size.html% size = DEFAULT_SIZE, 
               %(arg-type)Integer% style=0, 
               %(arg-type)String% name="GLCanvas", 
               %(arg-type)Integer% attrib_list = 0, 
               %(arg-type)"Palette":palette.html% palette = NULL_PALETTE)

  *GLCanvas.new*(%(arg-type)"Window":window.html% parent,  %(arg-type)"GLCanvas":glcanvas.html% shared_canvas, 
               %(arg-type)Integer% id = ID_ANY, 
               %(arg-type)"Point":point.html% pos = DEFAULT_POSITION, 
               %(arg-type)"Size":size.html% size = DEFAULT_SIZE, 
               %(arg-type)Integer% style=0, 
               %(arg-type)String% name="GLCanvas", 
               %(arg-type)Integer% attrib_list = 0, 
               %(arg-type)"Palette":palette.html% palette = NULL_PALETTE)

Constructors.
The last three constructors implicitly create an instance of "GLContext":glcontext.html. 
The first constructor does not create such an implicit rendering context, which means that you have to create an 
explicit instance of "GLContext":glcontext.html yourself (highly recommended for future compatibility with wxRuby/wxWidgets 
and the flexibility of your own program!).

For the first constructor (the recommended one), optional parameters may also be specified by keywords 
in any order as following :

canvas = Wx::GLCanvas.new(parent, :size => [600, 600])

* _parent_ Pointer to a parent window.
* _id_ Window identifier. If ID_ANY (-1), will automatically create an identifier.
* _attrib_list_ Array of int. With this parameter you can set the device context attributes associated to this window.
It should be set up with constants described in the table above.
If a constant should be followed by a value, put it in the next array position.
For example, the WX::GL_DEPTH_SIZE should be followed by the value that indicates the number of
bits for the depth buffer, so:

 attrib_list = [WX::GL_DEPTH_SIZE, 32]
 and so on.
 
* _pos_ Window position. DEFAULT_POSITION is [-1, -1] which indicates that Widgets
should generate a default position for the window.
* _size_ Window size. DEFAULT_SIZE is [-1, -1] which indicates that Widgets should
generate a default size for the window. If no suitable size can be found, the window will be sized to 20x20 pixels so that the window is visible but obviously not correctly sized.
* _style_ Window style.
* _name_ Window name.
* _palette_ If the window has the palette, it should by pass this value. 
Note: palette and WX_GL_RGBA are mutually exclusive.
* _shared_context_ Context to share object resources with.
* _shared_canvas_ Canvas to share object resources with.


h3(#GLCanvas_setcurrent_rec). GLCanvas#set_current

  *set_current*(%(arg-type)"GLContext":glcontext.html% rc)

This method should be called only for a canvas created with the recommended constructor (the first one).
A call to this method makes the OpenGL state that is represented by the OpenGL rendering context rc current with this canvas, 
and if win is an object of type GLCanvas, the statements win.set_current(rc); and rc.set_current(win); are equivalent. 
See "GLContext#set_current":glcontext.html#GLContext_setcurrent.

Note that this function may only be called after the window has been shown.


h3(#GLCanvas_setcurrent_deprec). GLCanvas#set_current

  *set_current*()

This method should be called only for a canvas created with the deprecated constructors (the last three ones).
A call to this method makes the implicit rendering context of this canvas current with this canvas, so that subsequent 
OpenGL calls modify the OpenGL state of the implicit rendering context.


Note that this function may only be called after the window has been shown.


h3(#GLCanvas_setcolour). GLCanvas#set_colour

  *set_colour*(%(arg-type)"char":char.html% colour)

Sets the current colour for this window, using the Widgets colour database to find a named colour.


h3(#GLCanvas_swapbuffers). GLCanvas#swap_buffers

  *swap_buffers*()

Displays the previous OpenGL commands on the window.

