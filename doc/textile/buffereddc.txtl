h1(#wxbuffereddc). Wx::BufferedDC

This simple class provides a simple way to avoid flicker: when drawing on it,
everything is in fact first drawn on an in-memory buffer (a 
"Bitmap":bitmap.html) and then copied to the screen only once, when this
object is destroyed.

It can be used in the same way as any other device context. BufferedDC itself
typically replaces "ClientDC":clientdc.html, if you want to use it in
your @OnPaint()@ handler, you should look at
"BufferedPaintDC":bufferedpaintdc.html.

h2. Derived from

"MemoryDC":memorydc.html

"DC":dc.html

"Object":object.html

h2. See also

"DC":dc.html


<div id="methods">

h2. Methods

* "BufferedDC.new":#BufferedDC_new
* "BufferedDC#init":#BufferedDC_init

</div>


h3(#BufferedDC_new). BufferedDC.new

  *BufferedDC.new*(%(arg-type)DC% dc,  %(arg-type)Size% area, 
                 %(arg-type)Integer% style = BUFFER_CLIENT_AREA)

  *BufferedDC.new*(%(arg-type)DC% dc,  %(arg-type)Bitmap% buffer, 
                 %(arg-type)Integer% style = BUFFER_CLIENT_AREA)

If you use the first, default, constructor, you must call one of the 
"Init":buffereddcinit.html methods later in order to use the object.

The other constructors initialize the object immediately and @Init()@ 
must not be called after using them.

h4. Parameters

* _dc_ The underlying DC: everything drawn to this object will be
flushed to this DC when this object is destroyed.  You may pass NULL
in order to just initialize the buffer, and not flush it.
* _area_ The size of the bitmap to be used for buffering (this bitmap is
created internally when it is not given explicitly).
* _buffer_ Explicitly provided bitmap to be used for buffering: this is
the most efficient solution as the bitmap doesn't have to be recreated each
time but it also requires more memory as the bitmap is never freed. The bitmap
should have appropriate size, anything drawn outside of its bounds is clipped.
* _style_ BUFFER_CLIENT_AREA to indicate that just the client area of
the window is buffered, or BUFFER_VIRTUAL_AREA to indicate that the buffer bitmap
covers the virtual area (in which case PrepareDC is automatically called for the actual window
device context).

h3(#BufferedDC_init). BufferedDC#init

  *init*(%(arg-type)DC% dc,  %(arg-type)Size% area,  %(arg-type)Integer% style = BUFFER_CLIENT_AREA)

  *init*(%(arg-type)DC% dc,  %(arg-type)Bitmap% buffer, 
       %(arg-type)Integer% style = BUFFER_CLIENT_AREA)

These functions initialize the object created using the default constructor.
Please see "constructors documentation":buffereddcctor.html for details.




